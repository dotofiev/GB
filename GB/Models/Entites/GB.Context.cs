//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GB.Models.Entites
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BankingEntities : DbContext
    {
        public BankingEntities()
            : base("name=BankingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActiviteEco> ActiviteEcoes { get; set; }
        public virtual DbSet<agence> agences { get; set; }
        public virtual DbSet<agencebb> agencebbs { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<ApplicationTable> ApplicationTables { get; set; }
        public virtual DbSet<AuditAgence> AuditAgences { get; set; }
        public virtual DbSet<AutoCred> AutoCreds { get; set; }
        public virtual DbSet<AUTOMATICTRF> AUTOMATICTRFs { get; set; }
        public virtual DbSet<AUTOMATICTRFHIST> AUTOMATICTRFHISTs { get; set; }
        public virtual DbSet<AUTOMATICTRFHISTPRODUCT> AUTOMATICTRFHISTPRODUCTs { get; set; }
        public virtual DbSet<AUTOMATICTRFTPRODUCT> AUTOMATICTRFTPRODUCTs { get; set; }
        public virtual DbSet<AUTOTRANSFERT> AUTOTRANSFERTs { get; set; }
        public virtual DbSet<Avaliste> Avalistes { get; set; }
        public virtual DbSet<Billetage> Billetages { get; set; }
        public virtual DbSet<BilletHist> BilletHists { get; set; }
        public virtual DbSet<billinglist> billinglists { get; set; }
        public virtual DbSet<BillingOptiono> BillingOptionoes { get; set; }
        public virtual DbSet<BonCaisse> BonCaisses { get; set; }
        public virtual DbSet<BranchAcct> BranchAccts { get; set; }
        public virtual DbSet<Caisse> Caisses { get; set; }
        public virtual DbSet<CaisseMaxLimCusto> CaisseMaxLimCustoes { get; set; }
        public virtual DbSet<CatCpte> CatCptes { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<CautionAval> CautionAvals { get; set; }
        public virtual DbSet<CC> CCs { get; set; }
        public virtual DbSet<CheqTrait> CheqTraits { get; set; }
        public virtual DbSet<ClientBnk> ClientBnks { get; set; }
        public virtual DbSet<ClientBnk1> ClientBnk1 { get; set; }
        public virtual DbSet<CMOpDevise> CMOpDevises { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Compensation> Compensations { get; set; }
        public virtual DbSet<ConfigLoanPurpose> ConfigLoanPurposes { get; set; }
        public virtual DbSet<ConfigTypeLoan> ConfigTypeLoans { get; set; }
        public virtual DbSet<Contentieu> Contentieux { get; set; }
        public virtual DbSet<CorrespBnk> CorrespBnks { get; set; }
        public virtual DbSet<CorrespTable> CorrespTables { get; set; }
        public virtual DbSet<Cotation> Cotations { get; set; }
        public virtual DbSet<CountryZone> CountryZones { get; set; }
        public virtual DbSet<CpteClt> CpteClts { get; set; }
        public virtual DbSet<CpteClt1> CpteClt1 { get; set; }
        public virtual DbSet<CpteCltHist> CpteCltHists { get; set; }
        public virtual DbSet<CpteCltHistArch> CpteCltHistArches { get; set; }
        public virtual DbSet<CpteCorrespBnk> CpteCorrespBnks { get; set; }
        public virtual DbSet<Credit> Credits { get; set; }
        public virtual DbSet<CumulCpteClthist> CumulCpteClthists { get; set; }
        public virtual DbSet<CumulCpteGlhist> CumulCpteGlhists { get; set; }
        public virtual DbSet<DataImport> DataImports { get; set; }
        public virtual DbSet<DataImportSTO> DataImportSTOes { get; set; }
        public virtual DbSet<DataImportSTObckp> DataImportSTObckps { get; set; }
        public virtual DbSet<DepotTerme> DepotTermes { get; set; }
        public virtual DbSet<DepRetGeneral> DepRetGenerals { get; set; }
        public virtual DbSet<DepRetGeneralBi> DepRetGeneralBis { get; set; }
        public virtual DbSet<devise> devises { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<dtproperty> dtproperties { get; set; }
        public virtual DbSet<EcritCptable> EcritCptables { get; set; }
        public virtual DbSet<EcritCptableBi> EcritCptableBis { get; set; }
        public virtual DbSet<EcritCptableBisArch> EcritCptableBisArches { get; set; }
        public virtual DbSet<EmetteurTCSComex> EmetteurTCSComexes { get; set; }
        public virtual DbSet<Employe> Employes { get; set; }
        public virtual DbSet<EMPLOYE_MODULE> EMPLOYE_MODULE { get; set; }
        public virtual DbSet<EncoursCustomer> EncoursCustomers { get; set; }
        public virtual DbSet<EODProcess> EODProcesses { get; set; }
        public virtual DbSet<ErrTabSalTemp> ErrTabSalTemps { get; set; }
        public virtual DbSet<exclumanualpostgl> exclumanualpostgls { get; set; }
        public virtual DbSet<ExcluTellerPostGL> ExcluTellerPostGLs { get; set; }
        public virtual DbSet<fclttmp> fclttmps { get; set; }
        public virtual DbSet<fcptg> fcptgs { get; set; }
        public virtual DbSet<Fcptg99> Fcptg99 { get; set; }
        public virtual DbSet<fcptgcopec> fcptgcopecs { get; set; }
        public virtual DbSet<FCPTGTEMP> FCPTGTEMPs { get; set; }
        public virtual DbSet<FcptgTmp> FcptgTmps { get; set; }
        public virtual DbSet<FTableAsset> FTableAssets { get; set; }
        public virtual DbSet<FTableLiability> FTableLiabilities { get; set; }
        public virtual DbSet<GarantieAccount> GarantieAccounts { get; set; }
        public virtual DbSet<Garanty> Garanties { get; set; }
        public virtual DbSet<Garantieso> Garantiesoes { get; set; }
        public virtual DbSet<GeneralPara> GeneralParas { get; set; }
        public virtual DbSet<GeneralTrxn> GeneralTrxns { get; set; }
        public virtual DbSet<GeneralTrxnBi> GeneralTrxnBis { get; set; }
        public virtual DbSet<GlHist> GlHists { get; set; }
        public virtual DbSet<GlHistArch> GlHistArches { get; set; }
        public virtual DbSet<GlHistBi> GlHistBis { get; set; }
        public virtual DbSet<GlobexBranch> GlobexBranches { get; set; }
        public virtual DbSet<HistoCaisse> HistoCaisses { get; set; }
        public virtual DbSet<HistProvLoan> HistProvLoans { get; set; }
        public virtual DbSet<Immo> Immoes { get; set; }
        public virtual DbSet<ImmoHist> ImmoHists { get; set; }
        public virtual DbSet<Impaye> Impayes { get; set; }
        public virtual DbSet<IncExpAcc> IncExpAccs { get; set; }
        public virtual DbSet<InComeloan> InComeloans { get; set; }
        public virtual DbSet<InComeSM> InComeSMS { get; set; }
        public virtual DbSet<Indisponible> Indisponibles { get; set; }
        public virtual DbSet<Institution> Institutions { get; set; }
        public virtual DbSet<IntegrateFile> IntegrateFiles { get; set; }
        public virtual DbSet<InteretCredit> InteretCredits { get; set; }
        public virtual DbSet<IntSMSJournal> IntSMSJournals { get; set; }
        public virtual DbSet<JnalRembLoan> JnalRembLoans { get; set; }
        public virtual DbSet<JnlInteret> JnlInterets { get; set; }
        public virtual DbSet<JnlInteretEBANKING> JnlInteretEBANKINGs { get; set; }
        public virtual DbSet<JnlInteretSM> JnlInteretSMS { get; set; }
        public virtual DbSet<JourFerie> JourFeries { get; set; }
        public virtual DbSet<journal> journals { get; set; }
        public virtual DbSet<LoanPortfolioClassification> LoanPortfolioClassifications { get; set; }
        public virtual DbSet<LoanProvisionClassification> LoanProvisionClassifications { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<ManualCrInterest> ManualCrInterests { get; set; }
        public virtual DbSet<MODULE> MODULEs { get; set; }
        public virtual DbSet<MODULE_MENU> MODULE_MENU { get; set; }
        public virtual DbSet<MODULE_MENU_TMP> MODULE_MENU_TMP { get; set; }
        public virtual DbSet<MouchardTransact> MouchardTransacts { get; set; }
        public virtual DbSet<NatBEAC> NatBEACs { get; set; }
        public virtual DbSet<NatJur> NatJurs { get; set; }
        public virtual DbSet<nomenposte> nomenpostes { get; set; }
        public virtual DbSet<OpCaisA> OpCaisAs { get; set; }
        public virtual DbSet<OpCaisABi> OpCaisABis { get; set; }
        public virtual DbSet<OpDiversA> OpDiversAs { get; set; }
        public virtual DbSet<OpDiversB> OpDiversBs { get; set; }
        public virtual DbSet<OpDiversG> OpDiversGs { get; set; }
        public virtual DbSet<OutGoingSM> OutGoingSMS { get; set; }
        public virtual DbSet<Parametre> Parametres { get; set; }
        public virtual DbSet<PhotoSign> PhotoSigns { get; set; }
        public virtual DbSet<Piece> Pieces { get; set; }
        public virtual DbSet<PieceB> PieceBs { get; set; }
        public virtual DbSet<PlageBilling> PlageBillings { get; set; }
        public virtual DbSet<PlageCustProdStat> PlageCustProdStats { get; set; }
        public virtual DbSet<PorteFeuilleLocal> PorteFeuilleLocals { get; set; }
        public virtual DbSet<PostLoan> PostLoans { get; set; }
        public virtual DbSet<PreprocesInformation> PreprocesInformations { get; set; }
        public virtual DbSet<Privilege> Privileges { get; set; }
        public virtual DbSet<PrivLabel> PrivLabels { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductAttribute> ProductAttributes { get; set; }
        public virtual DbSet<ProductTxn> ProductTxns { get; set; }
        public virtual DbSet<PROFITABILITYGROUP> PROFITABILITYGROUPs { get; set; }
        public virtual DbSet<PROFITABILITYTYPE> PROFITABILITYTYPEs { get; set; }
        public virtual DbSet<ProvCommi> ProvCommis { get; set; }
        public virtual DbSet<ProvisionAccount> ProvisionAccounts { get; set; }
        public virtual DbSet<ProvLoan> ProvLoans { get; set; }
        public virtual DbSet<ProvTrCodeAn> ProvTrCodeAns { get; set; }
        public virtual DbSet<Qualite> Qualites { get; set; }
        public virtual DbSet<RembAnticipe> RembAnticipes { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<SalTemp> SalTemps { get; set; }
        public virtual DbSet<SalTempBr> SalTempBrs { get; set; }
        public virtual DbSet<StandingOrder> StandingOrders { get; set; }
        public virtual DbSet<StopPayment> StopPayments { get; set; }
        public virtual DbSet<SummaryJnlPartMember> SummaryJnlPartMembers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TabAmortLitige> TabAmortLitiges { get; set; }
        public virtual DbSet<TabAmortLoan> TabAmortLoans { get; set; }
        public virtual DbSet<tabbilanconfig> tabbilanconfigs { get; set; }
        public virtual DbSet<tabBudgetAllocated> tabBudgetAllocateds { get; set; }
        public virtual DbSet<tabBudgetTransaction> tabBudgetTransactions { get; set; }
        public virtual DbSet<tabCashOptn> tabCashOptns { get; set; }
        public virtual DbSet<tabCashTrancode> tabCashTrancodes { get; set; }
        public virtual DbSet<tabcodegroup> tabcodegroups { get; set; }
        public virtual DbSet<TabColonneTaille> TabColonneTailles { get; set; }
        public virtual DbSet<TabConfigReportCobac> TabConfigReportCobacs { get; set; }
        public virtual DbSet<tabCostCentre> tabCostCentres { get; set; }
        public virtual DbSet<TabCpteMembretmp> TabCpteMembretmps { get; set; }
        public virtual DbSet<TABDEFINEMONTH> TABDEFINEMONTHs { get; set; }
        public virtual DbSet<tabDirectorate> tabDirectorates { get; set; }
        public virtual DbSet<TabDuplicata> TabDuplicatas { get; set; }
        public virtual DbSet<TabErrorModifSize> TabErrorModifSizes { get; set; }
        public virtual DbSet<TabExemptEmployee> TabExemptEmployees { get; set; }
        public virtual DbSet<TabFB> TabFBs { get; set; }
        public virtual DbSet<TabFBAuxBal> TabFBAuxBals { get; set; }
        public virtual DbSet<TabFBClthist> TabFBClthists { get; set; }
        public virtual DbSet<TabFBCrDrClt> TabFBCrDrClts { get; set; }
        public virtual DbSet<TabFBCrDrClthist> TabFBCrDrClthists { get; set; }
        public virtual DbSet<TabFBGlHist> TabFBGlHists { get; set; }
        public virtual DbSet<tabFiscalMaster> tabFiscalMasters { get; set; }
        public virtual DbSet<TabFonctionnaire> TabFonctionnaires { get; set; }
        public virtual DbSet<TabFrequencyEOD> TabFrequencyEODs { get; set; }
        public virtual DbSet<TabJnlPartMember> TabJnlPartMembers { get; set; }
        public virtual DbSet<tabLocationMaster> tabLocationMasters { get; set; }
        public virtual DbSet<TABMEMBERBENEF> TABMEMBERBENEFs { get; set; }
        public virtual DbSet<TabNatClient> TabNatClients { get; set; }
        public virtual DbSet<TabReceiveRate> TabReceiveRates { get; set; }
        public virtual DbSet<TabReceiveRateR> TabReceiveRateRs { get; set; }
        public virtual DbSet<tabreport> tabreports { get; set; }
        public virtual DbSet<TabReportMontantCred> TabReportMontantCreds { get; set; }
        public virtual DbSet<tabServiceMaster> tabServiceMasters { get; set; }
        public virtual DbSet<tabSigningAuthority> tabSigningAuthorities { get; set; }
        public virtual DbSet<tabSundryTransaction> tabSundryTransactions { get; set; }
        public virtual DbSet<Titre> Titres { get; set; }
        public virtual DbSet<Tmp_EcritCptableBis> Tmp_EcritCptableBis { get; set; }
        public virtual DbSet<TmpCompareStat> TmpCompareStats { get; set; }
        public virtual DbSet<TMPCREDIT> TMPCREDITs { get; set; }
        public virtual DbSet<TmpCustBalSheet> TmpCustBalSheets { get; set; }
        public virtual DbSet<TMPCustLoanClassification> TMPCustLoanClassifications { get; set; }
        public virtual DbSet<TmpEmpTransaction> TmpEmpTransactions { get; set; }
        public virtual DbSet<TmpLiqDeclaration> TmpLiqDeclarations { get; set; }
        public virtual DbSet<TmpProfitability> TmpProfitabilities { get; set; }
        public virtual DbSet<TMPSM> TMPSMS { get; set; }
        public virtual DbSet<Trancode> Trancodes { get; set; }
        public virtual DbSet<TRANS_REF> TRANS_REF { get; set; }
        public virtual DbSet<TRANSFERPRODUCT> TRANSFERPRODUCTs { get; set; }
        public virtual DbSet<TransfExt> TransfExts { get; set; }
        public virtual DbSet<TransForce> TransForces { get; set; }
        public virtual DbSet<Translate> Translates { get; set; }
        public virtual DbSet<Trbillinglist> Trbillinglists { get; set; }
        public virtual DbSet<TrCodeAnnexe> TrCodeAnnexes { get; set; }
        public virtual DbSet<TrCodeAnnexeo> TrCodeAnnexeos { get; set; }
        public virtual DbSet<TypeJournal> TypeJournals { get; set; }
        public virtual DbSet<UnionInfo> UnionInfoes { get; set; }
        public virtual DbSet<UnitInst> UnitInsts { get; set; }
        public virtual DbSet<ValidTable> ValidTables { get; set; }
        public virtual DbSet<VaultTxn> VaultTxns { get; set; }
        public virtual DbSet<Ville> Villes { get; set; }
        public virtual DbSet<VirPermanent> VirPermanents { get; set; }
        public virtual DbSet<VirSalaire> VirSalaires { get; set; }
        public virtual DbSet<VirSpont> VirSponts { get; set; }
        public virtual DbSet<VirSpontPer> VirSpontPers { get; set; }
        public virtual DbSet<VirSpontPerHist> VirSpontPerHists { get; set; }
        public virtual DbSet<WorkStation> WorkStations { get; set; }
        public virtual DbSet<WriteoffAccount> WriteoffAccounts { get; set; }
        public virtual DbSet<WriteOffLoan> WriteOffLoans { get; set; }
        public virtual DbSet<AccountInformation> AccountInformations { get; set; }
        public virtual DbSet<Actionnaire> Actionnaires { get; set; }
        public virtual DbSet<AgioRservErrorDormAcct> AgioRservErrorDormAccts { get; set; }
        public virtual DbSet<AssetLocalisation> AssetLocalisations { get; set; }
        public virtual DbSet<AssetType> AssetTypes { get; set; }
        public virtual DbSet<AuditAutoCred> AuditAutoCreds { get; set; }
        public virtual DbSet<AuditBonCaisse> AuditBonCaisses { get; set; }
        public virtual DbSet<AuditCatCpte> AuditCatCptes { get; set; }
        public virtual DbSet<AuditClientBnk> AuditClientBnks { get; set; }
        public virtual DbSet<AuditCompany> AuditCompanies { get; set; }
        public virtual DbSet<AuditContentieu> AuditContentieux { get; set; }
        public virtual DbSet<AuditCotation> AuditCotations { get; set; }
        public virtual DbSet<AuditCpteClt> AuditCpteClts { get; set; }
        public virtual DbSet<AuditCpteCltHist> AuditCpteCltHists { get; set; }
        public virtual DbSet<AuditCredit> AuditCredits { get; set; }
        public virtual DbSet<AuditDepotTerme> AuditDepotTermes { get; set; }
        public virtual DbSet<Auditdevise> Auditdevises { get; set; }
        public virtual DbSet<AuditEcritCptable> AuditEcritCptables { get; set; }
        public virtual DbSet<AuditEmploye> AuditEmployes { get; set; }
        public virtual DbSet<AuditEmpPrivSet> AuditEmpPrivSets { get; set; }
        public virtual DbSet<Auditfcptg> Auditfcptgs { get; set; }
        public virtual DbSet<AuditGlHist> AuditGlHists { get; set; }
        public virtual DbSet<AuditHistoCaisse> AuditHistoCaisses { get; set; }
        public virtual DbSet<AuditImpaye> AuditImpayes { get; set; }
        public virtual DbSet<AuditIntegrateFile> AuditIntegrateFiles { get; set; }
        public virtual DbSet<AuditJnalRembLoan> AuditJnalRembLoans { get; set; }
        public virtual DbSet<AuditOpCaisA> AuditOpCaisAs { get; set; }
        public virtual DbSet<AuditOpDiversA> AuditOpDiversAs { get; set; }
        public virtual DbSet<AuditPostLoan> AuditPostLoans { get; set; }
        public virtual DbSet<AuditProduct> AuditProducts { get; set; }
        public virtual DbSet<AuditProductTxn> AuditProductTxns { get; set; }
        public virtual DbSet<AuditServerStatu> AuditServerStatus { get; set; }
        public virtual DbSet<AuditStopPayment> AuditStopPayments { get; set; }
        public virtual DbSet<AuditVaultTxn> AuditVaultTxns { get; set; }
        public virtual DbSet<AuditVirPermanent> AuditVirPermanents { get; set; }
        public virtual DbSet<AuditVirSpont> AuditVirSponts { get; set; }
        public virtual DbSet<AuditVirSpontPer> AuditVirSpontPers { get; set; }
        public virtual DbSet<BILLETHISTTEMP> BILLETHISTTEMPs { get; set; }
        public virtual DbSet<BillingOption> BillingOptions { get; set; }
        public virtual DbSet<CautionSit> CautionSits { get; set; }
        public virtual DbSet<ChequeStock> ChequeStocks { get; set; }
        public virtual DbSet<Chequier> Chequiers { get; set; }
        public virtual DbSet<COBACHeader> COBACHeaders { get; set; }
        public virtual DbSet<Commande> Commandes { get; set; }
        public virtual DbSet<CommissionSm> CommissionSms { get; set; }
        public virtual DbSet<CpteCltCentral> CpteCltCentrals { get; set; }
        public virtual DbSet<CpteCltClose> CpteCltCloses { get; set; }
        public virtual DbSet<CpteCltHistb> CpteCltHistbs { get; set; }
        public virtual DbSet<CpteCltHistBBF> CpteCltHistBBFs { get; set; }
        public virtual DbSet<CpteCltHistRienB> CpteCltHistRienBs { get; set; }
        public virtual DbSet<CpteCltRienB> CpteCltRienBs { get; set; }
        public virtual DbSet<CpteCltSM> CpteCltSMS { get; set; }
        public virtual DbSet<CreDoc> CreDocs { get; set; }
        public virtual DbSet<CustomerRelationship> CustomerRelationships { get; set; }
        public virtual DbSet<DepotTermeHist> DepotTermeHists { get; set; }
        public virtual DbSet<Domiciliation> Domiciliations { get; set; }
        public virtual DbSet<EcritCptProv> EcritCptProvs { get; set; }
        public virtual DbSet<EMP_MODULE_MENU> EMP_MODULE_MENU { get; set; }
        public virtual DbSet<EmpPrivSet> EmpPrivSets { get; set; }
        public virtual DbSet<ExcludeProvision> ExcludeProvisions { get; set; }
        public virtual DbSet<FCashStock> FCashStocks { get; set; }
        public virtual DbSet<FCashVente> FCashVentes { get; set; }
        public virtual DbSet<FCashVente1> FCashVente1 { get; set; }
        public virtual DbSet<FCltTmpDeb> FCltTmpDebs { get; set; }
        public virtual DbSet<FCltTmpFin> FCltTmpFins { get; set; }
        public virtual DbSet<fcptgRienB> fcptgRienBs { get; set; }
        public virtual DbSet<FCRemb> FCRembs { get; set; }
        public virtual DbSet<FTableBalResultat> FTableBalResultats { get; set; }
        public virtual DbSet<GlHistRienB> GlHistRienBs { get; set; }
        public virtual DbSet<HistMp> HistMps { get; set; }
        public virtual DbSet<InteretReserv> InteretReservs { get; set; }
        public virtual DbSet<InteretReservBi> InteretReservBis { get; set; }
        public virtual DbSet<JnlInteretPerDay> JnlInteretPerDays { get; set; }
        public virtual DbSet<JudiciaryInstance> JudiciaryInstances { get; set; }
        public virtual DbSet<Jurisdiction> Jurisdictions { get; set; }
        public virtual DbSet<LegalOperation> LegalOperations { get; set; }
        public virtual DbSet<Litigation> Litigations { get; set; }
        public virtual DbSet<ManageCashier> ManageCashiers { get; set; }
        public virtual DbSet<Mouchard> Mouchards { get; set; }
        public virtual DbSet<MoucheSup> MoucheSups { get; set; }
        public virtual DbSet<MouchSec> MouchSecs { get; set; }
        public virtual DbSet<nomenposteOLD> nomenposteOLDs { get; set; }
        public virtual DbSet<OpCaisB> OpCaisBs { get; set; }
        public virtual DbSet<OpDiversABi> OpDiversABis { get; set; }
        public virtual DbSet<operationtype> operationtypes { get; set; }
        public virtual DbSet<optncounter> optncounters { get; set; }
        public virtual DbSet<PayrollAcct> PayrollAccts { get; set; }
        public virtual DbSet<Pay> Pays { get; set; }
        public virtual DbSet<PostHistory> PostHistories { get; set; }
        public virtual DbSet<ProfitabilityM> ProfitabilityMs { get; set; }
        public virtual DbSet<RemDoc> RemDocs { get; set; }
        public virtual DbSet<RepHeaderName> RepHeaderNames { get; set; }
        public virtual DbSet<REserveAcctInfo> REserveAcctInfoes { get; set; }
        public virtual DbSet<SaisieSolde> SaisieSoldes { get; set; }
        public virtual DbSet<SalEmp> SalEmps { get; set; }
        public virtual DbSet<tabCashOptnsReceiv> tabCashOptnsReceivs { get; set; }
        public virtual DbSet<tabCashOptnsSm> tabCashOptnsSms { get; set; }
        public virtual DbSet<TabClearingRate> TabClearingRates { get; set; }
        public virtual DbSet<tabcodegroupOLD> tabcodegroupOLDs { get; set; }
        public virtual DbSet<tabcoefccre> tabcoefccres { get; set; }
        public virtual DbSet<tabcoefliquidite> tabcoefliquidites { get; set; }
        public virtual DbSet<TabComWestern> TabComWesterns { get; set; }
        public virtual DbSet<TabConfigReportCobacOLD> TabConfigReportCobacOLDs { get; set; }
        public virtual DbSet<TabCpteAttente> TabCpteAttentes { get; set; }
        public virtual DbSet<tabCreditError> tabCreditErrors { get; set; }
        public virtual DbSet<TabCreditTMP> TabCreditTMPs { get; set; }
        public virtual DbSet<TabDifference> TabDifferences { get; set; }
        public virtual DbSet<TabdsdbRate> TabdsdbRates { get; set; }
        public virtual DbSet<TabEmergencyLoan> TabEmergencyLoans { get; set; }
        public virtual DbSet<tabEmpSalary> tabEmpSalaries { get; set; }
        public virtual DbSet<tabExemptBudget> tabExemptBudgets { get; set; }
        public virtual DbSet<tabexemptcustomeracct> tabexemptcustomeraccts { get; set; }
        public virtual DbSet<tabfondspatnet> tabfondspatnets { get; set; }
        public virtual DbSet<tabfondssol> tabfondssols { get; set; }
        public virtual DbSet<tabGLAcctExempt> tabGLAcctExempts { get; set; }
        public virtual DbSet<TabGrDec> TabGrDecs { get; set; }
        public virtual DbSet<Table_Archive> Table_Archive { get; set; }
        public virtual DbSet<TabLoanAttribute> TabLoanAttributes { get; set; }
        public virtual DbSet<TabLoanHandling> TabLoanHandlings { get; set; }
        public virtual DbSet<TabLoanInsurance> TabLoanInsurances { get; set; }
        public virtual DbSet<tabloaninterest> tabloaninterests { get; set; }
        public virtual DbSet<TabLoanStudyFee> TabLoanStudyFees { get; set; }
        public virtual DbSet<tabratcouvimmo> tabratcouvimmoes { get; set; }
        public virtual DbSet<tabratcouvrisk> tabratcouvrisks { get; set; }
        public virtual DbSet<tabratlignefin> tabratlignefins { get; set; }
        public virtual DbSet<tabreportOLD> tabreportOLDs { get; set; }
        public virtual DbSet<tabresultsconfig> tabresultsconfigs { get; set; }
        public virtual DbSet<TabRetourInterBr> TabRetourInterBrs { get; set; }
        public virtual DbSet<TabSalComp> TabSalComps { get; set; }
        public virtual DbSet<tabSumImpaye> tabSumImpayes { get; set; }
        public virtual DbSet<tabSumIntLoan> tabSumIntLoans { get; set; }
        public virtual DbSet<TabTransferRate> TabTransferRates { get; set; }
        public virtual DbSet<tabtreasuryconsult> tabtreasuryconsults { get; set; }
        public virtual DbSet<TCStock> TCStocks { get; set; }
        public virtual DbSet<TCSVente> TCSVentes { get; set; }
        public virtual DbSet<TempTabBadUnpaid> TempTabBadUnpaids { get; set; }
        public virtual DbSet<TmpDAteRange> TmpDAteRanges { get; set; }
        public virtual DbSet<TmpDormantToClose> TmpDormantToCloses { get; set; }
        public virtual DbSet<TmpStatementIncExp> TmpStatementIncExps { get; set; }
        public virtual DbSet<TransferState> TransferStates { get; set; }
        public virtual DbSet<TransfertVEComex> TransfertVEComexes { get; set; }
        public virtual DbSet<VaultTxnsTEMP> VaultTxnsTEMPs { get; set; }
        public virtual DbSet<VirPermanentHist> VirPermanentHists { get; set; }
        public virtual DbSet<VirRecuComex> VirRecuComexes { get; set; }
        public virtual DbSet<cipcb01> cipcb01 { get; set; }
        public virtual DbSet<cipcb03> cipcb03 { get; set; }
        public virtual DbSet<fibane01> fibane01 { get; set; }
        public virtual DbSet<fibane02> fibane02 { get; set; }
        public virtual DbSet<V_AuditBonCaisse> V_AuditBonCaisse { get; set; }
        public virtual DbSet<V_AuditClientBnk> V_AuditClientBnk { get; set; }
        public virtual DbSet<V_AuditContentieux> V_AuditContentieux { get; set; }
        public virtual DbSet<V_AuditCpteclt> V_AuditCpteclt { get; set; }
        public virtual DbSet<V_AuditCpteCltHist> V_AuditCpteCltHist { get; set; }
        public virtual DbSet<V_AuditCredit> V_AuditCredit { get; set; }
        public virtual DbSet<V_AuditDepotTerme> V_AuditDepotTerme { get; set; }
        public virtual DbSet<V_AuditGlHist> V_AuditGlHist { get; set; }
        public virtual DbSet<V_AuditHistoCaisse> V_AuditHistoCaisse { get; set; }
        public virtual DbSet<V_AuditImpayes> V_AuditImpayes { get; set; }
        public virtual DbSet<V_AuditJnalRembLoan> V_AuditJnalRembLoan { get; set; }
    
        [DbFunction("BankingEntities", "CalCulSolde")]
        public virtual IQueryable<CalCulSolde_Result> CalCulSolde(string cpteJumelle)
        {
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CalCulSolde_Result>("[BankingEntities].[CalCulSolde](@CpteJumelle)", cpteJumelleParameter);
        }
    
        [DbFunction("BankingEntities", "CalCulSoldeAgio")]
        public virtual IQueryable<CalCulSoldeAgio_Result> CalCulSoldeAgio(string cpteJumelle, Nullable<System.DateTime> dateOP, Nullable<System.DateTime> serverdate)
        {
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var dateOPParameter = dateOP.HasValue ?
                new ObjectParameter("dateOP", dateOP) :
                new ObjectParameter("dateOP", typeof(System.DateTime));
    
            var serverdateParameter = serverdate.HasValue ?
                new ObjectParameter("Serverdate", serverdate) :
                new ObjectParameter("Serverdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CalCulSoldeAgio_Result>("[BankingEntities].[CalCulSoldeAgio](@CpteJumelle, @dateOP, @Serverdate)", cpteJumelleParameter, dateOPParameter, serverdateParameter);
        }
    
        [DbFunction("BankingEntities", "CalCulSoldeWithoutValidate")]
        public virtual IQueryable<CalCulSoldeWithoutValidate_Result> CalCulSoldeWithoutValidate(string cpteJumelle)
        {
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CalCulSoldeWithoutValidate_Result>("[BankingEntities].[CalCulSoldeWithoutValidate](@CpteJumelle)", cpteJumelleParameter);
        }
    
        [DbFunction("BankingEntities", "ChargeBranch")]
        public virtual IQueryable<ChargeBranch_Result> ChargeBranch(string matricule)
        {
            var matriculeParameter = matricule != null ?
                new ObjectParameter("matricule", matricule) :
                new ObjectParameter("matricule", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ChargeBranch_Result>("[BankingEntities].[ChargeBranch](@matricule)", matriculeParameter);
        }
    
        [DbFunction("BankingEntities", "ChargeBranchBis")]
        public virtual IQueryable<ChargeBranchBis_Result> ChargeBranchBis(string matricule)
        {
            var matriculeParameter = matricule != null ?
                new ObjectParameter("matricule", matricule) :
                new ObjectParameter("matricule", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ChargeBranchBis_Result>("[BankingEntities].[ChargeBranchBis](@matricule)", matriculeParameter);
        }
    
        public virtual int AccountingEODCMT(Nullable<int> wAgence, string wLibAgence, string wDevise, string wLibDevise, Nullable<int> matricule, string nomPrenom, Nullable<System.DateTime> serverdate, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var wAgenceParameter = wAgence.HasValue ?
                new ObjectParameter("wAgence", wAgence) :
                new ObjectParameter("wAgence", typeof(int));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("WLibAgence", wLibAgence) :
                new ObjectParameter("WLibAgence", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("WDevise", wDevise) :
                new ObjectParameter("WDevise", typeof(string));
    
            var wLibDeviseParameter = wLibDevise != null ?
                new ObjectParameter("WLibDevise", wLibDevise) :
                new ObjectParameter("WLibDevise", typeof(string));
    
            var matriculeParameter = matricule.HasValue ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(int));
    
            var nomPrenomParameter = nomPrenom != null ?
                new ObjectParameter("NomPrenom", nomPrenom) :
                new ObjectParameter("NomPrenom", typeof(string));
    
            var serverdateParameter = serverdate.HasValue ?
                new ObjectParameter("serverdate", serverdate) :
                new ObjectParameter("serverdate", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountingEODCMT", wAgenceParameter, wLibAgenceParameter, wDeviseParameter, wLibDeviseParameter, matriculeParameter, nomPrenomParameter, serverdateParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int AccountMigration(string tableName, ObjectParameter nbreCpteFail, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountMigration", tableNameParameter, nbreCpteFail, lect, msg, languageParameter);
        }
    
        public virtual int ADD_FORCETRX(string pC_EMPLOYE, string pC_LIBEMPLOYE, string pC_CPTEJUMELLE, string pC_LIBCPTEJUMELLE, string pC_AGENCE, Nullable<double> pF_MONTANT, string pC_REFERENCE, string pC_DESCRIPTION, string computerName, ObjectParameter lect, ObjectParameter errMsg, string language, string pC_OPTNS)
        {
            var pC_EMPLOYEParameter = pC_EMPLOYE != null ?
                new ObjectParameter("PC_EMPLOYE", pC_EMPLOYE) :
                new ObjectParameter("PC_EMPLOYE", typeof(string));
    
            var pC_LIBEMPLOYEParameter = pC_LIBEMPLOYE != null ?
                new ObjectParameter("PC_LIBEMPLOYE", pC_LIBEMPLOYE) :
                new ObjectParameter("PC_LIBEMPLOYE", typeof(string));
    
            var pC_CPTEJUMELLEParameter = pC_CPTEJUMELLE != null ?
                new ObjectParameter("PC_CPTEJUMELLE", pC_CPTEJUMELLE) :
                new ObjectParameter("PC_CPTEJUMELLE", typeof(string));
    
            var pC_LIBCPTEJUMELLEParameter = pC_LIBCPTEJUMELLE != null ?
                new ObjectParameter("PC_LIBCPTEJUMELLE", pC_LIBCPTEJUMELLE) :
                new ObjectParameter("PC_LIBCPTEJUMELLE", typeof(string));
    
            var pC_AGENCEParameter = pC_AGENCE != null ?
                new ObjectParameter("PC_AGENCE", pC_AGENCE) :
                new ObjectParameter("PC_AGENCE", typeof(string));
    
            var pF_MONTANTParameter = pF_MONTANT.HasValue ?
                new ObjectParameter("PF_MONTANT", pF_MONTANT) :
                new ObjectParameter("PF_MONTANT", typeof(double));
    
            var pC_REFERENCEParameter = pC_REFERENCE != null ?
                new ObjectParameter("PC_REFERENCE", pC_REFERENCE) :
                new ObjectParameter("PC_REFERENCE", typeof(string));
    
            var pC_DESCRIPTIONParameter = pC_DESCRIPTION != null ?
                new ObjectParameter("PC_DESCRIPTION", pC_DESCRIPTION) :
                new ObjectParameter("PC_DESCRIPTION", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var pC_OPTNSParameter = pC_OPTNS != null ?
                new ObjectParameter("PC_OPTNS", pC_OPTNS) :
                new ObjectParameter("PC_OPTNS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADD_FORCETRX", pC_EMPLOYEParameter, pC_LIBEMPLOYEParameter, pC_CPTEJUMELLEParameter, pC_LIBCPTEJUMELLEParameter, pC_AGENCEParameter, pF_MONTANTParameter, pC_REFERENCEParameter, pC_DESCRIPTIONParameter, computerNameParameter, lect, errMsg, languageParameter, pC_OPTNSParameter);
        }
    
        public virtual int ADD_MENU_EMPLOYE(string pI_Matricule, string pI_Employe, Nullable<int> pI_MENU, Nullable<int> pI_ALLMENU, string pC_MENUNAME, Nullable<int> pI_ACCESLEV, string pC_MENUDESC, string pC_MODULE, string computerName, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var pI_MatriculeParameter = pI_Matricule != null ?
                new ObjectParameter("PI_Matricule", pI_Matricule) :
                new ObjectParameter("PI_Matricule", typeof(string));
    
            var pI_EmployeParameter = pI_Employe != null ?
                new ObjectParameter("PI_Employe", pI_Employe) :
                new ObjectParameter("PI_Employe", typeof(string));
    
            var pI_MENUParameter = pI_MENU.HasValue ?
                new ObjectParameter("PI_MENU", pI_MENU) :
                new ObjectParameter("PI_MENU", typeof(int));
    
            var pI_ALLMENUParameter = pI_ALLMENU.HasValue ?
                new ObjectParameter("PI_ALLMENU", pI_ALLMENU) :
                new ObjectParameter("PI_ALLMENU", typeof(int));
    
            var pC_MENUNAMEParameter = pC_MENUNAME != null ?
                new ObjectParameter("PC_MENUNAME", pC_MENUNAME) :
                new ObjectParameter("PC_MENUNAME", typeof(string));
    
            var pI_ACCESLEVParameter = pI_ACCESLEV.HasValue ?
                new ObjectParameter("PI_ACCESLEV", pI_ACCESLEV) :
                new ObjectParameter("PI_ACCESLEV", typeof(int));
    
            var pC_MENUDESCParameter = pC_MENUDESC != null ?
                new ObjectParameter("PC_MENUDESC", pC_MENUDESC) :
                new ObjectParameter("PC_MENUDESC", typeof(string));
    
            var pC_MODULEParameter = pC_MODULE != null ?
                new ObjectParameter("PC_MODULE", pC_MODULE) :
                new ObjectParameter("PC_MODULE", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADD_MENU_EMPLOYE", pI_MatriculeParameter, pI_EmployeParameter, pI_MENUParameter, pI_ALLMENUParameter, pC_MENUNAMEParameter, pI_ACCESLEVParameter, pC_MENUDESCParameter, pC_MODULEParameter, computerNameParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int ADD_MODULE_EMPLOYE(string pI_Matricule, string pI_Employe, Nullable<int> pI_CRM, Nullable<int> pI_TELLER, Nullable<int> pI_OPERATIONS, Nullable<int> pI_EOD, Nullable<int> pI_BANKGL, Nullable<int> pI_CLEARING, Nullable<int> pI_DSS, Nullable<int> pI_CONFIGURE, Nullable<int> pI_SECURITY, Nullable<int> pI_SMSBANKING, Nullable<int> pI_LENDING, string computerName, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var pI_MatriculeParameter = pI_Matricule != null ?
                new ObjectParameter("PI_Matricule", pI_Matricule) :
                new ObjectParameter("PI_Matricule", typeof(string));
    
            var pI_EmployeParameter = pI_Employe != null ?
                new ObjectParameter("PI_Employe", pI_Employe) :
                new ObjectParameter("PI_Employe", typeof(string));
    
            var pI_CRMParameter = pI_CRM.HasValue ?
                new ObjectParameter("PI_CRM", pI_CRM) :
                new ObjectParameter("PI_CRM", typeof(int));
    
            var pI_TELLERParameter = pI_TELLER.HasValue ?
                new ObjectParameter("PI_TELLER", pI_TELLER) :
                new ObjectParameter("PI_TELLER", typeof(int));
    
            var pI_OPERATIONSParameter = pI_OPERATIONS.HasValue ?
                new ObjectParameter("PI_OPERATIONS", pI_OPERATIONS) :
                new ObjectParameter("PI_OPERATIONS", typeof(int));
    
            var pI_EODParameter = pI_EOD.HasValue ?
                new ObjectParameter("PI_EOD", pI_EOD) :
                new ObjectParameter("PI_EOD", typeof(int));
    
            var pI_BANKGLParameter = pI_BANKGL.HasValue ?
                new ObjectParameter("PI_BANKGL", pI_BANKGL) :
                new ObjectParameter("PI_BANKGL", typeof(int));
    
            var pI_CLEARINGParameter = pI_CLEARING.HasValue ?
                new ObjectParameter("PI_CLEARING", pI_CLEARING) :
                new ObjectParameter("PI_CLEARING", typeof(int));
    
            var pI_DSSParameter = pI_DSS.HasValue ?
                new ObjectParameter("PI_DSS", pI_DSS) :
                new ObjectParameter("PI_DSS", typeof(int));
    
            var pI_CONFIGUREParameter = pI_CONFIGURE.HasValue ?
                new ObjectParameter("PI_CONFIGURE", pI_CONFIGURE) :
                new ObjectParameter("PI_CONFIGURE", typeof(int));
    
            var pI_SECURITYParameter = pI_SECURITY.HasValue ?
                new ObjectParameter("PI_SECURITY", pI_SECURITY) :
                new ObjectParameter("PI_SECURITY", typeof(int));
    
            var pI_SMSBANKINGParameter = pI_SMSBANKING.HasValue ?
                new ObjectParameter("PI_SMSBANKING", pI_SMSBANKING) :
                new ObjectParameter("PI_SMSBANKING", typeof(int));
    
            var pI_LENDINGParameter = pI_LENDING.HasValue ?
                new ObjectParameter("PI_LENDING", pI_LENDING) :
                new ObjectParameter("PI_LENDING", typeof(int));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADD_MODULE_EMPLOYE", pI_MatriculeParameter, pI_EmployeParameter, pI_CRMParameter, pI_TELLERParameter, pI_OPERATIONSParameter, pI_EODParameter, pI_BANKGLParameter, pI_CLEARINGParameter, pI_DSSParameter, pI_CONFIGUREParameter, pI_SECURITYParameter, pI_SMSBANKINGParameter, pI_LENDINGParameter, computerNameParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int ADD_PRIV_ALONE_EMPLOYE(string pI_EmployeName, string pI_Employe, Nullable<bool> pB_ADD, Nullable<bool> pB_DEL, Nullable<bool> pB_UP, Nullable<bool> pB_LIST, Nullable<bool> pB_PRINT, string pC_MENUDESC, string pC_MENURESRCE, string pC_APPLICATIONNAME, string pC_AGENCE, string pI_MATRICULE, string pI_LIBMATRICULE, ObjectParameter lect, ObjectParameter errMsg, string pC_Name, string language)
        {
            var pI_EmployeNameParameter = pI_EmployeName != null ?
                new ObjectParameter("PI_EmployeName", pI_EmployeName) :
                new ObjectParameter("PI_EmployeName", typeof(string));
    
            var pI_EmployeParameter = pI_Employe != null ?
                new ObjectParameter("PI_Employe", pI_Employe) :
                new ObjectParameter("PI_Employe", typeof(string));
    
            var pB_ADDParameter = pB_ADD.HasValue ?
                new ObjectParameter("PB_ADD", pB_ADD) :
                new ObjectParameter("PB_ADD", typeof(bool));
    
            var pB_DELParameter = pB_DEL.HasValue ?
                new ObjectParameter("PB_DEL", pB_DEL) :
                new ObjectParameter("PB_DEL", typeof(bool));
    
            var pB_UPParameter = pB_UP.HasValue ?
                new ObjectParameter("PB_UP", pB_UP) :
                new ObjectParameter("PB_UP", typeof(bool));
    
            var pB_LISTParameter = pB_LIST.HasValue ?
                new ObjectParameter("PB_LIST", pB_LIST) :
                new ObjectParameter("PB_LIST", typeof(bool));
    
            var pB_PRINTParameter = pB_PRINT.HasValue ?
                new ObjectParameter("PB_PRINT", pB_PRINT) :
                new ObjectParameter("PB_PRINT", typeof(bool));
    
            var pC_MENUDESCParameter = pC_MENUDESC != null ?
                new ObjectParameter("PC_MENUDESC", pC_MENUDESC) :
                new ObjectParameter("PC_MENUDESC", typeof(string));
    
            var pC_MENURESRCEParameter = pC_MENURESRCE != null ?
                new ObjectParameter("PC_MENURESRCE", pC_MENURESRCE) :
                new ObjectParameter("PC_MENURESRCE", typeof(string));
    
            var pC_APPLICATIONNAMEParameter = pC_APPLICATIONNAME != null ?
                new ObjectParameter("PC_APPLICATIONNAME", pC_APPLICATIONNAME) :
                new ObjectParameter("PC_APPLICATIONNAME", typeof(string));
    
            var pC_AGENCEParameter = pC_AGENCE != null ?
                new ObjectParameter("PC_AGENCE", pC_AGENCE) :
                new ObjectParameter("PC_AGENCE", typeof(string));
    
            var pI_MATRICULEParameter = pI_MATRICULE != null ?
                new ObjectParameter("PI_MATRICULE", pI_MATRICULE) :
                new ObjectParameter("PI_MATRICULE", typeof(string));
    
            var pI_LIBMATRICULEParameter = pI_LIBMATRICULE != null ?
                new ObjectParameter("PI_LIBMATRICULE", pI_LIBMATRICULE) :
                new ObjectParameter("PI_LIBMATRICULE", typeof(string));
    
            var pC_NameParameter = pC_Name != null ?
                new ObjectParameter("PC_Name", pC_Name) :
                new ObjectParameter("PC_Name", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADD_PRIV_ALONE_EMPLOYE", pI_EmployeNameParameter, pI_EmployeParameter, pB_ADDParameter, pB_DELParameter, pB_UPParameter, pB_LISTParameter, pB_PRINTParameter, pC_MENUDESCParameter, pC_MENURESRCEParameter, pC_APPLICATIONNAMEParameter, pC_AGENCEParameter, pI_MATRICULEParameter, pI_LIBMATRICULEParameter, lect, errMsg, pC_NameParameter, languageParameter);
        }
    
        public virtual int ADD_PRIV_EMPLOYE(string pI_EmployeName, string pI_Employe, Nullable<bool> pB_ADD, Nullable<bool> pB_DEL, Nullable<bool> pB_UP, Nullable<bool> pB_LIST, Nullable<bool> pB_PRINT, string pC_MENUNAME, string pC_MENUDESC, string pC_MENURESRCE, string pC_PRIVILEGE, string pC_APPLICATIONNAME, string pC_LIBPRIV, string pC_AGENCE, string computerName, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var pI_EmployeNameParameter = pI_EmployeName != null ?
                new ObjectParameter("PI_EmployeName", pI_EmployeName) :
                new ObjectParameter("PI_EmployeName", typeof(string));
    
            var pI_EmployeParameter = pI_Employe != null ?
                new ObjectParameter("PI_Employe", pI_Employe) :
                new ObjectParameter("PI_Employe", typeof(string));
    
            var pB_ADDParameter = pB_ADD.HasValue ?
                new ObjectParameter("PB_ADD", pB_ADD) :
                new ObjectParameter("PB_ADD", typeof(bool));
    
            var pB_DELParameter = pB_DEL.HasValue ?
                new ObjectParameter("PB_DEL", pB_DEL) :
                new ObjectParameter("PB_DEL", typeof(bool));
    
            var pB_UPParameter = pB_UP.HasValue ?
                new ObjectParameter("PB_UP", pB_UP) :
                new ObjectParameter("PB_UP", typeof(bool));
    
            var pB_LISTParameter = pB_LIST.HasValue ?
                new ObjectParameter("PB_LIST", pB_LIST) :
                new ObjectParameter("PB_LIST", typeof(bool));
    
            var pB_PRINTParameter = pB_PRINT.HasValue ?
                new ObjectParameter("PB_PRINT", pB_PRINT) :
                new ObjectParameter("PB_PRINT", typeof(bool));
    
            var pC_MENUNAMEParameter = pC_MENUNAME != null ?
                new ObjectParameter("PC_MENUNAME", pC_MENUNAME) :
                new ObjectParameter("PC_MENUNAME", typeof(string));
    
            var pC_MENUDESCParameter = pC_MENUDESC != null ?
                new ObjectParameter("PC_MENUDESC", pC_MENUDESC) :
                new ObjectParameter("PC_MENUDESC", typeof(string));
    
            var pC_MENURESRCEParameter = pC_MENURESRCE != null ?
                new ObjectParameter("PC_MENURESRCE", pC_MENURESRCE) :
                new ObjectParameter("PC_MENURESRCE", typeof(string));
    
            var pC_PRIVILEGEParameter = pC_PRIVILEGE != null ?
                new ObjectParameter("PC_PRIVILEGE", pC_PRIVILEGE) :
                new ObjectParameter("PC_PRIVILEGE", typeof(string));
    
            var pC_APPLICATIONNAMEParameter = pC_APPLICATIONNAME != null ?
                new ObjectParameter("PC_APPLICATIONNAME", pC_APPLICATIONNAME) :
                new ObjectParameter("PC_APPLICATIONNAME", typeof(string));
    
            var pC_LIBPRIVParameter = pC_LIBPRIV != null ?
                new ObjectParameter("PC_LIBPRIV", pC_LIBPRIV) :
                new ObjectParameter("PC_LIBPRIV", typeof(string));
    
            var pC_AGENCEParameter = pC_AGENCE != null ?
                new ObjectParameter("PC_AGENCE", pC_AGENCE) :
                new ObjectParameter("PC_AGENCE", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADD_PRIV_EMPLOYE", pI_EmployeNameParameter, pI_EmployeParameter, pB_ADDParameter, pB_DELParameter, pB_UPParameter, pB_LISTParameter, pB_PRINTParameter, pC_MENUNAMEParameter, pC_MENUDESCParameter, pC_MENURESRCEParameter, pC_PRIVILEGEParameter, pC_APPLICATIONNAMEParameter, pC_LIBPRIVParameter, pC_AGENCEParameter, computerNameParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int ADD_ROLE_EMPLOYE(string pI_Matricule, string pC_LIBEMP, string pI_Employe, string pC_LIBEMPLOYE, string pC_ROLENAME, string pC_ROLEDESC, string pC_AGENCE, ObjectParameter lect, ObjectParameter errMsg, string computerName, string language)
        {
            var pI_MatriculeParameter = pI_Matricule != null ?
                new ObjectParameter("PI_Matricule", pI_Matricule) :
                new ObjectParameter("PI_Matricule", typeof(string));
    
            var pC_LIBEMPParameter = pC_LIBEMP != null ?
                new ObjectParameter("PC_LIBEMP", pC_LIBEMP) :
                new ObjectParameter("PC_LIBEMP", typeof(string));
    
            var pI_EmployeParameter = pI_Employe != null ?
                new ObjectParameter("PI_Employe", pI_Employe) :
                new ObjectParameter("PI_Employe", typeof(string));
    
            var pC_LIBEMPLOYEParameter = pC_LIBEMPLOYE != null ?
                new ObjectParameter("PC_LIBEMPLOYE", pC_LIBEMPLOYE) :
                new ObjectParameter("PC_LIBEMPLOYE", typeof(string));
    
            var pC_ROLENAMEParameter = pC_ROLENAME != null ?
                new ObjectParameter("PC_ROLENAME", pC_ROLENAME) :
                new ObjectParameter("PC_ROLENAME", typeof(string));
    
            var pC_ROLEDESCParameter = pC_ROLEDESC != null ?
                new ObjectParameter("PC_ROLEDESC", pC_ROLEDESC) :
                new ObjectParameter("PC_ROLEDESC", typeof(string));
    
            var pC_AGENCEParameter = pC_AGENCE != null ?
                new ObjectParameter("PC_AGENCE", pC_AGENCE) :
                new ObjectParameter("PC_AGENCE", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADD_ROLE_EMPLOYE", pI_MatriculeParameter, pC_LIBEMPParameter, pI_EmployeParameter, pC_LIBEMPLOYEParameter, pC_ROLENAMEParameter, pC_ROLEDESCParameter, pC_AGENCEParameter, lect, errMsg, computerNameParameter, languageParameter);
        }
    
        public virtual int ADD_STANDINDORDER(string pC_EMPLOYE, string pC_LIBEMPLOYE, string pC_CPTEJUMELLE, string pC_LIBCPTEJUMELLE, string pC_AGENCE, Nullable<double> pF_MONTANT, string pC_REFERENCE, string pC_DESCRIPTION, string computerName, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var pC_EMPLOYEParameter = pC_EMPLOYE != null ?
                new ObjectParameter("PC_EMPLOYE", pC_EMPLOYE) :
                new ObjectParameter("PC_EMPLOYE", typeof(string));
    
            var pC_LIBEMPLOYEParameter = pC_LIBEMPLOYE != null ?
                new ObjectParameter("PC_LIBEMPLOYE", pC_LIBEMPLOYE) :
                new ObjectParameter("PC_LIBEMPLOYE", typeof(string));
    
            var pC_CPTEJUMELLEParameter = pC_CPTEJUMELLE != null ?
                new ObjectParameter("PC_CPTEJUMELLE", pC_CPTEJUMELLE) :
                new ObjectParameter("PC_CPTEJUMELLE", typeof(string));
    
            var pC_LIBCPTEJUMELLEParameter = pC_LIBCPTEJUMELLE != null ?
                new ObjectParameter("PC_LIBCPTEJUMELLE", pC_LIBCPTEJUMELLE) :
                new ObjectParameter("PC_LIBCPTEJUMELLE", typeof(string));
    
            var pC_AGENCEParameter = pC_AGENCE != null ?
                new ObjectParameter("PC_AGENCE", pC_AGENCE) :
                new ObjectParameter("PC_AGENCE", typeof(string));
    
            var pF_MONTANTParameter = pF_MONTANT.HasValue ?
                new ObjectParameter("PF_MONTANT", pF_MONTANT) :
                new ObjectParameter("PF_MONTANT", typeof(double));
    
            var pC_REFERENCEParameter = pC_REFERENCE != null ?
                new ObjectParameter("PC_REFERENCE", pC_REFERENCE) :
                new ObjectParameter("PC_REFERENCE", typeof(string));
    
            var pC_DESCRIPTIONParameter = pC_DESCRIPTION != null ?
                new ObjectParameter("PC_DESCRIPTION", pC_DESCRIPTION) :
                new ObjectParameter("PC_DESCRIPTION", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADD_STANDINDORDER", pC_EMPLOYEParameter, pC_LIBEMPLOYEParameter, pC_CPTEJUMELLEParameter, pC_LIBCPTEJUMELLEParameter, pC_AGENCEParameter, pF_MONTANTParameter, pC_REFERENCEParameter, pC_DESCRIPTIONParameter, computerNameParameter, lect, errMsg, languageParameter);
        }
    
        public virtual ObjectResult<AddAutoCred_Result> AddAutoCred(string agence, Nullable<System.DateTime> dateAccord, Nullable<double> montant, Nullable<System.DateTime> dateEch, string blocage, string libAgence, string libClient, Nullable<System.DateTime> dateSaisie, string employe, string libEmploye, string client, string cpteJumelle, Nullable<double> establishmentfee, string devise, ObjectParameter lect, ObjectParameter msg, string computerName, string language, string cobacID)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var dateAccordParameter = dateAccord.HasValue ?
                new ObjectParameter("DateAccord", dateAccord) :
                new ObjectParameter("DateAccord", typeof(System.DateTime));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var dateEchParameter = dateEch.HasValue ?
                new ObjectParameter("DateEch", dateEch) :
                new ObjectParameter("DateEch", typeof(System.DateTime));
    
            var blocageParameter = blocage != null ?
                new ObjectParameter("Blocage", blocage) :
                new ObjectParameter("Blocage", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libClientParameter = libClient != null ?
                new ObjectParameter("LibClient", libClient) :
                new ObjectParameter("LibClient", typeof(string));
    
            var dateSaisieParameter = dateSaisie.HasValue ?
                new ObjectParameter("DateSaisie", dateSaisie) :
                new ObjectParameter("DateSaisie", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var establishmentfeeParameter = establishmentfee.HasValue ?
                new ObjectParameter("establishmentfee", establishmentfee) :
                new ObjectParameter("establishmentfee", typeof(double));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddAutoCred_Result>("AddAutoCred", agenceParameter, dateAccordParameter, montantParameter, dateEchParameter, blocageParameter, libAgenceParameter, libClientParameter, dateSaisieParameter, employeParameter, libEmployeParameter, clientParameter, cpteJumelleParameter, establishmentfeeParameter, deviseParameter, lect, msg, computerNameParameter, languageParameter, cobacIDParameter);
        }
    
        public virtual ObjectResult<AddBonCaisse_Result> AddBonCaisse(string agence, string libAgence, string devise, string libDevise, string svClient, Nullable<int> catCpteBC, string letCleBC, string subCpteBC, string svLibCatCpteBC, string svCpteBC, string svCpteJumelleCC, string denomination, Nullable<double> svMontant, Nullable<double> wMtInteret, string refOp, string description, Nullable<System.DateTime> svDatePriseEffet, string svtxnno, string svNumeroContrat, Nullable<double> tauxInt, Nullable<double> txTPRCM, Nullable<System.DateTime> dateContrat, Nullable<int> duree, Nullable<System.DateTime> dateExpiration, Nullable<double> interetMois, string statut, Nullable<double> tauxPenalite, Nullable<double> mtPenalite, Nullable<double> totalCapitalise, string capitalInt, Nullable<double> supInt, Nullable<double> interetDu, string wemploye, string wlibemploye, string wtypeDT, ObjectParameter lect, ObjectParameter msg, Nullable<double> tPRCM, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("libAgence", libAgence) :
                new ObjectParameter("libAgence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var svClientParameter = svClient != null ?
                new ObjectParameter("SvClient", svClient) :
                new ObjectParameter("SvClient", typeof(string));
    
            var catCpteBCParameter = catCpteBC.HasValue ?
                new ObjectParameter("CatCpteBC", catCpteBC) :
                new ObjectParameter("CatCpteBC", typeof(int));
    
            var letCleBCParameter = letCleBC != null ?
                new ObjectParameter("LetCleBC", letCleBC) :
                new ObjectParameter("LetCleBC", typeof(string));
    
            var subCpteBCParameter = subCpteBC != null ?
                new ObjectParameter("SubCpteBC", subCpteBC) :
                new ObjectParameter("SubCpteBC", typeof(string));
    
            var svLibCatCpteBCParameter = svLibCatCpteBC != null ?
                new ObjectParameter("SvLibCatCpteBC", svLibCatCpteBC) :
                new ObjectParameter("SvLibCatCpteBC", typeof(string));
    
            var svCpteBCParameter = svCpteBC != null ?
                new ObjectParameter("SvCpteBC", svCpteBC) :
                new ObjectParameter("SvCpteBC", typeof(string));
    
            var svCpteJumelleCCParameter = svCpteJumelleCC != null ?
                new ObjectParameter("SvCpteJumelleCC", svCpteJumelleCC) :
                new ObjectParameter("SvCpteJumelleCC", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var svMontantParameter = svMontant.HasValue ?
                new ObjectParameter("SvMontant", svMontant) :
                new ObjectParameter("SvMontant", typeof(double));
    
            var wMtInteretParameter = wMtInteret.HasValue ?
                new ObjectParameter("WMtInteret", wMtInteret) :
                new ObjectParameter("WMtInteret", typeof(double));
    
            var refOpParameter = refOp != null ?
                new ObjectParameter("RefOp", refOp) :
                new ObjectParameter("RefOp", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var svDatePriseEffetParameter = svDatePriseEffet.HasValue ?
                new ObjectParameter("SvDatePriseEffet", svDatePriseEffet) :
                new ObjectParameter("SvDatePriseEffet", typeof(System.DateTime));
    
            var svtxnnoParameter = svtxnno != null ?
                new ObjectParameter("Svtxnno", svtxnno) :
                new ObjectParameter("Svtxnno", typeof(string));
    
            var svNumeroContratParameter = svNumeroContrat != null ?
                new ObjectParameter("SvNumeroContrat", svNumeroContrat) :
                new ObjectParameter("SvNumeroContrat", typeof(string));
    
            var tauxIntParameter = tauxInt.HasValue ?
                new ObjectParameter("TauxInt", tauxInt) :
                new ObjectParameter("TauxInt", typeof(double));
    
            var txTPRCMParameter = txTPRCM.HasValue ?
                new ObjectParameter("TxTPRCM", txTPRCM) :
                new ObjectParameter("TxTPRCM", typeof(double));
    
            var dateContratParameter = dateContrat.HasValue ?
                new ObjectParameter("DateContrat", dateContrat) :
                new ObjectParameter("DateContrat", typeof(System.DateTime));
    
            var dureeParameter = duree.HasValue ?
                new ObjectParameter("Duree", duree) :
                new ObjectParameter("Duree", typeof(int));
    
            var dateExpirationParameter = dateExpiration.HasValue ?
                new ObjectParameter("DateExpiration", dateExpiration) :
                new ObjectParameter("DateExpiration", typeof(System.DateTime));
    
            var interetMoisParameter = interetMois.HasValue ?
                new ObjectParameter("InteretMois", interetMois) :
                new ObjectParameter("InteretMois", typeof(double));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var tauxPenaliteParameter = tauxPenalite.HasValue ?
                new ObjectParameter("TauxPenalite", tauxPenalite) :
                new ObjectParameter("TauxPenalite", typeof(double));
    
            var mtPenaliteParameter = mtPenalite.HasValue ?
                new ObjectParameter("MtPenalite", mtPenalite) :
                new ObjectParameter("MtPenalite", typeof(double));
    
            var totalCapitaliseParameter = totalCapitalise.HasValue ?
                new ObjectParameter("TotalCapitalise", totalCapitalise) :
                new ObjectParameter("TotalCapitalise", typeof(double));
    
            var capitalIntParameter = capitalInt != null ?
                new ObjectParameter("CapitalInt", capitalInt) :
                new ObjectParameter("CapitalInt", typeof(string));
    
            var supIntParameter = supInt.HasValue ?
                new ObjectParameter("SupInt", supInt) :
                new ObjectParameter("SupInt", typeof(double));
    
            var interetDuParameter = interetDu.HasValue ?
                new ObjectParameter("InteretDu", interetDu) :
                new ObjectParameter("InteretDu", typeof(double));
    
            var wemployeParameter = wemploye != null ?
                new ObjectParameter("wemploye", wemploye) :
                new ObjectParameter("wemploye", typeof(string));
    
            var wlibemployeParameter = wlibemploye != null ?
                new ObjectParameter("wlibemploye", wlibemploye) :
                new ObjectParameter("wlibemploye", typeof(string));
    
            var wtypeDTParameter = wtypeDT != null ?
                new ObjectParameter("wtypeDT", wtypeDT) :
                new ObjectParameter("wtypeDT", typeof(string));
    
            var tPRCMParameter = tPRCM.HasValue ?
                new ObjectParameter("TPRCM", tPRCM) :
                new ObjectParameter("TPRCM", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddBonCaisse_Result>("AddBonCaisse", agenceParameter, libAgenceParameter, deviseParameter, libDeviseParameter, svClientParameter, catCpteBCParameter, letCleBCParameter, subCpteBCParameter, svLibCatCpteBCParameter, svCpteBCParameter, svCpteJumelleCCParameter, denominationParameter, svMontantParameter, wMtInteretParameter, refOpParameter, descriptionParameter, svDatePriseEffetParameter, svtxnnoParameter, svNumeroContratParameter, tauxIntParameter, txTPRCMParameter, dateContratParameter, dureeParameter, dateExpirationParameter, interetMoisParameter, statutParameter, tauxPenaliteParameter, mtPenaliteParameter, totalCapitaliseParameter, capitalIntParameter, supIntParameter, interetDuParameter, wemployeParameter, wlibemployeParameter, wtypeDTParameter, lect, msg, tPRCMParameter, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<AddBonCaisseCash_S_Trans_Result> AddBonCaisseCash_S_Trans(string agence, string libAgence, string devise, string libDevise, string svCpteBC, string svCpteJumelleCC, Nullable<double> svMontant, string svNumeroContrat, string wemploye, string wlibemploye, string wtypeDT, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("libAgence", libAgence) :
                new ObjectParameter("libAgence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var svCpteBCParameter = svCpteBC != null ?
                new ObjectParameter("SvCpteBC", svCpteBC) :
                new ObjectParameter("SvCpteBC", typeof(string));
    
            var svCpteJumelleCCParameter = svCpteJumelleCC != null ?
                new ObjectParameter("SvCpteJumelleCC", svCpteJumelleCC) :
                new ObjectParameter("SvCpteJumelleCC", typeof(string));
    
            var svMontantParameter = svMontant.HasValue ?
                new ObjectParameter("SvMontant", svMontant) :
                new ObjectParameter("SvMontant", typeof(double));
    
            var svNumeroContratParameter = svNumeroContrat != null ?
                new ObjectParameter("SvNumeroContrat", svNumeroContrat) :
                new ObjectParameter("SvNumeroContrat", typeof(string));
    
            var wemployeParameter = wemploye != null ?
                new ObjectParameter("wemploye", wemploye) :
                new ObjectParameter("wemploye", typeof(string));
    
            var wlibemployeParameter = wlibemploye != null ?
                new ObjectParameter("wlibemploye", wlibemploye) :
                new ObjectParameter("wlibemploye", typeof(string));
    
            var wtypeDTParameter = wtypeDT != null ?
                new ObjectParameter("wtypeDT", wtypeDT) :
                new ObjectParameter("wtypeDT", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddBonCaisseCash_S_Trans_Result>("AddBonCaisseCash_S_Trans", agenceParameter, libAgenceParameter, deviseParameter, libDeviseParameter, svCpteBCParameter, svCpteJumelleCCParameter, svMontantParameter, svNumeroContratParameter, wemployeParameter, wlibemployeParameter, wtypeDTParameter, lect, msg, languageParameter);
        }
    
        public virtual ObjectResult<AddDepotATerme_Result> AddDepotATerme(string agence, string libAgence, string devise, string libDevise, string svClient, Nullable<int> catCpteDT, string letCleDT, string subCpteDT, string svLibCatCpteDT, string svCpteDT, string svCpteJumelleCC, string denomination, Nullable<double> svMontant, string refOp, string description, Nullable<System.DateTime> svDatePriseEffet, string svNumeroContrat, Nullable<double> txTVA, Nullable<double> tauxInt, Nullable<double> txTPRCM, Nullable<System.DateTime> dateContrat, Nullable<int> duree, Nullable<System.DateTime> dateExpiration, Nullable<double> interetMois, Nullable<double> mtInteret, string wemploye, string wlibemploye, ObjectParameter lect, ObjectParameter msg, string caisseCompte, string typeCalInt, Nullable<double> tPRCM, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("libAgence", libAgence) :
                new ObjectParameter("libAgence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var svClientParameter = svClient != null ?
                new ObjectParameter("SvClient", svClient) :
                new ObjectParameter("SvClient", typeof(string));
    
            var catCpteDTParameter = catCpteDT.HasValue ?
                new ObjectParameter("CatCpteDT", catCpteDT) :
                new ObjectParameter("CatCpteDT", typeof(int));
    
            var letCleDTParameter = letCleDT != null ?
                new ObjectParameter("LetCleDT", letCleDT) :
                new ObjectParameter("LetCleDT", typeof(string));
    
            var subCpteDTParameter = subCpteDT != null ?
                new ObjectParameter("SubCpteDT", subCpteDT) :
                new ObjectParameter("SubCpteDT", typeof(string));
    
            var svLibCatCpteDTParameter = svLibCatCpteDT != null ?
                new ObjectParameter("SvLibCatCpteDT", svLibCatCpteDT) :
                new ObjectParameter("SvLibCatCpteDT", typeof(string));
    
            var svCpteDTParameter = svCpteDT != null ?
                new ObjectParameter("SvCpteDT", svCpteDT) :
                new ObjectParameter("SvCpteDT", typeof(string));
    
            var svCpteJumelleCCParameter = svCpteJumelleCC != null ?
                new ObjectParameter("SvCpteJumelleCC", svCpteJumelleCC) :
                new ObjectParameter("SvCpteJumelleCC", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var svMontantParameter = svMontant.HasValue ?
                new ObjectParameter("SvMontant", svMontant) :
                new ObjectParameter("SvMontant", typeof(double));
    
            var refOpParameter = refOp != null ?
                new ObjectParameter("RefOp", refOp) :
                new ObjectParameter("RefOp", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var svDatePriseEffetParameter = svDatePriseEffet.HasValue ?
                new ObjectParameter("SvDatePriseEffet", svDatePriseEffet) :
                new ObjectParameter("SvDatePriseEffet", typeof(System.DateTime));
    
            var svNumeroContratParameter = svNumeroContrat != null ?
                new ObjectParameter("SvNumeroContrat", svNumeroContrat) :
                new ObjectParameter("SvNumeroContrat", typeof(string));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var tauxIntParameter = tauxInt.HasValue ?
                new ObjectParameter("TauxInt", tauxInt) :
                new ObjectParameter("TauxInt", typeof(double));
    
            var txTPRCMParameter = txTPRCM.HasValue ?
                new ObjectParameter("TxTPRCM", txTPRCM) :
                new ObjectParameter("TxTPRCM", typeof(double));
    
            var dateContratParameter = dateContrat.HasValue ?
                new ObjectParameter("DateContrat", dateContrat) :
                new ObjectParameter("DateContrat", typeof(System.DateTime));
    
            var dureeParameter = duree.HasValue ?
                new ObjectParameter("Duree", duree) :
                new ObjectParameter("Duree", typeof(int));
    
            var dateExpirationParameter = dateExpiration.HasValue ?
                new ObjectParameter("DateExpiration", dateExpiration) :
                new ObjectParameter("DateExpiration", typeof(System.DateTime));
    
            var interetMoisParameter = interetMois.HasValue ?
                new ObjectParameter("InteretMois", interetMois) :
                new ObjectParameter("InteretMois", typeof(double));
    
            var mtInteretParameter = mtInteret.HasValue ?
                new ObjectParameter("MtInteret", mtInteret) :
                new ObjectParameter("MtInteret", typeof(double));
    
            var wemployeParameter = wemploye != null ?
                new ObjectParameter("wemploye", wemploye) :
                new ObjectParameter("wemploye", typeof(string));
    
            var wlibemployeParameter = wlibemploye != null ?
                new ObjectParameter("wlibemploye", wlibemploye) :
                new ObjectParameter("wlibemploye", typeof(string));
    
            var caisseCompteParameter = caisseCompte != null ?
                new ObjectParameter("caisseCompte", caisseCompte) :
                new ObjectParameter("caisseCompte", typeof(string));
    
            var typeCalIntParameter = typeCalInt != null ?
                new ObjectParameter("TypeCalInt", typeCalInt) :
                new ObjectParameter("TypeCalInt", typeof(string));
    
            var tPRCMParameter = tPRCM.HasValue ?
                new ObjectParameter("TPRCM", tPRCM) :
                new ObjectParameter("TPRCM", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddDepotATerme_Result>("AddDepotATerme", agenceParameter, libAgenceParameter, deviseParameter, libDeviseParameter, svClientParameter, catCpteDTParameter, letCleDTParameter, subCpteDTParameter, svLibCatCpteDTParameter, svCpteDTParameter, svCpteJumelleCCParameter, denominationParameter, svMontantParameter, refOpParameter, descriptionParameter, svDatePriseEffetParameter, svNumeroContratParameter, txTVAParameter, tauxIntParameter, txTPRCMParameter, dateContratParameter, dureeParameter, dateExpirationParameter, interetMoisParameter, mtInteretParameter, wemployeParameter, wlibemployeParameter, lect, msg, caisseCompteParameter, typeCalIntParameter, tPRCMParameter, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<AddDepotATermeCaisse_S_Trans_Result> AddDepotATermeCaisse_S_Trans(string agence, string libAgence, string devise, string libDevise, string svCpteDT, string svCpteJumelleCC, Nullable<double> svMontant, string svNumeroContrat, string wemploye, string wlibemploye, ObjectParameter lect, ObjectParameter msg, string caisseCompte, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("libAgence", libAgence) :
                new ObjectParameter("libAgence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var svCpteDTParameter = svCpteDT != null ?
                new ObjectParameter("SvCpteDT", svCpteDT) :
                new ObjectParameter("SvCpteDT", typeof(string));
    
            var svCpteJumelleCCParameter = svCpteJumelleCC != null ?
                new ObjectParameter("SvCpteJumelleCC", svCpteJumelleCC) :
                new ObjectParameter("SvCpteJumelleCC", typeof(string));
    
            var svMontantParameter = svMontant.HasValue ?
                new ObjectParameter("SvMontant", svMontant) :
                new ObjectParameter("SvMontant", typeof(double));
    
            var svNumeroContratParameter = svNumeroContrat != null ?
                new ObjectParameter("SvNumeroContrat", svNumeroContrat) :
                new ObjectParameter("SvNumeroContrat", typeof(string));
    
            var wemployeParameter = wemploye != null ?
                new ObjectParameter("wemploye", wemploye) :
                new ObjectParameter("wemploye", typeof(string));
    
            var wlibemployeParameter = wlibemploye != null ?
                new ObjectParameter("wlibemploye", wlibemploye) :
                new ObjectParameter("wlibemploye", typeof(string));
    
            var caisseCompteParameter = caisseCompte != null ?
                new ObjectParameter("caisseCompte", caisseCompte) :
                new ObjectParameter("caisseCompte", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddDepotATermeCaisse_S_Trans_Result>("AddDepotATermeCaisse_S_Trans", agenceParameter, libAgenceParameter, deviseParameter, libDeviseParameter, svCpteDTParameter, svCpteJumelleCCParameter, svMontantParameter, svNumeroContratParameter, wemployeParameter, wlibemployeParameter, lect, msg, caisseCompteParameter, languageParameter);
        }
    
        public virtual ObjectResult<string> AFFICH_MENU(string pI_Employe, string pC_Module, string pC_MENU, ObjectParameter lect)
        {
            var pI_EmployeParameter = pI_Employe != null ?
                new ObjectParameter("PI_Employe", pI_Employe) :
                new ObjectParameter("PI_Employe", typeof(string));
    
            var pC_ModuleParameter = pC_Module != null ?
                new ObjectParameter("PC_Module", pC_Module) :
                new ObjectParameter("PC_Module", typeof(string));
    
            var pC_MENUParameter = pC_MENU != null ?
                new ObjectParameter("PC_MENU", pC_MENU) :
                new ObjectParameter("PC_MENU", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AFFICH_MENU", pI_EmployeParameter, pC_ModuleParameter, pC_MENUParameter, lect);
        }
    
        public virtual int Agence_Insert(string agcod, string aglib, string agadr, string agbp, string agville, string agpays, string agtelp, string agfax, Nullable<System.DateTime> agdcr, Nullable<System.DateTime> agdats, string cobacID, string beacId, string ipserver, string mdpserver, string cptecltres, string employe, string branchSituation, Nullable<System.DateTime> dateDerFerm, Nullable<System.DateTime> dateJourEnCours, string controlBranchAcct, string cptecltresint, string transfPhone, Nullable<System.DateTime> serverDate, string serverOpen, Nullable<System.DateTime> serverBackDate, string backOpen, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var agcodParameter = agcod != null ?
                new ObjectParameter("agcod", agcod) :
                new ObjectParameter("agcod", typeof(string));
    
            var aglibParameter = aglib != null ?
                new ObjectParameter("aglib", aglib) :
                new ObjectParameter("aglib", typeof(string));
    
            var agadrParameter = agadr != null ?
                new ObjectParameter("agadr", agadr) :
                new ObjectParameter("agadr", typeof(string));
    
            var agbpParameter = agbp != null ?
                new ObjectParameter("agbp", agbp) :
                new ObjectParameter("agbp", typeof(string));
    
            var agvilleParameter = agville != null ?
                new ObjectParameter("agville", agville) :
                new ObjectParameter("agville", typeof(string));
    
            var agpaysParameter = agpays != null ?
                new ObjectParameter("agpays", agpays) :
                new ObjectParameter("agpays", typeof(string));
    
            var agtelpParameter = agtelp != null ?
                new ObjectParameter("agtelp", agtelp) :
                new ObjectParameter("agtelp", typeof(string));
    
            var agfaxParameter = agfax != null ?
                new ObjectParameter("agfax", agfax) :
                new ObjectParameter("agfax", typeof(string));
    
            var agdcrParameter = agdcr.HasValue ?
                new ObjectParameter("agdcr", agdcr) :
                new ObjectParameter("agdcr", typeof(System.DateTime));
    
            var agdatsParameter = agdats.HasValue ?
                new ObjectParameter("agdats", agdats) :
                new ObjectParameter("agdats", typeof(System.DateTime));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            var beacIdParameter = beacId != null ?
                new ObjectParameter("BeacId", beacId) :
                new ObjectParameter("BeacId", typeof(string));
    
            var ipserverParameter = ipserver != null ?
                new ObjectParameter("Ipserver", ipserver) :
                new ObjectParameter("Ipserver", typeof(string));
    
            var mdpserverParameter = mdpserver != null ?
                new ObjectParameter("Mdpserver", mdpserver) :
                new ObjectParameter("Mdpserver", typeof(string));
    
            var cptecltresParameter = cptecltres != null ?
                new ObjectParameter("cptecltres", cptecltres) :
                new ObjectParameter("cptecltres", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var branchSituationParameter = branchSituation != null ?
                new ObjectParameter("BranchSituation", branchSituation) :
                new ObjectParameter("BranchSituation", typeof(string));
    
            var dateDerFermParameter = dateDerFerm.HasValue ?
                new ObjectParameter("DateDerFerm", dateDerFerm) :
                new ObjectParameter("DateDerFerm", typeof(System.DateTime));
    
            var dateJourEnCoursParameter = dateJourEnCours.HasValue ?
                new ObjectParameter("DateJourEnCours", dateJourEnCours) :
                new ObjectParameter("DateJourEnCours", typeof(System.DateTime));
    
            var controlBranchAcctParameter = controlBranchAcct != null ?
                new ObjectParameter("ControlBranchAcct", controlBranchAcct) :
                new ObjectParameter("ControlBranchAcct", typeof(string));
    
            var cptecltresintParameter = cptecltresint != null ?
                new ObjectParameter("cptecltresint", cptecltresint) :
                new ObjectParameter("cptecltresint", typeof(string));
    
            var transfPhoneParameter = transfPhone != null ?
                new ObjectParameter("TransfPhone", transfPhone) :
                new ObjectParameter("TransfPhone", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var serverOpenParameter = serverOpen != null ?
                new ObjectParameter("ServerOpen", serverOpen) :
                new ObjectParameter("ServerOpen", typeof(string));
    
            var serverBackDateParameter = serverBackDate.HasValue ?
                new ObjectParameter("ServerBackDate", serverBackDate) :
                new ObjectParameter("ServerBackDate", typeof(System.DateTime));
    
            var backOpenParameter = backOpen != null ?
                new ObjectParameter("BackOpen", backOpen) :
                new ObjectParameter("BackOpen", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Agence_Insert", agcodParameter, aglibParameter, agadrParameter, agbpParameter, agvilleParameter, agpaysParameter, agtelpParameter, agfaxParameter, agdcrParameter, agdatsParameter, cobacIDParameter, beacIdParameter, ipserverParameter, mdpserverParameter, cptecltresParameter, employeParameter, branchSituationParameter, dateDerFermParameter, dateJourEnCoursParameter, controlBranchAcctParameter, cptecltresintParameter, transfPhoneParameter, serverDateParameter, serverOpenParameter, serverBackDateParameter, backOpenParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int Agence_Update(string agcod, string aglib, string agadr, string agbp, string agville, string agpays, string agtelp, string agfax, Nullable<System.DateTime> agdcr, Nullable<System.DateTime> agdats, string cobacID, string beacId, string ipserver, string mdpserver, string cptecltres, string employe, string branchSituation, Nullable<System.DateTime> dateDerFerm, Nullable<System.DateTime> dateJourEnCours, string controlBranchAcct, string cptecltresint, string transfPhone, Nullable<System.DateTime> serverDate, string serverOpen, Nullable<System.DateTime> serverBackDate, string backOpen, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var agcodParameter = agcod != null ?
                new ObjectParameter("agcod", agcod) :
                new ObjectParameter("agcod", typeof(string));
    
            var aglibParameter = aglib != null ?
                new ObjectParameter("aglib", aglib) :
                new ObjectParameter("aglib", typeof(string));
    
            var agadrParameter = agadr != null ?
                new ObjectParameter("agadr", agadr) :
                new ObjectParameter("agadr", typeof(string));
    
            var agbpParameter = agbp != null ?
                new ObjectParameter("agbp", agbp) :
                new ObjectParameter("agbp", typeof(string));
    
            var agvilleParameter = agville != null ?
                new ObjectParameter("agville", agville) :
                new ObjectParameter("agville", typeof(string));
    
            var agpaysParameter = agpays != null ?
                new ObjectParameter("agpays", agpays) :
                new ObjectParameter("agpays", typeof(string));
    
            var agtelpParameter = agtelp != null ?
                new ObjectParameter("agtelp", agtelp) :
                new ObjectParameter("agtelp", typeof(string));
    
            var agfaxParameter = agfax != null ?
                new ObjectParameter("agfax", agfax) :
                new ObjectParameter("agfax", typeof(string));
    
            var agdcrParameter = agdcr.HasValue ?
                new ObjectParameter("agdcr", agdcr) :
                new ObjectParameter("agdcr", typeof(System.DateTime));
    
            var agdatsParameter = agdats.HasValue ?
                new ObjectParameter("agdats", agdats) :
                new ObjectParameter("agdats", typeof(System.DateTime));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            var beacIdParameter = beacId != null ?
                new ObjectParameter("BeacId", beacId) :
                new ObjectParameter("BeacId", typeof(string));
    
            var ipserverParameter = ipserver != null ?
                new ObjectParameter("Ipserver", ipserver) :
                new ObjectParameter("Ipserver", typeof(string));
    
            var mdpserverParameter = mdpserver != null ?
                new ObjectParameter("Mdpserver", mdpserver) :
                new ObjectParameter("Mdpserver", typeof(string));
    
            var cptecltresParameter = cptecltres != null ?
                new ObjectParameter("cptecltres", cptecltres) :
                new ObjectParameter("cptecltres", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var branchSituationParameter = branchSituation != null ?
                new ObjectParameter("BranchSituation", branchSituation) :
                new ObjectParameter("BranchSituation", typeof(string));
    
            var dateDerFermParameter = dateDerFerm.HasValue ?
                new ObjectParameter("DateDerFerm", dateDerFerm) :
                new ObjectParameter("DateDerFerm", typeof(System.DateTime));
    
            var dateJourEnCoursParameter = dateJourEnCours.HasValue ?
                new ObjectParameter("DateJourEnCours", dateJourEnCours) :
                new ObjectParameter("DateJourEnCours", typeof(System.DateTime));
    
            var controlBranchAcctParameter = controlBranchAcct != null ?
                new ObjectParameter("ControlBranchAcct", controlBranchAcct) :
                new ObjectParameter("ControlBranchAcct", typeof(string));
    
            var cptecltresintParameter = cptecltresint != null ?
                new ObjectParameter("cptecltresint", cptecltresint) :
                new ObjectParameter("cptecltresint", typeof(string));
    
            var transfPhoneParameter = transfPhone != null ?
                new ObjectParameter("TransfPhone", transfPhone) :
                new ObjectParameter("TransfPhone", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var serverOpenParameter = serverOpen != null ?
                new ObjectParameter("ServerOpen", serverOpen) :
                new ObjectParameter("ServerOpen", typeof(string));
    
            var serverBackDateParameter = serverBackDate.HasValue ?
                new ObjectParameter("ServerBackDate", serverBackDate) :
                new ObjectParameter("ServerBackDate", typeof(System.DateTime));
    
            var backOpenParameter = backOpen != null ?
                new ObjectParameter("BackOpen", backOpen) :
                new ObjectParameter("BackOpen", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Agence_Update", agcodParameter, aglibParameter, agadrParameter, agbpParameter, agvilleParameter, agpaysParameter, agtelpParameter, agfaxParameter, agdcrParameter, agdatsParameter, cobacIDParameter, beacIdParameter, ipserverParameter, mdpserverParameter, cptecltresParameter, employeParameter, branchSituationParameter, dateDerFermParameter, dateJourEnCoursParameter, controlBranchAcctParameter, cptecltresintParameter, transfPhoneParameter, serverDateParameter, serverOpenParameter, serverBackDateParameter, backOpenParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int AgioReserveCalMens(Nullable<int> agence, string libAgence, Nullable<decimal> wClient, string denomination, Nullable<int> wEmploye, string wLibEmploye, string txnno, string devise, string libDevise, Nullable<double> intMois, Nullable<double> tVAMois, Nullable<System.DateTime> wDateOp, string svNumeroContrat, ObjectParameter svCpteIndAgioRes, ObjectParameter cpteGLAGIO, ObjectParameter cleCpteAGIO, ObjectParameter libCpteGLAGIO, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var agenceParameter = agence.HasValue ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(int));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var wClientParameter = wClient.HasValue ?
                new ObjectParameter("WClient", wClient) :
                new ObjectParameter("WClient", typeof(decimal));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var wEmployeParameter = wEmploye.HasValue ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(int));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var intMoisParameter = intMois.HasValue ?
                new ObjectParameter("IntMois", intMois) :
                new ObjectParameter("IntMois", typeof(double));
    
            var tVAMoisParameter = tVAMois.HasValue ?
                new ObjectParameter("TVAMois", tVAMois) :
                new ObjectParameter("TVAMois", typeof(double));
    
            var wDateOpParameter = wDateOp.HasValue ?
                new ObjectParameter("WDateOp", wDateOp) :
                new ObjectParameter("WDateOp", typeof(System.DateTime));
    
            var svNumeroContratParameter = svNumeroContrat != null ?
                new ObjectParameter("SvNumeroContrat", svNumeroContrat) :
                new ObjectParameter("SvNumeroContrat", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgioReserveCalMens", agenceParameter, libAgenceParameter, wClientParameter, denominationParameter, wEmployeParameter, wLibEmployeParameter, txnnoParameter, deviseParameter, libDeviseParameter, intMoisParameter, tVAMoisParameter, wDateOpParameter, svNumeroContratParameter, svCpteIndAgioRes, cpteGLAGIO, cleCpteAGIO, libCpteGLAGIO, lect, errMsg, languageParameter);
        }
    
        public virtual int AppelCpteClt(string cpteJumelle, ObjectParameter statut, ObjectParameter exoFTC, ObjectParameter exoTDC, ObjectParameter exoTPRCM, ObjectParameter exoTVA, ObjectParameter mtFTC, ObjectParameter txComDec, ObjectParameter txComMvt, ObjectParameter txTVA, ObjectParameter txIntDb, ObjectParameter txIntCr, ObjectParameter stopInt, ObjectParameter periode, ObjectParameter lect)
        {
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AppelCpteClt", cpteJumelleParameter, statut, exoFTC, exoTDC, exoTPRCM, exoTVA, mtFTC, txComDec, txComMvt, txTVA, txIntDb, txIntCr, stopInt, periode, lect);
        }
    
        public virtual int AssetLiabilitieCpte37(string centralBr, string centralLibBr, string wDevise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string employe, string language, ObjectParameter msg, ObjectParameter lect)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssetLiabilitieCpte37", centralBrParameter, centralLibBrParameter, wDeviseParameter, dateDebutParameter, dateFinParameter, employeParameter, languageParameter, msg, lect);
        }
    
        public virtual int AssetLiabilitieCpte37Glhist(string centralBr, string centralLibBr, string wDevise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, ObjectParameter msg, ObjectParameter lect, string language, string employe)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssetLiabilitieCpte37Glhist", centralBrParameter, centralLibBrParameter, wDeviseParameter, dateDebutParameter, dateFinParameter, msg, lect, languageParameter, employeParameter);
        }
    
        public virtual int AssetLiabilitieOtherCpte(string centralBr, string centralLibBr, string wDevise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string employe, string language, ObjectParameter msg, ObjectParameter lect)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssetLiabilitieOtherCpte", centralBrParameter, centralLibBrParameter, wDeviseParameter, dateDebutParameter, dateFinParameter, employeParameter, languageParameter, msg, lect);
        }
    
        public virtual int AssetLiabilitieOtherCpteGlhist(string centralBr, string centralLibBr, string wDevise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, ObjectParameter msg, ObjectParameter lect, string language, string employe)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssetLiabilitieOtherCpteGlhist", centralBrParameter, centralLibBrParameter, wDeviseParameter, dateDebutParameter, dateFinParameter, msg, lect, languageParameter, employeParameter);
        }
    
        public virtual int AssetLiabilities(string centralBr, string centralLibBr, string wDevise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string employe, string computerName, string language, ObjectParameter msg, ObjectParameter lect)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssetLiabilities", centralBrParameter, centralLibBrParameter, wDeviseParameter, dateDebutParameter, dateFinParameter, employeParameter, computerNameParameter, languageParameter, msg, lect);
        }
    
        public virtual int AssetLiabilitiesGlhist(string centralBr, string centralLibBr, string wDevise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, ObjectParameter msg, ObjectParameter lect, string employe, string computerName, string language)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssetLiabilitiesGlhist", centralBrParameter, centralLibBrParameter, wDeviseParameter, dateDebutParameter, dateFinParameter, msg, lect, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int AutoCred_Insert(string agence, Nullable<System.DateTime> dateAccord, Nullable<double> montant, Nullable<System.DateTime> dateEch, string blocage, string libAgence, string libClient, Nullable<System.DateTime> dateSaisie, string employe, string libEmploye, string client, string cpteJumelle, Nullable<double> establishmentfee, string statut, Nullable<System.DateTime> dateModifStatut, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var dateAccordParameter = dateAccord.HasValue ?
                new ObjectParameter("DateAccord", dateAccord) :
                new ObjectParameter("DateAccord", typeof(System.DateTime));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var dateEchParameter = dateEch.HasValue ?
                new ObjectParameter("DateEch", dateEch) :
                new ObjectParameter("DateEch", typeof(System.DateTime));
    
            var blocageParameter = blocage != null ?
                new ObjectParameter("Blocage", blocage) :
                new ObjectParameter("Blocage", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libClientParameter = libClient != null ?
                new ObjectParameter("LibClient", libClient) :
                new ObjectParameter("LibClient", typeof(string));
    
            var dateSaisieParameter = dateSaisie.HasValue ?
                new ObjectParameter("DateSaisie", dateSaisie) :
                new ObjectParameter("DateSaisie", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var establishmentfeeParameter = establishmentfee.HasValue ?
                new ObjectParameter("establishmentfee", establishmentfee) :
                new ObjectParameter("establishmentfee", typeof(double));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var dateModifStatutParameter = dateModifStatut.HasValue ?
                new ObjectParameter("DateModifStatut", dateModifStatut) :
                new ObjectParameter("DateModifStatut", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AutoCred_Insert", agenceParameter, dateAccordParameter, montantParameter, dateEchParameter, blocageParameter, libAgenceParameter, libClientParameter, dateSaisieParameter, employeParameter, libEmployeParameter, clientParameter, cpteJumelleParameter, establishmentfeeParameter, statutParameter, dateModifStatutParameter, lect, msg, languageParameter);
        }
    
        public virtual int AutoCred_Update(string agence, string libAgence, Nullable<decimal> numero, string cpteJumelle, string libClient, string blocage, string statut, Nullable<System.DateTime> dateModifStatut, string employe, string libEmploye, string client, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var numeroParameter = numero.HasValue ?
                new ObjectParameter("Numero", numero) :
                new ObjectParameter("Numero", typeof(decimal));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var libClientParameter = libClient != null ?
                new ObjectParameter("LibClient", libClient) :
                new ObjectParameter("LibClient", typeof(string));
    
            var blocageParameter = blocage != null ?
                new ObjectParameter("Blocage", blocage) :
                new ObjectParameter("Blocage", typeof(string));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var dateModifStatutParameter = dateModifStatut.HasValue ?
                new ObjectParameter("DateModifStatut", dateModifStatut) :
                new ObjectParameter("DateModifStatut", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AutoCred_Update", agenceParameter, libAgenceParameter, numeroParameter, cpteJumelleParameter, libClientParameter, blocageParameter, statutParameter, dateModifStatutParameter, employeParameter, libEmployeParameter, clientParameter, lect, msg, languageParameter);
        }
    
        public virtual int AuxBalance(Nullable<int> agence, Nullable<System.DateTime> dateTrait, string cpte, ObjectParameter lect, ObjectParameter msg, Nullable<int> employe, string computerName, string language)
        {
            var agenceParameter = agence.HasValue ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(int));
    
            var dateTraitParameter = dateTrait.HasValue ?
                new ObjectParameter("DateTrait", dateTrait) :
                new ObjectParameter("DateTrait", typeof(System.DateTime));
    
            var cpteParameter = cpte != null ?
                new ObjectParameter("Cpte", cpte) :
                new ObjectParameter("Cpte", typeof(string));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(int));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuxBalance", agenceParameter, dateTraitParameter, cpteParameter, lect, msg, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<Avaliste_Delete_Result> Avaliste_Delete(string cpteJumelleAval, string numeroContrat, Nullable<double> montant, string description, Nullable<System.DateTime> dateCreation, string employe, ObjectParameter lect, ObjectParameter errMsg, Nullable<decimal> serie, string language, string computerName)
        {
            var cpteJumelleAvalParameter = cpteJumelleAval != null ?
                new ObjectParameter("CpteJumelleAval", cpteJumelleAval) :
                new ObjectParameter("CpteJumelleAval", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var serieParameter = serie.HasValue ?
                new ObjectParameter("serie", serie) :
                new ObjectParameter("serie", typeof(decimal));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Avaliste_Delete_Result>("Avaliste_Delete", cpteJumelleAvalParameter, numeroContratParameter, montantParameter, descriptionParameter, dateCreationParameter, employeParameter, lect, errMsg, serieParameter, languageParameter, computerNameParameter);
        }
    
        public virtual int Avaliste_Insert(string cpteJumelleAval, string numeroContrat, Nullable<double> montant, Nullable<double> minBal, string description, Nullable<System.DateTime> dateCreation, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var cpteJumelleAvalParameter = cpteJumelleAval != null ?
                new ObjectParameter("CpteJumelleAval", cpteJumelleAval) :
                new ObjectParameter("CpteJumelleAval", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var minBalParameter = minBal.HasValue ?
                new ObjectParameter("MinBal", minBal) :
                new ObjectParameter("MinBal", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Avaliste_Insert", cpteJumelleAvalParameter, numeroContratParameter, montantParameter, minBalParameter, descriptionParameter, dateCreationParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual ObjectResult<Avaliste_Reverse_Result> Avaliste_Reverse(string cpteJumelleAval, string cpteJumelle, string agence, string libAgence, string type, string numeroContrat, Nullable<double> montant, string description, Nullable<System.DateTime> dateCreation, string employe, ObjectParameter lect, ObjectParameter errMsg, Nullable<decimal> serie, string language, string computerName, string denominationAval, string agenceAval, string libAgenceAval, string libEmploye, string devise, string denomination, string libDevise)
        {
            var cpteJumelleAvalParameter = cpteJumelleAval != null ?
                new ObjectParameter("CpteJumelleAval", cpteJumelleAval) :
                new ObjectParameter("CpteJumelleAval", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var serieParameter = serie.HasValue ?
                new ObjectParameter("serie", serie) :
                new ObjectParameter("serie", typeof(decimal));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var denominationAvalParameter = denominationAval != null ?
                new ObjectParameter("DenominationAval", denominationAval) :
                new ObjectParameter("DenominationAval", typeof(string));
    
            var agenceAvalParameter = agenceAval != null ?
                new ObjectParameter("AgenceAval", agenceAval) :
                new ObjectParameter("AgenceAval", typeof(string));
    
            var libAgenceAvalParameter = libAgenceAval != null ?
                new ObjectParameter("LibAgenceAval", libAgenceAval) :
                new ObjectParameter("LibAgenceAval", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Avaliste_Reverse_Result>("Avaliste_Reverse", cpteJumelleAvalParameter, cpteJumelleParameter, agenceParameter, libAgenceParameter, typeParameter, numeroContratParameter, montantParameter, descriptionParameter, dateCreationParameter, employeParameter, lect, errMsg, serieParameter, languageParameter, computerNameParameter, denominationAvalParameter, agenceAvalParameter, libAgenceAvalParameter, libEmployeParameter, deviseParameter, denominationParameter, libDeviseParameter);
        }
    
        public virtual ObjectResult<Avaliste_Update_Result> Avaliste_Update(string cpteJumelleAval, string numeroContrat, Nullable<double> montant, string description, Nullable<System.DateTime> dateCreation, string employe, Nullable<double> minBal, ObjectParameter lect, ObjectParameter errMsg, Nullable<decimal> serie, string language, string computerName)
        {
            var cpteJumelleAvalParameter = cpteJumelleAval != null ?
                new ObjectParameter("CpteJumelleAval", cpteJumelleAval) :
                new ObjectParameter("CpteJumelleAval", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var minBalParameter = minBal.HasValue ?
                new ObjectParameter("MinBal", minBal) :
                new ObjectParameter("MinBal", typeof(double));
    
            var serieParameter = serie.HasValue ?
                new ObjectParameter("serie", serie) :
                new ObjectParameter("serie", typeof(decimal));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Avaliste_Update_Result>("Avaliste_Update", cpteJumelleAvalParameter, numeroContratParameter, montantParameter, descriptionParameter, dateCreationParameter, employeParameter, minBalParameter, lect, errMsg, serieParameter, languageParameter, computerNameParameter);
        }
    
        public virtual int Billetage_Delete(string typeBillet, Nullable<int> coupure, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var typeBilletParameter = typeBillet != null ?
                new ObjectParameter("TypeBillet", typeBillet) :
                new ObjectParameter("TypeBillet", typeof(string));
    
            var coupureParameter = coupure.HasValue ?
                new ObjectParameter("Coupure", coupure) :
                new ObjectParameter("Coupure", typeof(int));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Billetage_Delete", typeBilletParameter, coupureParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int Billetage_Insert(Nullable<int> coupure, string typeBillet, string devise, string libType, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var coupureParameter = coupure.HasValue ?
                new ObjectParameter("Coupure", coupure) :
                new ObjectParameter("Coupure", typeof(int));
    
            var typeBilletParameter = typeBillet != null ?
                new ObjectParameter("TypeBillet", typeBillet) :
                new ObjectParameter("TypeBillet", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("devise", devise) :
                new ObjectParameter("devise", typeof(string));
    
            var libTypeParameter = libType != null ?
                new ObjectParameter("LibType", libType) :
                new ObjectParameter("LibType", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Billetage_Insert", coupureParameter, typeBilletParameter, deviseParameter, libTypeParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int Billetage_Update(Nullable<int> coupure, string typeBillet, string devise, string libType, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var coupureParameter = coupure.HasValue ?
                new ObjectParameter("Coupure", coupure) :
                new ObjectParameter("Coupure", typeof(int));
    
            var typeBilletParameter = typeBillet != null ?
                new ObjectParameter("TypeBillet", typeBillet) :
                new ObjectParameter("TypeBillet", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("devise", devise) :
                new ObjectParameter("devise", typeof(string));
    
            var libTypeParameter = libType != null ?
                new ObjectParameter("LibType", libType) :
                new ObjectParameter("LibType", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Billetage_Update", coupureParameter, typeBilletParameter, deviseParameter, libTypeParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int BillingList_Delete(string pc_CODEOP, Nullable<int> pi_ProductCode, Nullable<int> pi_SlaveProductCode, string pc_CatClient, string pc_TYPEOP, string matricule, string computername, ObjectParameter lect, string pc_CustomerType, ObjectParameter errMsg, string language)
        {
            var pc_CODEOPParameter = pc_CODEOP != null ?
                new ObjectParameter("Pc_CODEOP", pc_CODEOP) :
                new ObjectParameter("Pc_CODEOP", typeof(string));
    
            var pi_ProductCodeParameter = pi_ProductCode.HasValue ?
                new ObjectParameter("Pi_ProductCode", pi_ProductCode) :
                new ObjectParameter("Pi_ProductCode", typeof(int));
    
            var pi_SlaveProductCodeParameter = pi_SlaveProductCode.HasValue ?
                new ObjectParameter("Pi_SlaveProductCode", pi_SlaveProductCode) :
                new ObjectParameter("Pi_SlaveProductCode", typeof(int));
    
            var pc_CatClientParameter = pc_CatClient != null ?
                new ObjectParameter("Pc_CatClient", pc_CatClient) :
                new ObjectParameter("Pc_CatClient", typeof(string));
    
            var pc_TYPEOPParameter = pc_TYPEOP != null ?
                new ObjectParameter("Pc_TYPEOP", pc_TYPEOP) :
                new ObjectParameter("Pc_TYPEOP", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var pc_CustomerTypeParameter = pc_CustomerType != null ?
                new ObjectParameter("Pc_CustomerType", pc_CustomerType) :
                new ObjectParameter("Pc_CustomerType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BillingList_Delete", pc_CODEOPParameter, pi_ProductCodeParameter, pi_SlaveProductCodeParameter, pc_CatClientParameter, pc_TYPEOPParameter, matriculeParameter, computernameParameter, lect, pc_CustomerTypeParameter, errMsg, languageParameter);
        }
    
        public virtual int BillingList_Insert(string pc_CODEOP, string pc_JNLCODE, string pc_COMPTE, string pc_TRCODE, string pc_CatClient, Nullable<int> pi_ProductCode, string pc_TYPEOP, string pc_LIBELLEOP, Nullable<double> pf_AMOUNT, Nullable<double> pf_TAUX, string pb_APPLYVAT, string pc_FLAGAMTTAUXPLAGE, string pc_FLAGPRODATTRIB, string pc_MODEOP, string pc_SENSOP, string pc_PERIODICITE, string matricule, string computername, string pc_PROFGROUPNAME, string pc_PROFITYPE, string pc_PROFITABILITYNAME, string pc_PROFITDESCRIPTION, Nullable<int> pi_SlaveProductCode, string pc_SlaveProductDesc, string pc_CustomerType, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var pc_CODEOPParameter = pc_CODEOP != null ?
                new ObjectParameter("Pc_CODEOP", pc_CODEOP) :
                new ObjectParameter("Pc_CODEOP", typeof(string));
    
            var pc_JNLCODEParameter = pc_JNLCODE != null ?
                new ObjectParameter("Pc_JNLCODE", pc_JNLCODE) :
                new ObjectParameter("Pc_JNLCODE", typeof(string));
    
            var pc_COMPTEParameter = pc_COMPTE != null ?
                new ObjectParameter("Pc_COMPTE", pc_COMPTE) :
                new ObjectParameter("Pc_COMPTE", typeof(string));
    
            var pc_TRCODEParameter = pc_TRCODE != null ?
                new ObjectParameter("Pc_TRCODE", pc_TRCODE) :
                new ObjectParameter("Pc_TRCODE", typeof(string));
    
            var pc_CatClientParameter = pc_CatClient != null ?
                new ObjectParameter("Pc_CatClient", pc_CatClient) :
                new ObjectParameter("Pc_CatClient", typeof(string));
    
            var pi_ProductCodeParameter = pi_ProductCode.HasValue ?
                new ObjectParameter("Pi_ProductCode", pi_ProductCode) :
                new ObjectParameter("Pi_ProductCode", typeof(int));
    
            var pc_TYPEOPParameter = pc_TYPEOP != null ?
                new ObjectParameter("Pc_TYPEOP", pc_TYPEOP) :
                new ObjectParameter("Pc_TYPEOP", typeof(string));
    
            var pc_LIBELLEOPParameter = pc_LIBELLEOP != null ?
                new ObjectParameter("Pc_LIBELLEOP", pc_LIBELLEOP) :
                new ObjectParameter("Pc_LIBELLEOP", typeof(string));
    
            var pf_AMOUNTParameter = pf_AMOUNT.HasValue ?
                new ObjectParameter("Pf_AMOUNT", pf_AMOUNT) :
                new ObjectParameter("Pf_AMOUNT", typeof(double));
    
            var pf_TAUXParameter = pf_TAUX.HasValue ?
                new ObjectParameter("Pf_TAUX", pf_TAUX) :
                new ObjectParameter("Pf_TAUX", typeof(double));
    
            var pb_APPLYVATParameter = pb_APPLYVAT != null ?
                new ObjectParameter("Pb_APPLYVAT", pb_APPLYVAT) :
                new ObjectParameter("Pb_APPLYVAT", typeof(string));
    
            var pc_FLAGAMTTAUXPLAGEParameter = pc_FLAGAMTTAUXPLAGE != null ?
                new ObjectParameter("Pc_FLAGAMTTAUXPLAGE", pc_FLAGAMTTAUXPLAGE) :
                new ObjectParameter("Pc_FLAGAMTTAUXPLAGE", typeof(string));
    
            var pc_FLAGPRODATTRIBParameter = pc_FLAGPRODATTRIB != null ?
                new ObjectParameter("Pc_FLAGPRODATTRIB", pc_FLAGPRODATTRIB) :
                new ObjectParameter("Pc_FLAGPRODATTRIB", typeof(string));
    
            var pc_MODEOPParameter = pc_MODEOP != null ?
                new ObjectParameter("Pc_MODEOP", pc_MODEOP) :
                new ObjectParameter("Pc_MODEOP", typeof(string));
    
            var pc_SENSOPParameter = pc_SENSOP != null ?
                new ObjectParameter("Pc_SENSOP", pc_SENSOP) :
                new ObjectParameter("Pc_SENSOP", typeof(string));
    
            var pc_PERIODICITEParameter = pc_PERIODICITE != null ?
                new ObjectParameter("Pc_PERIODICITE", pc_PERIODICITE) :
                new ObjectParameter("Pc_PERIODICITE", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var pc_PROFGROUPNAMEParameter = pc_PROFGROUPNAME != null ?
                new ObjectParameter("Pc_PROFGROUPNAME", pc_PROFGROUPNAME) :
                new ObjectParameter("Pc_PROFGROUPNAME", typeof(string));
    
            var pc_PROFITYPEParameter = pc_PROFITYPE != null ?
                new ObjectParameter("Pc_PROFITYPE", pc_PROFITYPE) :
                new ObjectParameter("Pc_PROFITYPE", typeof(string));
    
            var pc_PROFITABILITYNAMEParameter = pc_PROFITABILITYNAME != null ?
                new ObjectParameter("Pc_PROFITABILITYNAME", pc_PROFITABILITYNAME) :
                new ObjectParameter("Pc_PROFITABILITYNAME", typeof(string));
    
            var pc_PROFITDESCRIPTIONParameter = pc_PROFITDESCRIPTION != null ?
                new ObjectParameter("Pc_PROFITDESCRIPTION", pc_PROFITDESCRIPTION) :
                new ObjectParameter("Pc_PROFITDESCRIPTION", typeof(string));
    
            var pi_SlaveProductCodeParameter = pi_SlaveProductCode.HasValue ?
                new ObjectParameter("Pi_SlaveProductCode", pi_SlaveProductCode) :
                new ObjectParameter("Pi_SlaveProductCode", typeof(int));
    
            var pc_SlaveProductDescParameter = pc_SlaveProductDesc != null ?
                new ObjectParameter("Pc_SlaveProductDesc", pc_SlaveProductDesc) :
                new ObjectParameter("Pc_SlaveProductDesc", typeof(string));
    
            var pc_CustomerTypeParameter = pc_CustomerType != null ?
                new ObjectParameter("Pc_CustomerType", pc_CustomerType) :
                new ObjectParameter("Pc_CustomerType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BillingList_Insert", pc_CODEOPParameter, pc_JNLCODEParameter, pc_COMPTEParameter, pc_TRCODEParameter, pc_CatClientParameter, pi_ProductCodeParameter, pc_TYPEOPParameter, pc_LIBELLEOPParameter, pf_AMOUNTParameter, pf_TAUXParameter, pb_APPLYVATParameter, pc_FLAGAMTTAUXPLAGEParameter, pc_FLAGPRODATTRIBParameter, pc_MODEOPParameter, pc_SENSOPParameter, pc_PERIODICITEParameter, matriculeParameter, computernameParameter, pc_PROFGROUPNAMEParameter, pc_PROFITYPEParameter, pc_PROFITABILITYNAMEParameter, pc_PROFITDESCRIPTIONParameter, pi_SlaveProductCodeParameter, pc_SlaveProductDescParameter, pc_CustomerTypeParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int BillingList_Update(string pc_CODEOP, string pc_JNLCODE, string pc_COMPTE, string pc_TRCODE, string pc_CatClient, Nullable<int> pi_ProductCode, string pc_TYPEOP, string pc_LIBELLEOP, Nullable<double> pf_AMOUNT, Nullable<double> pf_TAUX, string pb_APPLYVAT, string pc_FLAGAMTTAUXPLAGE, string pc_FLAGPRODATTRIB, string pc_MODEOP, string pc_SENSOP, string pc_PERIODICITE, string matricule, string computername, string pc_PROFGROUPNAME, string pc_PROFITYPE, string pc_PROFITABILITYNAME, string pc_PROFITDESCRIPTION, Nullable<int> pi_SlaveProductCode, string pc_SlaveProductDesc, string pc_CustomerType, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var pc_CODEOPParameter = pc_CODEOP != null ?
                new ObjectParameter("Pc_CODEOP", pc_CODEOP) :
                new ObjectParameter("Pc_CODEOP", typeof(string));
    
            var pc_JNLCODEParameter = pc_JNLCODE != null ?
                new ObjectParameter("Pc_JNLCODE", pc_JNLCODE) :
                new ObjectParameter("Pc_JNLCODE", typeof(string));
    
            var pc_COMPTEParameter = pc_COMPTE != null ?
                new ObjectParameter("Pc_COMPTE", pc_COMPTE) :
                new ObjectParameter("Pc_COMPTE", typeof(string));
    
            var pc_TRCODEParameter = pc_TRCODE != null ?
                new ObjectParameter("Pc_TRCODE", pc_TRCODE) :
                new ObjectParameter("Pc_TRCODE", typeof(string));
    
            var pc_CatClientParameter = pc_CatClient != null ?
                new ObjectParameter("Pc_CatClient", pc_CatClient) :
                new ObjectParameter("Pc_CatClient", typeof(string));
    
            var pi_ProductCodeParameter = pi_ProductCode.HasValue ?
                new ObjectParameter("Pi_ProductCode", pi_ProductCode) :
                new ObjectParameter("Pi_ProductCode", typeof(int));
    
            var pc_TYPEOPParameter = pc_TYPEOP != null ?
                new ObjectParameter("Pc_TYPEOP", pc_TYPEOP) :
                new ObjectParameter("Pc_TYPEOP", typeof(string));
    
            var pc_LIBELLEOPParameter = pc_LIBELLEOP != null ?
                new ObjectParameter("Pc_LIBELLEOP", pc_LIBELLEOP) :
                new ObjectParameter("Pc_LIBELLEOP", typeof(string));
    
            var pf_AMOUNTParameter = pf_AMOUNT.HasValue ?
                new ObjectParameter("Pf_AMOUNT", pf_AMOUNT) :
                new ObjectParameter("Pf_AMOUNT", typeof(double));
    
            var pf_TAUXParameter = pf_TAUX.HasValue ?
                new ObjectParameter("Pf_TAUX", pf_TAUX) :
                new ObjectParameter("Pf_TAUX", typeof(double));
    
            var pb_APPLYVATParameter = pb_APPLYVAT != null ?
                new ObjectParameter("Pb_APPLYVAT", pb_APPLYVAT) :
                new ObjectParameter("Pb_APPLYVAT", typeof(string));
    
            var pc_FLAGAMTTAUXPLAGEParameter = pc_FLAGAMTTAUXPLAGE != null ?
                new ObjectParameter("Pc_FLAGAMTTAUXPLAGE", pc_FLAGAMTTAUXPLAGE) :
                new ObjectParameter("Pc_FLAGAMTTAUXPLAGE", typeof(string));
    
            var pc_FLAGPRODATTRIBParameter = pc_FLAGPRODATTRIB != null ?
                new ObjectParameter("Pc_FLAGPRODATTRIB", pc_FLAGPRODATTRIB) :
                new ObjectParameter("Pc_FLAGPRODATTRIB", typeof(string));
    
            var pc_MODEOPParameter = pc_MODEOP != null ?
                new ObjectParameter("Pc_MODEOP", pc_MODEOP) :
                new ObjectParameter("Pc_MODEOP", typeof(string));
    
            var pc_SENSOPParameter = pc_SENSOP != null ?
                new ObjectParameter("Pc_SENSOP", pc_SENSOP) :
                new ObjectParameter("Pc_SENSOP", typeof(string));
    
            var pc_PERIODICITEParameter = pc_PERIODICITE != null ?
                new ObjectParameter("Pc_PERIODICITE", pc_PERIODICITE) :
                new ObjectParameter("Pc_PERIODICITE", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var pc_PROFGROUPNAMEParameter = pc_PROFGROUPNAME != null ?
                new ObjectParameter("Pc_PROFGROUPNAME", pc_PROFGROUPNAME) :
                new ObjectParameter("Pc_PROFGROUPNAME", typeof(string));
    
            var pc_PROFITYPEParameter = pc_PROFITYPE != null ?
                new ObjectParameter("Pc_PROFITYPE", pc_PROFITYPE) :
                new ObjectParameter("Pc_PROFITYPE", typeof(string));
    
            var pc_PROFITABILITYNAMEParameter = pc_PROFITABILITYNAME != null ?
                new ObjectParameter("Pc_PROFITABILITYNAME", pc_PROFITABILITYNAME) :
                new ObjectParameter("Pc_PROFITABILITYNAME", typeof(string));
    
            var pc_PROFITDESCRIPTIONParameter = pc_PROFITDESCRIPTION != null ?
                new ObjectParameter("Pc_PROFITDESCRIPTION", pc_PROFITDESCRIPTION) :
                new ObjectParameter("Pc_PROFITDESCRIPTION", typeof(string));
    
            var pi_SlaveProductCodeParameter = pi_SlaveProductCode.HasValue ?
                new ObjectParameter("Pi_SlaveProductCode", pi_SlaveProductCode) :
                new ObjectParameter("Pi_SlaveProductCode", typeof(int));
    
            var pc_SlaveProductDescParameter = pc_SlaveProductDesc != null ?
                new ObjectParameter("Pc_SlaveProductDesc", pc_SlaveProductDesc) :
                new ObjectParameter("Pc_SlaveProductDesc", typeof(string));
    
            var pc_CustomerTypeParameter = pc_CustomerType != null ?
                new ObjectParameter("Pc_CustomerType", pc_CustomerType) :
                new ObjectParameter("Pc_CustomerType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BillingList_Update", pc_CODEOPParameter, pc_JNLCODEParameter, pc_COMPTEParameter, pc_TRCODEParameter, pc_CatClientParameter, pi_ProductCodeParameter, pc_TYPEOPParameter, pc_LIBELLEOPParameter, pf_AMOUNTParameter, pf_TAUXParameter, pb_APPLYVATParameter, pc_FLAGAMTTAUXPLAGEParameter, pc_FLAGPRODATTRIBParameter, pc_MODEOPParameter, pc_SENSOPParameter, pc_PERIODICITEParameter, matriculeParameter, computernameParameter, pc_PROFGROUPNAMEParameter, pc_PROFITYPEParameter, pc_PROFITABILITYNAMEParameter, pc_PROFITDESCRIPTIONParameter, pi_SlaveProductCodeParameter, pc_SlaveProductDescParameter, pc_CustomerTypeParameter, lect, errMsg, languageParameter);
        }
    
        public virtual ObjectResult<BonCaisse_Delete_Result> BonCaisse_Delete(string libAgence, string agence, string numeroContrat, string employe, string libEmploye, ObjectParameter lect, string computerName, string language)
        {
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BonCaisse_Delete_Result>("BonCaisse_Delete", libAgenceParameter, agenceParameter, numeroContratParameter, employeParameter, libEmployeParameter, lect, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<BonCaisse_Filter_Result> BonCaisse_Filter(Nullable<short> intFilterMode, string agence, string numeroContrat, ObjectParameter countfield)
        {
            var intFilterModeParameter = intFilterMode.HasValue ?
                new ObjectParameter("IntFilterMode", intFilterMode) :
                new ObjectParameter("IntFilterMode", typeof(short));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BonCaisse_Filter_Result>("BonCaisse_Filter", intFilterModeParameter, agenceParameter, numeroContratParameter, countfield);
        }
    
        public virtual ObjectResult<BonCaisse_Insert_S_Tran_Result> BonCaisse_Insert_S_Tran(string agence, string client, string denomination, string cpteJumelleCC, Nullable<short> catCpte, string cpteJumelleCpteTerm, string cpteGL, string cleCpte, Nullable<double> montant, Nullable<double> tauxInt, Nullable<double> txTVA, Nullable<double> txTPRCM, Nullable<System.DateTime> dateContrat, Nullable<System.DateTime> datePriseEffet, Nullable<short> duree, Nullable<System.DateTime> dateDernCalInt, Nullable<double> cumulIntMensuel, Nullable<double> interetCouru, Nullable<double> interetMois, string modePayInt, Nullable<System.DateTime> dateExpiration, string numeroContrat, Nullable<short> nbreSign, Nullable<System.DateTime> dateCptaTerm, Nullable<System.DateTime> dateCptaInteret, Nullable<System.DateTime> dateCptaRemb, string statut, string calfrequency, Nullable<System.DateTime> dateRemb, Nullable<double> tauxPenalite, Nullable<double> mtPenalite, Nullable<short> nbreReconduit, Nullable<System.DateTime> dateDerniereRecond, string libAgence, string libCatCpte, string description, Nullable<System.DateTime> dateCreation, string employe, string libEmploye, Nullable<System.DateTime> dateVals, Nullable<System.DateTime> dateCptaMens, Nullable<int> dureecourue, Nullable<double> currentintamount, Nullable<double> totalCapitalise, string capitalInt, string libCpteGl, string titrepaye, Nullable<System.DateTime> datepymttitre, Nullable<double> mtInteret, string txnNo, Nullable<double> supInt, Nullable<double> interetDu, Nullable<System.DateTime> dateTransfert, string caisseCpte, ObjectParameter lect, Nullable<double> tPRCM, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var cpteJumelleCpteTermParameter = cpteJumelleCpteTerm != null ?
                new ObjectParameter("CpteJumelleCpteTerm", cpteJumelleCpteTerm) :
                new ObjectParameter("CpteJumelleCpteTerm", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var tauxIntParameter = tauxInt.HasValue ?
                new ObjectParameter("TauxInt", tauxInt) :
                new ObjectParameter("TauxInt", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var txTPRCMParameter = txTPRCM.HasValue ?
                new ObjectParameter("TxTPRCM", txTPRCM) :
                new ObjectParameter("TxTPRCM", typeof(double));
    
            var dateContratParameter = dateContrat.HasValue ?
                new ObjectParameter("DateContrat", dateContrat) :
                new ObjectParameter("DateContrat", typeof(System.DateTime));
    
            var datePriseEffetParameter = datePriseEffet.HasValue ?
                new ObjectParameter("DatePriseEffet", datePriseEffet) :
                new ObjectParameter("DatePriseEffet", typeof(System.DateTime));
    
            var dureeParameter = duree.HasValue ?
                new ObjectParameter("Duree", duree) :
                new ObjectParameter("Duree", typeof(short));
    
            var dateDernCalIntParameter = dateDernCalInt.HasValue ?
                new ObjectParameter("DateDernCalInt", dateDernCalInt) :
                new ObjectParameter("DateDernCalInt", typeof(System.DateTime));
    
            var cumulIntMensuelParameter = cumulIntMensuel.HasValue ?
                new ObjectParameter("CumulIntMensuel", cumulIntMensuel) :
                new ObjectParameter("CumulIntMensuel", typeof(double));
    
            var interetCouruParameter = interetCouru.HasValue ?
                new ObjectParameter("InteretCouru", interetCouru) :
                new ObjectParameter("InteretCouru", typeof(double));
    
            var interetMoisParameter = interetMois.HasValue ?
                new ObjectParameter("InteretMois", interetMois) :
                new ObjectParameter("InteretMois", typeof(double));
    
            var modePayIntParameter = modePayInt != null ?
                new ObjectParameter("ModePayInt", modePayInt) :
                new ObjectParameter("ModePayInt", typeof(string));
    
            var dateExpirationParameter = dateExpiration.HasValue ?
                new ObjectParameter("DateExpiration", dateExpiration) :
                new ObjectParameter("DateExpiration", typeof(System.DateTime));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var nbreSignParameter = nbreSign.HasValue ?
                new ObjectParameter("NbreSign", nbreSign) :
                new ObjectParameter("NbreSign", typeof(short));
    
            var dateCptaTermParameter = dateCptaTerm.HasValue ?
                new ObjectParameter("DateCptaTerm", dateCptaTerm) :
                new ObjectParameter("DateCptaTerm", typeof(System.DateTime));
    
            var dateCptaInteretParameter = dateCptaInteret.HasValue ?
                new ObjectParameter("DateCptaInteret", dateCptaInteret) :
                new ObjectParameter("DateCptaInteret", typeof(System.DateTime));
    
            var dateCptaRembParameter = dateCptaRemb.HasValue ?
                new ObjectParameter("DateCptaRemb", dateCptaRemb) :
                new ObjectParameter("DateCptaRemb", typeof(System.DateTime));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var calfrequencyParameter = calfrequency != null ?
                new ObjectParameter("calfrequency", calfrequency) :
                new ObjectParameter("calfrequency", typeof(string));
    
            var dateRembParameter = dateRemb.HasValue ?
                new ObjectParameter("DateRemb", dateRemb) :
                new ObjectParameter("DateRemb", typeof(System.DateTime));
    
            var tauxPenaliteParameter = tauxPenalite.HasValue ?
                new ObjectParameter("TauxPenalite", tauxPenalite) :
                new ObjectParameter("TauxPenalite", typeof(double));
    
            var mtPenaliteParameter = mtPenalite.HasValue ?
                new ObjectParameter("MtPenalite", mtPenalite) :
                new ObjectParameter("MtPenalite", typeof(double));
    
            var nbreReconduitParameter = nbreReconduit.HasValue ?
                new ObjectParameter("NbreReconduit", nbreReconduit) :
                new ObjectParameter("NbreReconduit", typeof(short));
    
            var dateDerniereRecondParameter = dateDerniereRecond.HasValue ?
                new ObjectParameter("DateDerniereRecond", dateDerniereRecond) :
                new ObjectParameter("DateDerniereRecond", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libCatCpteParameter = libCatCpte != null ?
                new ObjectParameter("LibCatCpte", libCatCpte) :
                new ObjectParameter("LibCatCpte", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var dateValsParameter = dateVals.HasValue ?
                new ObjectParameter("DateVals", dateVals) :
                new ObjectParameter("DateVals", typeof(System.DateTime));
    
            var dateCptaMensParameter = dateCptaMens.HasValue ?
                new ObjectParameter("DateCptaMens", dateCptaMens) :
                new ObjectParameter("DateCptaMens", typeof(System.DateTime));
    
            var dureecourueParameter = dureecourue.HasValue ?
                new ObjectParameter("dureecourue", dureecourue) :
                new ObjectParameter("dureecourue", typeof(int));
    
            var currentintamountParameter = currentintamount.HasValue ?
                new ObjectParameter("currentintamount", currentintamount) :
                new ObjectParameter("currentintamount", typeof(double));
    
            var totalCapitaliseParameter = totalCapitalise.HasValue ?
                new ObjectParameter("TotalCapitalise", totalCapitalise) :
                new ObjectParameter("TotalCapitalise", typeof(double));
    
            var capitalIntParameter = capitalInt != null ?
                new ObjectParameter("CapitalInt", capitalInt) :
                new ObjectParameter("CapitalInt", typeof(string));
    
            var libCpteGlParameter = libCpteGl != null ?
                new ObjectParameter("LibCpteGl", libCpteGl) :
                new ObjectParameter("LibCpteGl", typeof(string));
    
            var titrepayeParameter = titrepaye != null ?
                new ObjectParameter("titrepaye", titrepaye) :
                new ObjectParameter("titrepaye", typeof(string));
    
            var datepymttitreParameter = datepymttitre.HasValue ?
                new ObjectParameter("datepymttitre", datepymttitre) :
                new ObjectParameter("datepymttitre", typeof(System.DateTime));
    
            var mtInteretParameter = mtInteret.HasValue ?
                new ObjectParameter("MtInteret", mtInteret) :
                new ObjectParameter("MtInteret", typeof(double));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var supIntParameter = supInt.HasValue ?
                new ObjectParameter("SupInt", supInt) :
                new ObjectParameter("SupInt", typeof(double));
    
            var interetDuParameter = interetDu.HasValue ?
                new ObjectParameter("InteretDu", interetDu) :
                new ObjectParameter("InteretDu", typeof(double));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var caisseCpteParameter = caisseCpte != null ?
                new ObjectParameter("CaisseCpte", caisseCpte) :
                new ObjectParameter("CaisseCpte", typeof(string));
    
            var tPRCMParameter = tPRCM.HasValue ?
                new ObjectParameter("TPRCM", tPRCM) :
                new ObjectParameter("TPRCM", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BonCaisse_Insert_S_Tran_Result>("BonCaisse_Insert_S_Tran", agenceParameter, clientParameter, denominationParameter, cpteJumelleCCParameter, catCpteParameter, cpteJumelleCpteTermParameter, cpteGLParameter, cleCpteParameter, montantParameter, tauxIntParameter, txTVAParameter, txTPRCMParameter, dateContratParameter, datePriseEffetParameter, dureeParameter, dateDernCalIntParameter, cumulIntMensuelParameter, interetCouruParameter, interetMoisParameter, modePayIntParameter, dateExpirationParameter, numeroContratParameter, nbreSignParameter, dateCptaTermParameter, dateCptaInteretParameter, dateCptaRembParameter, statutParameter, calfrequencyParameter, dateRembParameter, tauxPenaliteParameter, mtPenaliteParameter, nbreReconduitParameter, dateDerniereRecondParameter, libAgenceParameter, libCatCpteParameter, descriptionParameter, dateCreationParameter, employeParameter, libEmployeParameter, dateValsParameter, dateCptaMensParameter, dureecourueParameter, currentintamountParameter, totalCapitaliseParameter, capitalIntParameter, libCpteGlParameter, titrepayeParameter, datepymttitreParameter, mtInteretParameter, txnNoParameter, supIntParameter, interetDuParameter, dateTransfertParameter, caisseCpteParameter, lect, tPRCMParameter, languageParameter);
        }
    
        public virtual ObjectResult<BonCaisse_Update_Result> BonCaisse_Update(string agence, string client, string denomination, string cpteJumelleCC, Nullable<short> catCpte, string cpteJumelleCpteTerm, string cpteGL, string cleCpte, Nullable<double> montant, Nullable<double> tauxInt, Nullable<double> txTVA, Nullable<double> txTPRCM, Nullable<System.DateTime> dateContrat, Nullable<System.DateTime> datePriseEffet, Nullable<short> duree, Nullable<System.DateTime> dateDernCalInt, Nullable<double> cumulIntMensuel, Nullable<double> interetCouru, Nullable<double> interetMois, string modePayInt, Nullable<System.DateTime> dateExpiration, string numeroContrat, Nullable<short> nbreSign, Nullable<System.DateTime> dateCptaTerm, Nullable<System.DateTime> dateCptaInteret, Nullable<System.DateTime> dateCptaRemb, string statut, string calfrequency, Nullable<System.DateTime> dateRemb, Nullable<double> tauxPenalite, Nullable<double> mtPenalite, Nullable<short> nbreReconduit, Nullable<System.DateTime> dateDerniereRecond, string libAgence, string libCatCpte, string description, Nullable<System.DateTime> dateCreation, string employe, string libEmploye, Nullable<System.DateTime> dateVals, Nullable<System.DateTime> dateCptaMens, Nullable<int> dureecourue, Nullable<double> currentintamount, Nullable<double> totalCapitalise, string capitalInt, string libCpteGl, string titrepaye, Nullable<System.DateTime> datepymttitre, Nullable<double> mtInteret, string txnNo, Nullable<double> supInt, Nullable<double> interetDu, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, string caissecpte, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var cpteJumelleCpteTermParameter = cpteJumelleCpteTerm != null ?
                new ObjectParameter("CpteJumelleCpteTerm", cpteJumelleCpteTerm) :
                new ObjectParameter("CpteJumelleCpteTerm", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var tauxIntParameter = tauxInt.HasValue ?
                new ObjectParameter("TauxInt", tauxInt) :
                new ObjectParameter("TauxInt", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var txTPRCMParameter = txTPRCM.HasValue ?
                new ObjectParameter("TxTPRCM", txTPRCM) :
                new ObjectParameter("TxTPRCM", typeof(double));
    
            var dateContratParameter = dateContrat.HasValue ?
                new ObjectParameter("DateContrat", dateContrat) :
                new ObjectParameter("DateContrat", typeof(System.DateTime));
    
            var datePriseEffetParameter = datePriseEffet.HasValue ?
                new ObjectParameter("DatePriseEffet", datePriseEffet) :
                new ObjectParameter("DatePriseEffet", typeof(System.DateTime));
    
            var dureeParameter = duree.HasValue ?
                new ObjectParameter("Duree", duree) :
                new ObjectParameter("Duree", typeof(short));
    
            var dateDernCalIntParameter = dateDernCalInt.HasValue ?
                new ObjectParameter("DateDernCalInt", dateDernCalInt) :
                new ObjectParameter("DateDernCalInt", typeof(System.DateTime));
    
            var cumulIntMensuelParameter = cumulIntMensuel.HasValue ?
                new ObjectParameter("CumulIntMensuel", cumulIntMensuel) :
                new ObjectParameter("CumulIntMensuel", typeof(double));
    
            var interetCouruParameter = interetCouru.HasValue ?
                new ObjectParameter("InteretCouru", interetCouru) :
                new ObjectParameter("InteretCouru", typeof(double));
    
            var interetMoisParameter = interetMois.HasValue ?
                new ObjectParameter("InteretMois", interetMois) :
                new ObjectParameter("InteretMois", typeof(double));
    
            var modePayIntParameter = modePayInt != null ?
                new ObjectParameter("ModePayInt", modePayInt) :
                new ObjectParameter("ModePayInt", typeof(string));
    
            var dateExpirationParameter = dateExpiration.HasValue ?
                new ObjectParameter("DateExpiration", dateExpiration) :
                new ObjectParameter("DateExpiration", typeof(System.DateTime));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var nbreSignParameter = nbreSign.HasValue ?
                new ObjectParameter("NbreSign", nbreSign) :
                new ObjectParameter("NbreSign", typeof(short));
    
            var dateCptaTermParameter = dateCptaTerm.HasValue ?
                new ObjectParameter("DateCptaTerm", dateCptaTerm) :
                new ObjectParameter("DateCptaTerm", typeof(System.DateTime));
    
            var dateCptaInteretParameter = dateCptaInteret.HasValue ?
                new ObjectParameter("DateCptaInteret", dateCptaInteret) :
                new ObjectParameter("DateCptaInteret", typeof(System.DateTime));
    
            var dateCptaRembParameter = dateCptaRemb.HasValue ?
                new ObjectParameter("DateCptaRemb", dateCptaRemb) :
                new ObjectParameter("DateCptaRemb", typeof(System.DateTime));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var calfrequencyParameter = calfrequency != null ?
                new ObjectParameter("calfrequency", calfrequency) :
                new ObjectParameter("calfrequency", typeof(string));
    
            var dateRembParameter = dateRemb.HasValue ?
                new ObjectParameter("DateRemb", dateRemb) :
                new ObjectParameter("DateRemb", typeof(System.DateTime));
    
            var tauxPenaliteParameter = tauxPenalite.HasValue ?
                new ObjectParameter("TauxPenalite", tauxPenalite) :
                new ObjectParameter("TauxPenalite", typeof(double));
    
            var mtPenaliteParameter = mtPenalite.HasValue ?
                new ObjectParameter("MtPenalite", mtPenalite) :
                new ObjectParameter("MtPenalite", typeof(double));
    
            var nbreReconduitParameter = nbreReconduit.HasValue ?
                new ObjectParameter("NbreReconduit", nbreReconduit) :
                new ObjectParameter("NbreReconduit", typeof(short));
    
            var dateDerniereRecondParameter = dateDerniereRecond.HasValue ?
                new ObjectParameter("DateDerniereRecond", dateDerniereRecond) :
                new ObjectParameter("DateDerniereRecond", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libCatCpteParameter = libCatCpte != null ?
                new ObjectParameter("LibCatCpte", libCatCpte) :
                new ObjectParameter("LibCatCpte", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var dateValsParameter = dateVals.HasValue ?
                new ObjectParameter("DateVals", dateVals) :
                new ObjectParameter("DateVals", typeof(System.DateTime));
    
            var dateCptaMensParameter = dateCptaMens.HasValue ?
                new ObjectParameter("DateCptaMens", dateCptaMens) :
                new ObjectParameter("DateCptaMens", typeof(System.DateTime));
    
            var dureecourueParameter = dureecourue.HasValue ?
                new ObjectParameter("dureecourue", dureecourue) :
                new ObjectParameter("dureecourue", typeof(int));
    
            var currentintamountParameter = currentintamount.HasValue ?
                new ObjectParameter("Currentintamount", currentintamount) :
                new ObjectParameter("Currentintamount", typeof(double));
    
            var totalCapitaliseParameter = totalCapitalise.HasValue ?
                new ObjectParameter("TotalCapitalise", totalCapitalise) :
                new ObjectParameter("TotalCapitalise", typeof(double));
    
            var capitalIntParameter = capitalInt != null ?
                new ObjectParameter("CapitalInt", capitalInt) :
                new ObjectParameter("CapitalInt", typeof(string));
    
            var libCpteGlParameter = libCpteGl != null ?
                new ObjectParameter("LibCpteGl", libCpteGl) :
                new ObjectParameter("LibCpteGl", typeof(string));
    
            var titrepayeParameter = titrepaye != null ?
                new ObjectParameter("titrepaye", titrepaye) :
                new ObjectParameter("titrepaye", typeof(string));
    
            var datepymttitreParameter = datepymttitre.HasValue ?
                new ObjectParameter("datepymttitre", datepymttitre) :
                new ObjectParameter("datepymttitre", typeof(System.DateTime));
    
            var mtInteretParameter = mtInteret.HasValue ?
                new ObjectParameter("MtInteret", mtInteret) :
                new ObjectParameter("MtInteret", typeof(double));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var supIntParameter = supInt.HasValue ?
                new ObjectParameter("SupInt", supInt) :
                new ObjectParameter("SupInt", typeof(double));
    
            var interetDuParameter = interetDu.HasValue ?
                new ObjectParameter("InteretDu", interetDu) :
                new ObjectParameter("InteretDu", typeof(double));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var caissecpteParameter = caissecpte != null ?
                new ObjectParameter("caissecpte", caissecpte) :
                new ObjectParameter("caissecpte", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BonCaisse_Update_Result>("BonCaisse_Update", agenceParameter, clientParameter, denominationParameter, cpteJumelleCCParameter, catCpteParameter, cpteJumelleCpteTermParameter, cpteGLParameter, cleCpteParameter, montantParameter, tauxIntParameter, txTVAParameter, txTPRCMParameter, dateContratParameter, datePriseEffetParameter, dureeParameter, dateDernCalIntParameter, cumulIntMensuelParameter, interetCouruParameter, interetMoisParameter, modePayIntParameter, dateExpirationParameter, numeroContratParameter, nbreSignParameter, dateCptaTermParameter, dateCptaInteretParameter, dateCptaRembParameter, statutParameter, calfrequencyParameter, dateRembParameter, tauxPenaliteParameter, mtPenaliteParameter, nbreReconduitParameter, dateDerniereRecondParameter, libAgenceParameter, libCatCpteParameter, descriptionParameter, dateCreationParameter, employeParameter, libEmployeParameter, dateValsParameter, dateCptaMensParameter, dureecourueParameter, currentintamountParameter, totalCapitaliseParameter, capitalIntParameter, libCpteGlParameter, titrepayeParameter, datepymttitreParameter, mtInteretParameter, txnNoParameter, supIntParameter, interetDuParameter, dateTransfertParameter, lect, caissecpteParameter, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<BonCaisse_Update_S_Tran_Result> BonCaisse_Update_S_Tran(string agence, string client, string denomination, string cpteJumelleCC, Nullable<short> catCpte, string cpteJumelleCpteTerm, string cpteGL, string cleCpte, Nullable<double> montant, Nullable<double> tauxInt, Nullable<double> txTVA, Nullable<double> txTPRCM, Nullable<System.DateTime> dateContrat, Nullable<System.DateTime> datePriseEffet, Nullable<short> duree, Nullable<System.DateTime> dateDernCalInt, Nullable<double> cumulIntMensuel, Nullable<double> interetCouru, Nullable<double> interetMois, string modePayInt, Nullable<System.DateTime> dateExpiration, string numeroContrat, Nullable<short> nbreSign, Nullable<System.DateTime> dateCptaTerm, Nullable<System.DateTime> dateCptaInteret, Nullable<System.DateTime> dateCptaRemb, string statut, string calfrequency, Nullable<System.DateTime> dateRemb, Nullable<double> tauxPenalite, Nullable<double> mtPenalite, Nullable<short> nbreReconduit, Nullable<System.DateTime> dateDerniereRecond, string libAgence, string libCatCpte, string description, Nullable<System.DateTime> dateCreation, string employe, string libEmploye, Nullable<System.DateTime> dateVals, Nullable<System.DateTime> dateCptaMens, Nullable<int> dureecourue, Nullable<double> currentintamount, Nullable<double> totalCapitalise, string capitalInt, string libCpteGl, string titrepaye, Nullable<System.DateTime> datepymttitre, Nullable<double> mtInteret, string txnNo, Nullable<double> supInt, Nullable<double> interetDu, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, string statutMarch, string statutJune, string statutSeptember, string statutDecember, string caisseCpte, Nullable<double> wMtTPRCM, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var cpteJumelleCpteTermParameter = cpteJumelleCpteTerm != null ?
                new ObjectParameter("CpteJumelleCpteTerm", cpteJumelleCpteTerm) :
                new ObjectParameter("CpteJumelleCpteTerm", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var tauxIntParameter = tauxInt.HasValue ?
                new ObjectParameter("TauxInt", tauxInt) :
                new ObjectParameter("TauxInt", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var txTPRCMParameter = txTPRCM.HasValue ?
                new ObjectParameter("TxTPRCM", txTPRCM) :
                new ObjectParameter("TxTPRCM", typeof(double));
    
            var dateContratParameter = dateContrat.HasValue ?
                new ObjectParameter("DateContrat", dateContrat) :
                new ObjectParameter("DateContrat", typeof(System.DateTime));
    
            var datePriseEffetParameter = datePriseEffet.HasValue ?
                new ObjectParameter("DatePriseEffet", datePriseEffet) :
                new ObjectParameter("DatePriseEffet", typeof(System.DateTime));
    
            var dureeParameter = duree.HasValue ?
                new ObjectParameter("Duree", duree) :
                new ObjectParameter("Duree", typeof(short));
    
            var dateDernCalIntParameter = dateDernCalInt.HasValue ?
                new ObjectParameter("DateDernCalInt", dateDernCalInt) :
                new ObjectParameter("DateDernCalInt", typeof(System.DateTime));
    
            var cumulIntMensuelParameter = cumulIntMensuel.HasValue ?
                new ObjectParameter("CumulIntMensuel", cumulIntMensuel) :
                new ObjectParameter("CumulIntMensuel", typeof(double));
    
            var interetCouruParameter = interetCouru.HasValue ?
                new ObjectParameter("InteretCouru", interetCouru) :
                new ObjectParameter("InteretCouru", typeof(double));
    
            var interetMoisParameter = interetMois.HasValue ?
                new ObjectParameter("InteretMois", interetMois) :
                new ObjectParameter("InteretMois", typeof(double));
    
            var modePayIntParameter = modePayInt != null ?
                new ObjectParameter("ModePayInt", modePayInt) :
                new ObjectParameter("ModePayInt", typeof(string));
    
            var dateExpirationParameter = dateExpiration.HasValue ?
                new ObjectParameter("DateExpiration", dateExpiration) :
                new ObjectParameter("DateExpiration", typeof(System.DateTime));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var nbreSignParameter = nbreSign.HasValue ?
                new ObjectParameter("NbreSign", nbreSign) :
                new ObjectParameter("NbreSign", typeof(short));
    
            var dateCptaTermParameter = dateCptaTerm.HasValue ?
                new ObjectParameter("DateCptaTerm", dateCptaTerm) :
                new ObjectParameter("DateCptaTerm", typeof(System.DateTime));
    
            var dateCptaInteretParameter = dateCptaInteret.HasValue ?
                new ObjectParameter("DateCptaInteret", dateCptaInteret) :
                new ObjectParameter("DateCptaInteret", typeof(System.DateTime));
    
            var dateCptaRembParameter = dateCptaRemb.HasValue ?
                new ObjectParameter("DateCptaRemb", dateCptaRemb) :
                new ObjectParameter("DateCptaRemb", typeof(System.DateTime));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var calfrequencyParameter = calfrequency != null ?
                new ObjectParameter("calfrequency", calfrequency) :
                new ObjectParameter("calfrequency", typeof(string));
    
            var dateRembParameter = dateRemb.HasValue ?
                new ObjectParameter("DateRemb", dateRemb) :
                new ObjectParameter("DateRemb", typeof(System.DateTime));
    
            var tauxPenaliteParameter = tauxPenalite.HasValue ?
                new ObjectParameter("TauxPenalite", tauxPenalite) :
                new ObjectParameter("TauxPenalite", typeof(double));
    
            var mtPenaliteParameter = mtPenalite.HasValue ?
                new ObjectParameter("MtPenalite", mtPenalite) :
                new ObjectParameter("MtPenalite", typeof(double));
    
            var nbreReconduitParameter = nbreReconduit.HasValue ?
                new ObjectParameter("NbreReconduit", nbreReconduit) :
                new ObjectParameter("NbreReconduit", typeof(short));
    
            var dateDerniereRecondParameter = dateDerniereRecond.HasValue ?
                new ObjectParameter("DateDerniereRecond", dateDerniereRecond) :
                new ObjectParameter("DateDerniereRecond", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libCatCpteParameter = libCatCpte != null ?
                new ObjectParameter("LibCatCpte", libCatCpte) :
                new ObjectParameter("LibCatCpte", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var dateValsParameter = dateVals.HasValue ?
                new ObjectParameter("DateVals", dateVals) :
                new ObjectParameter("DateVals", typeof(System.DateTime));
    
            var dateCptaMensParameter = dateCptaMens.HasValue ?
                new ObjectParameter("DateCptaMens", dateCptaMens) :
                new ObjectParameter("DateCptaMens", typeof(System.DateTime));
    
            var dureecourueParameter = dureecourue.HasValue ?
                new ObjectParameter("dureecourue", dureecourue) :
                new ObjectParameter("dureecourue", typeof(int));
    
            var currentintamountParameter = currentintamount.HasValue ?
                new ObjectParameter("Currentintamount", currentintamount) :
                new ObjectParameter("Currentintamount", typeof(double));
    
            var totalCapitaliseParameter = totalCapitalise.HasValue ?
                new ObjectParameter("TotalCapitalise", totalCapitalise) :
                new ObjectParameter("TotalCapitalise", typeof(double));
    
            var capitalIntParameter = capitalInt != null ?
                new ObjectParameter("CapitalInt", capitalInt) :
                new ObjectParameter("CapitalInt", typeof(string));
    
            var libCpteGlParameter = libCpteGl != null ?
                new ObjectParameter("LibCpteGl", libCpteGl) :
                new ObjectParameter("LibCpteGl", typeof(string));
    
            var titrepayeParameter = titrepaye != null ?
                new ObjectParameter("titrepaye", titrepaye) :
                new ObjectParameter("titrepaye", typeof(string));
    
            var datepymttitreParameter = datepymttitre.HasValue ?
                new ObjectParameter("datepymttitre", datepymttitre) :
                new ObjectParameter("datepymttitre", typeof(System.DateTime));
    
            var mtInteretParameter = mtInteret.HasValue ?
                new ObjectParameter("MtInteret", mtInteret) :
                new ObjectParameter("MtInteret", typeof(double));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var supIntParameter = supInt.HasValue ?
                new ObjectParameter("SupInt", supInt) :
                new ObjectParameter("SupInt", typeof(double));
    
            var interetDuParameter = interetDu.HasValue ?
                new ObjectParameter("InteretDu", interetDu) :
                new ObjectParameter("InteretDu", typeof(double));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var statutMarchParameter = statutMarch != null ?
                new ObjectParameter("StatutMarch", statutMarch) :
                new ObjectParameter("StatutMarch", typeof(string));
    
            var statutJuneParameter = statutJune != null ?
                new ObjectParameter("StatutJune", statutJune) :
                new ObjectParameter("StatutJune", typeof(string));
    
            var statutSeptemberParameter = statutSeptember != null ?
                new ObjectParameter("StatutSeptember", statutSeptember) :
                new ObjectParameter("StatutSeptember", typeof(string));
    
            var statutDecemberParameter = statutDecember != null ?
                new ObjectParameter("StatutDecember", statutDecember) :
                new ObjectParameter("StatutDecember", typeof(string));
    
            var caisseCpteParameter = caisseCpte != null ?
                new ObjectParameter("CaisseCpte", caisseCpte) :
                new ObjectParameter("CaisseCpte", typeof(string));
    
            var wMtTPRCMParameter = wMtTPRCM.HasValue ?
                new ObjectParameter("wMtTPRCM", wMtTPRCM) :
                new ObjectParameter("wMtTPRCM", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BonCaisse_Update_S_Tran_Result>("BonCaisse_Update_S_Tran", agenceParameter, clientParameter, denominationParameter, cpteJumelleCCParameter, catCpteParameter, cpteJumelleCpteTermParameter, cpteGLParameter, cleCpteParameter, montantParameter, tauxIntParameter, txTVAParameter, txTPRCMParameter, dateContratParameter, datePriseEffetParameter, dureeParameter, dateDernCalIntParameter, cumulIntMensuelParameter, interetCouruParameter, interetMoisParameter, modePayIntParameter, dateExpirationParameter, numeroContratParameter, nbreSignParameter, dateCptaTermParameter, dateCptaInteretParameter, dateCptaRembParameter, statutParameter, calfrequencyParameter, dateRembParameter, tauxPenaliteParameter, mtPenaliteParameter, nbreReconduitParameter, dateDerniereRecondParameter, libAgenceParameter, libCatCpteParameter, descriptionParameter, dateCreationParameter, employeParameter, libEmployeParameter, dateValsParameter, dateCptaMensParameter, dureecourueParameter, currentintamountParameter, totalCapitaliseParameter, capitalIntParameter, libCpteGlParameter, titrepayeParameter, datepymttitreParameter, mtInteretParameter, txnNoParameter, supIntParameter, interetDuParameter, dateTransfertParameter, lect, statutMarchParameter, statutJuneParameter, statutSeptemberParameter, statutDecemberParameter, caisseCpteParameter, wMtTPRCMParameter, languageParameter);
        }
    
        public virtual int BranchAcct_Delete(string agence, string cpteGl, string employe, string typeOperation, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var cpteGlParameter = cpteGl != null ?
                new ObjectParameter("CpteGl", cpteGl) :
                new ObjectParameter("CpteGl", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var typeOperationParameter = typeOperation != null ?
                new ObjectParameter("TypeOperation", typeOperation) :
                new ObjectParameter("TypeOperation", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BranchAcct_Delete", agenceParameter, cpteGlParameter, employeParameter, typeOperationParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int BranchAcct_Insert(string agence, string cpteGl, Nullable<System.DateTime> dateCreation, string employe, string cpteGlDenou, string typeOperation, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var cpteGlParameter = cpteGl != null ?
                new ObjectParameter("CpteGl", cpteGl) :
                new ObjectParameter("CpteGl", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var cpteGlDenouParameter = cpteGlDenou != null ?
                new ObjectParameter("CpteGlDenou", cpteGlDenou) :
                new ObjectParameter("CpteGlDenou", typeof(string));
    
            var typeOperationParameter = typeOperation != null ?
                new ObjectParameter("TypeOperation", typeOperation) :
                new ObjectParameter("TypeOperation", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BranchAcct_Insert", agenceParameter, cpteGlParameter, dateCreationParameter, employeParameter, cpteGlDenouParameter, typeOperationParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int BranchAcct_Update(string agence, string cpteGl, Nullable<System.DateTime> dateCreation, string employe, string cpteGlDenou, string typeOperation, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var cpteGlParameter = cpteGl != null ?
                new ObjectParameter("CpteGl", cpteGl) :
                new ObjectParameter("CpteGl", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var cpteGlDenouParameter = cpteGlDenou != null ?
                new ObjectParameter("CpteGlDenou", cpteGlDenou) :
                new ObjectParameter("CpteGlDenou", typeof(string));
    
            var typeOperationParameter = typeOperation != null ?
                new ObjectParameter("TypeOperation", typeOperation) :
                new ObjectParameter("TypeOperation", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BranchAcct_Update", agenceParameter, cpteGlParameter, dateCreationParameter, employeParameter, cpteGlDenouParameter, typeOperationParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual ObjectResult<BudgetExpense_Result> BudgetExpense(string agence, string client, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> montant, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, Nullable<System.DateTime> dateCreation, string description, string txnno, string integritystatus, Nullable<System.DateTime> dateTransfert, string libDevise, string caisse, string cpteCaisse, string cleCpteCaisse, string libCaisse, string libCpteCaisse, string cpteColClt, string cleColClt, string libCpteColClt, Nullable<double> mtTVA, string cpteBud, string cleBud, string libCpteBud, Nullable<decimal> btrnCode, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, ObjectParameter msg, string computerName, string language, string typeBudget)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var mtTVAParameter = mtTVA.HasValue ?
                new ObjectParameter("MtTVA", mtTVA) :
                new ObjectParameter("MtTVA", typeof(double));
    
            var cpteBudParameter = cpteBud != null ?
                new ObjectParameter("CpteBud", cpteBud) :
                new ObjectParameter("CpteBud", typeof(string));
    
            var cleBudParameter = cleBud != null ?
                new ObjectParameter("CleBud", cleBud) :
                new ObjectParameter("CleBud", typeof(string));
    
            var libCpteBudParameter = libCpteBud != null ?
                new ObjectParameter("LibCpteBud", libCpteBud) :
                new ObjectParameter("LibCpteBud", typeof(string));
    
            var btrnCodeParameter = btrnCode.HasValue ?
                new ObjectParameter("BtrnCode", btrnCode) :
                new ObjectParameter("BtrnCode", typeof(decimal));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var typeBudgetParameter = typeBudget != null ?
                new ObjectParameter("TypeBudget", typeBudget) :
                new ObjectParameter("TypeBudget", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BudgetExpense_Result>("BudgetExpense", agenceParameter, clientParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, montantParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, dateCreationParameter, descriptionParameter, txnnoParameter, integritystatusParameter, dateTransfertParameter, libDeviseParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, libCaisseParameter, libCpteCaisseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, mtTVAParameter, cpteBudParameter, cleBudParameter, libCpteBudParameter, btrnCodeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, msg, computerNameParameter, languageParameter, typeBudgetParameter);
        }
    
        public virtual ObjectResult<BudgetTrxnProductN_S_Trans_Result> BudgetTrxnProductN_S_Trans(string agence, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string refOperation, string employe, string libEmploye, string libAgence, string libTrCode, string trCode, string description, string txnno, string codelibelle, string compteCom, string cleCompteCom, string libDevise, string libCompteCom, string cpteGL, string cleGL, string libCpteGL, Nullable<double> expense, Nullable<double> mtTVA, string journal, string libjournal, ObjectParameter lect, ObjectParameter msg, string language, string typeBudget)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var codelibelleParameter = codelibelle != null ?
                new ObjectParameter("Codelibelle", codelibelle) :
                new ObjectParameter("Codelibelle", typeof(string));
    
            var compteComParameter = compteCom != null ?
                new ObjectParameter("CompteCom", compteCom) :
                new ObjectParameter("CompteCom", typeof(string));
    
            var cleCompteComParameter = cleCompteCom != null ?
                new ObjectParameter("CleCompteCom", cleCompteCom) :
                new ObjectParameter("CleCompteCom", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCompteComParameter = libCompteCom != null ?
                new ObjectParameter("LibCompteCom", libCompteCom) :
                new ObjectParameter("LibCompteCom", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleGLParameter = cleGL != null ?
                new ObjectParameter("CleGL", cleGL) :
                new ObjectParameter("CleGL", typeof(string));
    
            var libCpteGLParameter = libCpteGL != null ?
                new ObjectParameter("LibCpteGL", libCpteGL) :
                new ObjectParameter("LibCpteGL", typeof(string));
    
            var expenseParameter = expense.HasValue ?
                new ObjectParameter("Expense", expense) :
                new ObjectParameter("Expense", typeof(double));
    
            var mtTVAParameter = mtTVA.HasValue ?
                new ObjectParameter("MtTVA", mtTVA) :
                new ObjectParameter("MtTVA", typeof(double));
    
            var journalParameter = journal != null ?
                new ObjectParameter("journal", journal) :
                new ObjectParameter("journal", typeof(string));
    
            var libjournalParameter = libjournal != null ?
                new ObjectParameter("libjournal", libjournal) :
                new ObjectParameter("libjournal", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var typeBudgetParameter = typeBudget != null ?
                new ObjectParameter("TypeBudget", typeBudget) :
                new ObjectParameter("TypeBudget", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BudgetTrxnProductN_S_Trans_Result>("BudgetTrxnProductN_S_Trans", agenceParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, refOperationParameter, employeParameter, libEmployeParameter, libAgenceParameter, libTrCodeParameter, trCodeParameter, descriptionParameter, txnnoParameter, codelibelleParameter, compteComParameter, cleCompteComParameter, libDeviseParameter, libCompteComParameter, cpteGLParameter, cleGLParameter, libCpteGLParameter, expenseParameter, mtTVAParameter, journalParameter, libjournalParameter, lect, msg, languageParameter, typeBudgetParameter);
        }
    
        public virtual int Caisse_Delete(string codeCaisse, string agence, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var codeCaisseParameter = codeCaisse != null ?
                new ObjectParameter("CodeCaisse", codeCaisse) :
                new ObjectParameter("CodeCaisse", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Caisse_Delete", codeCaisseParameter, agenceParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int Caisse_Insert(string agence, string codeCaisse, string devise, string libelle, Nullable<double> montantDep, Nullable<double> debitJour, Nullable<double> creditJour, string compte, Nullable<System.DateTime> dateJour, string employe, Nullable<double> solde, string tellerstatus, Nullable<System.DateTime> datelastopen, Nullable<System.DateTime> datelastadjust, Nullable<System.DateTime> datelastclose, string tellerType, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var codeCaisseParameter = codeCaisse != null ?
                new ObjectParameter("CodeCaisse", codeCaisse) :
                new ObjectParameter("CodeCaisse", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("devise", devise) :
                new ObjectParameter("devise", typeof(string));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("Libelle", libelle) :
                new ObjectParameter("Libelle", typeof(string));
    
            var montantDepParameter = montantDep.HasValue ?
                new ObjectParameter("MontantDep", montantDep) :
                new ObjectParameter("MontantDep", typeof(double));
    
            var debitJourParameter = debitJour.HasValue ?
                new ObjectParameter("DebitJour", debitJour) :
                new ObjectParameter("DebitJour", typeof(double));
    
            var creditJourParameter = creditJour.HasValue ?
                new ObjectParameter("CreditJour", creditJour) :
                new ObjectParameter("CreditJour", typeof(double));
    
            var compteParameter = compte != null ?
                new ObjectParameter("Compte", compte) :
                new ObjectParameter("Compte", typeof(string));
    
            var dateJourParameter = dateJour.HasValue ?
                new ObjectParameter("DateJour", dateJour) :
                new ObjectParameter("DateJour", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var soldeParameter = solde.HasValue ?
                new ObjectParameter("Solde", solde) :
                new ObjectParameter("Solde", typeof(double));
    
            var tellerstatusParameter = tellerstatus != null ?
                new ObjectParameter("Tellerstatus", tellerstatus) :
                new ObjectParameter("Tellerstatus", typeof(string));
    
            var datelastopenParameter = datelastopen.HasValue ?
                new ObjectParameter("Datelastopen", datelastopen) :
                new ObjectParameter("Datelastopen", typeof(System.DateTime));
    
            var datelastadjustParameter = datelastadjust.HasValue ?
                new ObjectParameter("Datelastadjust", datelastadjust) :
                new ObjectParameter("Datelastadjust", typeof(System.DateTime));
    
            var datelastcloseParameter = datelastclose.HasValue ?
                new ObjectParameter("Datelastclose", datelastclose) :
                new ObjectParameter("Datelastclose", typeof(System.DateTime));
    
            var tellerTypeParameter = tellerType != null ?
                new ObjectParameter("TellerType", tellerType) :
                new ObjectParameter("TellerType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Caisse_Insert", agenceParameter, codeCaisseParameter, deviseParameter, libelleParameter, montantDepParameter, debitJourParameter, creditJourParameter, compteParameter, dateJourParameter, employeParameter, soldeParameter, tellerstatusParameter, datelastopenParameter, datelastadjustParameter, datelastcloseParameter, tellerTypeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int Caisse_Update(string agence, string codeCaisse, string devise, string libelle, Nullable<double> montantDep, Nullable<double> debitJour, Nullable<double> creditJour, string compte, Nullable<System.DateTime> dateJour, string employe, Nullable<double> solde, string tellerstatus, Nullable<System.DateTime> datelastopen, Nullable<System.DateTime> datelastadjust, Nullable<System.DateTime> datelastclose, string tellerType, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var codeCaisseParameter = codeCaisse != null ?
                new ObjectParameter("CodeCaisse", codeCaisse) :
                new ObjectParameter("CodeCaisse", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("devise", devise) :
                new ObjectParameter("devise", typeof(string));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("Libelle", libelle) :
                new ObjectParameter("Libelle", typeof(string));
    
            var montantDepParameter = montantDep.HasValue ?
                new ObjectParameter("MontantDep", montantDep) :
                new ObjectParameter("MontantDep", typeof(double));
    
            var debitJourParameter = debitJour.HasValue ?
                new ObjectParameter("DebitJour", debitJour) :
                new ObjectParameter("DebitJour", typeof(double));
    
            var creditJourParameter = creditJour.HasValue ?
                new ObjectParameter("CreditJour", creditJour) :
                new ObjectParameter("CreditJour", typeof(double));
    
            var compteParameter = compte != null ?
                new ObjectParameter("Compte", compte) :
                new ObjectParameter("Compte", typeof(string));
    
            var dateJourParameter = dateJour.HasValue ?
                new ObjectParameter("DateJour", dateJour) :
                new ObjectParameter("DateJour", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var soldeParameter = solde.HasValue ?
                new ObjectParameter("Solde", solde) :
                new ObjectParameter("Solde", typeof(double));
    
            var tellerstatusParameter = tellerstatus != null ?
                new ObjectParameter("Tellerstatus", tellerstatus) :
                new ObjectParameter("Tellerstatus", typeof(string));
    
            var datelastopenParameter = datelastopen.HasValue ?
                new ObjectParameter("Datelastopen", datelastopen) :
                new ObjectParameter("Datelastopen", typeof(System.DateTime));
    
            var datelastadjustParameter = datelastadjust.HasValue ?
                new ObjectParameter("Datelastadjust", datelastadjust) :
                new ObjectParameter("Datelastadjust", typeof(System.DateTime));
    
            var datelastcloseParameter = datelastclose.HasValue ?
                new ObjectParameter("Datelastclose", datelastclose) :
                new ObjectParameter("Datelastclose", typeof(System.DateTime));
    
            var tellerTypeParameter = tellerType != null ?
                new ObjectParameter("TellerType", tellerType) :
                new ObjectParameter("TellerType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Caisse_Update", agenceParameter, codeCaisseParameter, deviseParameter, libelleParameter, montantDepParameter, debitJourParameter, creditJourParameter, compteParameter, dateJourParameter, employeParameter, soldeParameter, tellerstatusParameter, datelastopenParameter, datelastadjustParameter, datelastcloseParameter, tellerTypeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int CaisseMaxLimCusto_Delete(string agence, string codeCaisse, string cpteJumelle, Nullable<System.DateTime> dateJour, string employe, string libEmploye, string computerName, ObjectParameter lect, ObjectParameter errMsg, string language, Nullable<decimal> serie)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var codeCaisseParameter = codeCaisse != null ?
                new ObjectParameter("CodeCaisse", codeCaisse) :
                new ObjectParameter("CodeCaisse", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var dateJourParameter = dateJour.HasValue ?
                new ObjectParameter("DateJour", dateJour) :
                new ObjectParameter("DateJour", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var serieParameter = serie.HasValue ?
                new ObjectParameter("Serie", serie) :
                new ObjectParameter("Serie", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CaisseMaxLimCusto_Delete", agenceParameter, codeCaisseParameter, cpteJumelleParameter, dateJourParameter, employeParameter, libEmployeParameter, computerNameParameter, lect, errMsg, languageParameter, serieParameter);
        }
    
        public virtual int CaisseMaxLimCusto_Insert(string agence, string codeCaisse, string devise, string libelle, Nullable<double> montantDep, Nullable<double> debitJour, Nullable<double> creditJour, string compte, string cle, string cpteJumelle, string denomination, string libCompte, Nullable<System.DateTime> dateJour, string employe, string libEmploye, Nullable<double> maxAmount, string computerName, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var codeCaisseParameter = codeCaisse != null ?
                new ObjectParameter("CodeCaisse", codeCaisse) :
                new ObjectParameter("CodeCaisse", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("Libelle", libelle) :
                new ObjectParameter("Libelle", typeof(string));
    
            var montantDepParameter = montantDep.HasValue ?
                new ObjectParameter("MontantDep", montantDep) :
                new ObjectParameter("MontantDep", typeof(double));
    
            var debitJourParameter = debitJour.HasValue ?
                new ObjectParameter("DebitJour", debitJour) :
                new ObjectParameter("DebitJour", typeof(double));
    
            var creditJourParameter = creditJour.HasValue ?
                new ObjectParameter("CreditJour", creditJour) :
                new ObjectParameter("CreditJour", typeof(double));
    
            var compteParameter = compte != null ?
                new ObjectParameter("Compte", compte) :
                new ObjectParameter("Compte", typeof(string));
    
            var cleParameter = cle != null ?
                new ObjectParameter("Cle", cle) :
                new ObjectParameter("Cle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var libCompteParameter = libCompte != null ?
                new ObjectParameter("LibCompte", libCompte) :
                new ObjectParameter("LibCompte", typeof(string));
    
            var dateJourParameter = dateJour.HasValue ?
                new ObjectParameter("DateJour", dateJour) :
                new ObjectParameter("DateJour", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var maxAmountParameter = maxAmount.HasValue ?
                new ObjectParameter("MaxAmount", maxAmount) :
                new ObjectParameter("MaxAmount", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CaisseMaxLimCusto_Insert", agenceParameter, codeCaisseParameter, deviseParameter, libelleParameter, montantDepParameter, debitJourParameter, creditJourParameter, compteParameter, cleParameter, cpteJumelleParameter, denominationParameter, libCompteParameter, dateJourParameter, employeParameter, libEmployeParameter, maxAmountParameter, computerNameParameter, lect, errMsg, languageParameter);
        }
    
        public virtual ObjectResult<CaisseMaxLimCusto_Update_Result> CaisseMaxLimCusto_Update(string agence, string codeCaisse, string devise, string libelle, Nullable<double> montantDep, Nullable<double> debitJour, Nullable<double> creditJour, string compte, string cle, string cpteJumelle, string denomination, string libCompte, Nullable<System.DateTime> dateJour, string employe, string libEmploye, Nullable<double> maxAmount, string computerName, ObjectParameter lect, ObjectParameter errMsg, string language, Nullable<decimal> serie)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var codeCaisseParameter = codeCaisse != null ?
                new ObjectParameter("CodeCaisse", codeCaisse) :
                new ObjectParameter("CodeCaisse", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("Libelle", libelle) :
                new ObjectParameter("Libelle", typeof(string));
    
            var montantDepParameter = montantDep.HasValue ?
                new ObjectParameter("MontantDep", montantDep) :
                new ObjectParameter("MontantDep", typeof(double));
    
            var debitJourParameter = debitJour.HasValue ?
                new ObjectParameter("DebitJour", debitJour) :
                new ObjectParameter("DebitJour", typeof(double));
    
            var creditJourParameter = creditJour.HasValue ?
                new ObjectParameter("CreditJour", creditJour) :
                new ObjectParameter("CreditJour", typeof(double));
    
            var compteParameter = compte != null ?
                new ObjectParameter("Compte", compte) :
                new ObjectParameter("Compte", typeof(string));
    
            var cleParameter = cle != null ?
                new ObjectParameter("Cle", cle) :
                new ObjectParameter("Cle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var libCompteParameter = libCompte != null ?
                new ObjectParameter("LibCompte", libCompte) :
                new ObjectParameter("LibCompte", typeof(string));
    
            var dateJourParameter = dateJour.HasValue ?
                new ObjectParameter("DateJour", dateJour) :
                new ObjectParameter("DateJour", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var maxAmountParameter = maxAmount.HasValue ?
                new ObjectParameter("MaxAmount", maxAmount) :
                new ObjectParameter("MaxAmount", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var serieParameter = serie.HasValue ?
                new ObjectParameter("Serie", serie) :
                new ObjectParameter("Serie", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CaisseMaxLimCusto_Update_Result>("CaisseMaxLimCusto_Update", agenceParameter, codeCaisseParameter, deviseParameter, libelleParameter, montantDepParameter, debitJourParameter, creditJourParameter, compteParameter, cleParameter, cpteJumelleParameter, denominationParameter, libCompteParameter, dateJourParameter, employeParameter, libEmployeParameter, maxAmountParameter, computerNameParameter, lect, errMsg, languageParameter, serieParameter);
        }
    
        public virtual int CalCulProvisionExclusion(string brCode, string wDevise, string etat, string codePoste, string groupcode, string cpteGl, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, ObjectParameter mntProvisionDtFi, ObjectParameter mntExclusionDtFi, ObjectParameter mntProvisionFnFi, ObjectParameter mntExclusionFnFi, ObjectParameter lect, ObjectParameter msg, string employe, string language)
        {
            var brCodeParameter = brCode != null ?
                new ObjectParameter("BrCode", brCode) :
                new ObjectParameter("BrCode", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var etatParameter = etat != null ?
                new ObjectParameter("Etat", etat) :
                new ObjectParameter("Etat", typeof(string));
    
            var codePosteParameter = codePoste != null ?
                new ObjectParameter("CodePoste", codePoste) :
                new ObjectParameter("CodePoste", typeof(string));
    
            var groupcodeParameter = groupcode != null ?
                new ObjectParameter("groupcode", groupcode) :
                new ObjectParameter("groupcode", typeof(string));
    
            var cpteGlParameter = cpteGl != null ?
                new ObjectParameter("CpteGl", cpteGl) :
                new ObjectParameter("CpteGl", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalCulProvisionExclusion", brCodeParameter, wDeviseParameter, etatParameter, codePosteParameter, groupcodeParameter, cpteGlParameter, dateDebutParameter, dateFinParameter, mntProvisionDtFi, mntExclusionDtFi, mntProvisionFnFi, mntExclusionFnFi, lect, msg, employeParameter, languageParameter);
        }
    
        public virtual int CalCulProvisionExclusionGlhist(string brCode, string wDevise, string etat, string codePoste, string groupcode, string cpteGl, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, ObjectParameter mntProvisionDtFi, ObjectParameter mntExclusionDtFi, ObjectParameter mntProvisionFnFi, ObjectParameter mntExclusionFnFi, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var brCodeParameter = brCode != null ?
                new ObjectParameter("BrCode", brCode) :
                new ObjectParameter("BrCode", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var etatParameter = etat != null ?
                new ObjectParameter("Etat", etat) :
                new ObjectParameter("Etat", typeof(string));
    
            var codePosteParameter = codePoste != null ?
                new ObjectParameter("CodePoste", codePoste) :
                new ObjectParameter("CodePoste", typeof(string));
    
            var groupcodeParameter = groupcode != null ?
                new ObjectParameter("groupcode", groupcode) :
                new ObjectParameter("groupcode", typeof(string));
    
            var cpteGlParameter = cpteGl != null ?
                new ObjectParameter("CpteGl", cpteGl) :
                new ObjectParameter("CpteGl", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalCulProvisionExclusionGlhist", brCodeParameter, wDeviseParameter, etatParameter, codePosteParameter, groupcodeParameter, cpteGlParameter, dateDebutParameter, dateFinParameter, mntProvisionDtFi, mntExclusionDtFi, mntProvisionFnFi, mntExclusionFnFi, lect, msg, languageParameter);
        }
    
        public virtual int CalculTableauAmAC(string numeroContrat, Nullable<double> capitalDep, Nullable<double> capitalRD, Nullable<double> wAnnuite, Nullable<double> wTauxInt, Nullable<double> wTxTVA, Nullable<System.DateTime> wDateDebutremb, Nullable<int> wDureeNette, string wPeriodicite, Nullable<int> wInterval, Nullable<int> echeance, string typeRemb, string employe, Nullable<System.DateTime> dateAcc, Nullable<double> tauxAnn, string monEspion, ObjectParameter lect, ObjectParameter msg, string language, Nullable<int> dureeDiffere)
        {
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var capitalDepParameter = capitalDep.HasValue ?
                new ObjectParameter("CapitalDep", capitalDep) :
                new ObjectParameter("CapitalDep", typeof(double));
    
            var capitalRDParameter = capitalRD.HasValue ?
                new ObjectParameter("CapitalRD", capitalRD) :
                new ObjectParameter("CapitalRD", typeof(double));
    
            var wAnnuiteParameter = wAnnuite.HasValue ?
                new ObjectParameter("WAnnuite", wAnnuite) :
                new ObjectParameter("WAnnuite", typeof(double));
    
            var wTauxIntParameter = wTauxInt.HasValue ?
                new ObjectParameter("WTauxInt", wTauxInt) :
                new ObjectParameter("WTauxInt", typeof(double));
    
            var wTxTVAParameter = wTxTVA.HasValue ?
                new ObjectParameter("WTxTVA", wTxTVA) :
                new ObjectParameter("WTxTVA", typeof(double));
    
            var wDateDebutrembParameter = wDateDebutremb.HasValue ?
                new ObjectParameter("WDateDebutremb", wDateDebutremb) :
                new ObjectParameter("WDateDebutremb", typeof(System.DateTime));
    
            var wDureeNetteParameter = wDureeNette.HasValue ?
                new ObjectParameter("WDureeNette", wDureeNette) :
                new ObjectParameter("WDureeNette", typeof(int));
    
            var wPeriodiciteParameter = wPeriodicite != null ?
                new ObjectParameter("WPeriodicite", wPeriodicite) :
                new ObjectParameter("WPeriodicite", typeof(string));
    
            var wIntervalParameter = wInterval.HasValue ?
                new ObjectParameter("WInterval", wInterval) :
                new ObjectParameter("WInterval", typeof(int));
    
            var echeanceParameter = echeance.HasValue ?
                new ObjectParameter("Echeance", echeance) :
                new ObjectParameter("Echeance", typeof(int));
    
            var typeRembParameter = typeRemb != null ?
                new ObjectParameter("TypeRemb", typeRemb) :
                new ObjectParameter("TypeRemb", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var dateAccParameter = dateAcc.HasValue ?
                new ObjectParameter("DateAcc", dateAcc) :
                new ObjectParameter("DateAcc", typeof(System.DateTime));
    
            var tauxAnnParameter = tauxAnn.HasValue ?
                new ObjectParameter("TauxAnn", tauxAnn) :
                new ObjectParameter("TauxAnn", typeof(double));
    
            var monEspionParameter = monEspion != null ?
                new ObjectParameter("MonEspion", monEspion) :
                new ObjectParameter("MonEspion", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var dureeDiffereParameter = dureeDiffere.HasValue ?
                new ObjectParameter("DureeDiffere", dureeDiffere) :
                new ObjectParameter("DureeDiffere", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalculTableauAmAC", numeroContratParameter, capitalDepParameter, capitalRDParameter, wAnnuiteParameter, wTauxIntParameter, wTxTVAParameter, wDateDebutrembParameter, wDureeNetteParameter, wPeriodiciteParameter, wIntervalParameter, echeanceParameter, typeRembParameter, employeParameter, dateAccParameter, tauxAnnParameter, monEspionParameter, lect, msg, languageParameter, dureeDiffereParameter);
        }
    
        public virtual int CalculTableauAmCC(string numeroContrat, Nullable<double> capitalDep, Nullable<double> capitalRD, Nullable<double> wTauxInt, Nullable<double> wTxTVA, Nullable<System.DateTime> wDateDebutremb, string wPeriodicite, Nullable<int> wInterval, Nullable<int> wDureeNette, Nullable<int> echeance, string typeRemb, string employe, Nullable<System.DateTime> dateAcc, Nullable<double> tauxAnn, string monEspion, ObjectParameter lect, ObjectParameter msg, string language, Nullable<int> dureeDiffere)
        {
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var capitalDepParameter = capitalDep.HasValue ?
                new ObjectParameter("CapitalDep", capitalDep) :
                new ObjectParameter("CapitalDep", typeof(double));
    
            var capitalRDParameter = capitalRD.HasValue ?
                new ObjectParameter("CapitalRD", capitalRD) :
                new ObjectParameter("CapitalRD", typeof(double));
    
            var wTauxIntParameter = wTauxInt.HasValue ?
                new ObjectParameter("WTauxInt", wTauxInt) :
                new ObjectParameter("WTauxInt", typeof(double));
    
            var wTxTVAParameter = wTxTVA.HasValue ?
                new ObjectParameter("WTxTVA", wTxTVA) :
                new ObjectParameter("WTxTVA", typeof(double));
    
            var wDateDebutrembParameter = wDateDebutremb.HasValue ?
                new ObjectParameter("WDateDebutremb", wDateDebutremb) :
                new ObjectParameter("WDateDebutremb", typeof(System.DateTime));
    
            var wPeriodiciteParameter = wPeriodicite != null ?
                new ObjectParameter("WPeriodicite", wPeriodicite) :
                new ObjectParameter("WPeriodicite", typeof(string));
    
            var wIntervalParameter = wInterval.HasValue ?
                new ObjectParameter("WInterval", wInterval) :
                new ObjectParameter("WInterval", typeof(int));
    
            var wDureeNetteParameter = wDureeNette.HasValue ?
                new ObjectParameter("WDureeNette", wDureeNette) :
                new ObjectParameter("WDureeNette", typeof(int));
    
            var echeanceParameter = echeance.HasValue ?
                new ObjectParameter("Echeance", echeance) :
                new ObjectParameter("Echeance", typeof(int));
    
            var typeRembParameter = typeRemb != null ?
                new ObjectParameter("TypeRemb", typeRemb) :
                new ObjectParameter("TypeRemb", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var dateAccParameter = dateAcc.HasValue ?
                new ObjectParameter("DateAcc", dateAcc) :
                new ObjectParameter("DateAcc", typeof(System.DateTime));
    
            var tauxAnnParameter = tauxAnn.HasValue ?
                new ObjectParameter("TauxAnn", tauxAnn) :
                new ObjectParameter("TauxAnn", typeof(double));
    
            var monEspionParameter = monEspion != null ?
                new ObjectParameter("MonEspion", monEspion) :
                new ObjectParameter("MonEspion", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var dureeDiffereParameter = dureeDiffere.HasValue ?
                new ObjectParameter("DureeDiffere", dureeDiffere) :
                new ObjectParameter("DureeDiffere", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalculTableauAmCC", numeroContratParameter, capitalDepParameter, capitalRDParameter, wTauxIntParameter, wTxTVAParameter, wDateDebutrembParameter, wPeriodiciteParameter, wIntervalParameter, wDureeNetteParameter, echeanceParameter, typeRembParameter, employeParameter, dateAccParameter, tauxAnnParameter, monEspionParameter, lect, msg, languageParameter, dureeDiffereParameter);
        }
    
        public virtual int CalculTableauAnC(string numeroContrat, Nullable<double> capitalDep, Nullable<double> capitalRD, Nullable<double> wAnnuite, Nullable<double> wTauxInt, Nullable<double> wTxTVA, Nullable<System.DateTime> wDateDebutremb, string wPeriodicite, Nullable<int> wInterval, Nullable<int> echeance, string typeRemb, string employe, Nullable<System.DateTime> dateAcc, Nullable<double> tauxAnn, string monEspion, ObjectParameter lect, ObjectParameter msg, string language, Nullable<int> dureeDiffere)
        {
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var capitalDepParameter = capitalDep.HasValue ?
                new ObjectParameter("CapitalDep", capitalDep) :
                new ObjectParameter("CapitalDep", typeof(double));
    
            var capitalRDParameter = capitalRD.HasValue ?
                new ObjectParameter("CapitalRD", capitalRD) :
                new ObjectParameter("CapitalRD", typeof(double));
    
            var wAnnuiteParameter = wAnnuite.HasValue ?
                new ObjectParameter("WAnnuite", wAnnuite) :
                new ObjectParameter("WAnnuite", typeof(double));
    
            var wTauxIntParameter = wTauxInt.HasValue ?
                new ObjectParameter("WTauxInt", wTauxInt) :
                new ObjectParameter("WTauxInt", typeof(double));
    
            var wTxTVAParameter = wTxTVA.HasValue ?
                new ObjectParameter("WTxTVA", wTxTVA) :
                new ObjectParameter("WTxTVA", typeof(double));
    
            var wDateDebutrembParameter = wDateDebutremb.HasValue ?
                new ObjectParameter("WDateDebutremb", wDateDebutremb) :
                new ObjectParameter("WDateDebutremb", typeof(System.DateTime));
    
            var wPeriodiciteParameter = wPeriodicite != null ?
                new ObjectParameter("WPeriodicite", wPeriodicite) :
                new ObjectParameter("WPeriodicite", typeof(string));
    
            var wIntervalParameter = wInterval.HasValue ?
                new ObjectParameter("WInterval", wInterval) :
                new ObjectParameter("WInterval", typeof(int));
    
            var echeanceParameter = echeance.HasValue ?
                new ObjectParameter("Echeance", echeance) :
                new ObjectParameter("Echeance", typeof(int));
    
            var typeRembParameter = typeRemb != null ?
                new ObjectParameter("TypeRemb", typeRemb) :
                new ObjectParameter("TypeRemb", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var dateAccParameter = dateAcc.HasValue ?
                new ObjectParameter("DateAcc", dateAcc) :
                new ObjectParameter("DateAcc", typeof(System.DateTime));
    
            var tauxAnnParameter = tauxAnn.HasValue ?
                new ObjectParameter("TauxAnn", tauxAnn) :
                new ObjectParameter("TauxAnn", typeof(double));
    
            var monEspionParameter = monEspion != null ?
                new ObjectParameter("MonEspion", monEspion) :
                new ObjectParameter("MonEspion", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var dureeDiffereParameter = dureeDiffere.HasValue ?
                new ObjectParameter("DureeDiffere", dureeDiffere) :
                new ObjectParameter("DureeDiffere", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalculTableauAnC", numeroContratParameter, capitalDepParameter, capitalRDParameter, wAnnuiteParameter, wTauxIntParameter, wTxTVAParameter, wDateDebutrembParameter, wPeriodiciteParameter, wIntervalParameter, echeanceParameter, typeRembParameter, employeParameter, dateAccParameter, tauxAnnParameter, monEspionParameter, lect, msg, languageParameter, dureeDiffereParameter);
        }
    
        public virtual int CalDateVal(Nullable<int> nbre, Nullable<System.DateTime> dateOP, string typeCpte, ObjectParameter valCalDateVal)
        {
            var nbreParameter = nbre.HasValue ?
                new ObjectParameter("Nbre", nbre) :
                new ObjectParameter("Nbre", typeof(int));
    
            var dateOPParameter = dateOP.HasValue ?
                new ObjectParameter("DateOP", dateOP) :
                new ObjectParameter("DateOP", typeof(System.DateTime));
    
            var typeCpteParameter = typeCpte != null ?
                new ObjectParameter("TypeCpte", typeCpte) :
                new ObjectParameter("TypeCpte", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalDateVal", nbreParameter, dateOPParameter, typeCpteParameter, valCalDateVal);
        }
    
        public virtual int CalRetourDate(Nullable<double> totDebit, Nullable<double> totCredit, ObjectParameter soldedb, ObjectParameter soldecr, ObjectParameter sensS, ObjectParameter lect, ObjectParameter msgbox)
        {
            var totDebitParameter = totDebit.HasValue ?
                new ObjectParameter("TotDebit", totDebit) :
                new ObjectParameter("TotDebit", typeof(double));
    
            var totCreditParameter = totCredit.HasValue ?
                new ObjectParameter("TotCredit", totCredit) :
                new ObjectParameter("TotCredit", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalRetourDate", totDebitParameter, totCreditParameter, soldedb, soldecr, sensS, lect, msgbox);
        }
    
        public virtual int CASHCONFTRX(string agence, string caisse, Nullable<double> amount, string employe, string libEmploye, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, string zOPTN, string pF_CASHOPTN, string pC_REFOPTN, string devise, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var zOPTNParameter = zOPTN != null ?
                new ObjectParameter("ZOPTN", zOPTN) :
                new ObjectParameter("ZOPTN", typeof(string));
    
            var pF_CASHOPTNParameter = pF_CASHOPTN != null ?
                new ObjectParameter("PF_CASHOPTN", pF_CASHOPTN) :
                new ObjectParameter("PF_CASHOPTN", typeof(string));
    
            var pC_REFOPTNParameter = pC_REFOPTN != null ?
                new ObjectParameter("PC_REFOPTN", pC_REFOPTN) :
                new ObjectParameter("PC_REFOPTN", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CASHCONFTRX", agenceParameter, caisseParameter, amountParameter, employeParameter, libEmployeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, zOPTNParameter, pF_CASHOPTNParameter, pC_REFOPTNParameter, deviseParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int CASHCONFTRXTELLER(string agence, string caisse, Nullable<double> amount, string employe, string libEmploye, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, string zOPTN, string pF_CASHOPTN, string pC_REFOPTN, string devise, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var zOPTNParameter = zOPTN != null ?
                new ObjectParameter("ZOPTN", zOPTN) :
                new ObjectParameter("ZOPTN", typeof(string));
    
            var pF_CASHOPTNParameter = pF_CASHOPTN != null ?
                new ObjectParameter("PF_CASHOPTN", pF_CASHOPTN) :
                new ObjectParameter("PF_CASHOPTN", typeof(string));
    
            var pC_REFOPTNParameter = pC_REFOPTN != null ?
                new ObjectParameter("PC_REFOPTN", pC_REFOPTN) :
                new ObjectParameter("PC_REFOPTN", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CASHCONFTRXTELLER", agenceParameter, caisseParameter, amountParameter, employeParameter, libEmployeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, zOPTNParameter, pF_CASHOPTNParameter, pC_REFOPTNParameter, deviseParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<CashPymntsRP_Result> CashPymntsRP(string agence, string client, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> wpayamount, Nullable<double> woptnamount, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, Nullable<System.DateTime> dateCreation, string description, string prefixtxnno, string integritystatus, Nullable<System.DateTime> dateTransfert, string libDevise, string caisse, string cpteCaisse, string cleCpteCaisse, string libCaisse, string libCpteCaisse, string cpteColClt, string cleColClt, string libCpteColClt, Nullable<double> wtaxamount, Nullable<double> wComAmount, string cpteGl, string cleGl, string libCpteGl, string wtrCode, string libTrCode, string wctrnCode, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var wpayamountParameter = wpayamount.HasValue ?
                new ObjectParameter("wpayamount", wpayamount) :
                new ObjectParameter("wpayamount", typeof(double));
    
            var woptnamountParameter = woptnamount.HasValue ?
                new ObjectParameter("woptnamount", woptnamount) :
                new ObjectParameter("woptnamount", typeof(double));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var wtaxamountParameter = wtaxamount.HasValue ?
                new ObjectParameter("wtaxamount", wtaxamount) :
                new ObjectParameter("wtaxamount", typeof(double));
    
            var wComAmountParameter = wComAmount.HasValue ?
                new ObjectParameter("wComAmount", wComAmount) :
                new ObjectParameter("wComAmount", typeof(double));
    
            var cpteGlParameter = cpteGl != null ?
                new ObjectParameter("CpteGl", cpteGl) :
                new ObjectParameter("CpteGl", typeof(string));
    
            var cleGlParameter = cleGl != null ?
                new ObjectParameter("CleGl", cleGl) :
                new ObjectParameter("CleGl", typeof(string));
    
            var libCpteGlParameter = libCpteGl != null ?
                new ObjectParameter("LibCpteGl", libCpteGl) :
                new ObjectParameter("LibCpteGl", typeof(string));
    
            var wtrCodeParameter = wtrCode != null ?
                new ObjectParameter("WtrCode", wtrCode) :
                new ObjectParameter("WtrCode", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var wctrnCodeParameter = wctrnCode != null ?
                new ObjectParameter("wctrnCode", wctrnCode) :
                new ObjectParameter("wctrnCode", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CashPymntsRP_Result>("CashPymntsRP", agenceParameter, clientParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, wpayamountParameter, woptnamountParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, dateCreationParameter, descriptionParameter, prefixtxnnoParameter, integritystatusParameter, dateTransfertParameter, libDeviseParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, libCaisseParameter, libCpteCaisseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, wtaxamountParameter, wComAmountParameter, cpteGlParameter, cleGlParameter, libCpteGlParameter, wtrCodeParameter, libTrCodeParameter, wctrnCodeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int CashPymntsT(Nullable<short> agence, Nullable<decimal> client, Nullable<short> catCpte, Nullable<short> subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> wpayamount, Nullable<double> woptnamount, string refOperation, Nullable<short> employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, Nullable<System.DateTime> dateCreation, string description, string prefixtxnno, string integritystatus, Nullable<System.DateTime> dateTransfert, string libDevise, string caisse, string cpteCaisse, string cleCpteCaisse, string libCaisse, string libCpteCaisse, string cpteColClt, string cleColClt, string libCpteColClt, Nullable<double> wtaxamount, Nullable<double> wComAmount, string cpteGl, string cleGl, string libCpteGl, string wtrCode, string libTrCode, string wctrnCode, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence.HasValue ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(short));
    
            var clientParameter = client.HasValue ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(decimal));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte.HasValue ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(short));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var wpayamountParameter = wpayamount.HasValue ?
                new ObjectParameter("wpayamount", wpayamount) :
                new ObjectParameter("wpayamount", typeof(double));
    
            var woptnamountParameter = woptnamount.HasValue ?
                new ObjectParameter("woptnamount", woptnamount) :
                new ObjectParameter("woptnamount", typeof(double));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(short));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var wtaxamountParameter = wtaxamount.HasValue ?
                new ObjectParameter("wtaxamount", wtaxamount) :
                new ObjectParameter("wtaxamount", typeof(double));
    
            var wComAmountParameter = wComAmount.HasValue ?
                new ObjectParameter("wComAmount", wComAmount) :
                new ObjectParameter("wComAmount", typeof(double));
    
            var cpteGlParameter = cpteGl != null ?
                new ObjectParameter("CpteGl", cpteGl) :
                new ObjectParameter("CpteGl", typeof(string));
    
            var cleGlParameter = cleGl != null ?
                new ObjectParameter("CleGl", cleGl) :
                new ObjectParameter("CleGl", typeof(string));
    
            var libCpteGlParameter = libCpteGl != null ?
                new ObjectParameter("LibCpteGl", libCpteGl) :
                new ObjectParameter("LibCpteGl", typeof(string));
    
            var wtrCodeParameter = wtrCode != null ?
                new ObjectParameter("WtrCode", wtrCode) :
                new ObjectParameter("WtrCode", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var wctrnCodeParameter = wctrnCode != null ?
                new ObjectParameter("wctrnCode", wctrnCode) :
                new ObjectParameter("wctrnCode", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CashPymntsT", agenceParameter, clientParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, wpayamountParameter, woptnamountParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, dateCreationParameter, descriptionParameter, prefixtxnnoParameter, integritystatusParameter, dateTransfertParameter, libDeviseParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, libCaisseParameter, libCpteCaisseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, wtaxamountParameter, wComAmountParameter, cpteGlParameter, cleGlParameter, libCpteGlParameter, wtrCodeParameter, libTrCodeParameter, wctrnCodeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int CashPymntsTIBR(string agence, string wAgenceDes, string client, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string cpteJumelleRe, string denomination, string wDenominationRe, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> wpayamount, Nullable<double> woptnamount, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, Nullable<System.DateTime> dateCreation, string description, string prefixtxnno, string integritystatus, Nullable<System.DateTime> dateTransfert, string libDevise, string caisse, string cpteCaisse, string cleCpteCaisse, string libCaisse, string libCpteCaisse, string cpteColClt, string cleColClt, string libCpteColClt, Nullable<double> wtaxamount, Nullable<double> wComAmount, string cpteGl, string cleGl, string libCpteGl, string wtrCode, string libTrCode, string wctrnCode, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, string optionSend, string langue, string telephone, ObjectParameter msg, string computerName, string language, string wLibAgenceDest)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var wAgenceDesParameter = wAgenceDes != null ?
                new ObjectParameter("WAgenceDes", wAgenceDes) :
                new ObjectParameter("WAgenceDes", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var cpteJumelleReParameter = cpteJumelleRe != null ?
                new ObjectParameter("CpteJumelleRe", cpteJumelleRe) :
                new ObjectParameter("CpteJumelleRe", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var wDenominationReParameter = wDenominationRe != null ?
                new ObjectParameter("wDenominationRe", wDenominationRe) :
                new ObjectParameter("wDenominationRe", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var wpayamountParameter = wpayamount.HasValue ?
                new ObjectParameter("wpayamount", wpayamount) :
                new ObjectParameter("wpayamount", typeof(double));
    
            var woptnamountParameter = woptnamount.HasValue ?
                new ObjectParameter("woptnamount", woptnamount) :
                new ObjectParameter("woptnamount", typeof(double));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var wtaxamountParameter = wtaxamount.HasValue ?
                new ObjectParameter("wtaxamount", wtaxamount) :
                new ObjectParameter("wtaxamount", typeof(double));
    
            var wComAmountParameter = wComAmount.HasValue ?
                new ObjectParameter("wComAmount", wComAmount) :
                new ObjectParameter("wComAmount", typeof(double));
    
            var cpteGlParameter = cpteGl != null ?
                new ObjectParameter("CpteGl", cpteGl) :
                new ObjectParameter("CpteGl", typeof(string));
    
            var cleGlParameter = cleGl != null ?
                new ObjectParameter("CleGl", cleGl) :
                new ObjectParameter("CleGl", typeof(string));
    
            var libCpteGlParameter = libCpteGl != null ?
                new ObjectParameter("LibCpteGl", libCpteGl) :
                new ObjectParameter("LibCpteGl", typeof(string));
    
            var wtrCodeParameter = wtrCode != null ?
                new ObjectParameter("WtrCode", wtrCode) :
                new ObjectParameter("WtrCode", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var wctrnCodeParameter = wctrnCode != null ?
                new ObjectParameter("wctrnCode", wctrnCode) :
                new ObjectParameter("wctrnCode", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var optionSendParameter = optionSend != null ?
                new ObjectParameter("OptionSend", optionSend) :
                new ObjectParameter("OptionSend", typeof(string));
    
            var langueParameter = langue != null ?
                new ObjectParameter("Langue", langue) :
                new ObjectParameter("Langue", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var wLibAgenceDestParameter = wLibAgenceDest != null ?
                new ObjectParameter("WLibAgenceDest", wLibAgenceDest) :
                new ObjectParameter("WLibAgenceDest", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CashPymntsTIBR", agenceParameter, wAgenceDesParameter, clientParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, cpteJumelleReParameter, denominationParameter, wDenominationReParameter, deviseParameter, dateOperationParameter, dateValeurParameter, wpayamountParameter, woptnamountParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, dateCreationParameter, descriptionParameter, prefixtxnnoParameter, integritystatusParameter, dateTransfertParameter, libDeviseParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, libCaisseParameter, libCpteCaisseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, wtaxamountParameter, wComAmountParameter, cpteGlParameter, cleGlParameter, libCpteGlParameter, wtrCodeParameter, libTrCodeParameter, wctrnCodeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, optionSendParameter, langueParameter, telephoneParameter, msg, computerNameParameter, languageParameter, wLibAgenceDestParameter);
        }
    
        public virtual int Category_Delete(string catClient, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var catClientParameter = catClient != null ?
                new ObjectParameter("CatClient", catClient) :
                new ObjectParameter("CatClient", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Category_Delete", catClientParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int Category_Insert(string catClient, string customerType, string libCatClient, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var catClientParameter = catClient != null ?
                new ObjectParameter("CatClient", catClient) :
                new ObjectParameter("CatClient", typeof(string));
    
            var customerTypeParameter = customerType != null ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(string));
    
            var libCatClientParameter = libCatClient != null ?
                new ObjectParameter("LibCatClient", libCatClient) :
                new ObjectParameter("LibCatClient", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Category_Insert", catClientParameter, customerTypeParameter, libCatClientParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int Category_Update(string catClient, string customerType, string libCatClient, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var catClientParameter = catClient != null ?
                new ObjectParameter("CatClient", catClient) :
                new ObjectParameter("CatClient", typeof(string));
    
            var customerTypeParameter = customerType != null ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(string));
    
            var libCatClientParameter = libCatClient != null ?
                new ObjectParameter("LibCatClient", libCatClient) :
                new ObjectParameter("LibCatClient", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Category_Update", catClientParameter, customerTypeParameter, libCatClientParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int CCalMensuel(string agence, string libAgence, string devise, string libDevise, string employe, string libEmploye, ObjectParameter lect, ObjectParameter msg, string computerName, string language, string cobacID)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CCalMensuel", agenceParameter, libAgenceParameter, deviseParameter, libDeviseParameter, employeParameter, libEmployeParameter, lect, msg, computerNameParameter, languageParameter, cobacIDParameter);
        }
    
        public virtual int CertificateDeposit(string wagence, string wLibAgence, string wEmploye, string wLibEmploye, ObjectParameter msg, ObjectParameter lect, string computerName, string language)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CertificateDeposit", wagenceParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, msg, lect, computerNameParameter, languageParameter);
        }
    
        public virtual int ChargeCustLoanClassification(string agence, string employe, ObjectParameter lect, ObjectParameter msg, string computerName, string language, Nullable<System.DateTime> operationDate)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var operationDateParameter = operationDate.HasValue ?
                new ObjectParameter("OperationDate", operationDate) :
                new ObjectParameter("OperationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChargeCustLoanClassification", agenceParameter, employeParameter, lect, msg, computerNameParameter, languageParameter, operationDateParameter);
        }
    
        public virtual int ChargeLoanClassification(string agence, string employe, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChargeLoanClassification", agenceParameter, employeParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int ChargeRecWriteoff(string wagence, string wEmploye, ObjectParameter lecture, ObjectParameter msg, string language)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChargeRecWriteoff", wagenceParameter, wEmployeParameter, lecture, msg, languageParameter);
        }
    
        public virtual ObjectResult<ClientBnk_Delete_Result> ClientBnk_Delete(string agence, string client, ObjectParameter lect, string employe, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClientBnk_Delete_Result>("ClientBnk_Delete", agenceParameter, clientParameter, lect, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<ClientBnk_Filter_Result> ClientBnk_Filter(Nullable<short> intFilterMode, string agence, string client, ObjectParameter countfield)
        {
            var intFilterModeParameter = intFilterMode.HasValue ?
                new ObjectParameter("IntFilterMode", intFilterMode) :
                new ObjectParameter("IntFilterMode", typeof(short));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClientBnk_Filter_Result>("ClientBnk_Filter", intFilterModeParameter, agenceParameter, clientParameter, countfield);
        }
    
        public virtual ObjectResult<ClientBnk_Insert_Result> ClientBnk_Insert(string agence, string client, string nom, string prenom, string adresse1, string adresse2, string adresse3, string bP, string ville, string pays, string typeResident, string agentEco, string activiteEco, string natClient, string libNatClient, string natJuridique, string qualite, string titre, string typeClient, string catClient, string libAgence, Nullable<System.DateTime> dateNaissance, string lieuNaissance, string cNIPass, string telephone1, string telephone2, string telephone3, string telex, string fax, Nullable<short> groupe, string nationalite, string natBeac, string nomJeuneFille, string sigle, string raisonSociale, string siegeSocial, string registreCce, string nomAbrege, string numContrib, Nullable<System.DateTime> dateCreatSoc, string objetSocial, string libNatBeac, string libAgentEco, string libActiviteEco, string libNatJuridique, string libVille, string libTitre, string libNationalite, string libSiegeSocial, string precisNais, Nullable<System.DateTime> dateCreation, string nomJumelle, string employe, string nomemploye, string profession, Nullable<System.DateTime> deathdate, Nullable<System.DateTime> adhesiondate, Nullable<System.DateTime> datedeclaration, Nullable<System.DateTime> dateTransfert, string integritystatus, ObjectParameter lect, string custRelCode, string email, string custRelName, string ebnkSub, string computerName, string language, ObjectParameter errMsg, string placeIssueCNI, Nullable<System.DateTime> dteIssueCNI, string customerRemark, string cOMPANYGRPE)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("Prenom", prenom) :
                new ObjectParameter("Prenom", typeof(string));
    
            var adresse1Parameter = adresse1 != null ?
                new ObjectParameter("Adresse1", adresse1) :
                new ObjectParameter("Adresse1", typeof(string));
    
            var adresse2Parameter = adresse2 != null ?
                new ObjectParameter("Adresse2", adresse2) :
                new ObjectParameter("Adresse2", typeof(string));
    
            var adresse3Parameter = adresse3 != null ?
                new ObjectParameter("Adresse3", adresse3) :
                new ObjectParameter("Adresse3", typeof(string));
    
            var bPParameter = bP != null ?
                new ObjectParameter("BP", bP) :
                new ObjectParameter("BP", typeof(string));
    
            var villeParameter = ville != null ?
                new ObjectParameter("Ville", ville) :
                new ObjectParameter("Ville", typeof(string));
    
            var paysParameter = pays != null ?
                new ObjectParameter("Pays", pays) :
                new ObjectParameter("Pays", typeof(string));
    
            var typeResidentParameter = typeResident != null ?
                new ObjectParameter("TypeResident", typeResident) :
                new ObjectParameter("TypeResident", typeof(string));
    
            var agentEcoParameter = agentEco != null ?
                new ObjectParameter("AgentEco", agentEco) :
                new ObjectParameter("AgentEco", typeof(string));
    
            var activiteEcoParameter = activiteEco != null ?
                new ObjectParameter("ActiviteEco", activiteEco) :
                new ObjectParameter("ActiviteEco", typeof(string));
    
            var natClientParameter = natClient != null ?
                new ObjectParameter("NatClient", natClient) :
                new ObjectParameter("NatClient", typeof(string));
    
            var libNatClientParameter = libNatClient != null ?
                new ObjectParameter("LibNatClient", libNatClient) :
                new ObjectParameter("LibNatClient", typeof(string));
    
            var natJuridiqueParameter = natJuridique != null ?
                new ObjectParameter("NatJuridique", natJuridique) :
                new ObjectParameter("NatJuridique", typeof(string));
    
            var qualiteParameter = qualite != null ?
                new ObjectParameter("Qualite", qualite) :
                new ObjectParameter("Qualite", typeof(string));
    
            var titreParameter = titre != null ?
                new ObjectParameter("Titre", titre) :
                new ObjectParameter("Titre", typeof(string));
    
            var typeClientParameter = typeClient != null ?
                new ObjectParameter("TypeClient", typeClient) :
                new ObjectParameter("TypeClient", typeof(string));
    
            var catClientParameter = catClient != null ?
                new ObjectParameter("CatClient", catClient) :
                new ObjectParameter("CatClient", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var dateNaissanceParameter = dateNaissance.HasValue ?
                new ObjectParameter("DateNaissance", dateNaissance) :
                new ObjectParameter("DateNaissance", typeof(System.DateTime));
    
            var lieuNaissanceParameter = lieuNaissance != null ?
                new ObjectParameter("LieuNaissance", lieuNaissance) :
                new ObjectParameter("LieuNaissance", typeof(string));
    
            var cNIPassParameter = cNIPass != null ?
                new ObjectParameter("CNIPass", cNIPass) :
                new ObjectParameter("CNIPass", typeof(string));
    
            var telephone1Parameter = telephone1 != null ?
                new ObjectParameter("Telephone1", telephone1) :
                new ObjectParameter("Telephone1", typeof(string));
    
            var telephone2Parameter = telephone2 != null ?
                new ObjectParameter("Telephone2", telephone2) :
                new ObjectParameter("Telephone2", typeof(string));
    
            var telephone3Parameter = telephone3 != null ?
                new ObjectParameter("Telephone3", telephone3) :
                new ObjectParameter("Telephone3", typeof(string));
    
            var telexParameter = telex != null ?
                new ObjectParameter("Telex", telex) :
                new ObjectParameter("Telex", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var groupeParameter = groupe.HasValue ?
                new ObjectParameter("Groupe", groupe) :
                new ObjectParameter("Groupe", typeof(short));
    
            var nationaliteParameter = nationalite != null ?
                new ObjectParameter("Nationalite", nationalite) :
                new ObjectParameter("Nationalite", typeof(string));
    
            var natBeacParameter = natBeac != null ?
                new ObjectParameter("NatBeac", natBeac) :
                new ObjectParameter("NatBeac", typeof(string));
    
            var nomJeuneFilleParameter = nomJeuneFille != null ?
                new ObjectParameter("NomJeuneFille", nomJeuneFille) :
                new ObjectParameter("NomJeuneFille", typeof(string));
    
            var sigleParameter = sigle != null ?
                new ObjectParameter("Sigle", sigle) :
                new ObjectParameter("Sigle", typeof(string));
    
            var raisonSocialeParameter = raisonSociale != null ?
                new ObjectParameter("RaisonSociale", raisonSociale) :
                new ObjectParameter("RaisonSociale", typeof(string));
    
            var siegeSocialParameter = siegeSocial != null ?
                new ObjectParameter("SiegeSocial", siegeSocial) :
                new ObjectParameter("SiegeSocial", typeof(string));
    
            var registreCceParameter = registreCce != null ?
                new ObjectParameter("RegistreCce", registreCce) :
                new ObjectParameter("RegistreCce", typeof(string));
    
            var nomAbregeParameter = nomAbrege != null ?
                new ObjectParameter("NomAbrege", nomAbrege) :
                new ObjectParameter("NomAbrege", typeof(string));
    
            var numContribParameter = numContrib != null ?
                new ObjectParameter("NumContrib", numContrib) :
                new ObjectParameter("NumContrib", typeof(string));
    
            var dateCreatSocParameter = dateCreatSoc.HasValue ?
                new ObjectParameter("DateCreatSoc", dateCreatSoc) :
                new ObjectParameter("DateCreatSoc", typeof(System.DateTime));
    
            var objetSocialParameter = objetSocial != null ?
                new ObjectParameter("ObjetSocial", objetSocial) :
                new ObjectParameter("ObjetSocial", typeof(string));
    
            var libNatBeacParameter = libNatBeac != null ?
                new ObjectParameter("LibNatBeac", libNatBeac) :
                new ObjectParameter("LibNatBeac", typeof(string));
    
            var libAgentEcoParameter = libAgentEco != null ?
                new ObjectParameter("LibAgentEco", libAgentEco) :
                new ObjectParameter("LibAgentEco", typeof(string));
    
            var libActiviteEcoParameter = libActiviteEco != null ?
                new ObjectParameter("LibActiviteEco", libActiviteEco) :
                new ObjectParameter("LibActiviteEco", typeof(string));
    
            var libNatJuridiqueParameter = libNatJuridique != null ?
                new ObjectParameter("LibNatJuridique", libNatJuridique) :
                new ObjectParameter("LibNatJuridique", typeof(string));
    
            var libVilleParameter = libVille != null ?
                new ObjectParameter("LibVille", libVille) :
                new ObjectParameter("LibVille", typeof(string));
    
            var libTitreParameter = libTitre != null ?
                new ObjectParameter("LibTitre", libTitre) :
                new ObjectParameter("LibTitre", typeof(string));
    
            var libNationaliteParameter = libNationalite != null ?
                new ObjectParameter("LibNationalite", libNationalite) :
                new ObjectParameter("LibNationalite", typeof(string));
    
            var libSiegeSocialParameter = libSiegeSocial != null ?
                new ObjectParameter("LibSiegeSocial", libSiegeSocial) :
                new ObjectParameter("LibSiegeSocial", typeof(string));
    
            var precisNaisParameter = precisNais != null ?
                new ObjectParameter("PrecisNais", precisNais) :
                new ObjectParameter("PrecisNais", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var nomJumelleParameter = nomJumelle != null ?
                new ObjectParameter("NomJumelle", nomJumelle) :
                new ObjectParameter("NomJumelle", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var nomemployeParameter = nomemploye != null ?
                new ObjectParameter("Nomemploye", nomemploye) :
                new ObjectParameter("Nomemploye", typeof(string));
    
            var professionParameter = profession != null ?
                new ObjectParameter("Profession", profession) :
                new ObjectParameter("Profession", typeof(string));
    
            var deathdateParameter = deathdate.HasValue ?
                new ObjectParameter("deathdate", deathdate) :
                new ObjectParameter("deathdate", typeof(System.DateTime));
    
            var adhesiondateParameter = adhesiondate.HasValue ?
                new ObjectParameter("Adhesiondate", adhesiondate) :
                new ObjectParameter("Adhesiondate", typeof(System.DateTime));
    
            var datedeclarationParameter = datedeclaration.HasValue ?
                new ObjectParameter("datedeclaration", datedeclaration) :
                new ObjectParameter("datedeclaration", typeof(System.DateTime));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var custRelCodeParameter = custRelCode != null ?
                new ObjectParameter("CustRelCode", custRelCode) :
                new ObjectParameter("CustRelCode", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var custRelNameParameter = custRelName != null ?
                new ObjectParameter("CustRelName", custRelName) :
                new ObjectParameter("CustRelName", typeof(string));
    
            var ebnkSubParameter = ebnkSub != null ?
                new ObjectParameter("EbnkSub", ebnkSub) :
                new ObjectParameter("EbnkSub", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var placeIssueCNIParameter = placeIssueCNI != null ?
                new ObjectParameter("PlaceIssueCNI", placeIssueCNI) :
                new ObjectParameter("PlaceIssueCNI", typeof(string));
    
            var dteIssueCNIParameter = dteIssueCNI.HasValue ?
                new ObjectParameter("DteIssueCNI", dteIssueCNI) :
                new ObjectParameter("DteIssueCNI", typeof(System.DateTime));
    
            var customerRemarkParameter = customerRemark != null ?
                new ObjectParameter("CustomerRemark", customerRemark) :
                new ObjectParameter("CustomerRemark", typeof(string));
    
            var cOMPANYGRPEParameter = cOMPANYGRPE != null ?
                new ObjectParameter("COMPANYGRPE", cOMPANYGRPE) :
                new ObjectParameter("COMPANYGRPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClientBnk_Insert_Result>("ClientBnk_Insert", agenceParameter, clientParameter, nomParameter, prenomParameter, adresse1Parameter, adresse2Parameter, adresse3Parameter, bPParameter, villeParameter, paysParameter, typeResidentParameter, agentEcoParameter, activiteEcoParameter, natClientParameter, libNatClientParameter, natJuridiqueParameter, qualiteParameter, titreParameter, typeClientParameter, catClientParameter, libAgenceParameter, dateNaissanceParameter, lieuNaissanceParameter, cNIPassParameter, telephone1Parameter, telephone2Parameter, telephone3Parameter, telexParameter, faxParameter, groupeParameter, nationaliteParameter, natBeacParameter, nomJeuneFilleParameter, sigleParameter, raisonSocialeParameter, siegeSocialParameter, registreCceParameter, nomAbregeParameter, numContribParameter, dateCreatSocParameter, objetSocialParameter, libNatBeacParameter, libAgentEcoParameter, libActiviteEcoParameter, libNatJuridiqueParameter, libVilleParameter, libTitreParameter, libNationaliteParameter, libSiegeSocialParameter, precisNaisParameter, dateCreationParameter, nomJumelleParameter, employeParameter, nomemployeParameter, professionParameter, deathdateParameter, adhesiondateParameter, datedeclarationParameter, dateTransfertParameter, integritystatusParameter, lect, custRelCodeParameter, emailParameter, custRelNameParameter, ebnkSubParameter, computerNameParameter, languageParameter, errMsg, placeIssueCNIParameter, dteIssueCNIParameter, customerRemarkParameter, cOMPANYGRPEParameter);
        }
    
        public virtual ObjectResult<ClientBnk_Insert_Migration_Result> ClientBnk_Insert_Migration(Nullable<short> agence, Nullable<decimal> client, Nullable<decimal> oldClient, string nom, string prenom, string adresse1, string adresse2, string adresse3, Nullable<int> bP, string ville, string pays, string typeResident, string agentEco, string activiteEco, string natClient, string libNatClient, string natJuridique, string qualite, string titre, string typeClient, string catClient, string libAgence, string dateNaissance, string lieuNaissance, string cNIPass, string telephone1, string telephone2, string telephone3, string telex, string fax, Nullable<short> groupe, string nationalite, string natBeac, string nomJeuneFille, string sigle, string raisonSociale, string siegeSocial, string registreCce, string nomAbrege, string numContrib, Nullable<System.DateTime> dateCreatSoc, string objetSocial, string libNatBeac, string libAgentEco, string libActiviteEco, string libNatJuridique, string libVille, string libTitre, string libNationalite, string libSiegeSocial, string precisNais, Nullable<System.DateTime> dateCreation, string nomJumelle, Nullable<int> employe, string nomemploye, string profession, Nullable<System.DateTime> deathdate, Nullable<System.DateTime> adhesiondate, Nullable<System.DateTime> datedeclaration, Nullable<System.DateTime> dateTransfert, string integritystatus, ObjectParameter lect, Nullable<int> custRelCode, string email, string custRelName, string ebnkSub)
        {
            var agenceParameter = agence.HasValue ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(short));
    
            var clientParameter = client.HasValue ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(decimal));
    
            var oldClientParameter = oldClient.HasValue ?
                new ObjectParameter("OldClient", oldClient) :
                new ObjectParameter("OldClient", typeof(decimal));
    
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("Prenom", prenom) :
                new ObjectParameter("Prenom", typeof(string));
    
            var adresse1Parameter = adresse1 != null ?
                new ObjectParameter("Adresse1", adresse1) :
                new ObjectParameter("Adresse1", typeof(string));
    
            var adresse2Parameter = adresse2 != null ?
                new ObjectParameter("Adresse2", adresse2) :
                new ObjectParameter("Adresse2", typeof(string));
    
            var adresse3Parameter = adresse3 != null ?
                new ObjectParameter("Adresse3", adresse3) :
                new ObjectParameter("Adresse3", typeof(string));
    
            var bPParameter = bP.HasValue ?
                new ObjectParameter("BP", bP) :
                new ObjectParameter("BP", typeof(int));
    
            var villeParameter = ville != null ?
                new ObjectParameter("Ville", ville) :
                new ObjectParameter("Ville", typeof(string));
    
            var paysParameter = pays != null ?
                new ObjectParameter("Pays", pays) :
                new ObjectParameter("Pays", typeof(string));
    
            var typeResidentParameter = typeResident != null ?
                new ObjectParameter("TypeResident", typeResident) :
                new ObjectParameter("TypeResident", typeof(string));
    
            var agentEcoParameter = agentEco != null ?
                new ObjectParameter("AgentEco", agentEco) :
                new ObjectParameter("AgentEco", typeof(string));
    
            var activiteEcoParameter = activiteEco != null ?
                new ObjectParameter("ActiviteEco", activiteEco) :
                new ObjectParameter("ActiviteEco", typeof(string));
    
            var natClientParameter = natClient != null ?
                new ObjectParameter("NatClient", natClient) :
                new ObjectParameter("NatClient", typeof(string));
    
            var libNatClientParameter = libNatClient != null ?
                new ObjectParameter("LibNatClient", libNatClient) :
                new ObjectParameter("LibNatClient", typeof(string));
    
            var natJuridiqueParameter = natJuridique != null ?
                new ObjectParameter("NatJuridique", natJuridique) :
                new ObjectParameter("NatJuridique", typeof(string));
    
            var qualiteParameter = qualite != null ?
                new ObjectParameter("Qualite", qualite) :
                new ObjectParameter("Qualite", typeof(string));
    
            var titreParameter = titre != null ?
                new ObjectParameter("Titre", titre) :
                new ObjectParameter("Titre", typeof(string));
    
            var typeClientParameter = typeClient != null ?
                new ObjectParameter("TypeClient", typeClient) :
                new ObjectParameter("TypeClient", typeof(string));
    
            var catClientParameter = catClient != null ?
                new ObjectParameter("CatClient", catClient) :
                new ObjectParameter("CatClient", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var dateNaissanceParameter = dateNaissance != null ?
                new ObjectParameter("DateNaissance", dateNaissance) :
                new ObjectParameter("DateNaissance", typeof(string));
    
            var lieuNaissanceParameter = lieuNaissance != null ?
                new ObjectParameter("LieuNaissance", lieuNaissance) :
                new ObjectParameter("LieuNaissance", typeof(string));
    
            var cNIPassParameter = cNIPass != null ?
                new ObjectParameter("CNIPass", cNIPass) :
                new ObjectParameter("CNIPass", typeof(string));
    
            var telephone1Parameter = telephone1 != null ?
                new ObjectParameter("Telephone1", telephone1) :
                new ObjectParameter("Telephone1", typeof(string));
    
            var telephone2Parameter = telephone2 != null ?
                new ObjectParameter("Telephone2", telephone2) :
                new ObjectParameter("Telephone2", typeof(string));
    
            var telephone3Parameter = telephone3 != null ?
                new ObjectParameter("Telephone3", telephone3) :
                new ObjectParameter("Telephone3", typeof(string));
    
            var telexParameter = telex != null ?
                new ObjectParameter("Telex", telex) :
                new ObjectParameter("Telex", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var groupeParameter = groupe.HasValue ?
                new ObjectParameter("Groupe", groupe) :
                new ObjectParameter("Groupe", typeof(short));
    
            var nationaliteParameter = nationalite != null ?
                new ObjectParameter("Nationalite", nationalite) :
                new ObjectParameter("Nationalite", typeof(string));
    
            var natBeacParameter = natBeac != null ?
                new ObjectParameter("NatBeac", natBeac) :
                new ObjectParameter("NatBeac", typeof(string));
    
            var nomJeuneFilleParameter = nomJeuneFille != null ?
                new ObjectParameter("NomJeuneFille", nomJeuneFille) :
                new ObjectParameter("NomJeuneFille", typeof(string));
    
            var sigleParameter = sigle != null ?
                new ObjectParameter("Sigle", sigle) :
                new ObjectParameter("Sigle", typeof(string));
    
            var raisonSocialeParameter = raisonSociale != null ?
                new ObjectParameter("RaisonSociale", raisonSociale) :
                new ObjectParameter("RaisonSociale", typeof(string));
    
            var siegeSocialParameter = siegeSocial != null ?
                new ObjectParameter("SiegeSocial", siegeSocial) :
                new ObjectParameter("SiegeSocial", typeof(string));
    
            var registreCceParameter = registreCce != null ?
                new ObjectParameter("RegistreCce", registreCce) :
                new ObjectParameter("RegistreCce", typeof(string));
    
            var nomAbregeParameter = nomAbrege != null ?
                new ObjectParameter("NomAbrege", nomAbrege) :
                new ObjectParameter("NomAbrege", typeof(string));
    
            var numContribParameter = numContrib != null ?
                new ObjectParameter("NumContrib", numContrib) :
                new ObjectParameter("NumContrib", typeof(string));
    
            var dateCreatSocParameter = dateCreatSoc.HasValue ?
                new ObjectParameter("DateCreatSoc", dateCreatSoc) :
                new ObjectParameter("DateCreatSoc", typeof(System.DateTime));
    
            var objetSocialParameter = objetSocial != null ?
                new ObjectParameter("ObjetSocial", objetSocial) :
                new ObjectParameter("ObjetSocial", typeof(string));
    
            var libNatBeacParameter = libNatBeac != null ?
                new ObjectParameter("LibNatBeac", libNatBeac) :
                new ObjectParameter("LibNatBeac", typeof(string));
    
            var libAgentEcoParameter = libAgentEco != null ?
                new ObjectParameter("LibAgentEco", libAgentEco) :
                new ObjectParameter("LibAgentEco", typeof(string));
    
            var libActiviteEcoParameter = libActiviteEco != null ?
                new ObjectParameter("LibActiviteEco", libActiviteEco) :
                new ObjectParameter("LibActiviteEco", typeof(string));
    
            var libNatJuridiqueParameter = libNatJuridique != null ?
                new ObjectParameter("LibNatJuridique", libNatJuridique) :
                new ObjectParameter("LibNatJuridique", typeof(string));
    
            var libVilleParameter = libVille != null ?
                new ObjectParameter("LibVille", libVille) :
                new ObjectParameter("LibVille", typeof(string));
    
            var libTitreParameter = libTitre != null ?
                new ObjectParameter("LibTitre", libTitre) :
                new ObjectParameter("LibTitre", typeof(string));
    
            var libNationaliteParameter = libNationalite != null ?
                new ObjectParameter("LibNationalite", libNationalite) :
                new ObjectParameter("LibNationalite", typeof(string));
    
            var libSiegeSocialParameter = libSiegeSocial != null ?
                new ObjectParameter("LibSiegeSocial", libSiegeSocial) :
                new ObjectParameter("LibSiegeSocial", typeof(string));
    
            var precisNaisParameter = precisNais != null ?
                new ObjectParameter("PrecisNais", precisNais) :
                new ObjectParameter("PrecisNais", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var nomJumelleParameter = nomJumelle != null ?
                new ObjectParameter("NomJumelle", nomJumelle) :
                new ObjectParameter("NomJumelle", typeof(string));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(int));
    
            var nomemployeParameter = nomemploye != null ?
                new ObjectParameter("Nomemploye", nomemploye) :
                new ObjectParameter("Nomemploye", typeof(string));
    
            var professionParameter = profession != null ?
                new ObjectParameter("Profession", profession) :
                new ObjectParameter("Profession", typeof(string));
    
            var deathdateParameter = deathdate.HasValue ?
                new ObjectParameter("deathdate", deathdate) :
                new ObjectParameter("deathdate", typeof(System.DateTime));
    
            var adhesiondateParameter = adhesiondate.HasValue ?
                new ObjectParameter("Adhesiondate", adhesiondate) :
                new ObjectParameter("Adhesiondate", typeof(System.DateTime));
    
            var datedeclarationParameter = datedeclaration.HasValue ?
                new ObjectParameter("datedeclaration", datedeclaration) :
                new ObjectParameter("datedeclaration", typeof(System.DateTime));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var custRelCodeParameter = custRelCode.HasValue ?
                new ObjectParameter("CustRelCode", custRelCode) :
                new ObjectParameter("CustRelCode", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var custRelNameParameter = custRelName != null ?
                new ObjectParameter("CustRelName", custRelName) :
                new ObjectParameter("CustRelName", typeof(string));
    
            var ebnkSubParameter = ebnkSub != null ?
                new ObjectParameter("EbnkSub", ebnkSub) :
                new ObjectParameter("EbnkSub", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClientBnk_Insert_Migration_Result>("ClientBnk_Insert_Migration", agenceParameter, clientParameter, oldClientParameter, nomParameter, prenomParameter, adresse1Parameter, adresse2Parameter, adresse3Parameter, bPParameter, villeParameter, paysParameter, typeResidentParameter, agentEcoParameter, activiteEcoParameter, natClientParameter, libNatClientParameter, natJuridiqueParameter, qualiteParameter, titreParameter, typeClientParameter, catClientParameter, libAgenceParameter, dateNaissanceParameter, lieuNaissanceParameter, cNIPassParameter, telephone1Parameter, telephone2Parameter, telephone3Parameter, telexParameter, faxParameter, groupeParameter, nationaliteParameter, natBeacParameter, nomJeuneFilleParameter, sigleParameter, raisonSocialeParameter, siegeSocialParameter, registreCceParameter, nomAbregeParameter, numContribParameter, dateCreatSocParameter, objetSocialParameter, libNatBeacParameter, libAgentEcoParameter, libActiviteEcoParameter, libNatJuridiqueParameter, libVilleParameter, libTitreParameter, libNationaliteParameter, libSiegeSocialParameter, precisNaisParameter, dateCreationParameter, nomJumelleParameter, employeParameter, nomemployeParameter, professionParameter, deathdateParameter, adhesiondateParameter, datedeclarationParameter, dateTransfertParameter, integritystatusParameter, lect, custRelCodeParameter, emailParameter, custRelNameParameter, ebnkSubParameter);
        }
    
        public virtual ObjectResult<ClientBnk_Update_Result> ClientBnk_Update(string agence, string client, string nom, string prenom, string adresse1, string adresse2, string adresse3, string bP, string ville, string pays, string typeResident, string agentEco, string activiteEco, string natClient, string libNatClient, string natJuridique, string qualite, string titre, string typeClient, string catClient, string libAgence, Nullable<System.DateTime> dateNaissance, string lieuNaissance, string cNIPass, string telephone1, string telephone2, string telephone3, string telex, string fax, Nullable<short> groupe, string nationalite, string natBeac, string nomJeuneFille, string sigle, string raisonSociale, string siegeSocial, string registreCce, string nomAbrege, string numContrib, Nullable<System.DateTime> dateCreatSoc, string objetSocial, string libNatBeac, string libAgentEco, string libActiviteEco, string libNatJuridique, string libVille, string libTitre, string libNationalite, string libSiegeSocial, string precisNais, Nullable<System.DateTime> dateCreation, string nomJumelle, string employe, string nomemploye, string profession, Nullable<System.DateTime> deathdate, Nullable<System.DateTime> adhesiondate, Nullable<System.DateTime> datedeclaration, Nullable<System.DateTime> dateTransfert, string integritystatus, ObjectParameter lect, string custRelCode, string custRelName, string ebnkSub, string email, ObjectParameter msg, string computerName, string language, string placeIssueCNI, Nullable<System.DateTime> dteIssueCNI, string customerRemark, string cOMPANYGRPE)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("Prenom", prenom) :
                new ObjectParameter("Prenom", typeof(string));
    
            var adresse1Parameter = adresse1 != null ?
                new ObjectParameter("Adresse1", adresse1) :
                new ObjectParameter("Adresse1", typeof(string));
    
            var adresse2Parameter = adresse2 != null ?
                new ObjectParameter("Adresse2", adresse2) :
                new ObjectParameter("Adresse2", typeof(string));
    
            var adresse3Parameter = adresse3 != null ?
                new ObjectParameter("Adresse3", adresse3) :
                new ObjectParameter("Adresse3", typeof(string));
    
            var bPParameter = bP != null ?
                new ObjectParameter("BP", bP) :
                new ObjectParameter("BP", typeof(string));
    
            var villeParameter = ville != null ?
                new ObjectParameter("Ville", ville) :
                new ObjectParameter("Ville", typeof(string));
    
            var paysParameter = pays != null ?
                new ObjectParameter("Pays", pays) :
                new ObjectParameter("Pays", typeof(string));
    
            var typeResidentParameter = typeResident != null ?
                new ObjectParameter("TypeResident", typeResident) :
                new ObjectParameter("TypeResident", typeof(string));
    
            var agentEcoParameter = agentEco != null ?
                new ObjectParameter("AgentEco", agentEco) :
                new ObjectParameter("AgentEco", typeof(string));
    
            var activiteEcoParameter = activiteEco != null ?
                new ObjectParameter("ActiviteEco", activiteEco) :
                new ObjectParameter("ActiviteEco", typeof(string));
    
            var natClientParameter = natClient != null ?
                new ObjectParameter("NatClient", natClient) :
                new ObjectParameter("NatClient", typeof(string));
    
            var libNatClientParameter = libNatClient != null ?
                new ObjectParameter("LibNatClient", libNatClient) :
                new ObjectParameter("LibNatClient", typeof(string));
    
            var natJuridiqueParameter = natJuridique != null ?
                new ObjectParameter("NatJuridique", natJuridique) :
                new ObjectParameter("NatJuridique", typeof(string));
    
            var qualiteParameter = qualite != null ?
                new ObjectParameter("Qualite", qualite) :
                new ObjectParameter("Qualite", typeof(string));
    
            var titreParameter = titre != null ?
                new ObjectParameter("Titre", titre) :
                new ObjectParameter("Titre", typeof(string));
    
            var typeClientParameter = typeClient != null ?
                new ObjectParameter("TypeClient", typeClient) :
                new ObjectParameter("TypeClient", typeof(string));
    
            var catClientParameter = catClient != null ?
                new ObjectParameter("CatClient", catClient) :
                new ObjectParameter("CatClient", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var dateNaissanceParameter = dateNaissance.HasValue ?
                new ObjectParameter("DateNaissance", dateNaissance) :
                new ObjectParameter("DateNaissance", typeof(System.DateTime));
    
            var lieuNaissanceParameter = lieuNaissance != null ?
                new ObjectParameter("LieuNaissance", lieuNaissance) :
                new ObjectParameter("LieuNaissance", typeof(string));
    
            var cNIPassParameter = cNIPass != null ?
                new ObjectParameter("CNIPass", cNIPass) :
                new ObjectParameter("CNIPass", typeof(string));
    
            var telephone1Parameter = telephone1 != null ?
                new ObjectParameter("Telephone1", telephone1) :
                new ObjectParameter("Telephone1", typeof(string));
    
            var telephone2Parameter = telephone2 != null ?
                new ObjectParameter("Telephone2", telephone2) :
                new ObjectParameter("Telephone2", typeof(string));
    
            var telephone3Parameter = telephone3 != null ?
                new ObjectParameter("Telephone3", telephone3) :
                new ObjectParameter("Telephone3", typeof(string));
    
            var telexParameter = telex != null ?
                new ObjectParameter("Telex", telex) :
                new ObjectParameter("Telex", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var groupeParameter = groupe.HasValue ?
                new ObjectParameter("Groupe", groupe) :
                new ObjectParameter("Groupe", typeof(short));
    
            var nationaliteParameter = nationalite != null ?
                new ObjectParameter("Nationalite", nationalite) :
                new ObjectParameter("Nationalite", typeof(string));
    
            var natBeacParameter = natBeac != null ?
                new ObjectParameter("NatBeac", natBeac) :
                new ObjectParameter("NatBeac", typeof(string));
    
            var nomJeuneFilleParameter = nomJeuneFille != null ?
                new ObjectParameter("NomJeuneFille", nomJeuneFille) :
                new ObjectParameter("NomJeuneFille", typeof(string));
    
            var sigleParameter = sigle != null ?
                new ObjectParameter("Sigle", sigle) :
                new ObjectParameter("Sigle", typeof(string));
    
            var raisonSocialeParameter = raisonSociale != null ?
                new ObjectParameter("RaisonSociale", raisonSociale) :
                new ObjectParameter("RaisonSociale", typeof(string));
    
            var siegeSocialParameter = siegeSocial != null ?
                new ObjectParameter("SiegeSocial", siegeSocial) :
                new ObjectParameter("SiegeSocial", typeof(string));
    
            var registreCceParameter = registreCce != null ?
                new ObjectParameter("RegistreCce", registreCce) :
                new ObjectParameter("RegistreCce", typeof(string));
    
            var nomAbregeParameter = nomAbrege != null ?
                new ObjectParameter("NomAbrege", nomAbrege) :
                new ObjectParameter("NomAbrege", typeof(string));
    
            var numContribParameter = numContrib != null ?
                new ObjectParameter("NumContrib", numContrib) :
                new ObjectParameter("NumContrib", typeof(string));
    
            var dateCreatSocParameter = dateCreatSoc.HasValue ?
                new ObjectParameter("DateCreatSoc", dateCreatSoc) :
                new ObjectParameter("DateCreatSoc", typeof(System.DateTime));
    
            var objetSocialParameter = objetSocial != null ?
                new ObjectParameter("ObjetSocial", objetSocial) :
                new ObjectParameter("ObjetSocial", typeof(string));
    
            var libNatBeacParameter = libNatBeac != null ?
                new ObjectParameter("LibNatBeac", libNatBeac) :
                new ObjectParameter("LibNatBeac", typeof(string));
    
            var libAgentEcoParameter = libAgentEco != null ?
                new ObjectParameter("LibAgentEco", libAgentEco) :
                new ObjectParameter("LibAgentEco", typeof(string));
    
            var libActiviteEcoParameter = libActiviteEco != null ?
                new ObjectParameter("LibActiviteEco", libActiviteEco) :
                new ObjectParameter("LibActiviteEco", typeof(string));
    
            var libNatJuridiqueParameter = libNatJuridique != null ?
                new ObjectParameter("LibNatJuridique", libNatJuridique) :
                new ObjectParameter("LibNatJuridique", typeof(string));
    
            var libVilleParameter = libVille != null ?
                new ObjectParameter("LibVille", libVille) :
                new ObjectParameter("LibVille", typeof(string));
    
            var libTitreParameter = libTitre != null ?
                new ObjectParameter("LibTitre", libTitre) :
                new ObjectParameter("LibTitre", typeof(string));
    
            var libNationaliteParameter = libNationalite != null ?
                new ObjectParameter("LibNationalite", libNationalite) :
                new ObjectParameter("LibNationalite", typeof(string));
    
            var libSiegeSocialParameter = libSiegeSocial != null ?
                new ObjectParameter("LibSiegeSocial", libSiegeSocial) :
                new ObjectParameter("LibSiegeSocial", typeof(string));
    
            var precisNaisParameter = precisNais != null ?
                new ObjectParameter("PrecisNais", precisNais) :
                new ObjectParameter("PrecisNais", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var nomJumelleParameter = nomJumelle != null ?
                new ObjectParameter("NomJumelle", nomJumelle) :
                new ObjectParameter("NomJumelle", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var nomemployeParameter = nomemploye != null ?
                new ObjectParameter("Nomemploye", nomemploye) :
                new ObjectParameter("Nomemploye", typeof(string));
    
            var professionParameter = profession != null ?
                new ObjectParameter("Profession", profession) :
                new ObjectParameter("Profession", typeof(string));
    
            var deathdateParameter = deathdate.HasValue ?
                new ObjectParameter("deathdate", deathdate) :
                new ObjectParameter("deathdate", typeof(System.DateTime));
    
            var adhesiondateParameter = adhesiondate.HasValue ?
                new ObjectParameter("Adhesiondate", adhesiondate) :
                new ObjectParameter("Adhesiondate", typeof(System.DateTime));
    
            var datedeclarationParameter = datedeclaration.HasValue ?
                new ObjectParameter("datedeclaration", datedeclaration) :
                new ObjectParameter("datedeclaration", typeof(System.DateTime));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var custRelCodeParameter = custRelCode != null ?
                new ObjectParameter("CustRelCode", custRelCode) :
                new ObjectParameter("CustRelCode", typeof(string));
    
            var custRelNameParameter = custRelName != null ?
                new ObjectParameter("CustRelName", custRelName) :
                new ObjectParameter("CustRelName", typeof(string));
    
            var ebnkSubParameter = ebnkSub != null ?
                new ObjectParameter("EbnkSub", ebnkSub) :
                new ObjectParameter("EbnkSub", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var placeIssueCNIParameter = placeIssueCNI != null ?
                new ObjectParameter("PlaceIssueCNI", placeIssueCNI) :
                new ObjectParameter("PlaceIssueCNI", typeof(string));
    
            var dteIssueCNIParameter = dteIssueCNI.HasValue ?
                new ObjectParameter("DteIssueCNI", dteIssueCNI) :
                new ObjectParameter("DteIssueCNI", typeof(System.DateTime));
    
            var customerRemarkParameter = customerRemark != null ?
                new ObjectParameter("CustomerRemark", customerRemark) :
                new ObjectParameter("CustomerRemark", typeof(string));
    
            var cOMPANYGRPEParameter = cOMPANYGRPE != null ?
                new ObjectParameter("COMPANYGRPE", cOMPANYGRPE) :
                new ObjectParameter("COMPANYGRPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClientBnk_Update_Result>("ClientBnk_Update", agenceParameter, clientParameter, nomParameter, prenomParameter, adresse1Parameter, adresse2Parameter, adresse3Parameter, bPParameter, villeParameter, paysParameter, typeResidentParameter, agentEcoParameter, activiteEcoParameter, natClientParameter, libNatClientParameter, natJuridiqueParameter, qualiteParameter, titreParameter, typeClientParameter, catClientParameter, libAgenceParameter, dateNaissanceParameter, lieuNaissanceParameter, cNIPassParameter, telephone1Parameter, telephone2Parameter, telephone3Parameter, telexParameter, faxParameter, groupeParameter, nationaliteParameter, natBeacParameter, nomJeuneFilleParameter, sigleParameter, raisonSocialeParameter, siegeSocialParameter, registreCceParameter, nomAbregeParameter, numContribParameter, dateCreatSocParameter, objetSocialParameter, libNatBeacParameter, libAgentEcoParameter, libActiviteEcoParameter, libNatJuridiqueParameter, libVilleParameter, libTitreParameter, libNationaliteParameter, libSiegeSocialParameter, precisNaisParameter, dateCreationParameter, nomJumelleParameter, employeParameter, nomemployeParameter, professionParameter, deathdateParameter, adhesiondateParameter, datedeclarationParameter, dateTransfertParameter, integritystatusParameter, lect, custRelCodeParameter, custRelNameParameter, ebnkSubParameter, emailParameter, msg, computerNameParameter, languageParameter, placeIssueCNIParameter, dteIssueCNIParameter, customerRemarkParameter, cOMPANYGRPEParameter);
        }
    
        public virtual int CODE_PRODUIT(string pC_COMPTE, string pC_PRODUIT, string pC_ATTRIBUT, ObjectParameter lect, ObjectParameter pC_CODE, ObjectParameter errMsg, string language)
        {
            var pC_COMPTEParameter = pC_COMPTE != null ?
                new ObjectParameter("PC_COMPTE", pC_COMPTE) :
                new ObjectParameter("PC_COMPTE", typeof(string));
    
            var pC_PRODUITParameter = pC_PRODUIT != null ?
                new ObjectParameter("PC_PRODUIT", pC_PRODUIT) :
                new ObjectParameter("PC_PRODUIT", typeof(string));
    
            var pC_ATTRIBUTParameter = pC_ATTRIBUT != null ?
                new ObjectParameter("PC_ATTRIBUT", pC_ATTRIBUT) :
                new ObjectParameter("PC_ATTRIBUT", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CODE_PRODUIT", pC_COMPTEParameter, pC_PRODUITParameter, pC_ATTRIBUTParameter, lect, pC_CODE, errMsg, languageParameter);
        }
    
        public virtual int Company_Delete(string companyName, string agence, ObjectParameter lect, ObjectParameter msg, string employe, string computerName, string language)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Company_Delete", companyNameParameter, agenceParameter, lect, msg, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int Company_Insert(string agence, string companyName, string companyDesc, string employe, string operationtype, string cptegl, string cpteglpay, string cpteglint, string cpteglln, ObjectParameter lect, ObjectParameter msg, string computerName, string treatmentType, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var companyDescParameter = companyDesc != null ?
                new ObjectParameter("CompanyDesc", companyDesc) :
                new ObjectParameter("CompanyDesc", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var operationtypeParameter = operationtype != null ?
                new ObjectParameter("operationtype", operationtype) :
                new ObjectParameter("operationtype", typeof(string));
    
            var cpteglParameter = cptegl != null ?
                new ObjectParameter("cptegl", cptegl) :
                new ObjectParameter("cptegl", typeof(string));
    
            var cpteglpayParameter = cpteglpay != null ?
                new ObjectParameter("cpteglpay", cpteglpay) :
                new ObjectParameter("cpteglpay", typeof(string));
    
            var cpteglintParameter = cpteglint != null ?
                new ObjectParameter("cpteglint", cpteglint) :
                new ObjectParameter("cpteglint", typeof(string));
    
            var cptegllnParameter = cpteglln != null ?
                new ObjectParameter("cpteglln", cpteglln) :
                new ObjectParameter("cpteglln", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var treatmentTypeParameter = treatmentType != null ?
                new ObjectParameter("TreatmentType", treatmentType) :
                new ObjectParameter("TreatmentType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Company_Insert", agenceParameter, companyNameParameter, companyDescParameter, employeParameter, operationtypeParameter, cpteglParameter, cpteglpayParameter, cpteglintParameter, cptegllnParameter, lect, msg, computerNameParameter, treatmentTypeParameter, languageParameter);
        }
    
        public virtual int Company_Update(string companyName, string companyDesc, string employe, string operationtype, string cptegl, string cpteglpay, string cpteglint, string cpteglln, string agence, ObjectParameter lect, ObjectParameter msg, string computerName, string treatmentType, string language)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var companyDescParameter = companyDesc != null ?
                new ObjectParameter("CompanyDesc", companyDesc) :
                new ObjectParameter("CompanyDesc", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var operationtypeParameter = operationtype != null ?
                new ObjectParameter("operationtype", operationtype) :
                new ObjectParameter("operationtype", typeof(string));
    
            var cpteglParameter = cptegl != null ?
                new ObjectParameter("cptegl", cptegl) :
                new ObjectParameter("cptegl", typeof(string));
    
            var cpteglpayParameter = cpteglpay != null ?
                new ObjectParameter("cpteglpay", cpteglpay) :
                new ObjectParameter("cpteglpay", typeof(string));
    
            var cpteglintParameter = cpteglint != null ?
                new ObjectParameter("cpteglint", cpteglint) :
                new ObjectParameter("cpteglint", typeof(string));
    
            var cptegllnParameter = cpteglln != null ?
                new ObjectParameter("cpteglln", cpteglln) :
                new ObjectParameter("cpteglln", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var treatmentTypeParameter = treatmentType != null ?
                new ObjectParameter("TreatmentType", treatmentType) :
                new ObjectParameter("TreatmentType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Company_Update", companyNameParameter, companyDescParameter, employeParameter, operationtypeParameter, cpteglParameter, cpteglpayParameter, cpteglintParameter, cptegllnParameter, agenceParameter, lect, msg, computerNameParameter, treatmentTypeParameter, languageParameter);
        }
    
        public virtual int ComptabiliteJnalIntEOM(string devise, string libdevise, Nullable<System.DateTime> dateValeur, Nullable<System.DateTime> wDateOp, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string wEmploye, string wLibEmploye, string blockdatetype, ObjectParameter lect, ObjectParameter errMsg, string computerName, string language)
        {
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libdeviseParameter = libdevise != null ?
                new ObjectParameter("Libdevise", libdevise) :
                new ObjectParameter("Libdevise", typeof(string));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var wDateOpParameter = wDateOp.HasValue ?
                new ObjectParameter("WDateOp", wDateOp) :
                new ObjectParameter("WDateOp", typeof(System.DateTime));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var blockdatetypeParameter = blockdatetype != null ?
                new ObjectParameter("Blockdatetype", blockdatetype) :
                new ObjectParameter("Blockdatetype", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ComptabiliteJnalIntEOM", deviseParameter, libdeviseParameter, dateValeurParameter, wDateOpParameter, dateDebutParameter, dateFinParameter, wEmployeParameter, wLibEmployeParameter, blockdatetypeParameter, lect, errMsg, computerNameParameter, languageParameter);
        }
    
        public virtual int ComptabiliteJnalIntEOMEBANKING(string devise, string libdevise, Nullable<System.DateTime> dateValeur, Nullable<System.DateTime> wDateOp, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string wEmploye, string wLibEmploye, ObjectParameter lect, ObjectParameter errMsg, string computerName, string language)
        {
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libdeviseParameter = libdevise != null ?
                new ObjectParameter("Libdevise", libdevise) :
                new ObjectParameter("Libdevise", typeof(string));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var wDateOpParameter = wDateOp.HasValue ?
                new ObjectParameter("WDateOp", wDateOp) :
                new ObjectParameter("WDateOp", typeof(System.DateTime));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ComptabiliteJnalIntEOMEBANKING", deviseParameter, libdeviseParameter, dateValeurParameter, wDateOpParameter, dateDebutParameter, dateFinParameter, wEmployeParameter, wLibEmployeParameter, lect, errMsg, computerNameParameter, languageParameter);
        }
    
        public virtual int ComptabiliteJnalIntEOMSMS(string devise, string libdevise, Nullable<System.DateTime> dateValeur, Nullable<System.DateTime> wDateOp, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string wEmploye, string wLibEmploye, ObjectParameter lect, ObjectParameter errMsg, string computerName, string language)
        {
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libdeviseParameter = libdevise != null ?
                new ObjectParameter("Libdevise", libdevise) :
                new ObjectParameter("Libdevise", typeof(string));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var wDateOpParameter = wDateOp.HasValue ?
                new ObjectParameter("WDateOp", wDateOp) :
                new ObjectParameter("WDateOp", typeof(System.DateTime));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ComptabiliteJnalIntEOMSMS", deviseParameter, libdeviseParameter, dateValeurParameter, wDateOpParameter, dateDebutParameter, dateFinParameter, wEmployeParameter, wLibEmployeParameter, lect, errMsg, computerNameParameter, languageParameter);
        }
    
        public virtual int ComptabiliteJnalIntMember(string devise, string libdevise, Nullable<System.DateTime> dateValeur, Nullable<System.DateTime> wDateOp, string wEmploye, string wLibEmploye, ObjectParameter lect, ObjectParameter errMsg, string computerName, string language)
        {
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libdeviseParameter = libdevise != null ?
                new ObjectParameter("Libdevise", libdevise) :
                new ObjectParameter("Libdevise", typeof(string));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var wDateOpParameter = wDateOp.HasValue ?
                new ObjectParameter("WDateOp", wDateOp) :
                new ObjectParameter("WDateOp", typeof(System.DateTime));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ComptabiliteJnalIntMember", deviseParameter, libdeviseParameter, dateValeurParameter, wDateOpParameter, wEmployeParameter, wLibEmployeParameter, lect, errMsg, computerNameParameter, languageParameter);
        }
    
        public virtual int ComptaCashTransaction(Nullable<int> wAgence, string wLibAgence, string cpteJumelle, string wDenomination, string wDevise, string libDevise, Nullable<int> wEmploye, string wLibEmploye, string wtxnno, Nullable<System.DateTime> dateVal, string opType, Nullable<double> montant, Nullable<double> txTVA, Nullable<double> commission, string refOp, string wDescription, string cpteColCoresp, string cleColCoresp, string libCpteColCoresp, string codeLibelle, string libLibelle, string journal, string libJournal, string libTrCode, string wtrCode, Nullable<System.DateTime> serverDate, Nullable<int> espion, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var wAgenceParameter = wAgence.HasValue ?
                new ObjectParameter("WAgence", wAgence) :
                new ObjectParameter("WAgence", typeof(int));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("WLibAgence", wLibAgence) :
                new ObjectParameter("WLibAgence", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var wDenominationParameter = wDenomination != null ?
                new ObjectParameter("wDenomination", wDenomination) :
                new ObjectParameter("wDenomination", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var wEmployeParameter = wEmploye.HasValue ?
                new ObjectParameter("WEmploye", wEmploye) :
                new ObjectParameter("WEmploye", typeof(int));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("WLibEmploye", wLibEmploye) :
                new ObjectParameter("WLibEmploye", typeof(string));
    
            var wtxnnoParameter = wtxnno != null ?
                new ObjectParameter("wtxnno", wtxnno) :
                new ObjectParameter("wtxnno", typeof(string));
    
            var dateValParameter = dateVal.HasValue ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(System.DateTime));
    
            var opTypeParameter = opType != null ?
                new ObjectParameter("OpType", opType) :
                new ObjectParameter("OpType", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var commissionParameter = commission.HasValue ?
                new ObjectParameter("Commission", commission) :
                new ObjectParameter("Commission", typeof(double));
    
            var refOpParameter = refOp != null ?
                new ObjectParameter("RefOp", refOp) :
                new ObjectParameter("RefOp", typeof(string));
    
            var wDescriptionParameter = wDescription != null ?
                new ObjectParameter("wDescription", wDescription) :
                new ObjectParameter("wDescription", typeof(string));
    
            var cpteColCorespParameter = cpteColCoresp != null ?
                new ObjectParameter("CpteColCoresp", cpteColCoresp) :
                new ObjectParameter("CpteColCoresp", typeof(string));
    
            var cleColCorespParameter = cleColCoresp != null ?
                new ObjectParameter("CleColCoresp", cleColCoresp) :
                new ObjectParameter("CleColCoresp", typeof(string));
    
            var libCpteColCorespParameter = libCpteColCoresp != null ?
                new ObjectParameter("LibCpteColCoresp", libCpteColCoresp) :
                new ObjectParameter("LibCpteColCoresp", typeof(string));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var libLibelleParameter = libLibelle != null ?
                new ObjectParameter("LibLibelle", libLibelle) :
                new ObjectParameter("LibLibelle", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var libJournalParameter = libJournal != null ?
                new ObjectParameter("LibJournal", libJournal) :
                new ObjectParameter("LibJournal", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var wtrCodeParameter = wtrCode != null ?
                new ObjectParameter("WtrCode", wtrCode) :
                new ObjectParameter("WtrCode", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var espionParameter = espion.HasValue ?
                new ObjectParameter("espion", espion) :
                new ObjectParameter("espion", typeof(int));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ComptaCashTransaction", wAgenceParameter, wLibAgenceParameter, cpteJumelleParameter, wDenominationParameter, wDeviseParameter, libDeviseParameter, wEmployeParameter, wLibEmployeParameter, wtxnnoParameter, dateValParameter, opTypeParameter, montantParameter, txTVAParameter, commissionParameter, refOpParameter, wDescriptionParameter, cpteColCorespParameter, cleColCorespParameter, libCpteColCorespParameter, codeLibelleParameter, libLibelleParameter, journalParameter, libJournalParameter, libTrCodeParameter, wtrCodeParameter, serverDateParameter, espionParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<ComptaCashTransactionBR_Result> ComptaCashTransactionBR(string wAgence, string wLibAgence, string wAgenceDes, string wLibAgenceDest, string cpteJumelleEm, string wDenomination, string cpteJumelleRe, string wDenominationRe, string wDevise, string libDevise, string wEmploye, string wLibEmploye, string wtxnno, Nullable<System.DateTime> dateVal, string opType, Nullable<double> montant, Nullable<double> txTVA, Nullable<double> commission, string refOp, string wDescription, string cpteColCoresp, string cleColCoresp, string libCpteColCoresp, string libLibelle, string libTrCode, string wtrCode, string cashTrCode, string senderName, string receiverName, string postSendType, string postReceiType, string statusOperation, Nullable<System.DateTime> serverDate, Nullable<int> espion, string optionSend, string langue, string telephone, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("WAgence", wAgence) :
                new ObjectParameter("WAgence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("WLibAgence", wLibAgence) :
                new ObjectParameter("WLibAgence", typeof(string));
    
            var wAgenceDesParameter = wAgenceDes != null ?
                new ObjectParameter("WAgenceDes", wAgenceDes) :
                new ObjectParameter("WAgenceDes", typeof(string));
    
            var wLibAgenceDestParameter = wLibAgenceDest != null ?
                new ObjectParameter("WLibAgenceDest", wLibAgenceDest) :
                new ObjectParameter("WLibAgenceDest", typeof(string));
    
            var cpteJumelleEmParameter = cpteJumelleEm != null ?
                new ObjectParameter("CpteJumelleEm", cpteJumelleEm) :
                new ObjectParameter("CpteJumelleEm", typeof(string));
    
            var wDenominationParameter = wDenomination != null ?
                new ObjectParameter("wDenomination", wDenomination) :
                new ObjectParameter("wDenomination", typeof(string));
    
            var cpteJumelleReParameter = cpteJumelleRe != null ?
                new ObjectParameter("CpteJumelleRe", cpteJumelleRe) :
                new ObjectParameter("CpteJumelleRe", typeof(string));
    
            var wDenominationReParameter = wDenominationRe != null ?
                new ObjectParameter("wDenominationRe", wDenominationRe) :
                new ObjectParameter("wDenominationRe", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("WEmploye", wEmploye) :
                new ObjectParameter("WEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("WLibEmploye", wLibEmploye) :
                new ObjectParameter("WLibEmploye", typeof(string));
    
            var wtxnnoParameter = wtxnno != null ?
                new ObjectParameter("wtxnno", wtxnno) :
                new ObjectParameter("wtxnno", typeof(string));
    
            var dateValParameter = dateVal.HasValue ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(System.DateTime));
    
            var opTypeParameter = opType != null ?
                new ObjectParameter("OpType", opType) :
                new ObjectParameter("OpType", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var commissionParameter = commission.HasValue ?
                new ObjectParameter("Commission", commission) :
                new ObjectParameter("Commission", typeof(double));
    
            var refOpParameter = refOp != null ?
                new ObjectParameter("RefOp", refOp) :
                new ObjectParameter("RefOp", typeof(string));
    
            var wDescriptionParameter = wDescription != null ?
                new ObjectParameter("wDescription", wDescription) :
                new ObjectParameter("wDescription", typeof(string));
    
            var cpteColCorespParameter = cpteColCoresp != null ?
                new ObjectParameter("CpteColCoresp", cpteColCoresp) :
                new ObjectParameter("CpteColCoresp", typeof(string));
    
            var cleColCorespParameter = cleColCoresp != null ?
                new ObjectParameter("CleColCoresp", cleColCoresp) :
                new ObjectParameter("CleColCoresp", typeof(string));
    
            var libCpteColCorespParameter = libCpteColCoresp != null ?
                new ObjectParameter("LibCpteColCoresp", libCpteColCoresp) :
                new ObjectParameter("LibCpteColCoresp", typeof(string));
    
            var libLibelleParameter = libLibelle != null ?
                new ObjectParameter("LibLibelle", libLibelle) :
                new ObjectParameter("LibLibelle", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var wtrCodeParameter = wtrCode != null ?
                new ObjectParameter("WtrCode", wtrCode) :
                new ObjectParameter("WtrCode", typeof(string));
    
            var cashTrCodeParameter = cashTrCode != null ?
                new ObjectParameter("CashTrCode", cashTrCode) :
                new ObjectParameter("CashTrCode", typeof(string));
    
            var senderNameParameter = senderName != null ?
                new ObjectParameter("SenderName", senderName) :
                new ObjectParameter("SenderName", typeof(string));
    
            var receiverNameParameter = receiverName != null ?
                new ObjectParameter("ReceiverName", receiverName) :
                new ObjectParameter("ReceiverName", typeof(string));
    
            var postSendTypeParameter = postSendType != null ?
                new ObjectParameter("PostSendType", postSendType) :
                new ObjectParameter("PostSendType", typeof(string));
    
            var postReceiTypeParameter = postReceiType != null ?
                new ObjectParameter("PostReceiType", postReceiType) :
                new ObjectParameter("PostReceiType", typeof(string));
    
            var statusOperationParameter = statusOperation != null ?
                new ObjectParameter("StatusOperation", statusOperation) :
                new ObjectParameter("StatusOperation", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var espionParameter = espion.HasValue ?
                new ObjectParameter("espion", espion) :
                new ObjectParameter("espion", typeof(int));
    
            var optionSendParameter = optionSend != null ?
                new ObjectParameter("OptionSend", optionSend) :
                new ObjectParameter("OptionSend", typeof(string));
    
            var langueParameter = langue != null ?
                new ObjectParameter("Langue", langue) :
                new ObjectParameter("Langue", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ComptaCashTransactionBR_Result>("ComptaCashTransactionBR", wAgenceParameter, wLibAgenceParameter, wAgenceDesParameter, wLibAgenceDestParameter, cpteJumelleEmParameter, wDenominationParameter, cpteJumelleReParameter, wDenominationReParameter, wDeviseParameter, libDeviseParameter, wEmployeParameter, wLibEmployeParameter, wtxnnoParameter, dateValParameter, opTypeParameter, montantParameter, txTVAParameter, commissionParameter, refOpParameter, wDescriptionParameter, cpteColCorespParameter, cleColCorespParameter, libCpteColCorespParameter, libLibelleParameter, libTrCodeParameter, wtrCodeParameter, cashTrCodeParameter, senderNameParameter, receiverNameParameter, postSendTypeParameter, postReceiTypeParameter, statusOperationParameter, serverDateParameter, espionParameter, optionSendParameter, langueParameter, telephoneParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int ComptaCashTransactionIBR(string wAgence, string wLibAgence, string wAgenceDes, string wLibAgenceDest, string cpteJumelleEm, string wDenomination, string cpteJumelleRe, string wDenominationRe, string wDevise, string libDevise, string wEmploye, string wLibEmploye, string wtxnno, Nullable<System.DateTime> dateVal, string opType, Nullable<double> montant, Nullable<double> txTVA, Nullable<double> commission, string refOp, string wDescription, string cpteColCoresp, string cleColCoresp, string libCpteColCoresp, string libLibelle, string libTrCode, string wtrCode, string cashTrCode, string senderName, string receiverName, string postSendType, string postReceiType, string statusOperation, Nullable<System.DateTime> serverDate, Nullable<int> espion, string optionSend, string langue, string telephone, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("WAgence", wAgence) :
                new ObjectParameter("WAgence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("WLibAgence", wLibAgence) :
                new ObjectParameter("WLibAgence", typeof(string));
    
            var wAgenceDesParameter = wAgenceDes != null ?
                new ObjectParameter("WAgenceDes", wAgenceDes) :
                new ObjectParameter("WAgenceDes", typeof(string));
    
            var wLibAgenceDestParameter = wLibAgenceDest != null ?
                new ObjectParameter("WLibAgenceDest", wLibAgenceDest) :
                new ObjectParameter("WLibAgenceDest", typeof(string));
    
            var cpteJumelleEmParameter = cpteJumelleEm != null ?
                new ObjectParameter("CpteJumelleEm", cpteJumelleEm) :
                new ObjectParameter("CpteJumelleEm", typeof(string));
    
            var wDenominationParameter = wDenomination != null ?
                new ObjectParameter("wDenomination", wDenomination) :
                new ObjectParameter("wDenomination", typeof(string));
    
            var cpteJumelleReParameter = cpteJumelleRe != null ?
                new ObjectParameter("CpteJumelleRe", cpteJumelleRe) :
                new ObjectParameter("CpteJumelleRe", typeof(string));
    
            var wDenominationReParameter = wDenominationRe != null ?
                new ObjectParameter("wDenominationRe", wDenominationRe) :
                new ObjectParameter("wDenominationRe", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("WEmploye", wEmploye) :
                new ObjectParameter("WEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("WLibEmploye", wLibEmploye) :
                new ObjectParameter("WLibEmploye", typeof(string));
    
            var wtxnnoParameter = wtxnno != null ?
                new ObjectParameter("wtxnno", wtxnno) :
                new ObjectParameter("wtxnno", typeof(string));
    
            var dateValParameter = dateVal.HasValue ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(System.DateTime));
    
            var opTypeParameter = opType != null ?
                new ObjectParameter("OpType", opType) :
                new ObjectParameter("OpType", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var commissionParameter = commission.HasValue ?
                new ObjectParameter("Commission", commission) :
                new ObjectParameter("Commission", typeof(double));
    
            var refOpParameter = refOp != null ?
                new ObjectParameter("RefOp", refOp) :
                new ObjectParameter("RefOp", typeof(string));
    
            var wDescriptionParameter = wDescription != null ?
                new ObjectParameter("wDescription", wDescription) :
                new ObjectParameter("wDescription", typeof(string));
    
            var cpteColCorespParameter = cpteColCoresp != null ?
                new ObjectParameter("CpteColCoresp", cpteColCoresp) :
                new ObjectParameter("CpteColCoresp", typeof(string));
    
            var cleColCorespParameter = cleColCoresp != null ?
                new ObjectParameter("CleColCoresp", cleColCoresp) :
                new ObjectParameter("CleColCoresp", typeof(string));
    
            var libCpteColCorespParameter = libCpteColCoresp != null ?
                new ObjectParameter("LibCpteColCoresp", libCpteColCoresp) :
                new ObjectParameter("LibCpteColCoresp", typeof(string));
    
            var libLibelleParameter = libLibelle != null ?
                new ObjectParameter("LibLibelle", libLibelle) :
                new ObjectParameter("LibLibelle", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var wtrCodeParameter = wtrCode != null ?
                new ObjectParameter("WtrCode", wtrCode) :
                new ObjectParameter("WtrCode", typeof(string));
    
            var cashTrCodeParameter = cashTrCode != null ?
                new ObjectParameter("CashTrCode", cashTrCode) :
                new ObjectParameter("CashTrCode", typeof(string));
    
            var senderNameParameter = senderName != null ?
                new ObjectParameter("SenderName", senderName) :
                new ObjectParameter("SenderName", typeof(string));
    
            var receiverNameParameter = receiverName != null ?
                new ObjectParameter("ReceiverName", receiverName) :
                new ObjectParameter("ReceiverName", typeof(string));
    
            var postSendTypeParameter = postSendType != null ?
                new ObjectParameter("PostSendType", postSendType) :
                new ObjectParameter("PostSendType", typeof(string));
    
            var postReceiTypeParameter = postReceiType != null ?
                new ObjectParameter("PostReceiType", postReceiType) :
                new ObjectParameter("PostReceiType", typeof(string));
    
            var statusOperationParameter = statusOperation != null ?
                new ObjectParameter("StatusOperation", statusOperation) :
                new ObjectParameter("StatusOperation", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var espionParameter = espion.HasValue ?
                new ObjectParameter("espion", espion) :
                new ObjectParameter("espion", typeof(int));
    
            var optionSendParameter = optionSend != null ?
                new ObjectParameter("OptionSend", optionSend) :
                new ObjectParameter("OptionSend", typeof(string));
    
            var langueParameter = langue != null ?
                new ObjectParameter("Langue", langue) :
                new ObjectParameter("Langue", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ComptaCashTransactionIBR", wAgenceParameter, wLibAgenceParameter, wAgenceDesParameter, wLibAgenceDestParameter, cpteJumelleEmParameter, wDenominationParameter, cpteJumelleReParameter, wDenominationReParameter, wDeviseParameter, libDeviseParameter, wEmployeParameter, wLibEmployeParameter, wtxnnoParameter, dateValParameter, opTypeParameter, montantParameter, txTVAParameter, commissionParameter, refOpParameter, wDescriptionParameter, cpteColCorespParameter, cleColCorespParameter, libCpteColCorespParameter, libLibelleParameter, libTrCodeParameter, wtrCodeParameter, cashTrCodeParameter, senderNameParameter, receiverNameParameter, postSendTypeParameter, postReceiTypeParameter, statusOperationParameter, serverDateParameter, espionParameter, optionSendParameter, langueParameter, telephoneParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int ComptaCashTransactionReceiv(string wAgence, string wLibAgence, string cpteJumelle, string wDenomination, string wDevise, string libDevise, string wEmploye, string wLibEmploye, string wtxnno, Nullable<System.DateTime> dateVal, string opType, Nullable<decimal> montant, Nullable<double> txTVA, Nullable<double> commission, string refOp, string wDescription, string cpteColCoresp, string cleColCoresp, string libCpteColCoresp, string codeLibelle, string libLibelle, string journal, string libJournal, string libTrCode, string wtrCode, Nullable<System.DateTime> serverDate, string operationType, string cpteJumelleRe, string denominationRe, string cashTrCodeName, string cashTrCode, Nullable<System.DateTime> dateoperation, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("WAgence", wAgence) :
                new ObjectParameter("WAgence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("WLibAgence", wLibAgence) :
                new ObjectParameter("WLibAgence", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var wDenominationParameter = wDenomination != null ?
                new ObjectParameter("wDenomination", wDenomination) :
                new ObjectParameter("wDenomination", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("WEmploye", wEmploye) :
                new ObjectParameter("WEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("WLibEmploye", wLibEmploye) :
                new ObjectParameter("WLibEmploye", typeof(string));
    
            var wtxnnoParameter = wtxnno != null ?
                new ObjectParameter("wtxnno", wtxnno) :
                new ObjectParameter("wtxnno", typeof(string));
    
            var dateValParameter = dateVal.HasValue ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(System.DateTime));
    
            var opTypeParameter = opType != null ?
                new ObjectParameter("OpType", opType) :
                new ObjectParameter("OpType", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(decimal));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var commissionParameter = commission.HasValue ?
                new ObjectParameter("Commission", commission) :
                new ObjectParameter("Commission", typeof(double));
    
            var refOpParameter = refOp != null ?
                new ObjectParameter("RefOp", refOp) :
                new ObjectParameter("RefOp", typeof(string));
    
            var wDescriptionParameter = wDescription != null ?
                new ObjectParameter("wDescription", wDescription) :
                new ObjectParameter("wDescription", typeof(string));
    
            var cpteColCorespParameter = cpteColCoresp != null ?
                new ObjectParameter("CpteColCoresp", cpteColCoresp) :
                new ObjectParameter("CpteColCoresp", typeof(string));
    
            var cleColCorespParameter = cleColCoresp != null ?
                new ObjectParameter("CleColCoresp", cleColCoresp) :
                new ObjectParameter("CleColCoresp", typeof(string));
    
            var libCpteColCorespParameter = libCpteColCoresp != null ?
                new ObjectParameter("LibCpteColCoresp", libCpteColCoresp) :
                new ObjectParameter("LibCpteColCoresp", typeof(string));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var libLibelleParameter = libLibelle != null ?
                new ObjectParameter("LibLibelle", libLibelle) :
                new ObjectParameter("LibLibelle", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var libJournalParameter = libJournal != null ?
                new ObjectParameter("LibJournal", libJournal) :
                new ObjectParameter("LibJournal", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var wtrCodeParameter = wtrCode != null ?
                new ObjectParameter("WtrCode", wtrCode) :
                new ObjectParameter("WtrCode", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var operationTypeParameter = operationType != null ?
                new ObjectParameter("OperationType", operationType) :
                new ObjectParameter("OperationType", typeof(string));
    
            var cpteJumelleReParameter = cpteJumelleRe != null ?
                new ObjectParameter("CpteJumelleRe", cpteJumelleRe) :
                new ObjectParameter("CpteJumelleRe", typeof(string));
    
            var denominationReParameter = denominationRe != null ?
                new ObjectParameter("DenominationRe", denominationRe) :
                new ObjectParameter("DenominationRe", typeof(string));
    
            var cashTrCodeNameParameter = cashTrCodeName != null ?
                new ObjectParameter("CashTrCodeName", cashTrCodeName) :
                new ObjectParameter("CashTrCodeName", typeof(string));
    
            var cashTrCodeParameter = cashTrCode != null ?
                new ObjectParameter("CashTrCode", cashTrCode) :
                new ObjectParameter("CashTrCode", typeof(string));
    
            var dateoperationParameter = dateoperation.HasValue ?
                new ObjectParameter("Dateoperation", dateoperation) :
                new ObjectParameter("Dateoperation", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ComptaCashTransactionReceiv", wAgenceParameter, wLibAgenceParameter, cpteJumelleParameter, wDenominationParameter, wDeviseParameter, libDeviseParameter, wEmployeParameter, wLibEmployeParameter, wtxnnoParameter, dateValParameter, opTypeParameter, montantParameter, txTVAParameter, commissionParameter, refOpParameter, wDescriptionParameter, cpteColCorespParameter, cleColCorespParameter, libCpteColCorespParameter, codeLibelleParameter, libLibelleParameter, journalParameter, libJournalParameter, libTrCodeParameter, wtrCodeParameter, serverDateParameter, operationTypeParameter, cpteJumelleReParameter, denominationReParameter, cashTrCodeNameParameter, cashTrCodeParameter, dateoperationParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<ComptaCivilServant_Result> ComptaCivilServant(string agence, string libAgence, Nullable<System.DateTime> valueDate, string dateSalaire, string devise, string libDevise, string description, string libelle, string refOperation, string txnNo, Nullable<double> totalAmount, string typeTraitement, string wEmploye, string wLibEmploye, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var valueDateParameter = valueDate.HasValue ?
                new ObjectParameter("ValueDate", valueDate) :
                new ObjectParameter("ValueDate", typeof(System.DateTime));
    
            var dateSalaireParameter = dateSalaire != null ?
                new ObjectParameter("DateSalaire", dateSalaire) :
                new ObjectParameter("DateSalaire", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("Libelle", libelle) :
                new ObjectParameter("Libelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(double));
    
            var typeTraitementParameter = typeTraitement != null ?
                new ObjectParameter("TypeTraitement", typeTraitement) :
                new ObjectParameter("TypeTraitement", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("WLibEmploye", wLibEmploye) :
                new ObjectParameter("WLibEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ComptaCivilServant_Result>("ComptaCivilServant", agenceParameter, libAgenceParameter, valueDateParameter, dateSalaireParameter, deviseParameter, libDeviseParameter, descriptionParameter, libelleParameter, refOperationParameter, txnNoParameter, totalAmountParameter, typeTraitementParameter, wEmployeParameter, wLibEmployeParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int ComptaImmo(string agence, string devise, string employe, Nullable<System.DateTime> dateTransact, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var dateTransactParameter = dateTransact.HasValue ?
                new ObjectParameter("DateTransact", dateTransact) :
                new ObjectParameter("DateTransact", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ComptaImmo", agenceParameter, deviseParameter, employeParameter, dateTransactParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int ComptaImmoDep(string agence, string refTransaction, string devise, string employe, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var refTransactionParameter = refTransaction != null ?
                new ObjectParameter("RefTransaction", refTransaction) :
                new ObjectParameter("RefTransaction", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ComptaImmoDep", agenceParameter, refTransactionParameter, deviseParameter, employeParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int ComptaImmoDepNoAcc(string agence, string refTransaction, string devise, string employe, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var refTransactionParameter = refTransaction != null ?
                new ObjectParameter("RefTransaction", refTransaction) :
                new ObjectParameter("RefTransaction", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ComptaImmoDepNoAcc", agenceParameter, refTransactionParameter, deviseParameter, employeParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int ComptaReserveInt(string agence, string libAgence, string wDevise, string libDevise, string matricule, string nomPrenom, string custAccBeg, string custAccEnd, string monespion, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("WDevise", wDevise) :
                new ObjectParameter("WDevise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var nomPrenomParameter = nomPrenom != null ?
                new ObjectParameter("NomPrenom", nomPrenom) :
                new ObjectParameter("NomPrenom", typeof(string));
    
            var custAccBegParameter = custAccBeg != null ?
                new ObjectParameter("CustAccBeg", custAccBeg) :
                new ObjectParameter("CustAccBeg", typeof(string));
    
            var custAccEndParameter = custAccEnd != null ?
                new ObjectParameter("CustAccEnd", custAccEnd) :
                new ObjectParameter("CustAccEnd", typeof(string));
    
            var monespionParameter = monespion != null ?
                new ObjectParameter("Monespion", monespion) :
                new ObjectParameter("Monespion", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ComptaReserveInt", agenceParameter, libAgenceParameter, wDeviseParameter, libDeviseParameter, matriculeParameter, nomPrenomParameter, custAccBegParameter, custAccEndParameter, monespionParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int ComptaReverseProv(string wagence, string wLibAgence, string wEmploye, string wLibEmploye, string type, string devise, string libDevise, ObjectParameter lect, ObjectParameter msg, string language, Nullable<decimal> serie, string numeroContrat, Nullable<double> amountToprovision, Nullable<double> provision)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var serieParameter = serie.HasValue ?
                new ObjectParameter("Serie", serie) :
                new ObjectParameter("Serie", typeof(decimal));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var amountToprovisionParameter = amountToprovision.HasValue ?
                new ObjectParameter("amountToprovision", amountToprovision) :
                new ObjectParameter("amountToprovision", typeof(double));
    
            var provisionParameter = provision.HasValue ?
                new ObjectParameter("Provision", provision) :
                new ObjectParameter("Provision", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ComptaReverseProv", wagenceParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, typeParameter, deviseParameter, libDeviseParameter, lect, msg, languageParameter, serieParameter, numeroContratParameter, amountToprovisionParameter, provisionParameter);
        }
    
        public virtual int ComptaReverseProvCU(string wagence, string wLibAgence, string wEmploye, string wLibEmploye, string type, string devise, string libDevise, ObjectParameter lect, ObjectParameter msg, string language, Nullable<decimal> serie, string numeroContrat, Nullable<double> amountToprovision, Nullable<double> provision, string txnNo)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var serieParameter = serie.HasValue ?
                new ObjectParameter("Serie", serie) :
                new ObjectParameter("Serie", typeof(decimal));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var amountToprovisionParameter = amountToprovision.HasValue ?
                new ObjectParameter("amountToprovision", amountToprovision) :
                new ObjectParameter("amountToprovision", typeof(double));
    
            var provisionParameter = provision.HasValue ?
                new ObjectParameter("Provision", provision) :
                new ObjectParameter("Provision", typeof(double));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ComptaReverseProvCU", wagenceParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, typeParameter, deviseParameter, libDeviseParameter, lect, msg, languageParameter, serieParameter, numeroContratParameter, amountToprovisionParameter, provisionParameter, txnNoParameter);
        }
    
        public virtual ObjectResult<ComptaSalaireCompany_Result> ComptaSalaireCompany(string agence, string libAgence, Nullable<System.DateTime> valueDate, string dateSalaire, string devise, string libDevise, string description, string libelle, string refOperation, string txnNo, Nullable<double> totalAmount, string typeTraitement, string companyname, Nullable<int> exoTVA, string wEmploye, string wLibEmploye, ObjectParameter lect, ObjectParameter msg, string computerName, string language, string cobacID)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var valueDateParameter = valueDate.HasValue ?
                new ObjectParameter("ValueDate", valueDate) :
                new ObjectParameter("ValueDate", typeof(System.DateTime));
    
            var dateSalaireParameter = dateSalaire != null ?
                new ObjectParameter("DateSalaire", dateSalaire) :
                new ObjectParameter("DateSalaire", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("Libelle", libelle) :
                new ObjectParameter("Libelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(double));
    
            var typeTraitementParameter = typeTraitement != null ?
                new ObjectParameter("TypeTraitement", typeTraitement) :
                new ObjectParameter("TypeTraitement", typeof(string));
    
            var companynameParameter = companyname != null ?
                new ObjectParameter("companyname", companyname) :
                new ObjectParameter("companyname", typeof(string));
    
            var exoTVAParameter = exoTVA.HasValue ?
                new ObjectParameter("ExoTVA", exoTVA) :
                new ObjectParameter("ExoTVA", typeof(int));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("WLibEmploye", wLibEmploye) :
                new ObjectParameter("WLibEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ComptaSalaireCompany_Result>("ComptaSalaireCompany", agenceParameter, libAgenceParameter, valueDateParameter, dateSalaireParameter, deviseParameter, libDeviseParameter, descriptionParameter, libelleParameter, refOperationParameter, txnNoParameter, totalAmountParameter, typeTraitementParameter, companynameParameter, exoTVAParameter, wEmployeParameter, wLibEmployeParameter, lect, msg, computerNameParameter, languageParameter, cobacIDParameter);
        }
    
        public virtual ObjectResult<ComptaStandingOrder_Result> ComptaStandingOrder(string agence, string libAgence, Nullable<System.DateTime> dateTreat, string devise, string libDevise, string description, string libelle, string refOperation, string txnNo, Nullable<int> forceTransaction, string companyname, Nullable<int> exoTVA, string wEmploye, string wLibEmploye, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var dateTreatParameter = dateTreat.HasValue ?
                new ObjectParameter("DateTreat", dateTreat) :
                new ObjectParameter("DateTreat", typeof(System.DateTime));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("Libelle", libelle) :
                new ObjectParameter("Libelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var forceTransactionParameter = forceTransaction.HasValue ?
                new ObjectParameter("ForceTransaction", forceTransaction) :
                new ObjectParameter("ForceTransaction", typeof(int));
    
            var companynameParameter = companyname != null ?
                new ObjectParameter("companyname", companyname) :
                new ObjectParameter("companyname", typeof(string));
    
            var exoTVAParameter = exoTVA.HasValue ?
                new ObjectParameter("ExoTVA", exoTVA) :
                new ObjectParameter("ExoTVA", typeof(int));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("WLibEmploye", wLibEmploye) :
                new ObjectParameter("WLibEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ComptaStandingOrder_Result>("ComptaStandingOrder", agenceParameter, libAgenceParameter, dateTreatParameter, deviseParameter, libDeviseParameter, descriptionParameter, libelleParameter, refOperationParameter, txnNoParameter, forceTransactionParameter, companynameParameter, exoTVAParameter, wEmployeParameter, wLibEmployeParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<ComptaVirement_Result> ComptaVirement(string wAgence, string wLibAgence, string cpteCpteDonneur, string wDenomination, string cpteBenefInt, string libCpteBenef, string wDevise, string libDevise, string wEmploye, string wLibEmploye, string wtxnno, Nullable<System.DateTime> dateVal, Nullable<double> montant, Nullable<double> txTVA, Nullable<double> commission, string refOp, string wDescription, string cptecolTransitVIRS, string cleColTransitVIRS, string libCptecolTransitVIRS, string codeLibelle, string libLibelle, string journal, string libJournal, string libTrCode, string virSpont, string typeVir, Nullable<short> liaison, string libLiaison, Nullable<System.DateTime> dateOrdre, string fonction, string situation, Nullable<System.DateTime> dateVals2, Nullable<System.DateTime> dateVals1, string virOption, ObjectParameter lect, ObjectParameter msg, Nullable<short> espion, string computerName, string language)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("WAgence", wAgence) :
                new ObjectParameter("WAgence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("WLibAgence", wLibAgence) :
                new ObjectParameter("WLibAgence", typeof(string));
    
            var cpteCpteDonneurParameter = cpteCpteDonneur != null ?
                new ObjectParameter("CpteCpteDonneur", cpteCpteDonneur) :
                new ObjectParameter("CpteCpteDonneur", typeof(string));
    
            var wDenominationParameter = wDenomination != null ?
                new ObjectParameter("wDenomination", wDenomination) :
                new ObjectParameter("wDenomination", typeof(string));
    
            var cpteBenefIntParameter = cpteBenefInt != null ?
                new ObjectParameter("CpteBenefInt", cpteBenefInt) :
                new ObjectParameter("CpteBenefInt", typeof(string));
    
            var libCpteBenefParameter = libCpteBenef != null ?
                new ObjectParameter("LibCpteBenef", libCpteBenef) :
                new ObjectParameter("LibCpteBenef", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("WEmploye", wEmploye) :
                new ObjectParameter("WEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("WLibEmploye", wLibEmploye) :
                new ObjectParameter("WLibEmploye", typeof(string));
    
            var wtxnnoParameter = wtxnno != null ?
                new ObjectParameter("wtxnno", wtxnno) :
                new ObjectParameter("wtxnno", typeof(string));
    
            var dateValParameter = dateVal.HasValue ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(System.DateTime));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var commissionParameter = commission.HasValue ?
                new ObjectParameter("Commission", commission) :
                new ObjectParameter("Commission", typeof(double));
    
            var refOpParameter = refOp != null ?
                new ObjectParameter("RefOp", refOp) :
                new ObjectParameter("RefOp", typeof(string));
    
            var wDescriptionParameter = wDescription != null ?
                new ObjectParameter("wDescription", wDescription) :
                new ObjectParameter("wDescription", typeof(string));
    
            var cptecolTransitVIRSParameter = cptecolTransitVIRS != null ?
                new ObjectParameter("CptecolTransitVIRS", cptecolTransitVIRS) :
                new ObjectParameter("CptecolTransitVIRS", typeof(string));
    
            var cleColTransitVIRSParameter = cleColTransitVIRS != null ?
                new ObjectParameter("CleColTransitVIRS", cleColTransitVIRS) :
                new ObjectParameter("CleColTransitVIRS", typeof(string));
    
            var libCptecolTransitVIRSParameter = libCptecolTransitVIRS != null ?
                new ObjectParameter("libCptecolTransitVIRS", libCptecolTransitVIRS) :
                new ObjectParameter("libCptecolTransitVIRS", typeof(string));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var libLibelleParameter = libLibelle != null ?
                new ObjectParameter("LibLibelle", libLibelle) :
                new ObjectParameter("LibLibelle", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var libJournalParameter = libJournal != null ?
                new ObjectParameter("LibJournal", libJournal) :
                new ObjectParameter("LibJournal", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var virSpontParameter = virSpont != null ?
                new ObjectParameter("VirSpont", virSpont) :
                new ObjectParameter("VirSpont", typeof(string));
    
            var typeVirParameter = typeVir != null ?
                new ObjectParameter("TypeVir", typeVir) :
                new ObjectParameter("TypeVir", typeof(string));
    
            var liaisonParameter = liaison.HasValue ?
                new ObjectParameter("Liaison", liaison) :
                new ObjectParameter("Liaison", typeof(short));
    
            var libLiaisonParameter = libLiaison != null ?
                new ObjectParameter("LibLiaison", libLiaison) :
                new ObjectParameter("LibLiaison", typeof(string));
    
            var dateOrdreParameter = dateOrdre.HasValue ?
                new ObjectParameter("DateOrdre", dateOrdre) :
                new ObjectParameter("DateOrdre", typeof(System.DateTime));
    
            var fonctionParameter = fonction != null ?
                new ObjectParameter("Fonction", fonction) :
                new ObjectParameter("Fonction", typeof(string));
    
            var situationParameter = situation != null ?
                new ObjectParameter("Situation", situation) :
                new ObjectParameter("Situation", typeof(string));
    
            var dateVals2Parameter = dateVals2.HasValue ?
                new ObjectParameter("DateVals2", dateVals2) :
                new ObjectParameter("DateVals2", typeof(System.DateTime));
    
            var dateVals1Parameter = dateVals1.HasValue ?
                new ObjectParameter("DateVals1", dateVals1) :
                new ObjectParameter("DateVals1", typeof(System.DateTime));
    
            var virOptionParameter = virOption != null ?
                new ObjectParameter("VirOption", virOption) :
                new ObjectParameter("VirOption", typeof(string));
    
            var espionParameter = espion.HasValue ?
                new ObjectParameter("espion", espion) :
                new ObjectParameter("espion", typeof(short));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ComptaVirement_Result>("ComptaVirement", wAgenceParameter, wLibAgenceParameter, cpteCpteDonneurParameter, wDenominationParameter, cpteBenefIntParameter, libCpteBenefParameter, wDeviseParameter, libDeviseParameter, wEmployeParameter, wLibEmployeParameter, wtxnnoParameter, dateValParameter, montantParameter, txTVAParameter, commissionParameter, refOpParameter, wDescriptionParameter, cptecolTransitVIRSParameter, cleColTransitVIRSParameter, libCptecolTransitVIRSParameter, codeLibelleParameter, libLibelleParameter, journalParameter, libJournalParameter, libTrCodeParameter, virSpontParameter, typeVirParameter, liaisonParameter, libLiaisonParameter, dateOrdreParameter, fonctionParameter, situationParameter, dateVals2Parameter, dateVals1Parameter, virOptionParameter, lect, msg, espionParameter, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<ComptaVirement_S_Trans_Result> ComptaVirement_S_Trans(string wAgence, string wLibAgence, string cpteCpteDonneur, string wDenomination, string cpteBenefInt, string libCpteBenef, string wDevise, string libDevise, string wEmploye, string wLibEmploye, string wtxnno, Nullable<System.DateTime> dateVal, Nullable<double> montant, Nullable<double> txTVA, Nullable<double> commission, string refOp, string wDescription, string cptecolTransitVIRS, string cleColTransitVIRS, string libCptecolTransitVIRS, string codeLibelle, string libLibelle, string journal, string libJournal, string libTrCode, string virSpont, string typeVir, Nullable<short> liaison, string libLiaison, Nullable<System.DateTime> dateOrdre, string fonction, string situation, Nullable<System.DateTime> dateVals2, Nullable<System.DateTime> dateVals1, string virOption, ObjectParameter lect, ObjectParameter msg, string language, string agenceben, string libAgenceben)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("WAgence", wAgence) :
                new ObjectParameter("WAgence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("WLibAgence", wLibAgence) :
                new ObjectParameter("WLibAgence", typeof(string));
    
            var cpteCpteDonneurParameter = cpteCpteDonneur != null ?
                new ObjectParameter("CpteCpteDonneur", cpteCpteDonneur) :
                new ObjectParameter("CpteCpteDonneur", typeof(string));
    
            var wDenominationParameter = wDenomination != null ?
                new ObjectParameter("wDenomination", wDenomination) :
                new ObjectParameter("wDenomination", typeof(string));
    
            var cpteBenefIntParameter = cpteBenefInt != null ?
                new ObjectParameter("CpteBenefInt", cpteBenefInt) :
                new ObjectParameter("CpteBenefInt", typeof(string));
    
            var libCpteBenefParameter = libCpteBenef != null ?
                new ObjectParameter("LibCpteBenef", libCpteBenef) :
                new ObjectParameter("LibCpteBenef", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("WEmploye", wEmploye) :
                new ObjectParameter("WEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("WLibEmploye", wLibEmploye) :
                new ObjectParameter("WLibEmploye", typeof(string));
    
            var wtxnnoParameter = wtxnno != null ?
                new ObjectParameter("wtxnno", wtxnno) :
                new ObjectParameter("wtxnno", typeof(string));
    
            var dateValParameter = dateVal.HasValue ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(System.DateTime));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var commissionParameter = commission.HasValue ?
                new ObjectParameter("Commission", commission) :
                new ObjectParameter("Commission", typeof(double));
    
            var refOpParameter = refOp != null ?
                new ObjectParameter("RefOp", refOp) :
                new ObjectParameter("RefOp", typeof(string));
    
            var wDescriptionParameter = wDescription != null ?
                new ObjectParameter("wDescription", wDescription) :
                new ObjectParameter("wDescription", typeof(string));
    
            var cptecolTransitVIRSParameter = cptecolTransitVIRS != null ?
                new ObjectParameter("CptecolTransitVIRS", cptecolTransitVIRS) :
                new ObjectParameter("CptecolTransitVIRS", typeof(string));
    
            var cleColTransitVIRSParameter = cleColTransitVIRS != null ?
                new ObjectParameter("CleColTransitVIRS", cleColTransitVIRS) :
                new ObjectParameter("CleColTransitVIRS", typeof(string));
    
            var libCptecolTransitVIRSParameter = libCptecolTransitVIRS != null ?
                new ObjectParameter("libCptecolTransitVIRS", libCptecolTransitVIRS) :
                new ObjectParameter("libCptecolTransitVIRS", typeof(string));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var libLibelleParameter = libLibelle != null ?
                new ObjectParameter("LibLibelle", libLibelle) :
                new ObjectParameter("LibLibelle", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var libJournalParameter = libJournal != null ?
                new ObjectParameter("LibJournal", libJournal) :
                new ObjectParameter("LibJournal", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var virSpontParameter = virSpont != null ?
                new ObjectParameter("VirSpont", virSpont) :
                new ObjectParameter("VirSpont", typeof(string));
    
            var typeVirParameter = typeVir != null ?
                new ObjectParameter("TypeVir", typeVir) :
                new ObjectParameter("TypeVir", typeof(string));
    
            var liaisonParameter = liaison.HasValue ?
                new ObjectParameter("Liaison", liaison) :
                new ObjectParameter("Liaison", typeof(short));
    
            var libLiaisonParameter = libLiaison != null ?
                new ObjectParameter("LibLiaison", libLiaison) :
                new ObjectParameter("LibLiaison", typeof(string));
    
            var dateOrdreParameter = dateOrdre.HasValue ?
                new ObjectParameter("DateOrdre", dateOrdre) :
                new ObjectParameter("DateOrdre", typeof(System.DateTime));
    
            var fonctionParameter = fonction != null ?
                new ObjectParameter("Fonction", fonction) :
                new ObjectParameter("Fonction", typeof(string));
    
            var situationParameter = situation != null ?
                new ObjectParameter("Situation", situation) :
                new ObjectParameter("Situation", typeof(string));
    
            var dateVals2Parameter = dateVals2.HasValue ?
                new ObjectParameter("DateVals2", dateVals2) :
                new ObjectParameter("DateVals2", typeof(System.DateTime));
    
            var dateVals1Parameter = dateVals1.HasValue ?
                new ObjectParameter("DateVals1", dateVals1) :
                new ObjectParameter("DateVals1", typeof(System.DateTime));
    
            var virOptionParameter = virOption != null ?
                new ObjectParameter("VirOption", virOption) :
                new ObjectParameter("VirOption", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var agencebenParameter = agenceben != null ?
                new ObjectParameter("agenceben", agenceben) :
                new ObjectParameter("agenceben", typeof(string));
    
            var libAgencebenParameter = libAgenceben != null ?
                new ObjectParameter("LibAgenceben", libAgenceben) :
                new ObjectParameter("LibAgenceben", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ComptaVirement_S_Trans_Result>("ComptaVirement_S_Trans", wAgenceParameter, wLibAgenceParameter, cpteCpteDonneurParameter, wDenominationParameter, cpteBenefIntParameter, libCpteBenefParameter, wDeviseParameter, libDeviseParameter, wEmployeParameter, wLibEmployeParameter, wtxnnoParameter, dateValParameter, montantParameter, txTVAParameter, commissionParameter, refOpParameter, wDescriptionParameter, cptecolTransitVIRSParameter, cleColTransitVIRSParameter, libCptecolTransitVIRSParameter, codeLibelleParameter, libLibelleParameter, journalParameter, libJournalParameter, libTrCodeParameter, virSpontParameter, typeVirParameter, liaisonParameter, libLiaisonParameter, dateOrdreParameter, fonctionParameter, situationParameter, dateVals2Parameter, dateVals1Parameter, virOptionParameter, lect, msg, languageParameter, agencebenParameter, libAgencebenParameter);
        }
    
        public virtual int ComptaWriteOff(string wagence, string wLibAgence, string wEmploye, string wLibEmploye, string type, string devise, string libDevise, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ComptaWriteOff", wagenceParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, typeParameter, deviseParameter, libDeviseParameter, lect, msg, languageParameter);
        }
    
        public virtual int ComptaWriteOffCU(string wagence, string wLibAgence, string wEmploye, string wLibEmploye, string type, string devise, string libDevise, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ComptaWriteOffCU", wagenceParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, typeParameter, deviseParameter, libDeviseParameter, lect, msg, languageParameter);
        }
    
        public virtual ObjectResult<Contentieux_Filter_Result> Contentieux_Filter(Nullable<short> intFilterMode, string agence, Nullable<decimal> serie, string numeroContrat, ObjectParameter countfield)
        {
            var intFilterModeParameter = intFilterMode.HasValue ?
                new ObjectParameter("IntFilterMode", intFilterMode) :
                new ObjectParameter("IntFilterMode", typeof(short));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var serieParameter = serie.HasValue ?
                new ObjectParameter("Serie", serie) :
                new ObjectParameter("Serie", typeof(decimal));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Contentieux_Filter_Result>("Contentieux_Filter", intFilterModeParameter, agenceParameter, serieParameter, numeroContratParameter, countfield);
        }
    
        public virtual ObjectResult<Contentieux_Insert_S_Trans_Result> Contentieux_Insert_S_Trans(string agence, Nullable<decimal> serie, string client, string denomination, string cpteJumelleCC, string cpteJumelleImp, string cpteJumelleCredit, Nullable<short> catCpte, string cpteJumelleCont, string cpteIndAgioRes, string cpteGL, string cleCpte, string libCpteGl, Nullable<double> montant, Nullable<double> rembMensuel, Nullable<double> interet, Nullable<double> mtTVA, Nullable<System.DateTime> dateContentieux, Nullable<System.DateTime> dateImpaye, string stateCont, Nullable<System.DateTime> dateReglement, string numeroContrat, Nullable<System.DateTime> dateAccord, Nullable<double> mtPenalite, Nullable<System.DateTime> dateCptaPenalite, Nullable<System.DateTime> dateCreation, string fPVal, string txnNo, Nullable<System.DateTime> datetransfert, ObjectParameter lect, string impStatus, string language, Nullable<double> uprovision)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var serieParameter = serie.HasValue ?
                new ObjectParameter("Serie", serie) :
                new ObjectParameter("Serie", typeof(decimal));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var cpteJumelleImpParameter = cpteJumelleImp != null ?
                new ObjectParameter("CpteJumelleImp", cpteJumelleImp) :
                new ObjectParameter("CpteJumelleImp", typeof(string));
    
            var cpteJumelleCreditParameter = cpteJumelleCredit != null ?
                new ObjectParameter("CpteJumelleCredit", cpteJumelleCredit) :
                new ObjectParameter("CpteJumelleCredit", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var cpteJumelleContParameter = cpteJumelleCont != null ?
                new ObjectParameter("CpteJumelleCont", cpteJumelleCont) :
                new ObjectParameter("CpteJumelleCont", typeof(string));
    
            var cpteIndAgioResParameter = cpteIndAgioRes != null ?
                new ObjectParameter("CpteIndAgioRes", cpteIndAgioRes) :
                new ObjectParameter("CpteIndAgioRes", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var libCpteGlParameter = libCpteGl != null ?
                new ObjectParameter("LibCpteGl", libCpteGl) :
                new ObjectParameter("LibCpteGl", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var rembMensuelParameter = rembMensuel.HasValue ?
                new ObjectParameter("RembMensuel", rembMensuel) :
                new ObjectParameter("RembMensuel", typeof(double));
    
            var interetParameter = interet.HasValue ?
                new ObjectParameter("Interet", interet) :
                new ObjectParameter("Interet", typeof(double));
    
            var mtTVAParameter = mtTVA.HasValue ?
                new ObjectParameter("MtTVA", mtTVA) :
                new ObjectParameter("MtTVA", typeof(double));
    
            var dateContentieuxParameter = dateContentieux.HasValue ?
                new ObjectParameter("DateContentieux", dateContentieux) :
                new ObjectParameter("DateContentieux", typeof(System.DateTime));
    
            var dateImpayeParameter = dateImpaye.HasValue ?
                new ObjectParameter("DateImpaye", dateImpaye) :
                new ObjectParameter("DateImpaye", typeof(System.DateTime));
    
            var stateContParameter = stateCont != null ?
                new ObjectParameter("StateCont", stateCont) :
                new ObjectParameter("StateCont", typeof(string));
    
            var dateReglementParameter = dateReglement.HasValue ?
                new ObjectParameter("DateReglement", dateReglement) :
                new ObjectParameter("DateReglement", typeof(System.DateTime));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var dateAccordParameter = dateAccord.HasValue ?
                new ObjectParameter("DateAccord", dateAccord) :
                new ObjectParameter("DateAccord", typeof(System.DateTime));
    
            var mtPenaliteParameter = mtPenalite.HasValue ?
                new ObjectParameter("MtPenalite", mtPenalite) :
                new ObjectParameter("MtPenalite", typeof(double));
    
            var dateCptaPenaliteParameter = dateCptaPenalite.HasValue ?
                new ObjectParameter("DateCptaPenalite", dateCptaPenalite) :
                new ObjectParameter("DateCptaPenalite", typeof(System.DateTime));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var fPValParameter = fPVal != null ?
                new ObjectParameter("FPVal", fPVal) :
                new ObjectParameter("FPVal", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var datetransfertParameter = datetransfert.HasValue ?
                new ObjectParameter("Datetransfert", datetransfert) :
                new ObjectParameter("Datetransfert", typeof(System.DateTime));
    
            var impStatusParameter = impStatus != null ?
                new ObjectParameter("ImpStatus", impStatus) :
                new ObjectParameter("ImpStatus", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var uprovisionParameter = uprovision.HasValue ?
                new ObjectParameter("uprovision", uprovision) :
                new ObjectParameter("uprovision", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Contentieux_Insert_S_Trans_Result>("Contentieux_Insert_S_Trans", agenceParameter, serieParameter, clientParameter, denominationParameter, cpteJumelleCCParameter, cpteJumelleImpParameter, cpteJumelleCreditParameter, catCpteParameter, cpteJumelleContParameter, cpteIndAgioResParameter, cpteGLParameter, cleCpteParameter, libCpteGlParameter, montantParameter, rembMensuelParameter, interetParameter, mtTVAParameter, dateContentieuxParameter, dateImpayeParameter, stateContParameter, dateReglementParameter, numeroContratParameter, dateAccordParameter, mtPenaliteParameter, dateCptaPenaliteParameter, dateCreationParameter, fPValParameter, txnNoParameter, datetransfertParameter, lect, impStatusParameter, languageParameter, uprovisionParameter);
        }
    
        public virtual ObjectResult<Contentieux_Update_S_Trans_Result> Contentieux_Update_S_Trans(string agence, Nullable<decimal> serie, string client, string denomination, string cpteJumelleCC, string cpteJumelleImp, string cpteJumelleCredit, Nullable<short> catCpte, string cpteJumelleCont, string cpteIndAgioRes, string cpteGL, string cleCpte, string libCpteGl, Nullable<double> montant, Nullable<double> rembMensuel, Nullable<double> interet, Nullable<double> mtTVA, Nullable<System.DateTime> dateContentieux, Nullable<System.DateTime> dateImpaye, string stateCont, Nullable<System.DateTime> dateReglement, string numeroContrat, Nullable<System.DateTime> dateAccord, Nullable<double> mtPenalite, Nullable<System.DateTime> dateCptaPenalite, Nullable<System.DateTime> dateCreation, string fPVal, string txnNo, Nullable<System.DateTime> datetransfert, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var serieParameter = serie.HasValue ?
                new ObjectParameter("Serie", serie) :
                new ObjectParameter("Serie", typeof(decimal));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var cpteJumelleImpParameter = cpteJumelleImp != null ?
                new ObjectParameter("CpteJumelleImp", cpteJumelleImp) :
                new ObjectParameter("CpteJumelleImp", typeof(string));
    
            var cpteJumelleCreditParameter = cpteJumelleCredit != null ?
                new ObjectParameter("CpteJumelleCredit", cpteJumelleCredit) :
                new ObjectParameter("CpteJumelleCredit", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var cpteJumelleContParameter = cpteJumelleCont != null ?
                new ObjectParameter("CpteJumelleCont", cpteJumelleCont) :
                new ObjectParameter("CpteJumelleCont", typeof(string));
    
            var cpteIndAgioResParameter = cpteIndAgioRes != null ?
                new ObjectParameter("CpteIndAgioRes", cpteIndAgioRes) :
                new ObjectParameter("CpteIndAgioRes", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var libCpteGlParameter = libCpteGl != null ?
                new ObjectParameter("LibCpteGl", libCpteGl) :
                new ObjectParameter("LibCpteGl", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var rembMensuelParameter = rembMensuel.HasValue ?
                new ObjectParameter("RembMensuel", rembMensuel) :
                new ObjectParameter("RembMensuel", typeof(double));
    
            var interetParameter = interet.HasValue ?
                new ObjectParameter("Interet", interet) :
                new ObjectParameter("Interet", typeof(double));
    
            var mtTVAParameter = mtTVA.HasValue ?
                new ObjectParameter("MtTVA", mtTVA) :
                new ObjectParameter("MtTVA", typeof(double));
    
            var dateContentieuxParameter = dateContentieux.HasValue ?
                new ObjectParameter("DateContentieux", dateContentieux) :
                new ObjectParameter("DateContentieux", typeof(System.DateTime));
    
            var dateImpayeParameter = dateImpaye.HasValue ?
                new ObjectParameter("DateImpaye", dateImpaye) :
                new ObjectParameter("DateImpaye", typeof(System.DateTime));
    
            var stateContParameter = stateCont != null ?
                new ObjectParameter("StateCont", stateCont) :
                new ObjectParameter("StateCont", typeof(string));
    
            var dateReglementParameter = dateReglement.HasValue ?
                new ObjectParameter("DateReglement", dateReglement) :
                new ObjectParameter("DateReglement", typeof(System.DateTime));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var dateAccordParameter = dateAccord.HasValue ?
                new ObjectParameter("DateAccord", dateAccord) :
                new ObjectParameter("DateAccord", typeof(System.DateTime));
    
            var mtPenaliteParameter = mtPenalite.HasValue ?
                new ObjectParameter("MtPenalite", mtPenalite) :
                new ObjectParameter("MtPenalite", typeof(double));
    
            var dateCptaPenaliteParameter = dateCptaPenalite.HasValue ?
                new ObjectParameter("DateCptaPenalite", dateCptaPenalite) :
                new ObjectParameter("DateCptaPenalite", typeof(System.DateTime));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var fPValParameter = fPVal != null ?
                new ObjectParameter("FPVal", fPVal) :
                new ObjectParameter("FPVal", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var datetransfertParameter = datetransfert.HasValue ?
                new ObjectParameter("Datetransfert", datetransfert) :
                new ObjectParameter("Datetransfert", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Contentieux_Update_S_Trans_Result>("Contentieux_Update_S_Trans", agenceParameter, serieParameter, clientParameter, denominationParameter, cpteJumelleCCParameter, cpteJumelleImpParameter, cpteJumelleCreditParameter, catCpteParameter, cpteJumelleContParameter, cpteIndAgioResParameter, cpteGLParameter, cleCpteParameter, libCpteGlParameter, montantParameter, rembMensuelParameter, interetParameter, mtTVAParameter, dateContentieuxParameter, dateImpayeParameter, stateContParameter, dateReglementParameter, numeroContratParameter, dateAccordParameter, mtPenaliteParameter, dateCptaPenaliteParameter, dateCreationParameter, fPValParameter, txnNoParameter, datetransfertParameter, lect, languageParameter);
        }
    
        public virtual int CorrespBnk_Delete(string banque, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var banqueParameter = banque != null ?
                new ObjectParameter("Banque", banque) :
                new ObjectParameter("Banque", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CorrespBnk_Delete", banqueParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int CorrespBnk_Insert(string banque, string designation, string adresse1, string adresse2, string ville, string pays, Nullable<System.DateTime> dateCreation, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var banqueParameter = banque != null ?
                new ObjectParameter("Banque", banque) :
                new ObjectParameter("Banque", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var adresse1Parameter = adresse1 != null ?
                new ObjectParameter("Adresse1", adresse1) :
                new ObjectParameter("Adresse1", typeof(string));
    
            var adresse2Parameter = adresse2 != null ?
                new ObjectParameter("Adresse2", adresse2) :
                new ObjectParameter("Adresse2", typeof(string));
    
            var villeParameter = ville != null ?
                new ObjectParameter("Ville", ville) :
                new ObjectParameter("Ville", typeof(string));
    
            var paysParameter = pays != null ?
                new ObjectParameter("Pays", pays) :
                new ObjectParameter("Pays", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CorrespBnk_Insert", banqueParameter, designationParameter, adresse1Parameter, adresse2Parameter, villeParameter, paysParameter, dateCreationParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int CorrespBnk_Update(string banque, string designation, string adresse1, string adresse2, string ville, string pays, Nullable<System.DateTime> dateCreation, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var banqueParameter = banque != null ?
                new ObjectParameter("Banque", banque) :
                new ObjectParameter("Banque", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var adresse1Parameter = adresse1 != null ?
                new ObjectParameter("Adresse1", adresse1) :
                new ObjectParameter("Adresse1", typeof(string));
    
            var adresse2Parameter = adresse2 != null ?
                new ObjectParameter("Adresse2", adresse2) :
                new ObjectParameter("Adresse2", typeof(string));
    
            var villeParameter = ville != null ?
                new ObjectParameter("Ville", ville) :
                new ObjectParameter("Ville", typeof(string));
    
            var paysParameter = pays != null ?
                new ObjectParameter("Pays", pays) :
                new ObjectParameter("Pays", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CorrespBnk_Update", banqueParameter, designationParameter, adresse1Parameter, adresse2Parameter, villeParameter, paysParameter, dateCreationParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual ObjectResult<CpteClt_Cash_Update_Result> CpteClt_Cash_Update(Nullable<short> mavar, string agence, string client, string cpteJumelle, Nullable<double> debit, Nullable<double> credit, string libClient, Nullable<short> catCpte, string libCatCpte, string subcpte, string letCle, string devise, Nullable<double> ligneDec, Nullable<System.DateTime> expiration, string cpteCol, string cleCol, Nullable<System.DateTime> dateOuverture, string gestionnaire, string statut, Nullable<System.DateTime> dateEff, Nullable<short> totalSignature, Nullable<short> signatureVal, string fusion, string libAgence, string libDevise, string libCpteCol, string libGestionnaire, string cpteOvation, Nullable<double> txIntDb, Nullable<double> txIntCr, string exoTDC, string exoTVA, string exoTPRCM, string exoFTC, Nullable<double> txComDec, Nullable<double> txComMvt, Nullable<double> txTVA, Nullable<int> mtFTC, string employe, string nomemploye, string cpteIndAgioRes, string cpteGenAgioRes, string cleGenAgioRes, string libCpteGenAgioRes, Nullable<System.DateTime> dateCreation, Nullable<System.DateTime> expirationlignedec, string cRBlocage, string dBBlocage, Nullable<double> cantonnement, Nullable<System.DateTime> cRBlockDate, Nullable<System.DateTime> dBBlockDate, Nullable<System.DateTime> dateDernierMvtDB, Nullable<System.DateTime> dateDernierMvtCR, Nullable<System.DateTime> stopIntDate, string stopInt, string reservedInt, string controlAcces, string signerinfo, Nullable<System.DateTime> dateDeclaration, string dormantstatus, string integritystatus, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, string language)
        {
            var mavarParameter = mavar.HasValue ?
                new ObjectParameter("mavar", mavar) :
                new ObjectParameter("mavar", typeof(short));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var libClientParameter = libClient != null ?
                new ObjectParameter("LibClient", libClient) :
                new ObjectParameter("LibClient", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var libCatCpteParameter = libCatCpte != null ?
                new ObjectParameter("LibCatCpte", libCatCpte) :
                new ObjectParameter("LibCatCpte", typeof(string));
    
            var subcpteParameter = subcpte != null ?
                new ObjectParameter("Subcpte", subcpte) :
                new ObjectParameter("Subcpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var ligneDecParameter = ligneDec.HasValue ?
                new ObjectParameter("LigneDec", ligneDec) :
                new ObjectParameter("LigneDec", typeof(double));
    
            var expirationParameter = expiration.HasValue ?
                new ObjectParameter("Expiration", expiration) :
                new ObjectParameter("Expiration", typeof(System.DateTime));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var cleColParameter = cleCol != null ?
                new ObjectParameter("CleCol", cleCol) :
                new ObjectParameter("CleCol", typeof(string));
    
            var dateOuvertureParameter = dateOuverture.HasValue ?
                new ObjectParameter("DateOuverture", dateOuverture) :
                new ObjectParameter("DateOuverture", typeof(System.DateTime));
    
            var gestionnaireParameter = gestionnaire != null ?
                new ObjectParameter("Gestionnaire", gestionnaire) :
                new ObjectParameter("Gestionnaire", typeof(string));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var dateEffParameter = dateEff.HasValue ?
                new ObjectParameter("DateEff", dateEff) :
                new ObjectParameter("DateEff", typeof(System.DateTime));
    
            var totalSignatureParameter = totalSignature.HasValue ?
                new ObjectParameter("TotalSignature", totalSignature) :
                new ObjectParameter("TotalSignature", typeof(short));
    
            var signatureValParameter = signatureVal.HasValue ?
                new ObjectParameter("SignatureVal", signatureVal) :
                new ObjectParameter("SignatureVal", typeof(short));
    
            var fusionParameter = fusion != null ?
                new ObjectParameter("Fusion", fusion) :
                new ObjectParameter("Fusion", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteColParameter = libCpteCol != null ?
                new ObjectParameter("LibCpteCol", libCpteCol) :
                new ObjectParameter("LibCpteCol", typeof(string));
    
            var libGestionnaireParameter = libGestionnaire != null ?
                new ObjectParameter("LibGestionnaire", libGestionnaire) :
                new ObjectParameter("LibGestionnaire", typeof(string));
    
            var cpteOvationParameter = cpteOvation != null ?
                new ObjectParameter("CpteOvation", cpteOvation) :
                new ObjectParameter("CpteOvation", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var exoTDCParameter = exoTDC != null ?
                new ObjectParameter("ExoTDC", exoTDC) :
                new ObjectParameter("ExoTDC", typeof(string));
    
            var exoTVAParameter = exoTVA != null ?
                new ObjectParameter("ExoTVA", exoTVA) :
                new ObjectParameter("ExoTVA", typeof(string));
    
            var exoTPRCMParameter = exoTPRCM != null ?
                new ObjectParameter("ExoTPRCM", exoTPRCM) :
                new ObjectParameter("ExoTPRCM", typeof(string));
    
            var exoFTCParameter = exoFTC != null ?
                new ObjectParameter("ExoFTC", exoFTC) :
                new ObjectParameter("ExoFTC", typeof(string));
    
            var txComDecParameter = txComDec.HasValue ?
                new ObjectParameter("TxComDec", txComDec) :
                new ObjectParameter("TxComDec", typeof(double));
    
            var txComMvtParameter = txComMvt.HasValue ?
                new ObjectParameter("TxComMvt", txComMvt) :
                new ObjectParameter("TxComMvt", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var mtFTCParameter = mtFTC.HasValue ?
                new ObjectParameter("MtFTC", mtFTC) :
                new ObjectParameter("MtFTC", typeof(int));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var nomemployeParameter = nomemploye != null ?
                new ObjectParameter("Nomemploye", nomemploye) :
                new ObjectParameter("Nomemploye", typeof(string));
    
            var cpteIndAgioResParameter = cpteIndAgioRes != null ?
                new ObjectParameter("CpteIndAgioRes", cpteIndAgioRes) :
                new ObjectParameter("CpteIndAgioRes", typeof(string));
    
            var cpteGenAgioResParameter = cpteGenAgioRes != null ?
                new ObjectParameter("CpteGenAgioRes", cpteGenAgioRes) :
                new ObjectParameter("CpteGenAgioRes", typeof(string));
    
            var cleGenAgioResParameter = cleGenAgioRes != null ?
                new ObjectParameter("CleGenAgioRes", cleGenAgioRes) :
                new ObjectParameter("CleGenAgioRes", typeof(string));
    
            var libCpteGenAgioResParameter = libCpteGenAgioRes != null ?
                new ObjectParameter("LibCpteGenAgioRes", libCpteGenAgioRes) :
                new ObjectParameter("LibCpteGenAgioRes", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var expirationlignedecParameter = expirationlignedec.HasValue ?
                new ObjectParameter("Expirationlignedec", expirationlignedec) :
                new ObjectParameter("Expirationlignedec", typeof(System.DateTime));
    
            var cRBlocageParameter = cRBlocage != null ?
                new ObjectParameter("CRBlocage", cRBlocage) :
                new ObjectParameter("CRBlocage", typeof(string));
    
            var dBBlocageParameter = dBBlocage != null ?
                new ObjectParameter("DBBlocage", dBBlocage) :
                new ObjectParameter("DBBlocage", typeof(string));
    
            var cantonnementParameter = cantonnement.HasValue ?
                new ObjectParameter("Cantonnement", cantonnement) :
                new ObjectParameter("Cantonnement", typeof(double));
    
            var cRBlockDateParameter = cRBlockDate.HasValue ?
                new ObjectParameter("CRBlockDate", cRBlockDate) :
                new ObjectParameter("CRBlockDate", typeof(System.DateTime));
    
            var dBBlockDateParameter = dBBlockDate.HasValue ?
                new ObjectParameter("DBBlockDate", dBBlockDate) :
                new ObjectParameter("DBBlockDate", typeof(System.DateTime));
    
            var dateDernierMvtDBParameter = dateDernierMvtDB.HasValue ?
                new ObjectParameter("DateDernierMvtDB", dateDernierMvtDB) :
                new ObjectParameter("DateDernierMvtDB", typeof(System.DateTime));
    
            var dateDernierMvtCRParameter = dateDernierMvtCR.HasValue ?
                new ObjectParameter("DateDernierMvtCR", dateDernierMvtCR) :
                new ObjectParameter("DateDernierMvtCR", typeof(System.DateTime));
    
            var stopIntDateParameter = stopIntDate.HasValue ?
                new ObjectParameter("StopIntDate", stopIntDate) :
                new ObjectParameter("StopIntDate", typeof(System.DateTime));
    
            var stopIntParameter = stopInt != null ?
                new ObjectParameter("StopInt", stopInt) :
                new ObjectParameter("StopInt", typeof(string));
    
            var reservedIntParameter = reservedInt != null ?
                new ObjectParameter("ReservedInt", reservedInt) :
                new ObjectParameter("ReservedInt", typeof(string));
    
            var controlAccesParameter = controlAcces != null ?
                new ObjectParameter("ControlAcces", controlAcces) :
                new ObjectParameter("ControlAcces", typeof(string));
    
            var signerinfoParameter = signerinfo != null ?
                new ObjectParameter("Signerinfo", signerinfo) :
                new ObjectParameter("Signerinfo", typeof(string));
    
            var dateDeclarationParameter = dateDeclaration.HasValue ?
                new ObjectParameter("DateDeclaration", dateDeclaration) :
                new ObjectParameter("DateDeclaration", typeof(System.DateTime));
    
            var dormantstatusParameter = dormantstatus != null ?
                new ObjectParameter("dormantstatus", dormantstatus) :
                new ObjectParameter("dormantstatus", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CpteClt_Cash_Update_Result>("CpteClt_Cash_Update", mavarParameter, agenceParameter, clientParameter, cpteJumelleParameter, debitParameter, creditParameter, libClientParameter, catCpteParameter, libCatCpteParameter, subcpteParameter, letCleParameter, deviseParameter, ligneDecParameter, expirationParameter, cpteColParameter, cleColParameter, dateOuvertureParameter, gestionnaireParameter, statutParameter, dateEffParameter, totalSignatureParameter, signatureValParameter, fusionParameter, libAgenceParameter, libDeviseParameter, libCpteColParameter, libGestionnaireParameter, cpteOvationParameter, txIntDbParameter, txIntCrParameter, exoTDCParameter, exoTVAParameter, exoTPRCMParameter, exoFTCParameter, txComDecParameter, txComMvtParameter, txTVAParameter, mtFTCParameter, employeParameter, nomemployeParameter, cpteIndAgioResParameter, cpteGenAgioResParameter, cleGenAgioResParameter, libCpteGenAgioResParameter, dateCreationParameter, expirationlignedecParameter, cRBlocageParameter, dBBlocageParameter, cantonnementParameter, cRBlockDateParameter, dBBlockDateParameter, dateDernierMvtDBParameter, dateDernierMvtCRParameter, stopIntDateParameter, stopIntParameter, reservedIntParameter, controlAccesParameter, signerinfoParameter, dateDeclarationParameter, dormantstatusParameter, integritystatusParameter, dateTransfertParameter, lect, languageParameter);
        }
    
        public virtual ObjectResult<CpteClt_Client_Update_S_Trans_Result> CpteClt_Client_Update_S_Trans(Nullable<short> mavar, string agence, string client, string cpteJumelle, Nullable<double> debit, Nullable<double> credit, string libClient, Nullable<short> catCpte, string libCatCpte, string subcpte, string letCle, string devise, Nullable<double> ligneDec, Nullable<System.DateTime> expiration, string cpteCol, string cleCol, Nullable<System.DateTime> dateOuverture, string gestionnaire, string statut, Nullable<System.DateTime> dateEff, Nullable<short> totalSignature, Nullable<short> signatureVal, string fusion, string libAgence, string libDevise, string libCpteCol, string libGestionnaire, string cpteOvation, Nullable<double> txIntDb, Nullable<double> txIntCr, string exoTDC, string exoTVA, string exoTPRCM, string exoFTC, Nullable<double> txComDec, Nullable<double> txComMvt, Nullable<double> txTVA, Nullable<int> mtFTC, string employe, string nomemploye, string cpteIndAgioRes, string cpteGenAgioRes, string cleGenAgioRes, string libCpteGenAgioRes, Nullable<System.DateTime> dateCreation, Nullable<System.DateTime> expirationlignedec, string cRBlocage, string dBBlocage, Nullable<double> cantonnement, Nullable<System.DateTime> cRBlockDate, Nullable<System.DateTime> dBBlockDate, Nullable<System.DateTime> dateDernierMvtDB, Nullable<System.DateTime> dateDernierMvtCR, Nullable<System.DateTime> stopIntDate, string stopInt, string reservedInt, string controlAcces, string signerinfo, Nullable<System.DateTime> dateDeclaration, string dormantstatus, string integritystatus, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, Nullable<int> periode, string abonementsms, string smslanguage, string billingOptionId, string litigationStatus, string language)
        {
            var mavarParameter = mavar.HasValue ?
                new ObjectParameter("mavar", mavar) :
                new ObjectParameter("mavar", typeof(short));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var libClientParameter = libClient != null ?
                new ObjectParameter("LibClient", libClient) :
                new ObjectParameter("LibClient", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var libCatCpteParameter = libCatCpte != null ?
                new ObjectParameter("LibCatCpte", libCatCpte) :
                new ObjectParameter("LibCatCpte", typeof(string));
    
            var subcpteParameter = subcpte != null ?
                new ObjectParameter("Subcpte", subcpte) :
                new ObjectParameter("Subcpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var ligneDecParameter = ligneDec.HasValue ?
                new ObjectParameter("LigneDec", ligneDec) :
                new ObjectParameter("LigneDec", typeof(double));
    
            var expirationParameter = expiration.HasValue ?
                new ObjectParameter("Expiration", expiration) :
                new ObjectParameter("Expiration", typeof(System.DateTime));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var cleColParameter = cleCol != null ?
                new ObjectParameter("CleCol", cleCol) :
                new ObjectParameter("CleCol", typeof(string));
    
            var dateOuvertureParameter = dateOuverture.HasValue ?
                new ObjectParameter("DateOuverture", dateOuverture) :
                new ObjectParameter("DateOuverture", typeof(System.DateTime));
    
            var gestionnaireParameter = gestionnaire != null ?
                new ObjectParameter("Gestionnaire", gestionnaire) :
                new ObjectParameter("Gestionnaire", typeof(string));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var dateEffParameter = dateEff.HasValue ?
                new ObjectParameter("DateEff", dateEff) :
                new ObjectParameter("DateEff", typeof(System.DateTime));
    
            var totalSignatureParameter = totalSignature.HasValue ?
                new ObjectParameter("TotalSignature", totalSignature) :
                new ObjectParameter("TotalSignature", typeof(short));
    
            var signatureValParameter = signatureVal.HasValue ?
                new ObjectParameter("SignatureVal", signatureVal) :
                new ObjectParameter("SignatureVal", typeof(short));
    
            var fusionParameter = fusion != null ?
                new ObjectParameter("Fusion", fusion) :
                new ObjectParameter("Fusion", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteColParameter = libCpteCol != null ?
                new ObjectParameter("LibCpteCol", libCpteCol) :
                new ObjectParameter("LibCpteCol", typeof(string));
    
            var libGestionnaireParameter = libGestionnaire != null ?
                new ObjectParameter("LibGestionnaire", libGestionnaire) :
                new ObjectParameter("LibGestionnaire", typeof(string));
    
            var cpteOvationParameter = cpteOvation != null ?
                new ObjectParameter("CpteOvation", cpteOvation) :
                new ObjectParameter("CpteOvation", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var exoTDCParameter = exoTDC != null ?
                new ObjectParameter("ExoTDC", exoTDC) :
                new ObjectParameter("ExoTDC", typeof(string));
    
            var exoTVAParameter = exoTVA != null ?
                new ObjectParameter("ExoTVA", exoTVA) :
                new ObjectParameter("ExoTVA", typeof(string));
    
            var exoTPRCMParameter = exoTPRCM != null ?
                new ObjectParameter("ExoTPRCM", exoTPRCM) :
                new ObjectParameter("ExoTPRCM", typeof(string));
    
            var exoFTCParameter = exoFTC != null ?
                new ObjectParameter("ExoFTC", exoFTC) :
                new ObjectParameter("ExoFTC", typeof(string));
    
            var txComDecParameter = txComDec.HasValue ?
                new ObjectParameter("TxComDec", txComDec) :
                new ObjectParameter("TxComDec", typeof(double));
    
            var txComMvtParameter = txComMvt.HasValue ?
                new ObjectParameter("TxComMvt", txComMvt) :
                new ObjectParameter("TxComMvt", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var mtFTCParameter = mtFTC.HasValue ?
                new ObjectParameter("MtFTC", mtFTC) :
                new ObjectParameter("MtFTC", typeof(int));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var nomemployeParameter = nomemploye != null ?
                new ObjectParameter("Nomemploye", nomemploye) :
                new ObjectParameter("Nomemploye", typeof(string));
    
            var cpteIndAgioResParameter = cpteIndAgioRes != null ?
                new ObjectParameter("CpteIndAgioRes", cpteIndAgioRes) :
                new ObjectParameter("CpteIndAgioRes", typeof(string));
    
            var cpteGenAgioResParameter = cpteGenAgioRes != null ?
                new ObjectParameter("CpteGenAgioRes", cpteGenAgioRes) :
                new ObjectParameter("CpteGenAgioRes", typeof(string));
    
            var cleGenAgioResParameter = cleGenAgioRes != null ?
                new ObjectParameter("CleGenAgioRes", cleGenAgioRes) :
                new ObjectParameter("CleGenAgioRes", typeof(string));
    
            var libCpteGenAgioResParameter = libCpteGenAgioRes != null ?
                new ObjectParameter("LibCpteGenAgioRes", libCpteGenAgioRes) :
                new ObjectParameter("LibCpteGenAgioRes", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var expirationlignedecParameter = expirationlignedec.HasValue ?
                new ObjectParameter("Expirationlignedec", expirationlignedec) :
                new ObjectParameter("Expirationlignedec", typeof(System.DateTime));
    
            var cRBlocageParameter = cRBlocage != null ?
                new ObjectParameter("CRBlocage", cRBlocage) :
                new ObjectParameter("CRBlocage", typeof(string));
    
            var dBBlocageParameter = dBBlocage != null ?
                new ObjectParameter("DBBlocage", dBBlocage) :
                new ObjectParameter("DBBlocage", typeof(string));
    
            var cantonnementParameter = cantonnement.HasValue ?
                new ObjectParameter("Cantonnement", cantonnement) :
                new ObjectParameter("Cantonnement", typeof(double));
    
            var cRBlockDateParameter = cRBlockDate.HasValue ?
                new ObjectParameter("CRBlockDate", cRBlockDate) :
                new ObjectParameter("CRBlockDate", typeof(System.DateTime));
    
            var dBBlockDateParameter = dBBlockDate.HasValue ?
                new ObjectParameter("DBBlockDate", dBBlockDate) :
                new ObjectParameter("DBBlockDate", typeof(System.DateTime));
    
            var dateDernierMvtDBParameter = dateDernierMvtDB.HasValue ?
                new ObjectParameter("DateDernierMvtDB", dateDernierMvtDB) :
                new ObjectParameter("DateDernierMvtDB", typeof(System.DateTime));
    
            var dateDernierMvtCRParameter = dateDernierMvtCR.HasValue ?
                new ObjectParameter("DateDernierMvtCR", dateDernierMvtCR) :
                new ObjectParameter("DateDernierMvtCR", typeof(System.DateTime));
    
            var stopIntDateParameter = stopIntDate.HasValue ?
                new ObjectParameter("StopIntDate", stopIntDate) :
                new ObjectParameter("StopIntDate", typeof(System.DateTime));
    
            var stopIntParameter = stopInt != null ?
                new ObjectParameter("StopInt", stopInt) :
                new ObjectParameter("StopInt", typeof(string));
    
            var reservedIntParameter = reservedInt != null ?
                new ObjectParameter("ReservedInt", reservedInt) :
                new ObjectParameter("ReservedInt", typeof(string));
    
            var controlAccesParameter = controlAcces != null ?
                new ObjectParameter("ControlAcces", controlAcces) :
                new ObjectParameter("ControlAcces", typeof(string));
    
            var signerinfoParameter = signerinfo != null ?
                new ObjectParameter("Signerinfo", signerinfo) :
                new ObjectParameter("Signerinfo", typeof(string));
    
            var dateDeclarationParameter = dateDeclaration.HasValue ?
                new ObjectParameter("DateDeclaration", dateDeclaration) :
                new ObjectParameter("DateDeclaration", typeof(System.DateTime));
    
            var dormantstatusParameter = dormantstatus != null ?
                new ObjectParameter("dormantstatus", dormantstatus) :
                new ObjectParameter("dormantstatus", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var periodeParameter = periode.HasValue ?
                new ObjectParameter("Periode", periode) :
                new ObjectParameter("Periode", typeof(int));
    
            var abonementsmsParameter = abonementsms != null ?
                new ObjectParameter("abonementsms", abonementsms) :
                new ObjectParameter("abonementsms", typeof(string));
    
            var smslanguageParameter = smslanguage != null ?
                new ObjectParameter("smslanguage", smslanguage) :
                new ObjectParameter("smslanguage", typeof(string));
    
            var billingOptionIdParameter = billingOptionId != null ?
                new ObjectParameter("BillingOptionId", billingOptionId) :
                new ObjectParameter("BillingOptionId", typeof(string));
    
            var litigationStatusParameter = litigationStatus != null ?
                new ObjectParameter("LitigationStatus", litigationStatus) :
                new ObjectParameter("LitigationStatus", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CpteClt_Client_Update_S_Trans_Result>("CpteClt_Client_Update_S_Trans", mavarParameter, agenceParameter, clientParameter, cpteJumelleParameter, debitParameter, creditParameter, libClientParameter, catCpteParameter, libCatCpteParameter, subcpteParameter, letCleParameter, deviseParameter, ligneDecParameter, expirationParameter, cpteColParameter, cleColParameter, dateOuvertureParameter, gestionnaireParameter, statutParameter, dateEffParameter, totalSignatureParameter, signatureValParameter, fusionParameter, libAgenceParameter, libDeviseParameter, libCpteColParameter, libGestionnaireParameter, cpteOvationParameter, txIntDbParameter, txIntCrParameter, exoTDCParameter, exoTVAParameter, exoTPRCMParameter, exoFTCParameter, txComDecParameter, txComMvtParameter, txTVAParameter, mtFTCParameter, employeParameter, nomemployeParameter, cpteIndAgioResParameter, cpteGenAgioResParameter, cleGenAgioResParameter, libCpteGenAgioResParameter, dateCreationParameter, expirationlignedecParameter, cRBlocageParameter, dBBlocageParameter, cantonnementParameter, cRBlockDateParameter, dBBlockDateParameter, dateDernierMvtDBParameter, dateDernierMvtCRParameter, stopIntDateParameter, stopIntParameter, reservedIntParameter, controlAccesParameter, signerinfoParameter, dateDeclarationParameter, dormantstatusParameter, integritystatusParameter, dateTransfertParameter, lect, periodeParameter, abonementsmsParameter, smslanguageParameter, billingOptionIdParameter, litigationStatusParameter, languageParameter);
        }
    
        public virtual int CpteClt_Client_UpdateAndClose(Nullable<short> mavar, string agence, string client, string cpteJumelle, Nullable<double> debit, Nullable<double> credit, string libClient, Nullable<short> catCpte, string libCatCpte, string subcpte, string letCle, string devise, Nullable<double> ligneDec, Nullable<System.DateTime> expiration, string cpteCol, string cleCol, Nullable<System.DateTime> dateOuverture, string gestionnaire, string statut, Nullable<System.DateTime> dateEff, Nullable<short> totalSignature, Nullable<short> signatureVal, string fusion, string libAgence, string libDevise, string libCpteCol, string libGestionnaire, string cpteOvation, Nullable<double> txIntDb, Nullable<double> txIntCr, string exoTDC, string exoTVA, string exoTPRCM, string exoFTC, Nullable<double> txComDec, Nullable<double> txComMvt, Nullable<double> txTVA, Nullable<int> mtFTC, string employe, string nomemploye, string cpteIndAgioRes, string cpteGenAgioRes, string cleGenAgioRes, string libCpteGenAgioRes, Nullable<System.DateTime> dateCreation, Nullable<System.DateTime> expirationlignedec, string cRBlocage, string dBBlocage, Nullable<double> cantonnement, Nullable<System.DateTime> cRBlockDate, Nullable<System.DateTime> dBBlockDate, Nullable<System.DateTime> dateDernierMvtDB, Nullable<System.DateTime> dateDernierMvtCR, Nullable<System.DateTime> stopIntDate, string stopInt, string reservedInt, string controlAcces, string signerinfo, Nullable<System.DateTime> dateDeclaration, string dormantstatus, string integritystatus, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, Nullable<int> periode, string abonementsms, string smslanguage, string billingOptionId, Nullable<System.DateTime> serverDate, string paraSmsBnk, ObjectParameter msg, string computerName, string language, string litigationStatus, string cobacId)
        {
            var mavarParameter = mavar.HasValue ?
                new ObjectParameter("mavar", mavar) :
                new ObjectParameter("mavar", typeof(short));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var libClientParameter = libClient != null ?
                new ObjectParameter("LibClient", libClient) :
                new ObjectParameter("LibClient", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var libCatCpteParameter = libCatCpte != null ?
                new ObjectParameter("LibCatCpte", libCatCpte) :
                new ObjectParameter("LibCatCpte", typeof(string));
    
            var subcpteParameter = subcpte != null ?
                new ObjectParameter("Subcpte", subcpte) :
                new ObjectParameter("Subcpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var ligneDecParameter = ligneDec.HasValue ?
                new ObjectParameter("LigneDec", ligneDec) :
                new ObjectParameter("LigneDec", typeof(double));
    
            var expirationParameter = expiration.HasValue ?
                new ObjectParameter("Expiration", expiration) :
                new ObjectParameter("Expiration", typeof(System.DateTime));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var cleColParameter = cleCol != null ?
                new ObjectParameter("CleCol", cleCol) :
                new ObjectParameter("CleCol", typeof(string));
    
            var dateOuvertureParameter = dateOuverture.HasValue ?
                new ObjectParameter("DateOuverture", dateOuverture) :
                new ObjectParameter("DateOuverture", typeof(System.DateTime));
    
            var gestionnaireParameter = gestionnaire != null ?
                new ObjectParameter("Gestionnaire", gestionnaire) :
                new ObjectParameter("Gestionnaire", typeof(string));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var dateEffParameter = dateEff.HasValue ?
                new ObjectParameter("DateEff", dateEff) :
                new ObjectParameter("DateEff", typeof(System.DateTime));
    
            var totalSignatureParameter = totalSignature.HasValue ?
                new ObjectParameter("TotalSignature", totalSignature) :
                new ObjectParameter("TotalSignature", typeof(short));
    
            var signatureValParameter = signatureVal.HasValue ?
                new ObjectParameter("SignatureVal", signatureVal) :
                new ObjectParameter("SignatureVal", typeof(short));
    
            var fusionParameter = fusion != null ?
                new ObjectParameter("Fusion", fusion) :
                new ObjectParameter("Fusion", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteColParameter = libCpteCol != null ?
                new ObjectParameter("LibCpteCol", libCpteCol) :
                new ObjectParameter("LibCpteCol", typeof(string));
    
            var libGestionnaireParameter = libGestionnaire != null ?
                new ObjectParameter("LibGestionnaire", libGestionnaire) :
                new ObjectParameter("LibGestionnaire", typeof(string));
    
            var cpteOvationParameter = cpteOvation != null ?
                new ObjectParameter("CpteOvation", cpteOvation) :
                new ObjectParameter("CpteOvation", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var exoTDCParameter = exoTDC != null ?
                new ObjectParameter("ExoTDC", exoTDC) :
                new ObjectParameter("ExoTDC", typeof(string));
    
            var exoTVAParameter = exoTVA != null ?
                new ObjectParameter("ExoTVA", exoTVA) :
                new ObjectParameter("ExoTVA", typeof(string));
    
            var exoTPRCMParameter = exoTPRCM != null ?
                new ObjectParameter("ExoTPRCM", exoTPRCM) :
                new ObjectParameter("ExoTPRCM", typeof(string));
    
            var exoFTCParameter = exoFTC != null ?
                new ObjectParameter("ExoFTC", exoFTC) :
                new ObjectParameter("ExoFTC", typeof(string));
    
            var txComDecParameter = txComDec.HasValue ?
                new ObjectParameter("TxComDec", txComDec) :
                new ObjectParameter("TxComDec", typeof(double));
    
            var txComMvtParameter = txComMvt.HasValue ?
                new ObjectParameter("TxComMvt", txComMvt) :
                new ObjectParameter("TxComMvt", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var mtFTCParameter = mtFTC.HasValue ?
                new ObjectParameter("MtFTC", mtFTC) :
                new ObjectParameter("MtFTC", typeof(int));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var nomemployeParameter = nomemploye != null ?
                new ObjectParameter("Nomemploye", nomemploye) :
                new ObjectParameter("Nomemploye", typeof(string));
    
            var cpteIndAgioResParameter = cpteIndAgioRes != null ?
                new ObjectParameter("CpteIndAgioRes", cpteIndAgioRes) :
                new ObjectParameter("CpteIndAgioRes", typeof(string));
    
            var cpteGenAgioResParameter = cpteGenAgioRes != null ?
                new ObjectParameter("CpteGenAgioRes", cpteGenAgioRes) :
                new ObjectParameter("CpteGenAgioRes", typeof(string));
    
            var cleGenAgioResParameter = cleGenAgioRes != null ?
                new ObjectParameter("CleGenAgioRes", cleGenAgioRes) :
                new ObjectParameter("CleGenAgioRes", typeof(string));
    
            var libCpteGenAgioResParameter = libCpteGenAgioRes != null ?
                new ObjectParameter("LibCpteGenAgioRes", libCpteGenAgioRes) :
                new ObjectParameter("LibCpteGenAgioRes", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var expirationlignedecParameter = expirationlignedec.HasValue ?
                new ObjectParameter("Expirationlignedec", expirationlignedec) :
                new ObjectParameter("Expirationlignedec", typeof(System.DateTime));
    
            var cRBlocageParameter = cRBlocage != null ?
                new ObjectParameter("CRBlocage", cRBlocage) :
                new ObjectParameter("CRBlocage", typeof(string));
    
            var dBBlocageParameter = dBBlocage != null ?
                new ObjectParameter("DBBlocage", dBBlocage) :
                new ObjectParameter("DBBlocage", typeof(string));
    
            var cantonnementParameter = cantonnement.HasValue ?
                new ObjectParameter("Cantonnement", cantonnement) :
                new ObjectParameter("Cantonnement", typeof(double));
    
            var cRBlockDateParameter = cRBlockDate.HasValue ?
                new ObjectParameter("CRBlockDate", cRBlockDate) :
                new ObjectParameter("CRBlockDate", typeof(System.DateTime));
    
            var dBBlockDateParameter = dBBlockDate.HasValue ?
                new ObjectParameter("DBBlockDate", dBBlockDate) :
                new ObjectParameter("DBBlockDate", typeof(System.DateTime));
    
            var dateDernierMvtDBParameter = dateDernierMvtDB.HasValue ?
                new ObjectParameter("DateDernierMvtDB", dateDernierMvtDB) :
                new ObjectParameter("DateDernierMvtDB", typeof(System.DateTime));
    
            var dateDernierMvtCRParameter = dateDernierMvtCR.HasValue ?
                new ObjectParameter("DateDernierMvtCR", dateDernierMvtCR) :
                new ObjectParameter("DateDernierMvtCR", typeof(System.DateTime));
    
            var stopIntDateParameter = stopIntDate.HasValue ?
                new ObjectParameter("StopIntDate", stopIntDate) :
                new ObjectParameter("StopIntDate", typeof(System.DateTime));
    
            var stopIntParameter = stopInt != null ?
                new ObjectParameter("StopInt", stopInt) :
                new ObjectParameter("StopInt", typeof(string));
    
            var reservedIntParameter = reservedInt != null ?
                new ObjectParameter("ReservedInt", reservedInt) :
                new ObjectParameter("ReservedInt", typeof(string));
    
            var controlAccesParameter = controlAcces != null ?
                new ObjectParameter("ControlAcces", controlAcces) :
                new ObjectParameter("ControlAcces", typeof(string));
    
            var signerinfoParameter = signerinfo != null ?
                new ObjectParameter("Signerinfo", signerinfo) :
                new ObjectParameter("Signerinfo", typeof(string));
    
            var dateDeclarationParameter = dateDeclaration.HasValue ?
                new ObjectParameter("DateDeclaration", dateDeclaration) :
                new ObjectParameter("DateDeclaration", typeof(System.DateTime));
    
            var dormantstatusParameter = dormantstatus != null ?
                new ObjectParameter("dormantstatus", dormantstatus) :
                new ObjectParameter("dormantstatus", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var periodeParameter = periode.HasValue ?
                new ObjectParameter("Periode", periode) :
                new ObjectParameter("Periode", typeof(int));
    
            var abonementsmsParameter = abonementsms != null ?
                new ObjectParameter("abonementsms", abonementsms) :
                new ObjectParameter("abonementsms", typeof(string));
    
            var smslanguageParameter = smslanguage != null ?
                new ObjectParameter("smslanguage", smslanguage) :
                new ObjectParameter("smslanguage", typeof(string));
    
            var billingOptionIdParameter = billingOptionId != null ?
                new ObjectParameter("BillingOptionId", billingOptionId) :
                new ObjectParameter("BillingOptionId", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var paraSmsBnkParameter = paraSmsBnk != null ?
                new ObjectParameter("ParaSmsBnk", paraSmsBnk) :
                new ObjectParameter("ParaSmsBnk", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var litigationStatusParameter = litigationStatus != null ?
                new ObjectParameter("LitigationStatus", litigationStatus) :
                new ObjectParameter("LitigationStatus", typeof(string));
    
            var cobacIdParameter = cobacId != null ?
                new ObjectParameter("CobacId", cobacId) :
                new ObjectParameter("CobacId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CpteClt_Client_UpdateAndClose", mavarParameter, agenceParameter, clientParameter, cpteJumelleParameter, debitParameter, creditParameter, libClientParameter, catCpteParameter, libCatCpteParameter, subcpteParameter, letCleParameter, deviseParameter, ligneDecParameter, expirationParameter, cpteColParameter, cleColParameter, dateOuvertureParameter, gestionnaireParameter, statutParameter, dateEffParameter, totalSignatureParameter, signatureValParameter, fusionParameter, libAgenceParameter, libDeviseParameter, libCpteColParameter, libGestionnaireParameter, cpteOvationParameter, txIntDbParameter, txIntCrParameter, exoTDCParameter, exoTVAParameter, exoTPRCMParameter, exoFTCParameter, txComDecParameter, txComMvtParameter, txTVAParameter, mtFTCParameter, employeParameter, nomemployeParameter, cpteIndAgioResParameter, cpteGenAgioResParameter, cleGenAgioResParameter, libCpteGenAgioResParameter, dateCreationParameter, expirationlignedecParameter, cRBlocageParameter, dBBlocageParameter, cantonnementParameter, cRBlockDateParameter, dBBlockDateParameter, dateDernierMvtDBParameter, dateDernierMvtCRParameter, stopIntDateParameter, stopIntParameter, reservedIntParameter, controlAccesParameter, signerinfoParameter, dateDeclarationParameter, dormantstatusParameter, integritystatusParameter, dateTransfertParameter, lect, periodeParameter, abonementsmsParameter, smslanguageParameter, billingOptionIdParameter, serverDateParameter, paraSmsBnkParameter, msg, computerNameParameter, languageParameter, litigationStatusParameter, cobacIdParameter);
        }
    
        public virtual ObjectResult<CpteClt_Close_Result> CpteClt_Close(string agence, string client, string cpteJumelle, string libClient, string devise, string statut, string libAgence, string libDevise, string employe, string nomemploye, string dormantstatus, ObjectParameter lect, Nullable<System.DateTime> serverDate, ObjectParameter msg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var libClientParameter = libClient != null ?
                new ObjectParameter("LibClient", libClient) :
                new ObjectParameter("LibClient", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var nomemployeParameter = nomemploye != null ?
                new ObjectParameter("Nomemploye", nomemploye) :
                new ObjectParameter("Nomemploye", typeof(string));
    
            var dormantstatusParameter = dormantstatus != null ?
                new ObjectParameter("dormantstatus", dormantstatus) :
                new ObjectParameter("dormantstatus", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CpteClt_Close_Result>("CpteClt_Close", agenceParameter, clientParameter, cpteJumelleParameter, libClientParameter, deviseParameter, statutParameter, libAgenceParameter, libDeviseParameter, employeParameter, nomemployeParameter, dormantstatusParameter, lect, serverDateParameter, msg, languageParameter);
        }
    
        public virtual ObjectResult<CpteClt_Delete_Result> CpteClt_Delete(string cptejumelle, string agence, ObjectParameter lect, string employe, string computerName, string language)
        {
            var cptejumelleParameter = cptejumelle != null ?
                new ObjectParameter("cptejumelle", cptejumelle) :
                new ObjectParameter("cptejumelle", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CpteClt_Delete_Result>("CpteClt_Delete", cptejumelleParameter, agenceParameter, lect, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<CpteClt_Filter_Result> CpteClt_Filter(Nullable<short> intFilterMode, string cpteJumelle, string agence, string client, Nullable<int> catCpte, ObjectParameter countfield, ObjectParameter debitAcc, ObjectParameter creditAcc)
        {
            var intFilterModeParameter = intFilterMode.HasValue ?
                new ObjectParameter("IntFilterMode", intFilterMode) :
                new ObjectParameter("IntFilterMode", typeof(short));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CpteClt_Filter_Result>("CpteClt_Filter", intFilterModeParameter, cpteJumelleParameter, agenceParameter, clientParameter, catCpteParameter, countfield, debitAcc, creditAcc);
        }
    
        public virtual ObjectResult<CpteClt_InsertOpen_Result> CpteClt_InsertOpen(string agence, string client, string cpteJumelle, Nullable<double> debit, Nullable<double> credit, string libClient, Nullable<short> catCpte, string libCatCpte, string subcpte, string letCle, string devise, Nullable<double> ligneDec, Nullable<System.DateTime> expiration, string cpteCol, string cleCol, Nullable<System.DateTime> dateOuverture, string gestionnaire, string statut, Nullable<System.DateTime> dateEff, Nullable<short> totalSignature, Nullable<short> signatureVal, string fusion, string libAgence, string libDevise, string libCpteCol, string libGestionnaire, string cpteOvation, Nullable<double> txIntDb, Nullable<double> txIntCr, string exoTDC, string exoTVA, string exoTPRCM, string exoFTC, Nullable<double> txComDec, Nullable<double> txComMvt, Nullable<double> txTVA, Nullable<int> mtFTC, string employe, string nomemploye, string cpteIndAgioRes, string cpteGenAgioRes, string cleGenAgioRes, string libCpteGenAgioRes, Nullable<System.DateTime> dateCreation, Nullable<System.DateTime> expirationlignedec, string cRBlocage, string dBBlocage, Nullable<double> cantonnement, Nullable<System.DateTime> cRBlockDate, Nullable<System.DateTime> dBBlockDate, Nullable<System.DateTime> dateDernierMvtDB, Nullable<System.DateTime> dateDernierMvtCR, Nullable<System.DateTime> stopIntDate, string stopInt, string reservedInt, string controlAcces, string signerinfo, Nullable<System.DateTime> dateDeclaration, string dormantstatus, string integritystatus, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, Nullable<int> periode, string abonementsms, string smslanguage, string billingOptionId, string openCharge, ObjectParameter msg, string computerName, string language, string cobacId)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var libClientParameter = libClient != null ?
                new ObjectParameter("LibClient", libClient) :
                new ObjectParameter("LibClient", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var libCatCpteParameter = libCatCpte != null ?
                new ObjectParameter("LibCatCpte", libCatCpte) :
                new ObjectParameter("LibCatCpte", typeof(string));
    
            var subcpteParameter = subcpte != null ?
                new ObjectParameter("Subcpte", subcpte) :
                new ObjectParameter("Subcpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var ligneDecParameter = ligneDec.HasValue ?
                new ObjectParameter("LigneDec", ligneDec) :
                new ObjectParameter("LigneDec", typeof(double));
    
            var expirationParameter = expiration.HasValue ?
                new ObjectParameter("Expiration", expiration) :
                new ObjectParameter("Expiration", typeof(System.DateTime));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var cleColParameter = cleCol != null ?
                new ObjectParameter("CleCol", cleCol) :
                new ObjectParameter("CleCol", typeof(string));
    
            var dateOuvertureParameter = dateOuverture.HasValue ?
                new ObjectParameter("DateOuverture", dateOuverture) :
                new ObjectParameter("DateOuverture", typeof(System.DateTime));
    
            var gestionnaireParameter = gestionnaire != null ?
                new ObjectParameter("Gestionnaire", gestionnaire) :
                new ObjectParameter("Gestionnaire", typeof(string));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var dateEffParameter = dateEff.HasValue ?
                new ObjectParameter("DateEff", dateEff) :
                new ObjectParameter("DateEff", typeof(System.DateTime));
    
            var totalSignatureParameter = totalSignature.HasValue ?
                new ObjectParameter("TotalSignature", totalSignature) :
                new ObjectParameter("TotalSignature", typeof(short));
    
            var signatureValParameter = signatureVal.HasValue ?
                new ObjectParameter("SignatureVal", signatureVal) :
                new ObjectParameter("SignatureVal", typeof(short));
    
            var fusionParameter = fusion != null ?
                new ObjectParameter("Fusion", fusion) :
                new ObjectParameter("Fusion", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteColParameter = libCpteCol != null ?
                new ObjectParameter("LibCpteCol", libCpteCol) :
                new ObjectParameter("LibCpteCol", typeof(string));
    
            var libGestionnaireParameter = libGestionnaire != null ?
                new ObjectParameter("LibGestionnaire", libGestionnaire) :
                new ObjectParameter("LibGestionnaire", typeof(string));
    
            var cpteOvationParameter = cpteOvation != null ?
                new ObjectParameter("CpteOvation", cpteOvation) :
                new ObjectParameter("CpteOvation", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var exoTDCParameter = exoTDC != null ?
                new ObjectParameter("ExoTDC", exoTDC) :
                new ObjectParameter("ExoTDC", typeof(string));
    
            var exoTVAParameter = exoTVA != null ?
                new ObjectParameter("ExoTVA", exoTVA) :
                new ObjectParameter("ExoTVA", typeof(string));
    
            var exoTPRCMParameter = exoTPRCM != null ?
                new ObjectParameter("ExoTPRCM", exoTPRCM) :
                new ObjectParameter("ExoTPRCM", typeof(string));
    
            var exoFTCParameter = exoFTC != null ?
                new ObjectParameter("ExoFTC", exoFTC) :
                new ObjectParameter("ExoFTC", typeof(string));
    
            var txComDecParameter = txComDec.HasValue ?
                new ObjectParameter("TxComDec", txComDec) :
                new ObjectParameter("TxComDec", typeof(double));
    
            var txComMvtParameter = txComMvt.HasValue ?
                new ObjectParameter("TxComMvt", txComMvt) :
                new ObjectParameter("TxComMvt", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var mtFTCParameter = mtFTC.HasValue ?
                new ObjectParameter("MtFTC", mtFTC) :
                new ObjectParameter("MtFTC", typeof(int));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var nomemployeParameter = nomemploye != null ?
                new ObjectParameter("Nomemploye", nomemploye) :
                new ObjectParameter("Nomemploye", typeof(string));
    
            var cpteIndAgioResParameter = cpteIndAgioRes != null ?
                new ObjectParameter("CpteIndAgioRes", cpteIndAgioRes) :
                new ObjectParameter("CpteIndAgioRes", typeof(string));
    
            var cpteGenAgioResParameter = cpteGenAgioRes != null ?
                new ObjectParameter("CpteGenAgioRes", cpteGenAgioRes) :
                new ObjectParameter("CpteGenAgioRes", typeof(string));
    
            var cleGenAgioResParameter = cleGenAgioRes != null ?
                new ObjectParameter("CleGenAgioRes", cleGenAgioRes) :
                new ObjectParameter("CleGenAgioRes", typeof(string));
    
            var libCpteGenAgioResParameter = libCpteGenAgioRes != null ?
                new ObjectParameter("LibCpteGenAgioRes", libCpteGenAgioRes) :
                new ObjectParameter("LibCpteGenAgioRes", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var expirationlignedecParameter = expirationlignedec.HasValue ?
                new ObjectParameter("Expirationlignedec", expirationlignedec) :
                new ObjectParameter("Expirationlignedec", typeof(System.DateTime));
    
            var cRBlocageParameter = cRBlocage != null ?
                new ObjectParameter("CRBlocage", cRBlocage) :
                new ObjectParameter("CRBlocage", typeof(string));
    
            var dBBlocageParameter = dBBlocage != null ?
                new ObjectParameter("DBBlocage", dBBlocage) :
                new ObjectParameter("DBBlocage", typeof(string));
    
            var cantonnementParameter = cantonnement.HasValue ?
                new ObjectParameter("Cantonnement", cantonnement) :
                new ObjectParameter("Cantonnement", typeof(double));
    
            var cRBlockDateParameter = cRBlockDate.HasValue ?
                new ObjectParameter("CRBlockDate", cRBlockDate) :
                new ObjectParameter("CRBlockDate", typeof(System.DateTime));
    
            var dBBlockDateParameter = dBBlockDate.HasValue ?
                new ObjectParameter("DBBlockDate", dBBlockDate) :
                new ObjectParameter("DBBlockDate", typeof(System.DateTime));
    
            var dateDernierMvtDBParameter = dateDernierMvtDB.HasValue ?
                new ObjectParameter("DateDernierMvtDB", dateDernierMvtDB) :
                new ObjectParameter("DateDernierMvtDB", typeof(System.DateTime));
    
            var dateDernierMvtCRParameter = dateDernierMvtCR.HasValue ?
                new ObjectParameter("DateDernierMvtCR", dateDernierMvtCR) :
                new ObjectParameter("DateDernierMvtCR", typeof(System.DateTime));
    
            var stopIntDateParameter = stopIntDate.HasValue ?
                new ObjectParameter("StopIntDate", stopIntDate) :
                new ObjectParameter("StopIntDate", typeof(System.DateTime));
    
            var stopIntParameter = stopInt != null ?
                new ObjectParameter("StopInt", stopInt) :
                new ObjectParameter("StopInt", typeof(string));
    
            var reservedIntParameter = reservedInt != null ?
                new ObjectParameter("ReservedInt", reservedInt) :
                new ObjectParameter("ReservedInt", typeof(string));
    
            var controlAccesParameter = controlAcces != null ?
                new ObjectParameter("ControlAcces", controlAcces) :
                new ObjectParameter("ControlAcces", typeof(string));
    
            var signerinfoParameter = signerinfo != null ?
                new ObjectParameter("Signerinfo", signerinfo) :
                new ObjectParameter("Signerinfo", typeof(string));
    
            var dateDeclarationParameter = dateDeclaration.HasValue ?
                new ObjectParameter("DateDeclaration", dateDeclaration) :
                new ObjectParameter("DateDeclaration", typeof(System.DateTime));
    
            var dormantstatusParameter = dormantstatus != null ?
                new ObjectParameter("dormantstatus", dormantstatus) :
                new ObjectParameter("dormantstatus", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var periodeParameter = periode.HasValue ?
                new ObjectParameter("Periode", periode) :
                new ObjectParameter("Periode", typeof(int));
    
            var abonementsmsParameter = abonementsms != null ?
                new ObjectParameter("abonementsms", abonementsms) :
                new ObjectParameter("abonementsms", typeof(string));
    
            var smslanguageParameter = smslanguage != null ?
                new ObjectParameter("smslanguage", smslanguage) :
                new ObjectParameter("smslanguage", typeof(string));
    
            var billingOptionIdParameter = billingOptionId != null ?
                new ObjectParameter("BillingOptionId", billingOptionId) :
                new ObjectParameter("BillingOptionId", typeof(string));
    
            var openChargeParameter = openCharge != null ?
                new ObjectParameter("OpenCharge", openCharge) :
                new ObjectParameter("OpenCharge", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var cobacIdParameter = cobacId != null ?
                new ObjectParameter("CobacId", cobacId) :
                new ObjectParameter("CobacId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CpteClt_InsertOpen_Result>("CpteClt_InsertOpen", agenceParameter, clientParameter, cpteJumelleParameter, debitParameter, creditParameter, libClientParameter, catCpteParameter, libCatCpteParameter, subcpteParameter, letCleParameter, deviseParameter, ligneDecParameter, expirationParameter, cpteColParameter, cleColParameter, dateOuvertureParameter, gestionnaireParameter, statutParameter, dateEffParameter, totalSignatureParameter, signatureValParameter, fusionParameter, libAgenceParameter, libDeviseParameter, libCpteColParameter, libGestionnaireParameter, cpteOvationParameter, txIntDbParameter, txIntCrParameter, exoTDCParameter, exoTVAParameter, exoTPRCMParameter, exoFTCParameter, txComDecParameter, txComMvtParameter, txTVAParameter, mtFTCParameter, employeParameter, nomemployeParameter, cpteIndAgioResParameter, cpteGenAgioResParameter, cleGenAgioResParameter, libCpteGenAgioResParameter, dateCreationParameter, expirationlignedecParameter, cRBlocageParameter, dBBlocageParameter, cantonnementParameter, cRBlockDateParameter, dBBlockDateParameter, dateDernierMvtDBParameter, dateDernierMvtCRParameter, stopIntDateParameter, stopIntParameter, reservedIntParameter, controlAccesParameter, signerinfoParameter, dateDeclarationParameter, dormantstatusParameter, integritystatusParameter, dateTransfertParameter, lect, periodeParameter, abonementsmsParameter, smslanguageParameter, billingOptionIdParameter, openChargeParameter, msg, computerNameParameter, languageParameter, cobacIdParameter);
        }
    
        public virtual int CpteClt_InsertOpen_Migrate(Nullable<short> agence, Nullable<decimal> client, string cpteJumelle, Nullable<double> debit, Nullable<double> credit, string libClient, Nullable<short> catCpte, string libCatCpte, Nullable<short> subcpte, string letCle, string devise, Nullable<double> ligneDec, Nullable<System.DateTime> expiration, string cpteCol, string cleCol, Nullable<System.DateTime> dateOuverture, Nullable<int> gestionnaire, string statut, Nullable<System.DateTime> dateEff, Nullable<short> totalSignature, Nullable<short> signatureVal, string fusion, string libAgence, string libDevise, string libCpteCol, string libGestionnaire, string cpteOvation, Nullable<double> txIntDb, Nullable<double> txIntCr, string exoTDC, string exoTVA, string exoTPRCM, string exoFTC, Nullable<double> txComDec, Nullable<double> txComMvt, Nullable<double> txTVA, Nullable<int> mtFTC, Nullable<int> employe, string nomemploye, string cpteIndAgioRes, string cpteGenAgioRes, string cleGenAgioRes, string libCpteGenAgioRes, Nullable<System.DateTime> dateCreation, Nullable<System.DateTime> expirationlignedec, string cRBlocage, string dBBlocage, Nullable<double> cantonnement, Nullable<System.DateTime> cRBlockDate, Nullable<System.DateTime> dBBlockDate, Nullable<System.DateTime> dateDernierMvtDB, Nullable<System.DateTime> dateDernierMvtCR, Nullable<System.DateTime> stopIntDate, string stopInt, string reservedInt, string controlAcces, string signerinfo, Nullable<System.DateTime> dateDeclaration, string dormantstatus, string integritystatus, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, Nullable<int> periode, string abonementsms, string smslanguage, string billingOptionId, string openCharge, Nullable<decimal> svSerie, ObjectParameter msg)
        {
            var agenceParameter = agence.HasValue ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(short));
    
            var clientParameter = client.HasValue ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(decimal));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var libClientParameter = libClient != null ?
                new ObjectParameter("LibClient", libClient) :
                new ObjectParameter("LibClient", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var libCatCpteParameter = libCatCpte != null ?
                new ObjectParameter("LibCatCpte", libCatCpte) :
                new ObjectParameter("LibCatCpte", typeof(string));
    
            var subcpteParameter = subcpte.HasValue ?
                new ObjectParameter("Subcpte", subcpte) :
                new ObjectParameter("Subcpte", typeof(short));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var ligneDecParameter = ligneDec.HasValue ?
                new ObjectParameter("LigneDec", ligneDec) :
                new ObjectParameter("LigneDec", typeof(double));
    
            var expirationParameter = expiration.HasValue ?
                new ObjectParameter("Expiration", expiration) :
                new ObjectParameter("Expiration", typeof(System.DateTime));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var cleColParameter = cleCol != null ?
                new ObjectParameter("CleCol", cleCol) :
                new ObjectParameter("CleCol", typeof(string));
    
            var dateOuvertureParameter = dateOuverture.HasValue ?
                new ObjectParameter("DateOuverture", dateOuverture) :
                new ObjectParameter("DateOuverture", typeof(System.DateTime));
    
            var gestionnaireParameter = gestionnaire.HasValue ?
                new ObjectParameter("Gestionnaire", gestionnaire) :
                new ObjectParameter("Gestionnaire", typeof(int));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var dateEffParameter = dateEff.HasValue ?
                new ObjectParameter("DateEff", dateEff) :
                new ObjectParameter("DateEff", typeof(System.DateTime));
    
            var totalSignatureParameter = totalSignature.HasValue ?
                new ObjectParameter("TotalSignature", totalSignature) :
                new ObjectParameter("TotalSignature", typeof(short));
    
            var signatureValParameter = signatureVal.HasValue ?
                new ObjectParameter("SignatureVal", signatureVal) :
                new ObjectParameter("SignatureVal", typeof(short));
    
            var fusionParameter = fusion != null ?
                new ObjectParameter("Fusion", fusion) :
                new ObjectParameter("Fusion", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteColParameter = libCpteCol != null ?
                new ObjectParameter("LibCpteCol", libCpteCol) :
                new ObjectParameter("LibCpteCol", typeof(string));
    
            var libGestionnaireParameter = libGestionnaire != null ?
                new ObjectParameter("LibGestionnaire", libGestionnaire) :
                new ObjectParameter("LibGestionnaire", typeof(string));
    
            var cpteOvationParameter = cpteOvation != null ?
                new ObjectParameter("CpteOvation", cpteOvation) :
                new ObjectParameter("CpteOvation", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var exoTDCParameter = exoTDC != null ?
                new ObjectParameter("ExoTDC", exoTDC) :
                new ObjectParameter("ExoTDC", typeof(string));
    
            var exoTVAParameter = exoTVA != null ?
                new ObjectParameter("ExoTVA", exoTVA) :
                new ObjectParameter("ExoTVA", typeof(string));
    
            var exoTPRCMParameter = exoTPRCM != null ?
                new ObjectParameter("ExoTPRCM", exoTPRCM) :
                new ObjectParameter("ExoTPRCM", typeof(string));
    
            var exoFTCParameter = exoFTC != null ?
                new ObjectParameter("ExoFTC", exoFTC) :
                new ObjectParameter("ExoFTC", typeof(string));
    
            var txComDecParameter = txComDec.HasValue ?
                new ObjectParameter("TxComDec", txComDec) :
                new ObjectParameter("TxComDec", typeof(double));
    
            var txComMvtParameter = txComMvt.HasValue ?
                new ObjectParameter("TxComMvt", txComMvt) :
                new ObjectParameter("TxComMvt", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var mtFTCParameter = mtFTC.HasValue ?
                new ObjectParameter("MtFTC", mtFTC) :
                new ObjectParameter("MtFTC", typeof(int));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(int));
    
            var nomemployeParameter = nomemploye != null ?
                new ObjectParameter("Nomemploye", nomemploye) :
                new ObjectParameter("Nomemploye", typeof(string));
    
            var cpteIndAgioResParameter = cpteIndAgioRes != null ?
                new ObjectParameter("CpteIndAgioRes", cpteIndAgioRes) :
                new ObjectParameter("CpteIndAgioRes", typeof(string));
    
            var cpteGenAgioResParameter = cpteGenAgioRes != null ?
                new ObjectParameter("CpteGenAgioRes", cpteGenAgioRes) :
                new ObjectParameter("CpteGenAgioRes", typeof(string));
    
            var cleGenAgioResParameter = cleGenAgioRes != null ?
                new ObjectParameter("CleGenAgioRes", cleGenAgioRes) :
                new ObjectParameter("CleGenAgioRes", typeof(string));
    
            var libCpteGenAgioResParameter = libCpteGenAgioRes != null ?
                new ObjectParameter("LibCpteGenAgioRes", libCpteGenAgioRes) :
                new ObjectParameter("LibCpteGenAgioRes", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var expirationlignedecParameter = expirationlignedec.HasValue ?
                new ObjectParameter("Expirationlignedec", expirationlignedec) :
                new ObjectParameter("Expirationlignedec", typeof(System.DateTime));
    
            var cRBlocageParameter = cRBlocage != null ?
                new ObjectParameter("CRBlocage", cRBlocage) :
                new ObjectParameter("CRBlocage", typeof(string));
    
            var dBBlocageParameter = dBBlocage != null ?
                new ObjectParameter("DBBlocage", dBBlocage) :
                new ObjectParameter("DBBlocage", typeof(string));
    
            var cantonnementParameter = cantonnement.HasValue ?
                new ObjectParameter("Cantonnement", cantonnement) :
                new ObjectParameter("Cantonnement", typeof(double));
    
            var cRBlockDateParameter = cRBlockDate.HasValue ?
                new ObjectParameter("CRBlockDate", cRBlockDate) :
                new ObjectParameter("CRBlockDate", typeof(System.DateTime));
    
            var dBBlockDateParameter = dBBlockDate.HasValue ?
                new ObjectParameter("DBBlockDate", dBBlockDate) :
                new ObjectParameter("DBBlockDate", typeof(System.DateTime));
    
            var dateDernierMvtDBParameter = dateDernierMvtDB.HasValue ?
                new ObjectParameter("DateDernierMvtDB", dateDernierMvtDB) :
                new ObjectParameter("DateDernierMvtDB", typeof(System.DateTime));
    
            var dateDernierMvtCRParameter = dateDernierMvtCR.HasValue ?
                new ObjectParameter("DateDernierMvtCR", dateDernierMvtCR) :
                new ObjectParameter("DateDernierMvtCR", typeof(System.DateTime));
    
            var stopIntDateParameter = stopIntDate.HasValue ?
                new ObjectParameter("StopIntDate", stopIntDate) :
                new ObjectParameter("StopIntDate", typeof(System.DateTime));
    
            var stopIntParameter = stopInt != null ?
                new ObjectParameter("StopInt", stopInt) :
                new ObjectParameter("StopInt", typeof(string));
    
            var reservedIntParameter = reservedInt != null ?
                new ObjectParameter("ReservedInt", reservedInt) :
                new ObjectParameter("ReservedInt", typeof(string));
    
            var controlAccesParameter = controlAcces != null ?
                new ObjectParameter("ControlAcces", controlAcces) :
                new ObjectParameter("ControlAcces", typeof(string));
    
            var signerinfoParameter = signerinfo != null ?
                new ObjectParameter("Signerinfo", signerinfo) :
                new ObjectParameter("Signerinfo", typeof(string));
    
            var dateDeclarationParameter = dateDeclaration.HasValue ?
                new ObjectParameter("DateDeclaration", dateDeclaration) :
                new ObjectParameter("DateDeclaration", typeof(System.DateTime));
    
            var dormantstatusParameter = dormantstatus != null ?
                new ObjectParameter("dormantstatus", dormantstatus) :
                new ObjectParameter("dormantstatus", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var periodeParameter = periode.HasValue ?
                new ObjectParameter("Periode", periode) :
                new ObjectParameter("Periode", typeof(int));
    
            var abonementsmsParameter = abonementsms != null ?
                new ObjectParameter("abonementsms", abonementsms) :
                new ObjectParameter("abonementsms", typeof(string));
    
            var smslanguageParameter = smslanguage != null ?
                new ObjectParameter("smslanguage", smslanguage) :
                new ObjectParameter("smslanguage", typeof(string));
    
            var billingOptionIdParameter = billingOptionId != null ?
                new ObjectParameter("BillingOptionId", billingOptionId) :
                new ObjectParameter("BillingOptionId", typeof(string));
    
            var openChargeParameter = openCharge != null ?
                new ObjectParameter("OpenCharge", openCharge) :
                new ObjectParameter("OpenCharge", typeof(string));
    
            var svSerieParameter = svSerie.HasValue ?
                new ObjectParameter("svSerie", svSerie) :
                new ObjectParameter("svSerie", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CpteClt_InsertOpen_Migrate", agenceParameter, clientParameter, cpteJumelleParameter, debitParameter, creditParameter, libClientParameter, catCpteParameter, libCatCpteParameter, subcpteParameter, letCleParameter, deviseParameter, ligneDecParameter, expirationParameter, cpteColParameter, cleColParameter, dateOuvertureParameter, gestionnaireParameter, statutParameter, dateEffParameter, totalSignatureParameter, signatureValParameter, fusionParameter, libAgenceParameter, libDeviseParameter, libCpteColParameter, libGestionnaireParameter, cpteOvationParameter, txIntDbParameter, txIntCrParameter, exoTDCParameter, exoTVAParameter, exoTPRCMParameter, exoFTCParameter, txComDecParameter, txComMvtParameter, txTVAParameter, mtFTCParameter, employeParameter, nomemployeParameter, cpteIndAgioResParameter, cpteGenAgioResParameter, cleGenAgioResParameter, libCpteGenAgioResParameter, dateCreationParameter, expirationlignedecParameter, cRBlocageParameter, dBBlocageParameter, cantonnementParameter, cRBlockDateParameter, dBBlockDateParameter, dateDernierMvtDBParameter, dateDernierMvtCRParameter, stopIntDateParameter, stopIntParameter, reservedIntParameter, controlAccesParameter, signerinfoParameter, dateDeclarationParameter, dormantstatusParameter, integritystatusParameter, dateTransfertParameter, lect, periodeParameter, abonementsmsParameter, smslanguageParameter, billingOptionIdParameter, openChargeParameter, svSerieParameter, msg);
        }
    
        public virtual int CpteCltHist_Cash_Insert(string agence, string client, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string cpteCol, string txnno, string integritystatus, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, Nullable<int> validation, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var validationParameter = validation.HasValue ?
                new ObjectParameter("Validation", validation) :
                new ObjectParameter("Validation", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CpteCltHist_Cash_Insert", agenceParameter, clientParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, cpteColParameter, txnnoParameter, integritystatusParameter, dateTransfertParameter, lect, validationParameter, languageParameter);
        }
    
        public virtual int CpteCltHist_Cash_Insert_MIGRATE(string agence, string client, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string cpteCol, string txnno, string integritystatus, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, Nullable<int> validation, string language, string bENEFICIARY)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var validationParameter = validation.HasValue ?
                new ObjectParameter("Validation", validation) :
                new ObjectParameter("Validation", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var bENEFICIARYParameter = bENEFICIARY != null ?
                new ObjectParameter("BENEFICIARY", bENEFICIARY) :
                new ObjectParameter("BENEFICIARY", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CpteCltHist_Cash_Insert_MIGRATE", agenceParameter, clientParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, cpteColParameter, txnnoParameter, integritystatusParameter, dateTransfertParameter, lect, validationParameter, languageParameter, bENEFICIARYParameter);
        }
    
        public virtual int CpteCltHist_Cash_InsertNew(string agence, string client, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string cpteCol, string txnno, string integritystatus, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, Nullable<int> validation, string language, string doneBy)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var validationParameter = validation.HasValue ?
                new ObjectParameter("Validation", validation) :
                new ObjectParameter("Validation", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var doneByParameter = doneBy != null ?
                new ObjectParameter("DoneBy", doneBy) :
                new ObjectParameter("DoneBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CpteCltHist_Cash_InsertNew", agenceParameter, clientParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, cpteColParameter, txnnoParameter, integritystatusParameter, dateTransfertParameter, lect, validationParameter, languageParameter, doneByParameter);
        }
    
        public virtual ObjectResult<CpteCltHist_Select_Result> CpteCltHist_Select(string cpteJumelle, string agence, string client, Nullable<short> catcpte, string devise, Nullable<System.DateTime> dateoperation, string cpteDebut, string cpteFin, Nullable<short> intFilterMode)
        {
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("client", client) :
                new ObjectParameter("client", typeof(string));
    
            var catcpteParameter = catcpte.HasValue ?
                new ObjectParameter("catcpte", catcpte) :
                new ObjectParameter("catcpte", typeof(short));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("devise", devise) :
                new ObjectParameter("devise", typeof(string));
    
            var dateoperationParameter = dateoperation.HasValue ?
                new ObjectParameter("dateoperation", dateoperation) :
                new ObjectParameter("dateoperation", typeof(System.DateTime));
    
            var cpteDebutParameter = cpteDebut != null ?
                new ObjectParameter("CpteDebut", cpteDebut) :
                new ObjectParameter("CpteDebut", typeof(string));
    
            var cpteFinParameter = cpteFin != null ?
                new ObjectParameter("CpteFin", cpteFin) :
                new ObjectParameter("CpteFin", typeof(string));
    
            var intFilterModeParameter = intFilterMode.HasValue ?
                new ObjectParameter("IntFilterMode", intFilterMode) :
                new ObjectParameter("IntFilterMode", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CpteCltHist_Select_Result>("CpteCltHist_Select", cpteJumelleParameter, agenceParameter, clientParameter, catcpteParameter, deviseParameter, dateoperationParameter, cpteDebutParameter, cpteFinParameter, intFilterModeParameter);
        }
    
        public virtual int CpteCltHist_Select_New(string condition)
        {
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CpteCltHist_Select_New", conditionParameter);
        }
    
        public virtual ObjectResult<CpteCltHist_SelectArch_Result> CpteCltHist_SelectArch(string cpteJumelle, string agence, string client, Nullable<short> catcpte, string devise, Nullable<System.DateTime> dateoperation, string cpteDebut, string cpteFin, Nullable<short> intFilterMode)
        {
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("client", client) :
                new ObjectParameter("client", typeof(string));
    
            var catcpteParameter = catcpte.HasValue ?
                new ObjectParameter("catcpte", catcpte) :
                new ObjectParameter("catcpte", typeof(short));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("devise", devise) :
                new ObjectParameter("devise", typeof(string));
    
            var dateoperationParameter = dateoperation.HasValue ?
                new ObjectParameter("dateoperation", dateoperation) :
                new ObjectParameter("dateoperation", typeof(System.DateTime));
    
            var cpteDebutParameter = cpteDebut != null ?
                new ObjectParameter("CpteDebut", cpteDebut) :
                new ObjectParameter("CpteDebut", typeof(string));
    
            var cpteFinParameter = cpteFin != null ?
                new ObjectParameter("CpteFin", cpteFin) :
                new ObjectParameter("CpteFin", typeof(string));
    
            var intFilterModeParameter = intFilterMode.HasValue ?
                new ObjectParameter("IntFilterMode", intFilterMode) :
                new ObjectParameter("IntFilterMode", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CpteCltHist_SelectArch_Result>("CpteCltHist_SelectArch", cpteJumelleParameter, agenceParameter, clientParameter, catcpteParameter, deviseParameter, dateoperationParameter, cpteDebutParameter, cpteFinParameter, intFilterModeParameter);
        }
    
        public virtual ObjectResult<CpteCltHist_SelectNew_Result> CpteCltHist_SelectNew(string cpteJumelle, string agence, string client, Nullable<short> catcpte, string devise, Nullable<System.DateTime> dateoperation, string cpteDebut, string cpteFin, Nullable<short> intFilterMode)
        {
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("client", client) :
                new ObjectParameter("client", typeof(string));
    
            var catcpteParameter = catcpte.HasValue ?
                new ObjectParameter("catcpte", catcpte) :
                new ObjectParameter("catcpte", typeof(short));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("devise", devise) :
                new ObjectParameter("devise", typeof(string));
    
            var dateoperationParameter = dateoperation.HasValue ?
                new ObjectParameter("dateoperation", dateoperation) :
                new ObjectParameter("dateoperation", typeof(System.DateTime));
    
            var cpteDebutParameter = cpteDebut != null ?
                new ObjectParameter("CpteDebut", cpteDebut) :
                new ObjectParameter("CpteDebut", typeof(string));
    
            var cpteFinParameter = cpteFin != null ?
                new ObjectParameter("CpteFin", cpteFin) :
                new ObjectParameter("CpteFin", typeof(string));
    
            var intFilterModeParameter = intFilterMode.HasValue ?
                new ObjectParameter("IntFilterMode", intFilterMode) :
                new ObjectParameter("IntFilterMode", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CpteCltHist_SelectNew_Result>("CpteCltHist_SelectNew", cpteJumelleParameter, agenceParameter, clientParameter, catcpteParameter, deviseParameter, dateoperationParameter, cpteDebutParameter, cpteFinParameter, intFilterModeParameter);
        }
    
        public virtual ObjectResult<CpteCltHistArch_Select_Result> CpteCltHistArch_Select(string cpteJumelle, string agence, string client, Nullable<short> catcpte, string devise, Nullable<System.DateTime> dateoperation, string cpteDebut, Nullable<short> intFilterMode)
        {
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("client", client) :
                new ObjectParameter("client", typeof(string));
    
            var catcpteParameter = catcpte.HasValue ?
                new ObjectParameter("catcpte", catcpte) :
                new ObjectParameter("catcpte", typeof(short));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("devise", devise) :
                new ObjectParameter("devise", typeof(string));
    
            var dateoperationParameter = dateoperation.HasValue ?
                new ObjectParameter("dateoperation", dateoperation) :
                new ObjectParameter("dateoperation", typeof(System.DateTime));
    
            var cpteDebutParameter = cpteDebut != null ?
                new ObjectParameter("CpteDebut", cpteDebut) :
                new ObjectParameter("CpteDebut", typeof(string));
    
            var intFilterModeParameter = intFilterMode.HasValue ?
                new ObjectParameter("IntFilterMode", intFilterMode) :
                new ObjectParameter("IntFilterMode", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CpteCltHistArch_Select_Result>("CpteCltHistArch_Select", cpteJumelleParameter, agenceParameter, clientParameter, catcpteParameter, deviseParameter, dateoperationParameter, cpteDebutParameter, intFilterModeParameter);
        }
    
        public virtual int cptecorrespbnk_Delete(string banque, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var banqueParameter = banque != null ?
                new ObjectParameter("Banque", banque) :
                new ObjectParameter("Banque", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cptecorrespbnk_Delete", banqueParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int cptecorrespbnk_Insert(string banque, string cpteGl, Nullable<System.DateTime> dateCreation, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var banqueParameter = banque != null ?
                new ObjectParameter("Banque", banque) :
                new ObjectParameter("Banque", typeof(string));
    
            var cpteGlParameter = cpteGl != null ?
                new ObjectParameter("CpteGl", cpteGl) :
                new ObjectParameter("CpteGl", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cptecorrespbnk_Insert", banqueParameter, cpteGlParameter, dateCreationParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int cptecorrespbnk_Update(string banque, string cpteGl, Nullable<System.DateTime> dateCreation, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var banqueParameter = banque != null ?
                new ObjectParameter("Banque", banque) :
                new ObjectParameter("Banque", typeof(string));
    
            var cpteGlParameter = cpteGl != null ?
                new ObjectParameter("CpteGl", cpteGl) :
                new ObjectParameter("CpteGl", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cptecorrespbnk_Update", banqueParameter, cpteGlParameter, dateCreationParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int CreateTabCumulCltHist(string wAgence, string devise, Nullable<System.DateTime> serverDate, ObjectParameter lect, ObjectParameter msg, string employe, string computerName, string language)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("wAgence", wAgence) :
                new ObjectParameter("wAgence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateTabCumulCltHist", wAgenceParameter, deviseParameter, serverDateParameter, lect, msg, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<Credit_Filter_Result> Credit_Filter(Nullable<short> intFilterMode, string agence, string numeroContrat, ObjectParameter countfield, ObjectParameter svTotalImpaye, ObjectParameter svTotalAgioRes, ObjectParameter svTotalArTVA, ObjectParameter svtotalrembcapital, ObjectParameter svTotalContentieu)
        {
            var intFilterModeParameter = intFilterMode.HasValue ?
                new ObjectParameter("IntFilterMode", intFilterMode) :
                new ObjectParameter("IntFilterMode", typeof(short));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Credit_Filter_Result>("Credit_Filter", intFilterModeParameter, agenceParameter, numeroContratParameter, countfield, svTotalImpaye, svTotalAgioRes, svTotalArTVA, svtotalrembcapital, svTotalContentieu);
        }
    
        public virtual ObjectResult<Credit_Insert_S_Trans_Result> Credit_Insert_S_Trans(string agence, string client, string denomination, string cpteJumelleCC, Nullable<short> catCpte, string lettreCle, string cpteJumelleCredit, string cpteGL, string cleCpte, string libCpteGl, Nullable<double> montant, Nullable<double> tauxInt, Nullable<double> txTVA, Nullable<double> tauxGlobal, Nullable<System.DateTime> dateContrat, string numeroContrat, Nullable<System.DateTime> dateDemande, Nullable<System.DateTime> dateAccord, Nullable<short> duree, Nullable<short> dureeDiffere, string typeCalPerDiff, string typeRemb, Nullable<double> rembMensuel, Nullable<double> totalARembCapital, Nullable<double> totalARembInt, Nullable<double> totalARembTVA, Nullable<double> totalRembCapital, Nullable<double> totalRembInt, Nullable<double> totalRembTVA, Nullable<System.DateTime> dateDebutRemb, Nullable<System.DateTime> dateDernierRemb, Nullable<short> echeanceCours, Nullable<System.DateTime> dateExpiration, Nullable<System.DateTime> dateCptaCredit, Nullable<System.DateTime> dateCptaDernRemb, string statut, string refGarantie, string libAgence, string libCatCpte, string employe, string libEmploye, Nullable<System.DateTime> dateCreation, string periodicite, Nullable<double> vFDiff, Nullable<double> rembPerDiff, Nullable<double> totalImpaye, Nullable<double> totalAgioRes, Nullable<double> totalArTVA, string description, Nullable<double> fraisDossier, Nullable<double> pDL, string activiteeco, string txnNo, Nullable<double> maxicredit, string loanAttributes, Nullable<double> emergencyLoan, Nullable<double> insure, Nullable<double> loanstudyfee, Nullable<double> retention, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, string language, string purposeCode, string purposeTypeDescription, string ltype)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var lettreCleParameter = lettreCle != null ?
                new ObjectParameter("LettreCle", lettreCle) :
                new ObjectParameter("LettreCle", typeof(string));
    
            var cpteJumelleCreditParameter = cpteJumelleCredit != null ?
                new ObjectParameter("CpteJumelleCredit", cpteJumelleCredit) :
                new ObjectParameter("CpteJumelleCredit", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var libCpteGlParameter = libCpteGl != null ?
                new ObjectParameter("LibCpteGl", libCpteGl) :
                new ObjectParameter("LibCpteGl", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var tauxIntParameter = tauxInt.HasValue ?
                new ObjectParameter("TauxInt", tauxInt) :
                new ObjectParameter("TauxInt", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var tauxGlobalParameter = tauxGlobal.HasValue ?
                new ObjectParameter("TauxGlobal", tauxGlobal) :
                new ObjectParameter("TauxGlobal", typeof(double));
    
            var dateContratParameter = dateContrat.HasValue ?
                new ObjectParameter("DateContrat", dateContrat) :
                new ObjectParameter("DateContrat", typeof(System.DateTime));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var dateDemandeParameter = dateDemande.HasValue ?
                new ObjectParameter("DateDemande", dateDemande) :
                new ObjectParameter("DateDemande", typeof(System.DateTime));
    
            var dateAccordParameter = dateAccord.HasValue ?
                new ObjectParameter("DateAccord", dateAccord) :
                new ObjectParameter("DateAccord", typeof(System.DateTime));
    
            var dureeParameter = duree.HasValue ?
                new ObjectParameter("Duree", duree) :
                new ObjectParameter("Duree", typeof(short));
    
            var dureeDiffereParameter = dureeDiffere.HasValue ?
                new ObjectParameter("DureeDiffere", dureeDiffere) :
                new ObjectParameter("DureeDiffere", typeof(short));
    
            var typeCalPerDiffParameter = typeCalPerDiff != null ?
                new ObjectParameter("TypeCalPerDiff", typeCalPerDiff) :
                new ObjectParameter("TypeCalPerDiff", typeof(string));
    
            var typeRembParameter = typeRemb != null ?
                new ObjectParameter("TypeRemb", typeRemb) :
                new ObjectParameter("TypeRemb", typeof(string));
    
            var rembMensuelParameter = rembMensuel.HasValue ?
                new ObjectParameter("RembMensuel", rembMensuel) :
                new ObjectParameter("RembMensuel", typeof(double));
    
            var totalARembCapitalParameter = totalARembCapital.HasValue ?
                new ObjectParameter("TotalARembCapital", totalARembCapital) :
                new ObjectParameter("TotalARembCapital", typeof(double));
    
            var totalARembIntParameter = totalARembInt.HasValue ?
                new ObjectParameter("TotalARembInt", totalARembInt) :
                new ObjectParameter("TotalARembInt", typeof(double));
    
            var totalARembTVAParameter = totalARembTVA.HasValue ?
                new ObjectParameter("TotalARembTVA", totalARembTVA) :
                new ObjectParameter("TotalARembTVA", typeof(double));
    
            var totalRembCapitalParameter = totalRembCapital.HasValue ?
                new ObjectParameter("TotalRembCapital", totalRembCapital) :
                new ObjectParameter("TotalRembCapital", typeof(double));
    
            var totalRembIntParameter = totalRembInt.HasValue ?
                new ObjectParameter("TotalRembInt", totalRembInt) :
                new ObjectParameter("TotalRembInt", typeof(double));
    
            var totalRembTVAParameter = totalRembTVA.HasValue ?
                new ObjectParameter("TotalRembTVA", totalRembTVA) :
                new ObjectParameter("TotalRembTVA", typeof(double));
    
            var dateDebutRembParameter = dateDebutRemb.HasValue ?
                new ObjectParameter("DateDebutRemb", dateDebutRemb) :
                new ObjectParameter("DateDebutRemb", typeof(System.DateTime));
    
            var dateDernierRembParameter = dateDernierRemb.HasValue ?
                new ObjectParameter("DateDernierRemb", dateDernierRemb) :
                new ObjectParameter("DateDernierRemb", typeof(System.DateTime));
    
            var echeanceCoursParameter = echeanceCours.HasValue ?
                new ObjectParameter("EcheanceCours", echeanceCours) :
                new ObjectParameter("EcheanceCours", typeof(short));
    
            var dateExpirationParameter = dateExpiration.HasValue ?
                new ObjectParameter("DateExpiration", dateExpiration) :
                new ObjectParameter("DateExpiration", typeof(System.DateTime));
    
            var dateCptaCreditParameter = dateCptaCredit.HasValue ?
                new ObjectParameter("DateCptaCredit", dateCptaCredit) :
                new ObjectParameter("DateCptaCredit", typeof(System.DateTime));
    
            var dateCptaDernRembParameter = dateCptaDernRemb.HasValue ?
                new ObjectParameter("DateCptaDernRemb", dateCptaDernRemb) :
                new ObjectParameter("DateCptaDernRemb", typeof(System.DateTime));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var refGarantieParameter = refGarantie != null ?
                new ObjectParameter("RefGarantie", refGarantie) :
                new ObjectParameter("RefGarantie", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libCatCpteParameter = libCatCpte != null ?
                new ObjectParameter("LibCatCpte", libCatCpte) :
                new ObjectParameter("LibCatCpte", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var periodiciteParameter = periodicite != null ?
                new ObjectParameter("Periodicite", periodicite) :
                new ObjectParameter("Periodicite", typeof(string));
    
            var vFDiffParameter = vFDiff.HasValue ?
                new ObjectParameter("VFDiff", vFDiff) :
                new ObjectParameter("VFDiff", typeof(double));
    
            var rembPerDiffParameter = rembPerDiff.HasValue ?
                new ObjectParameter("RembPerDiff", rembPerDiff) :
                new ObjectParameter("RembPerDiff", typeof(double));
    
            var totalImpayeParameter = totalImpaye.HasValue ?
                new ObjectParameter("TotalImpaye", totalImpaye) :
                new ObjectParameter("TotalImpaye", typeof(double));
    
            var totalAgioResParameter = totalAgioRes.HasValue ?
                new ObjectParameter("TotalAgioRes", totalAgioRes) :
                new ObjectParameter("TotalAgioRes", typeof(double));
    
            var totalArTVAParameter = totalArTVA.HasValue ?
                new ObjectParameter("TotalArTVA", totalArTVA) :
                new ObjectParameter("TotalArTVA", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var fraisDossierParameter = fraisDossier.HasValue ?
                new ObjectParameter("FraisDossier", fraisDossier) :
                new ObjectParameter("FraisDossier", typeof(double));
    
            var pDLParameter = pDL.HasValue ?
                new ObjectParameter("PDL", pDL) :
                new ObjectParameter("PDL", typeof(double));
    
            var activiteecoParameter = activiteeco != null ?
                new ObjectParameter("Activiteeco", activiteeco) :
                new ObjectParameter("Activiteeco", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var maxicreditParameter = maxicredit.HasValue ?
                new ObjectParameter("Maxicredit", maxicredit) :
                new ObjectParameter("Maxicredit", typeof(double));
    
            var loanAttributesParameter = loanAttributes != null ?
                new ObjectParameter("LoanAttributes", loanAttributes) :
                new ObjectParameter("LoanAttributes", typeof(string));
    
            var emergencyLoanParameter = emergencyLoan.HasValue ?
                new ObjectParameter("EmergencyLoan", emergencyLoan) :
                new ObjectParameter("EmergencyLoan", typeof(double));
    
            var insureParameter = insure.HasValue ?
                new ObjectParameter("Insure", insure) :
                new ObjectParameter("Insure", typeof(double));
    
            var loanstudyfeeParameter = loanstudyfee.HasValue ?
                new ObjectParameter("Loanstudyfee", loanstudyfee) :
                new ObjectParameter("Loanstudyfee", typeof(double));
    
            var retentionParameter = retention.HasValue ?
                new ObjectParameter("Retention", retention) :
                new ObjectParameter("Retention", typeof(double));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var purposeCodeParameter = purposeCode != null ?
                new ObjectParameter("PurposeCode", purposeCode) :
                new ObjectParameter("PurposeCode", typeof(string));
    
            var purposeTypeDescriptionParameter = purposeTypeDescription != null ?
                new ObjectParameter("PurposeTypeDescription", purposeTypeDescription) :
                new ObjectParameter("PurposeTypeDescription", typeof(string));
    
            var ltypeParameter = ltype != null ?
                new ObjectParameter("Ltype", ltype) :
                new ObjectParameter("Ltype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Credit_Insert_S_Trans_Result>("Credit_Insert_S_Trans", agenceParameter, clientParameter, denominationParameter, cpteJumelleCCParameter, catCpteParameter, lettreCleParameter, cpteJumelleCreditParameter, cpteGLParameter, cleCpteParameter, libCpteGlParameter, montantParameter, tauxIntParameter, txTVAParameter, tauxGlobalParameter, dateContratParameter, numeroContratParameter, dateDemandeParameter, dateAccordParameter, dureeParameter, dureeDiffereParameter, typeCalPerDiffParameter, typeRembParameter, rembMensuelParameter, totalARembCapitalParameter, totalARembIntParameter, totalARembTVAParameter, totalRembCapitalParameter, totalRembIntParameter, totalRembTVAParameter, dateDebutRembParameter, dateDernierRembParameter, echeanceCoursParameter, dateExpirationParameter, dateCptaCreditParameter, dateCptaDernRembParameter, statutParameter, refGarantieParameter, libAgenceParameter, libCatCpteParameter, employeParameter, libEmployeParameter, dateCreationParameter, periodiciteParameter, vFDiffParameter, rembPerDiffParameter, totalImpayeParameter, totalAgioResParameter, totalArTVAParameter, descriptionParameter, fraisDossierParameter, pDLParameter, activiteecoParameter, txnNoParameter, maxicreditParameter, loanAttributesParameter, emergencyLoanParameter, insureParameter, loanstudyfeeParameter, retentionParameter, dateTransfertParameter, lect, languageParameter, purposeCodeParameter, purposeTypeDescriptionParameter, ltypeParameter);
        }
    
        public virtual ObjectResult<Credit_Update_Result> Credit_Update(string agence, string client, string denomination, string cpteJumelleCC, Nullable<short> catCpte, string lettreCle, string cpteJumelleCredit, string cpteGL, string cleCpte, string libCpteGl, Nullable<double> montant, Nullable<double> tauxInt, Nullable<double> txTVA, Nullable<double> tauxGlobal, Nullable<System.DateTime> dateContrat, string numeroContrat, Nullable<System.DateTime> dateDemande, Nullable<System.DateTime> dateAccord, Nullable<short> duree, Nullable<short> dureeDiffere, string typeCalPerDiff, string typeRemb, Nullable<double> rembMensuel, Nullable<double> totalARembCapital, Nullable<double> totalARembInt, Nullable<double> totalARembTVA, Nullable<double> totalRembCapital, Nullable<double> totalRembInt, Nullable<double> totalRembTVA, Nullable<System.DateTime> dateDebutRemb, Nullable<System.DateTime> dateDernierRemb, Nullable<short> echeanceCours, Nullable<System.DateTime> dateExpiration, Nullable<System.DateTime> dateCptaCredit, Nullable<System.DateTime> dateCptaDernRemb, string statut, string refGarantie, string libAgence, string libCatCpte, string employe, string libEmploye, Nullable<System.DateTime> dateCreation, string periodicite, Nullable<double> vFDiff, Nullable<double> rembPerDiff, Nullable<double> totalImpaye, Nullable<double> totalAgioRes, Nullable<double> totalArTVA, string description, Nullable<double> fraisDossier, Nullable<double> pDL, string activiteeco, string txnNo, Nullable<double> maxicredit, string loanAttributes, Nullable<double> emergencyLoan, Nullable<double> insure, Nullable<double> loanstudyfee, Nullable<double> retention, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var lettreCleParameter = lettreCle != null ?
                new ObjectParameter("LettreCle", lettreCle) :
                new ObjectParameter("LettreCle", typeof(string));
    
            var cpteJumelleCreditParameter = cpteJumelleCredit != null ?
                new ObjectParameter("CpteJumelleCredit", cpteJumelleCredit) :
                new ObjectParameter("CpteJumelleCredit", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var libCpteGlParameter = libCpteGl != null ?
                new ObjectParameter("LibCpteGl", libCpteGl) :
                new ObjectParameter("LibCpteGl", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var tauxIntParameter = tauxInt.HasValue ?
                new ObjectParameter("TauxInt", tauxInt) :
                new ObjectParameter("TauxInt", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var tauxGlobalParameter = tauxGlobal.HasValue ?
                new ObjectParameter("TauxGlobal", tauxGlobal) :
                new ObjectParameter("TauxGlobal", typeof(double));
    
            var dateContratParameter = dateContrat.HasValue ?
                new ObjectParameter("DateContrat", dateContrat) :
                new ObjectParameter("DateContrat", typeof(System.DateTime));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var dateDemandeParameter = dateDemande.HasValue ?
                new ObjectParameter("DateDemande", dateDemande) :
                new ObjectParameter("DateDemande", typeof(System.DateTime));
    
            var dateAccordParameter = dateAccord.HasValue ?
                new ObjectParameter("DateAccord", dateAccord) :
                new ObjectParameter("DateAccord", typeof(System.DateTime));
    
            var dureeParameter = duree.HasValue ?
                new ObjectParameter("Duree", duree) :
                new ObjectParameter("Duree", typeof(short));
    
            var dureeDiffereParameter = dureeDiffere.HasValue ?
                new ObjectParameter("DureeDiffere", dureeDiffere) :
                new ObjectParameter("DureeDiffere", typeof(short));
    
            var typeCalPerDiffParameter = typeCalPerDiff != null ?
                new ObjectParameter("TypeCalPerDiff", typeCalPerDiff) :
                new ObjectParameter("TypeCalPerDiff", typeof(string));
    
            var typeRembParameter = typeRemb != null ?
                new ObjectParameter("TypeRemb", typeRemb) :
                new ObjectParameter("TypeRemb", typeof(string));
    
            var rembMensuelParameter = rembMensuel.HasValue ?
                new ObjectParameter("RembMensuel", rembMensuel) :
                new ObjectParameter("RembMensuel", typeof(double));
    
            var totalARembCapitalParameter = totalARembCapital.HasValue ?
                new ObjectParameter("TotalARembCapital", totalARembCapital) :
                new ObjectParameter("TotalARembCapital", typeof(double));
    
            var totalARembIntParameter = totalARembInt.HasValue ?
                new ObjectParameter("TotalARembInt", totalARembInt) :
                new ObjectParameter("TotalARembInt", typeof(double));
    
            var totalARembTVAParameter = totalARembTVA.HasValue ?
                new ObjectParameter("TotalARembTVA", totalARembTVA) :
                new ObjectParameter("TotalARembTVA", typeof(double));
    
            var totalRembCapitalParameter = totalRembCapital.HasValue ?
                new ObjectParameter("TotalRembCapital", totalRembCapital) :
                new ObjectParameter("TotalRembCapital", typeof(double));
    
            var totalRembIntParameter = totalRembInt.HasValue ?
                new ObjectParameter("TotalRembInt", totalRembInt) :
                new ObjectParameter("TotalRembInt", typeof(double));
    
            var totalRembTVAParameter = totalRembTVA.HasValue ?
                new ObjectParameter("TotalRembTVA", totalRembTVA) :
                new ObjectParameter("TotalRembTVA", typeof(double));
    
            var dateDebutRembParameter = dateDebutRemb.HasValue ?
                new ObjectParameter("DateDebutRemb", dateDebutRemb) :
                new ObjectParameter("DateDebutRemb", typeof(System.DateTime));
    
            var dateDernierRembParameter = dateDernierRemb.HasValue ?
                new ObjectParameter("DateDernierRemb", dateDernierRemb) :
                new ObjectParameter("DateDernierRemb", typeof(System.DateTime));
    
            var echeanceCoursParameter = echeanceCours.HasValue ?
                new ObjectParameter("EcheanceCours", echeanceCours) :
                new ObjectParameter("EcheanceCours", typeof(short));
    
            var dateExpirationParameter = dateExpiration.HasValue ?
                new ObjectParameter("DateExpiration", dateExpiration) :
                new ObjectParameter("DateExpiration", typeof(System.DateTime));
    
            var dateCptaCreditParameter = dateCptaCredit.HasValue ?
                new ObjectParameter("DateCptaCredit", dateCptaCredit) :
                new ObjectParameter("DateCptaCredit", typeof(System.DateTime));
    
            var dateCptaDernRembParameter = dateCptaDernRemb.HasValue ?
                new ObjectParameter("DateCptaDernRemb", dateCptaDernRemb) :
                new ObjectParameter("DateCptaDernRemb", typeof(System.DateTime));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var refGarantieParameter = refGarantie != null ?
                new ObjectParameter("RefGarantie", refGarantie) :
                new ObjectParameter("RefGarantie", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libCatCpteParameter = libCatCpte != null ?
                new ObjectParameter("LibCatCpte", libCatCpte) :
                new ObjectParameter("LibCatCpte", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var periodiciteParameter = periodicite != null ?
                new ObjectParameter("Periodicite", periodicite) :
                new ObjectParameter("Periodicite", typeof(string));
    
            var vFDiffParameter = vFDiff.HasValue ?
                new ObjectParameter("VFDiff", vFDiff) :
                new ObjectParameter("VFDiff", typeof(double));
    
            var rembPerDiffParameter = rembPerDiff.HasValue ?
                new ObjectParameter("RembPerDiff", rembPerDiff) :
                new ObjectParameter("RembPerDiff", typeof(double));
    
            var totalImpayeParameter = totalImpaye.HasValue ?
                new ObjectParameter("TotalImpaye", totalImpaye) :
                new ObjectParameter("TotalImpaye", typeof(double));
    
            var totalAgioResParameter = totalAgioRes.HasValue ?
                new ObjectParameter("TotalAgioRes", totalAgioRes) :
                new ObjectParameter("TotalAgioRes", typeof(double));
    
            var totalArTVAParameter = totalArTVA.HasValue ?
                new ObjectParameter("TotalArTVA", totalArTVA) :
                new ObjectParameter("TotalArTVA", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var fraisDossierParameter = fraisDossier.HasValue ?
                new ObjectParameter("FraisDossier", fraisDossier) :
                new ObjectParameter("FraisDossier", typeof(double));
    
            var pDLParameter = pDL.HasValue ?
                new ObjectParameter("PDL", pDL) :
                new ObjectParameter("PDL", typeof(double));
    
            var activiteecoParameter = activiteeco != null ?
                new ObjectParameter("Activiteeco", activiteeco) :
                new ObjectParameter("Activiteeco", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var maxicreditParameter = maxicredit.HasValue ?
                new ObjectParameter("Maxicredit", maxicredit) :
                new ObjectParameter("Maxicredit", typeof(double));
    
            var loanAttributesParameter = loanAttributes != null ?
                new ObjectParameter("LoanAttributes", loanAttributes) :
                new ObjectParameter("LoanAttributes", typeof(string));
    
            var emergencyLoanParameter = emergencyLoan.HasValue ?
                new ObjectParameter("EmergencyLoan", emergencyLoan) :
                new ObjectParameter("EmergencyLoan", typeof(double));
    
            var insureParameter = insure.HasValue ?
                new ObjectParameter("Insure", insure) :
                new ObjectParameter("Insure", typeof(double));
    
            var loanstudyfeeParameter = loanstudyfee.HasValue ?
                new ObjectParameter("Loanstudyfee", loanstudyfee) :
                new ObjectParameter("Loanstudyfee", typeof(double));
    
            var retentionParameter = retention.HasValue ?
                new ObjectParameter("Retention", retention) :
                new ObjectParameter("Retention", typeof(double));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Credit_Update_Result>("Credit_Update", agenceParameter, clientParameter, denominationParameter, cpteJumelleCCParameter, catCpteParameter, lettreCleParameter, cpteJumelleCreditParameter, cpteGLParameter, cleCpteParameter, libCpteGlParameter, montantParameter, tauxIntParameter, txTVAParameter, tauxGlobalParameter, dateContratParameter, numeroContratParameter, dateDemandeParameter, dateAccordParameter, dureeParameter, dureeDiffereParameter, typeCalPerDiffParameter, typeRembParameter, rembMensuelParameter, totalARembCapitalParameter, totalARembIntParameter, totalARembTVAParameter, totalRembCapitalParameter, totalRembIntParameter, totalRembTVAParameter, dateDebutRembParameter, dateDernierRembParameter, echeanceCoursParameter, dateExpirationParameter, dateCptaCreditParameter, dateCptaDernRembParameter, statutParameter, refGarantieParameter, libAgenceParameter, libCatCpteParameter, employeParameter, libEmployeParameter, dateCreationParameter, periodiciteParameter, vFDiffParameter, rembPerDiffParameter, totalImpayeParameter, totalAgioResParameter, totalArTVAParameter, descriptionParameter, fraisDossierParameter, pDLParameter, activiteecoParameter, txnNoParameter, maxicreditParameter, loanAttributesParameter, emergencyLoanParameter, insureParameter, loanstudyfeeParameter, retentionParameter, dateTransfertParameter, lect, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<Credit_Update_Contententieu_Result> Credit_Update_Contententieu(string v_Agence, string v_NumeroContrat, string v_CpteJumCc, Nullable<double> v_LitCapital, Nullable<double> v_LitInteret, Nullable<double> v_LitTVA, ObjectParameter lect, string language, string v_TxnNo, string v_Employe, string v_LibEmploye)
        {
            var v_AgenceParameter = v_Agence != null ?
                new ObjectParameter("V_Agence", v_Agence) :
                new ObjectParameter("V_Agence", typeof(string));
    
            var v_NumeroContratParameter = v_NumeroContrat != null ?
                new ObjectParameter("V_NumeroContrat", v_NumeroContrat) :
                new ObjectParameter("V_NumeroContrat", typeof(string));
    
            var v_CpteJumCcParameter = v_CpteJumCc != null ?
                new ObjectParameter("V_CpteJumCc", v_CpteJumCc) :
                new ObjectParameter("V_CpteJumCc", typeof(string));
    
            var v_LitCapitalParameter = v_LitCapital.HasValue ?
                new ObjectParameter("V_LitCapital", v_LitCapital) :
                new ObjectParameter("V_LitCapital", typeof(double));
    
            var v_LitInteretParameter = v_LitInteret.HasValue ?
                new ObjectParameter("V_LitInteret", v_LitInteret) :
                new ObjectParameter("V_LitInteret", typeof(double));
    
            var v_LitTVAParameter = v_LitTVA.HasValue ?
                new ObjectParameter("V_LitTVA", v_LitTVA) :
                new ObjectParameter("V_LitTVA", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var v_TxnNoParameter = v_TxnNo != null ?
                new ObjectParameter("V_TxnNo", v_TxnNo) :
                new ObjectParameter("V_TxnNo", typeof(string));
    
            var v_EmployeParameter = v_Employe != null ?
                new ObjectParameter("V_Employe", v_Employe) :
                new ObjectParameter("V_Employe", typeof(string));
    
            var v_LibEmployeParameter = v_LibEmploye != null ?
                new ObjectParameter("V_LibEmploye", v_LibEmploye) :
                new ObjectParameter("V_LibEmploye", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Credit_Update_Contententieu_Result>("Credit_Update_Contententieu", v_AgenceParameter, v_NumeroContratParameter, v_CpteJumCcParameter, v_LitCapitalParameter, v_LitInteretParameter, v_LitTVAParameter, lect, languageParameter, v_TxnNoParameter, v_EmployeParameter, v_LibEmployeParameter);
        }
    
        public virtual ObjectResult<Credit_Update_RembAnticipe_Result> Credit_Update_RembAnticipe(string v_Agence, string v_NumeroContrat, string v_CpteJumCredit, Nullable<double> capitalAnticipe, Nullable<double> interetAnticipe, Nullable<double> tvaAnticipe, ObjectParameter lect, ObjectParameter errMsg, string language, string v_TxnNo, string v_Employe, string v_LibEmploye)
        {
            var v_AgenceParameter = v_Agence != null ?
                new ObjectParameter("V_Agence", v_Agence) :
                new ObjectParameter("V_Agence", typeof(string));
    
            var v_NumeroContratParameter = v_NumeroContrat != null ?
                new ObjectParameter("V_NumeroContrat", v_NumeroContrat) :
                new ObjectParameter("V_NumeroContrat", typeof(string));
    
            var v_CpteJumCreditParameter = v_CpteJumCredit != null ?
                new ObjectParameter("V_CpteJumCredit", v_CpteJumCredit) :
                new ObjectParameter("V_CpteJumCredit", typeof(string));
    
            var capitalAnticipeParameter = capitalAnticipe.HasValue ?
                new ObjectParameter("CapitalAnticipe", capitalAnticipe) :
                new ObjectParameter("CapitalAnticipe", typeof(double));
    
            var interetAnticipeParameter = interetAnticipe.HasValue ?
                new ObjectParameter("InteretAnticipe", interetAnticipe) :
                new ObjectParameter("InteretAnticipe", typeof(double));
    
            var tvaAnticipeParameter = tvaAnticipe.HasValue ?
                new ObjectParameter("TvaAnticipe", tvaAnticipe) :
                new ObjectParameter("TvaAnticipe", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var v_TxnNoParameter = v_TxnNo != null ?
                new ObjectParameter("V_TxnNo", v_TxnNo) :
                new ObjectParameter("V_TxnNo", typeof(string));
    
            var v_EmployeParameter = v_Employe != null ?
                new ObjectParameter("V_Employe", v_Employe) :
                new ObjectParameter("V_Employe", typeof(string));
    
            var v_LibEmployeParameter = v_LibEmploye != null ?
                new ObjectParameter("V_LibEmploye", v_LibEmploye) :
                new ObjectParameter("V_LibEmploye", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Credit_Update_RembAnticipe_Result>("Credit_Update_RembAnticipe", v_AgenceParameter, v_NumeroContratParameter, v_CpteJumCreditParameter, capitalAnticipeParameter, interetAnticipeParameter, tvaAnticipeParameter, lect, errMsg, languageParameter, v_TxnNoParameter, v_EmployeParameter, v_LibEmployeParameter);
        }
    
        public virtual ObjectResult<Credit_Update_RembAnticipePartiele_Result> Credit_Update_RembAnticipePartiele(string v_Agence, string v_NumeroContrat, string v_CpteJumCredit, Nullable<double> capitalAnticipe, Nullable<double> interetAnticipe, Nullable<double> tvaAnticipe, ObjectParameter lect, ObjectParameter errMsg, string language, string v_TxnNo, string v_Employe, string v_LibEmploye)
        {
            var v_AgenceParameter = v_Agence != null ?
                new ObjectParameter("V_Agence", v_Agence) :
                new ObjectParameter("V_Agence", typeof(string));
    
            var v_NumeroContratParameter = v_NumeroContrat != null ?
                new ObjectParameter("V_NumeroContrat", v_NumeroContrat) :
                new ObjectParameter("V_NumeroContrat", typeof(string));
    
            var v_CpteJumCreditParameter = v_CpteJumCredit != null ?
                new ObjectParameter("V_CpteJumCredit", v_CpteJumCredit) :
                new ObjectParameter("V_CpteJumCredit", typeof(string));
    
            var capitalAnticipeParameter = capitalAnticipe.HasValue ?
                new ObjectParameter("CapitalAnticipe", capitalAnticipe) :
                new ObjectParameter("CapitalAnticipe", typeof(double));
    
            var interetAnticipeParameter = interetAnticipe.HasValue ?
                new ObjectParameter("InteretAnticipe", interetAnticipe) :
                new ObjectParameter("InteretAnticipe", typeof(double));
    
            var tvaAnticipeParameter = tvaAnticipe.HasValue ?
                new ObjectParameter("TvaAnticipe", tvaAnticipe) :
                new ObjectParameter("TvaAnticipe", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var v_TxnNoParameter = v_TxnNo != null ?
                new ObjectParameter("V_TxnNo", v_TxnNo) :
                new ObjectParameter("V_TxnNo", typeof(string));
    
            var v_EmployeParameter = v_Employe != null ?
                new ObjectParameter("V_Employe", v_Employe) :
                new ObjectParameter("V_Employe", typeof(string));
    
            var v_LibEmployeParameter = v_LibEmploye != null ?
                new ObjectParameter("V_LibEmploye", v_LibEmploye) :
                new ObjectParameter("V_LibEmploye", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Credit_Update_RembAnticipePartiele_Result>("Credit_Update_RembAnticipePartiele", v_AgenceParameter, v_NumeroContratParameter, v_CpteJumCreditParameter, capitalAnticipeParameter, interetAnticipeParameter, tvaAnticipeParameter, lect, errMsg, languageParameter, v_TxnNoParameter, v_EmployeParameter, v_LibEmployeParameter);
        }
    
        public virtual ObjectResult<Credit_Update_S_Trans_Result> Credit_Update_S_Trans(string agence, string client, string denomination, string cpteJumelleCC, Nullable<short> catCpte, string lettreCle, string cpteJumelleCredit, string cpteGL, string cleCpte, string libCpteGl, Nullable<double> montant, Nullable<double> tauxInt, Nullable<double> txTVA, Nullable<double> tauxGlobal, Nullable<System.DateTime> dateContrat, string numeroContrat, Nullable<System.DateTime> dateDemande, Nullable<System.DateTime> dateAccord, Nullable<short> duree, Nullable<short> dureeDiffere, string typeCalPerDiff, string typeRemb, Nullable<double> rembMensuel, Nullable<double> totalARembCapital, Nullable<double> totalARembInt, Nullable<double> totalARembTVA, Nullable<double> totalRembCapital, Nullable<double> totalRembInt, Nullable<double> totalRembTVA, Nullable<System.DateTime> dateDebutRemb, Nullable<System.DateTime> dateDernierRemb, Nullable<short> echeanceCours, Nullable<System.DateTime> dateExpiration, Nullable<System.DateTime> dateCptaCredit, Nullable<System.DateTime> dateCptaDernRemb, string statut, string refGarantie, string libAgence, string libCatCpte, string employe, string libEmploye, Nullable<System.DateTime> dateCreation, string periodicite, Nullable<double> vFDiff, Nullable<double> rembPerDiff, Nullable<double> totalImpaye, Nullable<double> totalAgioRes, Nullable<double> totalArTVA, string description, Nullable<double> fraisDossier, Nullable<double> pDL, string activiteeco, string txnNo, Nullable<double> maxicredit, string loanAttributes, Nullable<double> emergencyLoan, Nullable<double> insure, Nullable<double> loanstudyfee, Nullable<double> retention, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, Nullable<double> totalContentieux, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var lettreCleParameter = lettreCle != null ?
                new ObjectParameter("LettreCle", lettreCle) :
                new ObjectParameter("LettreCle", typeof(string));
    
            var cpteJumelleCreditParameter = cpteJumelleCredit != null ?
                new ObjectParameter("CpteJumelleCredit", cpteJumelleCredit) :
                new ObjectParameter("CpteJumelleCredit", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var libCpteGlParameter = libCpteGl != null ?
                new ObjectParameter("LibCpteGl", libCpteGl) :
                new ObjectParameter("LibCpteGl", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var tauxIntParameter = tauxInt.HasValue ?
                new ObjectParameter("TauxInt", tauxInt) :
                new ObjectParameter("TauxInt", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var tauxGlobalParameter = tauxGlobal.HasValue ?
                new ObjectParameter("TauxGlobal", tauxGlobal) :
                new ObjectParameter("TauxGlobal", typeof(double));
    
            var dateContratParameter = dateContrat.HasValue ?
                new ObjectParameter("DateContrat", dateContrat) :
                new ObjectParameter("DateContrat", typeof(System.DateTime));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var dateDemandeParameter = dateDemande.HasValue ?
                new ObjectParameter("DateDemande", dateDemande) :
                new ObjectParameter("DateDemande", typeof(System.DateTime));
    
            var dateAccordParameter = dateAccord.HasValue ?
                new ObjectParameter("DateAccord", dateAccord) :
                new ObjectParameter("DateAccord", typeof(System.DateTime));
    
            var dureeParameter = duree.HasValue ?
                new ObjectParameter("Duree", duree) :
                new ObjectParameter("Duree", typeof(short));
    
            var dureeDiffereParameter = dureeDiffere.HasValue ?
                new ObjectParameter("DureeDiffere", dureeDiffere) :
                new ObjectParameter("DureeDiffere", typeof(short));
    
            var typeCalPerDiffParameter = typeCalPerDiff != null ?
                new ObjectParameter("TypeCalPerDiff", typeCalPerDiff) :
                new ObjectParameter("TypeCalPerDiff", typeof(string));
    
            var typeRembParameter = typeRemb != null ?
                new ObjectParameter("TypeRemb", typeRemb) :
                new ObjectParameter("TypeRemb", typeof(string));
    
            var rembMensuelParameter = rembMensuel.HasValue ?
                new ObjectParameter("RembMensuel", rembMensuel) :
                new ObjectParameter("RembMensuel", typeof(double));
    
            var totalARembCapitalParameter = totalARembCapital.HasValue ?
                new ObjectParameter("TotalARembCapital", totalARembCapital) :
                new ObjectParameter("TotalARembCapital", typeof(double));
    
            var totalARembIntParameter = totalARembInt.HasValue ?
                new ObjectParameter("TotalARembInt", totalARembInt) :
                new ObjectParameter("TotalARembInt", typeof(double));
    
            var totalARembTVAParameter = totalARembTVA.HasValue ?
                new ObjectParameter("TotalARembTVA", totalARembTVA) :
                new ObjectParameter("TotalARembTVA", typeof(double));
    
            var totalRembCapitalParameter = totalRembCapital.HasValue ?
                new ObjectParameter("TotalRembCapital", totalRembCapital) :
                new ObjectParameter("TotalRembCapital", typeof(double));
    
            var totalRembIntParameter = totalRembInt.HasValue ?
                new ObjectParameter("TotalRembInt", totalRembInt) :
                new ObjectParameter("TotalRembInt", typeof(double));
    
            var totalRembTVAParameter = totalRembTVA.HasValue ?
                new ObjectParameter("TotalRembTVA", totalRembTVA) :
                new ObjectParameter("TotalRembTVA", typeof(double));
    
            var dateDebutRembParameter = dateDebutRemb.HasValue ?
                new ObjectParameter("DateDebutRemb", dateDebutRemb) :
                new ObjectParameter("DateDebutRemb", typeof(System.DateTime));
    
            var dateDernierRembParameter = dateDernierRemb.HasValue ?
                new ObjectParameter("DateDernierRemb", dateDernierRemb) :
                new ObjectParameter("DateDernierRemb", typeof(System.DateTime));
    
            var echeanceCoursParameter = echeanceCours.HasValue ?
                new ObjectParameter("EcheanceCours", echeanceCours) :
                new ObjectParameter("EcheanceCours", typeof(short));
    
            var dateExpirationParameter = dateExpiration.HasValue ?
                new ObjectParameter("DateExpiration", dateExpiration) :
                new ObjectParameter("DateExpiration", typeof(System.DateTime));
    
            var dateCptaCreditParameter = dateCptaCredit.HasValue ?
                new ObjectParameter("DateCptaCredit", dateCptaCredit) :
                new ObjectParameter("DateCptaCredit", typeof(System.DateTime));
    
            var dateCptaDernRembParameter = dateCptaDernRemb.HasValue ?
                new ObjectParameter("DateCptaDernRemb", dateCptaDernRemb) :
                new ObjectParameter("DateCptaDernRemb", typeof(System.DateTime));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var refGarantieParameter = refGarantie != null ?
                new ObjectParameter("RefGarantie", refGarantie) :
                new ObjectParameter("RefGarantie", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libCatCpteParameter = libCatCpte != null ?
                new ObjectParameter("LibCatCpte", libCatCpte) :
                new ObjectParameter("LibCatCpte", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var periodiciteParameter = periodicite != null ?
                new ObjectParameter("Periodicite", periodicite) :
                new ObjectParameter("Periodicite", typeof(string));
    
            var vFDiffParameter = vFDiff.HasValue ?
                new ObjectParameter("VFDiff", vFDiff) :
                new ObjectParameter("VFDiff", typeof(double));
    
            var rembPerDiffParameter = rembPerDiff.HasValue ?
                new ObjectParameter("RembPerDiff", rembPerDiff) :
                new ObjectParameter("RembPerDiff", typeof(double));
    
            var totalImpayeParameter = totalImpaye.HasValue ?
                new ObjectParameter("TotalImpaye", totalImpaye) :
                new ObjectParameter("TotalImpaye", typeof(double));
    
            var totalAgioResParameter = totalAgioRes.HasValue ?
                new ObjectParameter("TotalAgioRes", totalAgioRes) :
                new ObjectParameter("TotalAgioRes", typeof(double));
    
            var totalArTVAParameter = totalArTVA.HasValue ?
                new ObjectParameter("TotalArTVA", totalArTVA) :
                new ObjectParameter("TotalArTVA", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var fraisDossierParameter = fraisDossier.HasValue ?
                new ObjectParameter("FraisDossier", fraisDossier) :
                new ObjectParameter("FraisDossier", typeof(double));
    
            var pDLParameter = pDL.HasValue ?
                new ObjectParameter("PDL", pDL) :
                new ObjectParameter("PDL", typeof(double));
    
            var activiteecoParameter = activiteeco != null ?
                new ObjectParameter("Activiteeco", activiteeco) :
                new ObjectParameter("Activiteeco", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var maxicreditParameter = maxicredit.HasValue ?
                new ObjectParameter("Maxicredit", maxicredit) :
                new ObjectParameter("Maxicredit", typeof(double));
    
            var loanAttributesParameter = loanAttributes != null ?
                new ObjectParameter("LoanAttributes", loanAttributes) :
                new ObjectParameter("LoanAttributes", typeof(string));
    
            var emergencyLoanParameter = emergencyLoan.HasValue ?
                new ObjectParameter("EmergencyLoan", emergencyLoan) :
                new ObjectParameter("EmergencyLoan", typeof(double));
    
            var insureParameter = insure.HasValue ?
                new ObjectParameter("Insure", insure) :
                new ObjectParameter("Insure", typeof(double));
    
            var loanstudyfeeParameter = loanstudyfee.HasValue ?
                new ObjectParameter("Loanstudyfee", loanstudyfee) :
                new ObjectParameter("Loanstudyfee", typeof(double));
    
            var retentionParameter = retention.HasValue ?
                new ObjectParameter("Retention", retention) :
                new ObjectParameter("Retention", typeof(double));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var totalContentieuxParameter = totalContentieux.HasValue ?
                new ObjectParameter("TotalContentieux", totalContentieux) :
                new ObjectParameter("TotalContentieux", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Credit_Update_S_Trans_Result>("Credit_Update_S_Trans", agenceParameter, clientParameter, denominationParameter, cpteJumelleCCParameter, catCpteParameter, lettreCleParameter, cpteJumelleCreditParameter, cpteGLParameter, cleCpteParameter, libCpteGlParameter, montantParameter, tauxIntParameter, txTVAParameter, tauxGlobalParameter, dateContratParameter, numeroContratParameter, dateDemandeParameter, dateAccordParameter, dureeParameter, dureeDiffereParameter, typeCalPerDiffParameter, typeRembParameter, rembMensuelParameter, totalARembCapitalParameter, totalARembIntParameter, totalARembTVAParameter, totalRembCapitalParameter, totalRembIntParameter, totalRembTVAParameter, dateDebutRembParameter, dateDernierRembParameter, echeanceCoursParameter, dateExpirationParameter, dateCptaCreditParameter, dateCptaDernRembParameter, statutParameter, refGarantieParameter, libAgenceParameter, libCatCpteParameter, employeParameter, libEmployeParameter, dateCreationParameter, periodiciteParameter, vFDiffParameter, rembPerDiffParameter, totalImpayeParameter, totalAgioResParameter, totalArTVAParameter, descriptionParameter, fraisDossierParameter, pDLParameter, activiteecoParameter, txnNoParameter, maxicreditParameter, loanAttributesParameter, emergencyLoanParameter, insureParameter, loanstudyfeeParameter, retentionParameter, dateTransfertParameter, lect, totalContentieuxParameter, languageParameter);
        }
    
        public virtual ObjectResult<Credit_Update_S_TransCU_Result> Credit_Update_S_TransCU(string agence, string client, string denomination, string cpteJumelleCC, Nullable<short> catCpte, string lettreCle, string cpteJumelleCredit, string cpteGL, string cleCpte, string libCpteGl, Nullable<double> montant, Nullable<double> tauxInt, Nullable<double> txTVA, Nullable<double> tauxGlobal, Nullable<System.DateTime> dateContrat, string numeroContrat, Nullable<System.DateTime> dateDemande, Nullable<System.DateTime> dateAccord, Nullable<short> duree, Nullable<short> dureeDiffere, string typeCalPerDiff, string typeRemb, Nullable<double> rembMensuel, Nullable<double> totalARembCapital, Nullable<double> totalARembInt, Nullable<double> totalARembTVA, Nullable<double> totalRembCapital, Nullable<double> totalRembInt, Nullable<double> totalRembTVA, Nullable<System.DateTime> dateDebutRemb, Nullable<System.DateTime> dateDernierRemb, Nullable<short> echeanceCours, Nullable<System.DateTime> dateExpiration, Nullable<System.DateTime> dateCptaCredit, Nullable<System.DateTime> dateCptaDernRemb, string statut, string refGarantie, string libAgence, string libCatCpte, string employe, string libEmploye, Nullable<System.DateTime> dateCreation, string periodicite, Nullable<double> vFDiff, Nullable<double> rembPerDiff, Nullable<double> totalImpaye, Nullable<double> totalAgioRes, Nullable<double> totalArTVA, string description, Nullable<double> fraisDossier, Nullable<double> pDL, string activiteeco, string txnNo, Nullable<double> maxicredit, string loanAttributes, Nullable<double> emergencyLoan, Nullable<double> insure, Nullable<double> loanstudyfee, Nullable<double> retention, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, Nullable<double> totalContentieux, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var lettreCleParameter = lettreCle != null ?
                new ObjectParameter("LettreCle", lettreCle) :
                new ObjectParameter("LettreCle", typeof(string));
    
            var cpteJumelleCreditParameter = cpteJumelleCredit != null ?
                new ObjectParameter("CpteJumelleCredit", cpteJumelleCredit) :
                new ObjectParameter("CpteJumelleCredit", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var libCpteGlParameter = libCpteGl != null ?
                new ObjectParameter("LibCpteGl", libCpteGl) :
                new ObjectParameter("LibCpteGl", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var tauxIntParameter = tauxInt.HasValue ?
                new ObjectParameter("TauxInt", tauxInt) :
                new ObjectParameter("TauxInt", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var tauxGlobalParameter = tauxGlobal.HasValue ?
                new ObjectParameter("TauxGlobal", tauxGlobal) :
                new ObjectParameter("TauxGlobal", typeof(double));
    
            var dateContratParameter = dateContrat.HasValue ?
                new ObjectParameter("DateContrat", dateContrat) :
                new ObjectParameter("DateContrat", typeof(System.DateTime));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var dateDemandeParameter = dateDemande.HasValue ?
                new ObjectParameter("DateDemande", dateDemande) :
                new ObjectParameter("DateDemande", typeof(System.DateTime));
    
            var dateAccordParameter = dateAccord.HasValue ?
                new ObjectParameter("DateAccord", dateAccord) :
                new ObjectParameter("DateAccord", typeof(System.DateTime));
    
            var dureeParameter = duree.HasValue ?
                new ObjectParameter("Duree", duree) :
                new ObjectParameter("Duree", typeof(short));
    
            var dureeDiffereParameter = dureeDiffere.HasValue ?
                new ObjectParameter("DureeDiffere", dureeDiffere) :
                new ObjectParameter("DureeDiffere", typeof(short));
    
            var typeCalPerDiffParameter = typeCalPerDiff != null ?
                new ObjectParameter("TypeCalPerDiff", typeCalPerDiff) :
                new ObjectParameter("TypeCalPerDiff", typeof(string));
    
            var typeRembParameter = typeRemb != null ?
                new ObjectParameter("TypeRemb", typeRemb) :
                new ObjectParameter("TypeRemb", typeof(string));
    
            var rembMensuelParameter = rembMensuel.HasValue ?
                new ObjectParameter("RembMensuel", rembMensuel) :
                new ObjectParameter("RembMensuel", typeof(double));
    
            var totalARembCapitalParameter = totalARembCapital.HasValue ?
                new ObjectParameter("TotalARembCapital", totalARembCapital) :
                new ObjectParameter("TotalARembCapital", typeof(double));
    
            var totalARembIntParameter = totalARembInt.HasValue ?
                new ObjectParameter("TotalARembInt", totalARembInt) :
                new ObjectParameter("TotalARembInt", typeof(double));
    
            var totalARembTVAParameter = totalARembTVA.HasValue ?
                new ObjectParameter("TotalARembTVA", totalARembTVA) :
                new ObjectParameter("TotalARembTVA", typeof(double));
    
            var totalRembCapitalParameter = totalRembCapital.HasValue ?
                new ObjectParameter("TotalRembCapital", totalRembCapital) :
                new ObjectParameter("TotalRembCapital", typeof(double));
    
            var totalRembIntParameter = totalRembInt.HasValue ?
                new ObjectParameter("TotalRembInt", totalRembInt) :
                new ObjectParameter("TotalRembInt", typeof(double));
    
            var totalRembTVAParameter = totalRembTVA.HasValue ?
                new ObjectParameter("TotalRembTVA", totalRembTVA) :
                new ObjectParameter("TotalRembTVA", typeof(double));
    
            var dateDebutRembParameter = dateDebutRemb.HasValue ?
                new ObjectParameter("DateDebutRemb", dateDebutRemb) :
                new ObjectParameter("DateDebutRemb", typeof(System.DateTime));
    
            var dateDernierRembParameter = dateDernierRemb.HasValue ?
                new ObjectParameter("DateDernierRemb", dateDernierRemb) :
                new ObjectParameter("DateDernierRemb", typeof(System.DateTime));
    
            var echeanceCoursParameter = echeanceCours.HasValue ?
                new ObjectParameter("EcheanceCours", echeanceCours) :
                new ObjectParameter("EcheanceCours", typeof(short));
    
            var dateExpirationParameter = dateExpiration.HasValue ?
                new ObjectParameter("DateExpiration", dateExpiration) :
                new ObjectParameter("DateExpiration", typeof(System.DateTime));
    
            var dateCptaCreditParameter = dateCptaCredit.HasValue ?
                new ObjectParameter("DateCptaCredit", dateCptaCredit) :
                new ObjectParameter("DateCptaCredit", typeof(System.DateTime));
    
            var dateCptaDernRembParameter = dateCptaDernRemb.HasValue ?
                new ObjectParameter("DateCptaDernRemb", dateCptaDernRemb) :
                new ObjectParameter("DateCptaDernRemb", typeof(System.DateTime));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var refGarantieParameter = refGarantie != null ?
                new ObjectParameter("RefGarantie", refGarantie) :
                new ObjectParameter("RefGarantie", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libCatCpteParameter = libCatCpte != null ?
                new ObjectParameter("LibCatCpte", libCatCpte) :
                new ObjectParameter("LibCatCpte", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var periodiciteParameter = periodicite != null ?
                new ObjectParameter("Periodicite", periodicite) :
                new ObjectParameter("Periodicite", typeof(string));
    
            var vFDiffParameter = vFDiff.HasValue ?
                new ObjectParameter("VFDiff", vFDiff) :
                new ObjectParameter("VFDiff", typeof(double));
    
            var rembPerDiffParameter = rembPerDiff.HasValue ?
                new ObjectParameter("RembPerDiff", rembPerDiff) :
                new ObjectParameter("RembPerDiff", typeof(double));
    
            var totalImpayeParameter = totalImpaye.HasValue ?
                new ObjectParameter("TotalImpaye", totalImpaye) :
                new ObjectParameter("TotalImpaye", typeof(double));
    
            var totalAgioResParameter = totalAgioRes.HasValue ?
                new ObjectParameter("TotalAgioRes", totalAgioRes) :
                new ObjectParameter("TotalAgioRes", typeof(double));
    
            var totalArTVAParameter = totalArTVA.HasValue ?
                new ObjectParameter("TotalArTVA", totalArTVA) :
                new ObjectParameter("TotalArTVA", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var fraisDossierParameter = fraisDossier.HasValue ?
                new ObjectParameter("FraisDossier", fraisDossier) :
                new ObjectParameter("FraisDossier", typeof(double));
    
            var pDLParameter = pDL.HasValue ?
                new ObjectParameter("PDL", pDL) :
                new ObjectParameter("PDL", typeof(double));
    
            var activiteecoParameter = activiteeco != null ?
                new ObjectParameter("Activiteeco", activiteeco) :
                new ObjectParameter("Activiteeco", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var maxicreditParameter = maxicredit.HasValue ?
                new ObjectParameter("Maxicredit", maxicredit) :
                new ObjectParameter("Maxicredit", typeof(double));
    
            var loanAttributesParameter = loanAttributes != null ?
                new ObjectParameter("LoanAttributes", loanAttributes) :
                new ObjectParameter("LoanAttributes", typeof(string));
    
            var emergencyLoanParameter = emergencyLoan.HasValue ?
                new ObjectParameter("EmergencyLoan", emergencyLoan) :
                new ObjectParameter("EmergencyLoan", typeof(double));
    
            var insureParameter = insure.HasValue ?
                new ObjectParameter("Insure", insure) :
                new ObjectParameter("Insure", typeof(double));
    
            var loanstudyfeeParameter = loanstudyfee.HasValue ?
                new ObjectParameter("Loanstudyfee", loanstudyfee) :
                new ObjectParameter("Loanstudyfee", typeof(double));
    
            var retentionParameter = retention.HasValue ?
                new ObjectParameter("Retention", retention) :
                new ObjectParameter("Retention", typeof(double));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var totalContentieuxParameter = totalContentieux.HasValue ?
                new ObjectParameter("TotalContentieux", totalContentieux) :
                new ObjectParameter("TotalContentieux", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Credit_Update_S_TransCU_Result>("Credit_Update_S_TransCU", agenceParameter, clientParameter, denominationParameter, cpteJumelleCCParameter, catCpteParameter, lettreCleParameter, cpteJumelleCreditParameter, cpteGLParameter, cleCpteParameter, libCpteGlParameter, montantParameter, tauxIntParameter, txTVAParameter, tauxGlobalParameter, dateContratParameter, numeroContratParameter, dateDemandeParameter, dateAccordParameter, dureeParameter, dureeDiffereParameter, typeCalPerDiffParameter, typeRembParameter, rembMensuelParameter, totalARembCapitalParameter, totalARembIntParameter, totalARembTVAParameter, totalRembCapitalParameter, totalRembIntParameter, totalRembTVAParameter, dateDebutRembParameter, dateDernierRembParameter, echeanceCoursParameter, dateExpirationParameter, dateCptaCreditParameter, dateCptaDernRembParameter, statutParameter, refGarantieParameter, libAgenceParameter, libCatCpteParameter, employeParameter, libEmployeParameter, dateCreationParameter, periodiciteParameter, vFDiffParameter, rembPerDiffParameter, totalImpayeParameter, totalAgioResParameter, totalArTVAParameter, descriptionParameter, fraisDossierParameter, pDLParameter, activiteecoParameter, txnNoParameter, maxicreditParameter, loanAttributesParameter, emergencyLoanParameter, insureParameter, loanstudyfeeParameter, retentionParameter, dateTransfertParameter, lect, totalContentieuxParameter, languageParameter);
        }
    
        public virtual ObjectResult<Credit_Updatebis_S_Trans_Result> Credit_Updatebis_S_Trans(string v_Agence, string v_NumeroContrat, string v_CpteJumCc, string v_CpteJumCredit, Nullable<double> v_ImpCapital, Nullable<double> v_ImpInteret, Nullable<double> v_ImpTVA, Nullable<int> initMode, ObjectParameter lect, string language)
        {
            var v_AgenceParameter = v_Agence != null ?
                new ObjectParameter("V_Agence", v_Agence) :
                new ObjectParameter("V_Agence", typeof(string));
    
            var v_NumeroContratParameter = v_NumeroContrat != null ?
                new ObjectParameter("V_NumeroContrat", v_NumeroContrat) :
                new ObjectParameter("V_NumeroContrat", typeof(string));
    
            var v_CpteJumCcParameter = v_CpteJumCc != null ?
                new ObjectParameter("V_CpteJumCc", v_CpteJumCc) :
                new ObjectParameter("V_CpteJumCc", typeof(string));
    
            var v_CpteJumCreditParameter = v_CpteJumCredit != null ?
                new ObjectParameter("V_CpteJumCredit", v_CpteJumCredit) :
                new ObjectParameter("V_CpteJumCredit", typeof(string));
    
            var v_ImpCapitalParameter = v_ImpCapital.HasValue ?
                new ObjectParameter("V_ImpCapital", v_ImpCapital) :
                new ObjectParameter("V_ImpCapital", typeof(double));
    
            var v_ImpInteretParameter = v_ImpInteret.HasValue ?
                new ObjectParameter("V_ImpInteret", v_ImpInteret) :
                new ObjectParameter("V_ImpInteret", typeof(double));
    
            var v_ImpTVAParameter = v_ImpTVA.HasValue ?
                new ObjectParameter("V_ImpTVA", v_ImpTVA) :
                new ObjectParameter("V_ImpTVA", typeof(double));
    
            var initModeParameter = initMode.HasValue ?
                new ObjectParameter("InitMode", initMode) :
                new ObjectParameter("InitMode", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Credit_Updatebis_S_Trans_Result>("Credit_Updatebis_S_Trans", v_AgenceParameter, v_NumeroContratParameter, v_CpteJumCcParameter, v_CpteJumCreditParameter, v_ImpCapitalParameter, v_ImpInteretParameter, v_ImpTVAParameter, initModeParameter, lect, languageParameter);
        }
    
        public virtual int Cust_Bal_Sheet(Nullable<int> pi_InAgence, string pc_LibAgence, Nullable<int> pi_InMatricule, Nullable<System.DateTime> pd_InDateOp, ObjectParameter pi_OutErreur, ObjectParameter msg, string computerName, string language)
        {
            var pi_InAgenceParameter = pi_InAgence.HasValue ?
                new ObjectParameter("pi_InAgence", pi_InAgence) :
                new ObjectParameter("pi_InAgence", typeof(int));
    
            var pc_LibAgenceParameter = pc_LibAgence != null ?
                new ObjectParameter("pc_LibAgence", pc_LibAgence) :
                new ObjectParameter("pc_LibAgence", typeof(string));
    
            var pi_InMatriculeParameter = pi_InMatricule.HasValue ?
                new ObjectParameter("pi_InMatricule", pi_InMatricule) :
                new ObjectParameter("pi_InMatricule", typeof(int));
    
            var pd_InDateOpParameter = pd_InDateOp.HasValue ?
                new ObjectParameter("pd_InDateOp", pd_InDateOp) :
                new ObjectParameter("pd_InDateOp", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Cust_Bal_Sheet", pi_InAgenceParameter, pc_LibAgenceParameter, pi_InMatriculeParameter, pd_InDateOpParameter, pi_OutErreur, msg, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<CustServiceProductN_Result> CustServiceProductN(string agence, string client, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string txnno, string integritystatus, Nullable<System.DateTime> dateTransfert, string codelibelle, string compteCom, string cleCompteCom, string codeMaj, string libDevise, string libCompteCom, string cpteColClt, string cleColClt, string libCpteColClt, string cpteGL, string cleGL, string libCpteGL, Nullable<double> charges, Nullable<double> mtTVA, string journal, string libjournal, ObjectParameter lect, ObjectParameter msg, Nullable<short> espion, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var codelibelleParameter = codelibelle != null ?
                new ObjectParameter("Codelibelle", codelibelle) :
                new ObjectParameter("Codelibelle", typeof(string));
    
            var compteComParameter = compteCom != null ?
                new ObjectParameter("CompteCom", compteCom) :
                new ObjectParameter("CompteCom", typeof(string));
    
            var cleCompteComParameter = cleCompteCom != null ?
                new ObjectParameter("CleCompteCom", cleCompteCom) :
                new ObjectParameter("CleCompteCom", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCompteComParameter = libCompteCom != null ?
                new ObjectParameter("LibCompteCom", libCompteCom) :
                new ObjectParameter("LibCompteCom", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleGLParameter = cleGL != null ?
                new ObjectParameter("CleGL", cleGL) :
                new ObjectParameter("CleGL", typeof(string));
    
            var libCpteGLParameter = libCpteGL != null ?
                new ObjectParameter("LibCpteGL", libCpteGL) :
                new ObjectParameter("LibCpteGL", typeof(string));
    
            var chargesParameter = charges.HasValue ?
                new ObjectParameter("Charges", charges) :
                new ObjectParameter("Charges", typeof(double));
    
            var mtTVAParameter = mtTVA.HasValue ?
                new ObjectParameter("MtTVA", mtTVA) :
                new ObjectParameter("MtTVA", typeof(double));
    
            var journalParameter = journal != null ?
                new ObjectParameter("journal", journal) :
                new ObjectParameter("journal", typeof(string));
    
            var libjournalParameter = libjournal != null ?
                new ObjectParameter("libjournal", libjournal) :
                new ObjectParameter("libjournal", typeof(string));
    
            var espionParameter = espion.HasValue ?
                new ObjectParameter("espion", espion) :
                new ObjectParameter("espion", typeof(short));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustServiceProductN_Result>("CustServiceProductN", agenceParameter, clientParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, txnnoParameter, integritystatusParameter, dateTransfertParameter, codelibelleParameter, compteComParameter, cleCompteComParameter, codeMajParameter, libDeviseParameter, libCompteComParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, cpteGLParameter, cleGLParameter, libCpteGLParameter, chargesParameter, mtTVAParameter, journalParameter, libjournalParameter, lect, msg, espionParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int DataImport_Insert(string accountNum, string denomination, Nullable<System.DateTime> dateSaisie, Nullable<double> amount, string employe, ObjectParameter lect, string language)
        {
            var accountNumParameter = accountNum != null ?
                new ObjectParameter("AccountNum", accountNum) :
                new ObjectParameter("AccountNum", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var dateSaisieParameter = dateSaisie.HasValue ?
                new ObjectParameter("DateSaisie", dateSaisie) :
                new ObjectParameter("DateSaisie", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DataImport_Insert", accountNumParameter, denominationParameter, dateSaisieParameter, amountParameter, employeParameter, lect, languageParameter);
        }
    
        public virtual int DataImport_STORDER(string accountNum, string type, string denomination, Nullable<System.DateTime> dateSaisie, Nullable<double> amount, string employe, ObjectParameter lect, string agence, string companyname, ObjectParameter errMsg, string language)
        {
            var accountNumParameter = accountNum != null ?
                new ObjectParameter("AccountNum", accountNum) :
                new ObjectParameter("AccountNum", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var dateSaisieParameter = dateSaisie.HasValue ?
                new ObjectParameter("DateSaisie", dateSaisie) :
                new ObjectParameter("DateSaisie", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var companynameParameter = companyname != null ?
                new ObjectParameter("companyname", companyname) :
                new ObjectParameter("companyname", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DataImport_STORDER", accountNumParameter, typeParameter, denominationParameter, dateSaisieParameter, amountParameter, employeParameter, lect, agenceParameter, companynameParameter, errMsg, languageParameter);
        }
    
        public virtual int DataImportxls_SAL(string accountNum, string type, string denomination, Nullable<System.DateTime> dateSaisie, Nullable<double> amount, Nullable<double> charge, Nullable<double> ln1, Nullable<double> lnInt1, Nullable<double> ln2, Nullable<double> lnInt2, Nullable<double> lnPay, Nullable<double> lnIntPay, Nullable<double> savings, string employe, ObjectParameter lect, string agence, string companyname, ObjectParameter errMsg, string language)
        {
            var accountNumParameter = accountNum != null ?
                new ObjectParameter("AccountNum", accountNum) :
                new ObjectParameter("AccountNum", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var dateSaisieParameter = dateSaisie.HasValue ?
                new ObjectParameter("DateSaisie", dateSaisie) :
                new ObjectParameter("DateSaisie", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var chargeParameter = charge.HasValue ?
                new ObjectParameter("Charge", charge) :
                new ObjectParameter("Charge", typeof(double));
    
            var ln1Parameter = ln1.HasValue ?
                new ObjectParameter("Ln1", ln1) :
                new ObjectParameter("Ln1", typeof(double));
    
            var lnInt1Parameter = lnInt1.HasValue ?
                new ObjectParameter("LnInt1", lnInt1) :
                new ObjectParameter("LnInt1", typeof(double));
    
            var ln2Parameter = ln2.HasValue ?
                new ObjectParameter("Ln2", ln2) :
                new ObjectParameter("Ln2", typeof(double));
    
            var lnInt2Parameter = lnInt2.HasValue ?
                new ObjectParameter("LnInt2", lnInt2) :
                new ObjectParameter("LnInt2", typeof(double));
    
            var lnPayParameter = lnPay.HasValue ?
                new ObjectParameter("LnPay", lnPay) :
                new ObjectParameter("LnPay", typeof(double));
    
            var lnIntPayParameter = lnIntPay.HasValue ?
                new ObjectParameter("LnIntPay", lnIntPay) :
                new ObjectParameter("LnIntPay", typeof(double));
    
            var savingsParameter = savings.HasValue ?
                new ObjectParameter("Savings", savings) :
                new ObjectParameter("Savings", typeof(double));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var companynameParameter = companyname != null ?
                new ObjectParameter("companyname", companyname) :
                new ObjectParameter("companyname", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DataImportxls_SAL", accountNumParameter, typeParameter, denominationParameter, dateSaisieParameter, amountParameter, chargeParameter, ln1Parameter, lnInt1Parameter, ln2Parameter, lnInt2Parameter, lnPayParameter, lnIntPayParameter, savingsParameter, employeParameter, lect, agenceParameter, companynameParameter, errMsg, languageParameter);
        }
    
        public virtual int DataImportxls_SAL3(string accountNum, string type, string denomination, Nullable<System.DateTime> dateSaisie, Nullable<double> amount, Nullable<double> charge, Nullable<double> ln1, Nullable<double> lnInt1, Nullable<double> ln2, Nullable<double> lnInt2, Nullable<double> ln3, Nullable<double> lnInt3, Nullable<double> ln4, Nullable<double> lnInt4, Nullable<double> lnPay, Nullable<double> lnIntPay, Nullable<double> savings, string employe, ObjectParameter lect, string agence, string companyname, ObjectParameter errMsg, string language)
        {
            var accountNumParameter = accountNum != null ?
                new ObjectParameter("AccountNum", accountNum) :
                new ObjectParameter("AccountNum", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var dateSaisieParameter = dateSaisie.HasValue ?
                new ObjectParameter("DateSaisie", dateSaisie) :
                new ObjectParameter("DateSaisie", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var chargeParameter = charge.HasValue ?
                new ObjectParameter("Charge", charge) :
                new ObjectParameter("Charge", typeof(double));
    
            var ln1Parameter = ln1.HasValue ?
                new ObjectParameter("Ln1", ln1) :
                new ObjectParameter("Ln1", typeof(double));
    
            var lnInt1Parameter = lnInt1.HasValue ?
                new ObjectParameter("LnInt1", lnInt1) :
                new ObjectParameter("LnInt1", typeof(double));
    
            var ln2Parameter = ln2.HasValue ?
                new ObjectParameter("Ln2", ln2) :
                new ObjectParameter("Ln2", typeof(double));
    
            var lnInt2Parameter = lnInt2.HasValue ?
                new ObjectParameter("LnInt2", lnInt2) :
                new ObjectParameter("LnInt2", typeof(double));
    
            var ln3Parameter = ln3.HasValue ?
                new ObjectParameter("Ln3", ln3) :
                new ObjectParameter("Ln3", typeof(double));
    
            var lnInt3Parameter = lnInt3.HasValue ?
                new ObjectParameter("LnInt3", lnInt3) :
                new ObjectParameter("LnInt3", typeof(double));
    
            var ln4Parameter = ln4.HasValue ?
                new ObjectParameter("Ln4", ln4) :
                new ObjectParameter("Ln4", typeof(double));
    
            var lnInt4Parameter = lnInt4.HasValue ?
                new ObjectParameter("LnInt4", lnInt4) :
                new ObjectParameter("LnInt4", typeof(double));
    
            var lnPayParameter = lnPay.HasValue ?
                new ObjectParameter("LnPay", lnPay) :
                new ObjectParameter("LnPay", typeof(double));
    
            var lnIntPayParameter = lnIntPay.HasValue ?
                new ObjectParameter("LnIntPay", lnIntPay) :
                new ObjectParameter("LnIntPay", typeof(double));
    
            var savingsParameter = savings.HasValue ?
                new ObjectParameter("Savings", savings) :
                new ObjectParameter("Savings", typeof(double));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var companynameParameter = companyname != null ?
                new ObjectParameter("companyname", companyname) :
                new ObjectParameter("companyname", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DataImportxls_SAL3", accountNumParameter, typeParameter, denominationParameter, dateSaisieParameter, amountParameter, chargeParameter, ln1Parameter, lnInt1Parameter, ln2Parameter, lnInt2Parameter, ln3Parameter, lnInt3Parameter, ln4Parameter, lnInt4Parameter, lnPayParameter, lnIntPayParameter, savingsParameter, employeParameter, lect, agenceParameter, companynameParameter, errMsg, languageParameter);
        }
    
        public virtual int DataImportxls_SALSIMPLE(string accountNum, string type, string denomination, Nullable<System.DateTime> dateSaisie, Nullable<double> amount, string employe, ObjectParameter lect, string agence, string companyname, ObjectParameter errMsg, string distribution, string language)
        {
            var accountNumParameter = accountNum != null ?
                new ObjectParameter("AccountNum", accountNum) :
                new ObjectParameter("AccountNum", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var dateSaisieParameter = dateSaisie.HasValue ?
                new ObjectParameter("DateSaisie", dateSaisie) :
                new ObjectParameter("DateSaisie", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var companynameParameter = companyname != null ?
                new ObjectParameter("companyname", companyname) :
                new ObjectParameter("companyname", typeof(string));
    
            var distributionParameter = distribution != null ?
                new ObjectParameter("distribution", distribution) :
                new ObjectParameter("distribution", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DataImportxls_SALSIMPLE", accountNumParameter, typeParameter, denominationParameter, dateSaisieParameter, amountParameter, employeParameter, lect, agenceParameter, companynameParameter, errMsg, distributionParameter, languageParameter);
        }
    
        public virtual int DB_CR_PRODUCT(Nullable<int> dEBIT_PRODUCT, Nullable<int> cREDIT_PRODUCT, string svagence, Nullable<double> mIN_BAL, Nullable<double> mAX_BAL, ObjectParameter lect, ObjectParameter msg, string computerName, string employe, string language)
        {
            var dEBIT_PRODUCTParameter = dEBIT_PRODUCT.HasValue ?
                new ObjectParameter("DEBIT_PRODUCT", dEBIT_PRODUCT) :
                new ObjectParameter("DEBIT_PRODUCT", typeof(int));
    
            var cREDIT_PRODUCTParameter = cREDIT_PRODUCT.HasValue ?
                new ObjectParameter("CREDIT_PRODUCT", cREDIT_PRODUCT) :
                new ObjectParameter("CREDIT_PRODUCT", typeof(int));
    
            var svagenceParameter = svagence != null ?
                new ObjectParameter("Svagence", svagence) :
                new ObjectParameter("Svagence", typeof(string));
    
            var mIN_BALParameter = mIN_BAL.HasValue ?
                new ObjectParameter("MIN_BAL", mIN_BAL) :
                new ObjectParameter("MIN_BAL", typeof(double));
    
            var mAX_BALParameter = mAX_BAL.HasValue ?
                new ObjectParameter("MAX_BAL", mAX_BAL) :
                new ObjectParameter("MAX_BAL", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DB_CR_PRODUCT", dEBIT_PRODUCTParameter, cREDIT_PRODUCTParameter, svagenceParameter, mIN_BALParameter, mAX_BALParameter, lect, msg, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int DefCle(Nullable<decimal> banque, Nullable<decimal> agence, Nullable<decimal> compte, ObjectParameter varDefCle, ObjectParameter lect)
        {
            var banqueParameter = banque.HasValue ?
                new ObjectParameter("Banque", banque) :
                new ObjectParameter("Banque", typeof(decimal));
    
            var agenceParameter = agence.HasValue ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(decimal));
    
            var compteParameter = compte.HasValue ?
                new ObjectParameter("Compte", compte) :
                new ObjectParameter("Compte", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DefCle", banqueParameter, agenceParameter, compteParameter, varDefCle, lect);
        }
    
        public virtual int DELETE_STANDINDORDER(Nullable<decimal> pD_SERIES, string pC_EMPLOYE, string pC_REFERENCE, string computerName, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var pD_SERIESParameter = pD_SERIES.HasValue ?
                new ObjectParameter("PD_SERIES", pD_SERIES) :
                new ObjectParameter("PD_SERIES", typeof(decimal));
    
            var pC_EMPLOYEParameter = pC_EMPLOYE != null ?
                new ObjectParameter("PC_EMPLOYE", pC_EMPLOYE) :
                new ObjectParameter("PC_EMPLOYE", typeof(string));
    
            var pC_REFERENCEParameter = pC_REFERENCE != null ?
                new ObjectParameter("PC_REFERENCE", pC_REFERENCE) :
                new ObjectParameter("PC_REFERENCE", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_STANDINDORDER", pD_SERIESParameter, pC_EMPLOYEParameter, pC_REFERENCEParameter, computerNameParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int DeleteAuditTableBanking()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAuditTableBanking");
        }
    
        public virtual int DeleteAuditTableComptaBk()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAuditTableComptaBk");
        }
    
        public virtual int DeleteDailyAuditTableBanking()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDailyAuditTableBanking");
        }
    
        public virtual int DeleteDailyAuditTableComptaBk()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDailyAuditTableComptaBk");
        }
    
        public virtual int DepotGeneral(string agence, string client, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string cpteCol, string prefixtxnno, string integritystatus, Nullable<System.DateTime> dateTransfert, string caisse, string cpteCaisse, string cleCpteCaisse, string codeMaj, string libCaisse, string libDevise, string libCpteCaisse, string cpteColClt, string cleColClt, string libCpteColClt, Nullable<double> chequeCharges, Nullable<double> counterChequeCharge, Nullable<double> oDFormFee, Nullable<double> txTVA, Nullable<double> fraisExceptionel, string withdrawalType, string lOC, string chktype, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, Nullable<decimal> v_Series, ObjectParameter msg, string computerName, string language, Nullable<int> limitCashier, string cobacID, string currentBr, string libCurrentBr)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var chequeChargesParameter = chequeCharges.HasValue ?
                new ObjectParameter("ChequeCharges", chequeCharges) :
                new ObjectParameter("ChequeCharges", typeof(double));
    
            var counterChequeChargeParameter = counterChequeCharge.HasValue ?
                new ObjectParameter("CounterChequeCharge", counterChequeCharge) :
                new ObjectParameter("CounterChequeCharge", typeof(double));
    
            var oDFormFeeParameter = oDFormFee.HasValue ?
                new ObjectParameter("ODFormFee", oDFormFee) :
                new ObjectParameter("ODFormFee", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var fraisExceptionelParameter = fraisExceptionel.HasValue ?
                new ObjectParameter("FraisExceptionel", fraisExceptionel) :
                new ObjectParameter("FraisExceptionel", typeof(double));
    
            var withdrawalTypeParameter = withdrawalType != null ?
                new ObjectParameter("WithdrawalType", withdrawalType) :
                new ObjectParameter("WithdrawalType", typeof(string));
    
            var lOCParameter = lOC != null ?
                new ObjectParameter("LOC", lOC) :
                new ObjectParameter("LOC", typeof(string));
    
            var chktypeParameter = chktype != null ?
                new ObjectParameter("Chktype", chktype) :
                new ObjectParameter("Chktype", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var v_SeriesParameter = v_Series.HasValue ?
                new ObjectParameter("V_Series", v_Series) :
                new ObjectParameter("V_Series", typeof(decimal));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var limitCashierParameter = limitCashier.HasValue ?
                new ObjectParameter("LimitCashier", limitCashier) :
                new ObjectParameter("LimitCashier", typeof(int));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            var currentBrParameter = currentBr != null ?
                new ObjectParameter("CurrentBr", currentBr) :
                new ObjectParameter("CurrentBr", typeof(string));
    
            var libCurrentBrParameter = libCurrentBr != null ?
                new ObjectParameter("LibCurrentBr", libCurrentBr) :
                new ObjectParameter("LibCurrentBr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DepotGeneral", agenceParameter, clientParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, cpteColParameter, prefixtxnnoParameter, integritystatusParameter, dateTransfertParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, codeMajParameter, libCaisseParameter, libDeviseParameter, libCpteCaisseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, chequeChargesParameter, counterChequeChargeParameter, oDFormFeeParameter, txTVAParameter, fraisExceptionelParameter, withdrawalTypeParameter, lOCParameter, chktypeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, v_SeriesParameter, msg, computerNameParameter, languageParameter, limitCashierParameter, cobacIDParameter, currentBrParameter, libCurrentBrParameter);
        }
    
        public virtual int DepotGeneralNew(string agence, string client, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string cpteCol, string prefixtxnno, string integritystatus, Nullable<System.DateTime> dateTransfert, string caisse, string cpteCaisse, string cleCpteCaisse, string codeMaj, string libCaisse, string libDevise, string libCpteCaisse, string cpteColClt, string cleColClt, string libCpteColClt, Nullable<double> chequeCharges, Nullable<double> counterChequeCharge, Nullable<double> oDFormFee, Nullable<double> txTVA, Nullable<double> fraisExceptionel, string withdrawalType, string lOC, string chktype, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, Nullable<decimal> v_Series, ObjectParameter msg, string computerName, string language, Nullable<int> limitCashier, string cobacID, string currentBr, string libCurrentBr, string doneBy)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var chequeChargesParameter = chequeCharges.HasValue ?
                new ObjectParameter("ChequeCharges", chequeCharges) :
                new ObjectParameter("ChequeCharges", typeof(double));
    
            var counterChequeChargeParameter = counterChequeCharge.HasValue ?
                new ObjectParameter("CounterChequeCharge", counterChequeCharge) :
                new ObjectParameter("CounterChequeCharge", typeof(double));
    
            var oDFormFeeParameter = oDFormFee.HasValue ?
                new ObjectParameter("ODFormFee", oDFormFee) :
                new ObjectParameter("ODFormFee", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var fraisExceptionelParameter = fraisExceptionel.HasValue ?
                new ObjectParameter("FraisExceptionel", fraisExceptionel) :
                new ObjectParameter("FraisExceptionel", typeof(double));
    
            var withdrawalTypeParameter = withdrawalType != null ?
                new ObjectParameter("WithdrawalType", withdrawalType) :
                new ObjectParameter("WithdrawalType", typeof(string));
    
            var lOCParameter = lOC != null ?
                new ObjectParameter("LOC", lOC) :
                new ObjectParameter("LOC", typeof(string));
    
            var chktypeParameter = chktype != null ?
                new ObjectParameter("Chktype", chktype) :
                new ObjectParameter("Chktype", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var v_SeriesParameter = v_Series.HasValue ?
                new ObjectParameter("V_Series", v_Series) :
                new ObjectParameter("V_Series", typeof(decimal));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var limitCashierParameter = limitCashier.HasValue ?
                new ObjectParameter("LimitCashier", limitCashier) :
                new ObjectParameter("LimitCashier", typeof(int));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            var currentBrParameter = currentBr != null ?
                new ObjectParameter("CurrentBr", currentBr) :
                new ObjectParameter("CurrentBr", typeof(string));
    
            var libCurrentBrParameter = libCurrentBr != null ?
                new ObjectParameter("LibCurrentBr", libCurrentBr) :
                new ObjectParameter("LibCurrentBr", typeof(string));
    
            var doneByParameter = doneBy != null ?
                new ObjectParameter("DoneBy", doneBy) :
                new ObjectParameter("DoneBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DepotGeneralNew", agenceParameter, clientParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, cpteColParameter, prefixtxnnoParameter, integritystatusParameter, dateTransfertParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, codeMajParameter, libCaisseParameter, libDeviseParameter, libCpteCaisseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, chequeChargesParameter, counterChequeChargeParameter, oDFormFeeParameter, txTVAParameter, fraisExceptionelParameter, withdrawalTypeParameter, lOCParameter, chktypeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, v_SeriesParameter, msg, computerNameParameter, languageParameter, limitCashierParameter, cobacIDParameter, currentBrParameter, libCurrentBrParameter, doneByParameter);
        }
    
        public virtual int DepotGeneralPerAcc(string agence, string clientw, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string cpteCol, string prefixtxnno, string integritystatus, Nullable<System.DateTime> dateTransfert, string caisse, string cpteCaisse, string cleCpteCaisse, string codeMaj, string libCaisse, string libDevise, string libCpteCaisse, string cpteColClt, string cleColClt, string libCpteColClt, Nullable<double> chequeCharges, Nullable<double> counterChequeCharge, Nullable<double> oDFormFee, Nullable<double> txTVA, Nullable<double> fraisExceptionel, string withdrawalType, string lOC, string chktype, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, Nullable<decimal> v_Series, ObjectParameter msg, string computerName, string language, Nullable<int> limitCashier, string cobacID, string currentBr, string libCurrentBr)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientwParameter = clientw != null ?
                new ObjectParameter("Clientw", clientw) :
                new ObjectParameter("Clientw", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var chequeChargesParameter = chequeCharges.HasValue ?
                new ObjectParameter("ChequeCharges", chequeCharges) :
                new ObjectParameter("ChequeCharges", typeof(double));
    
            var counterChequeChargeParameter = counterChequeCharge.HasValue ?
                new ObjectParameter("CounterChequeCharge", counterChequeCharge) :
                new ObjectParameter("CounterChequeCharge", typeof(double));
    
            var oDFormFeeParameter = oDFormFee.HasValue ?
                new ObjectParameter("ODFormFee", oDFormFee) :
                new ObjectParameter("ODFormFee", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var fraisExceptionelParameter = fraisExceptionel.HasValue ?
                new ObjectParameter("FraisExceptionel", fraisExceptionel) :
                new ObjectParameter("FraisExceptionel", typeof(double));
    
            var withdrawalTypeParameter = withdrawalType != null ?
                new ObjectParameter("WithdrawalType", withdrawalType) :
                new ObjectParameter("WithdrawalType", typeof(string));
    
            var lOCParameter = lOC != null ?
                new ObjectParameter("LOC", lOC) :
                new ObjectParameter("LOC", typeof(string));
    
            var chktypeParameter = chktype != null ?
                new ObjectParameter("Chktype", chktype) :
                new ObjectParameter("Chktype", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var v_SeriesParameter = v_Series.HasValue ?
                new ObjectParameter("V_Series", v_Series) :
                new ObjectParameter("V_Series", typeof(decimal));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var limitCashierParameter = limitCashier.HasValue ?
                new ObjectParameter("LimitCashier", limitCashier) :
                new ObjectParameter("LimitCashier", typeof(int));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            var currentBrParameter = currentBr != null ?
                new ObjectParameter("CurrentBr", currentBr) :
                new ObjectParameter("CurrentBr", typeof(string));
    
            var libCurrentBrParameter = libCurrentBr != null ?
                new ObjectParameter("LibCurrentBr", libCurrentBr) :
                new ObjectParameter("LibCurrentBr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DepotGeneralPerAcc", agenceParameter, clientwParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, cpteColParameter, prefixtxnnoParameter, integritystatusParameter, dateTransfertParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, codeMajParameter, libCaisseParameter, libDeviseParameter, libCpteCaisseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, chequeChargesParameter, counterChequeChargeParameter, oDFormFeeParameter, txTVAParameter, fraisExceptionelParameter, withdrawalTypeParameter, lOCParameter, chktypeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, v_SeriesParameter, msg, computerNameParameter, languageParameter, limitCashierParameter, cobacIDParameter, currentBrParameter, libCurrentBrParameter);
        }
    
        public virtual int DepotGeneralPerAccNew(string agence, string clientw, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string cpteCol, string prefixtxnno, string integritystatus, Nullable<System.DateTime> dateTransfert, string caisse, string cpteCaisse, string cleCpteCaisse, string codeMaj, string libCaisse, string libDevise, string libCpteCaisse, string cpteColClt, string cleColClt, string libCpteColClt, Nullable<double> chequeCharges, Nullable<double> counterChequeCharge, Nullable<double> oDFormFee, Nullable<double> txTVA, Nullable<double> fraisExceptionel, string withdrawalType, string lOC, string chktype, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, Nullable<decimal> v_Series, ObjectParameter msg, string computerName, string language, Nullable<int> limitCashier, string cobacID, string currentBr, string libCurrentBr, string doneBy)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientwParameter = clientw != null ?
                new ObjectParameter("Clientw", clientw) :
                new ObjectParameter("Clientw", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var chequeChargesParameter = chequeCharges.HasValue ?
                new ObjectParameter("ChequeCharges", chequeCharges) :
                new ObjectParameter("ChequeCharges", typeof(double));
    
            var counterChequeChargeParameter = counterChequeCharge.HasValue ?
                new ObjectParameter("CounterChequeCharge", counterChequeCharge) :
                new ObjectParameter("CounterChequeCharge", typeof(double));
    
            var oDFormFeeParameter = oDFormFee.HasValue ?
                new ObjectParameter("ODFormFee", oDFormFee) :
                new ObjectParameter("ODFormFee", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var fraisExceptionelParameter = fraisExceptionel.HasValue ?
                new ObjectParameter("FraisExceptionel", fraisExceptionel) :
                new ObjectParameter("FraisExceptionel", typeof(double));
    
            var withdrawalTypeParameter = withdrawalType != null ?
                new ObjectParameter("WithdrawalType", withdrawalType) :
                new ObjectParameter("WithdrawalType", typeof(string));
    
            var lOCParameter = lOC != null ?
                new ObjectParameter("LOC", lOC) :
                new ObjectParameter("LOC", typeof(string));
    
            var chktypeParameter = chktype != null ?
                new ObjectParameter("Chktype", chktype) :
                new ObjectParameter("Chktype", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var v_SeriesParameter = v_Series.HasValue ?
                new ObjectParameter("V_Series", v_Series) :
                new ObjectParameter("V_Series", typeof(decimal));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var limitCashierParameter = limitCashier.HasValue ?
                new ObjectParameter("LimitCashier", limitCashier) :
                new ObjectParameter("LimitCashier", typeof(int));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            var currentBrParameter = currentBr != null ?
                new ObjectParameter("CurrentBr", currentBr) :
                new ObjectParameter("CurrentBr", typeof(string));
    
            var libCurrentBrParameter = libCurrentBr != null ?
                new ObjectParameter("LibCurrentBr", libCurrentBr) :
                new ObjectParameter("LibCurrentBr", typeof(string));
    
            var doneByParameter = doneBy != null ?
                new ObjectParameter("DoneBy", doneBy) :
                new ObjectParameter("DoneBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DepotGeneralPerAccNew", agenceParameter, clientwParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, cpteColParameter, prefixtxnnoParameter, integritystatusParameter, dateTransfertParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, codeMajParameter, libCaisseParameter, libDeviseParameter, libCpteCaisseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, chequeChargesParameter, counterChequeChargeParameter, oDFormFeeParameter, txTVAParameter, fraisExceptionelParameter, withdrawalTypeParameter, lOCParameter, chktypeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, v_SeriesParameter, msg, computerNameParameter, languageParameter, limitCashierParameter, cobacIDParameter, currentBrParameter, libCurrentBrParameter, doneByParameter);
        }
    
        public virtual int DepotGeneralPerAccW(string agence, string clientw, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string cpteCol, string prefixtxnno, string integritystatus, Nullable<System.DateTime> dateTransfert, string caisse, string cpteCaisse, string cleCpteCaisse, string codeMaj, string libCaisse, string libDevise, string libCpteCaisse, string cpteColClt, string cleColClt, string libCpteColClt, Nullable<double> chequeCharges, Nullable<double> counterChequeCharge, Nullable<double> oDFormFee, Nullable<double> txTVA, Nullable<double> fraisExceptionel, string withdrawalType, string lOC, string chktype, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, Nullable<decimal> v_Series, ObjectParameter msg, string computerName, string language, Nullable<int> limitCashier, string cobacID, string currentBr, string libCurrentBr)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientwParameter = clientw != null ?
                new ObjectParameter("Clientw", clientw) :
                new ObjectParameter("Clientw", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var chequeChargesParameter = chequeCharges.HasValue ?
                new ObjectParameter("ChequeCharges", chequeCharges) :
                new ObjectParameter("ChequeCharges", typeof(double));
    
            var counterChequeChargeParameter = counterChequeCharge.HasValue ?
                new ObjectParameter("CounterChequeCharge", counterChequeCharge) :
                new ObjectParameter("CounterChequeCharge", typeof(double));
    
            var oDFormFeeParameter = oDFormFee.HasValue ?
                new ObjectParameter("ODFormFee", oDFormFee) :
                new ObjectParameter("ODFormFee", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var fraisExceptionelParameter = fraisExceptionel.HasValue ?
                new ObjectParameter("FraisExceptionel", fraisExceptionel) :
                new ObjectParameter("FraisExceptionel", typeof(double));
    
            var withdrawalTypeParameter = withdrawalType != null ?
                new ObjectParameter("WithdrawalType", withdrawalType) :
                new ObjectParameter("WithdrawalType", typeof(string));
    
            var lOCParameter = lOC != null ?
                new ObjectParameter("LOC", lOC) :
                new ObjectParameter("LOC", typeof(string));
    
            var chktypeParameter = chktype != null ?
                new ObjectParameter("Chktype", chktype) :
                new ObjectParameter("Chktype", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var v_SeriesParameter = v_Series.HasValue ?
                new ObjectParameter("V_Series", v_Series) :
                new ObjectParameter("V_Series", typeof(decimal));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var limitCashierParameter = limitCashier.HasValue ?
                new ObjectParameter("LimitCashier", limitCashier) :
                new ObjectParameter("LimitCashier", typeof(int));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            var currentBrParameter = currentBr != null ?
                new ObjectParameter("CurrentBr", currentBr) :
                new ObjectParameter("CurrentBr", typeof(string));
    
            var libCurrentBrParameter = libCurrentBr != null ?
                new ObjectParameter("LibCurrentBr", libCurrentBr) :
                new ObjectParameter("LibCurrentBr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DepotGeneralPerAccW", agenceParameter, clientwParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, cpteColParameter, prefixtxnnoParameter, integritystatusParameter, dateTransfertParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, codeMajParameter, libCaisseParameter, libDeviseParameter, libCpteCaisseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, chequeChargesParameter, counterChequeChargeParameter, oDFormFeeParameter, txTVAParameter, fraisExceptionelParameter, withdrawalTypeParameter, lOCParameter, chktypeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, v_SeriesParameter, msg, computerNameParameter, languageParameter, limitCashierParameter, cobacIDParameter, currentBrParameter, libCurrentBrParameter);
        }
    
        public virtual int DepotGeneralPerAccWNew(string agence, string clientw, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string cpteCol, string prefixtxnno, string integritystatus, Nullable<System.DateTime> dateTransfert, string caisse, string cpteCaisse, string cleCpteCaisse, string codeMaj, string libCaisse, string libDevise, string libCpteCaisse, string cpteColClt, string cleColClt, string libCpteColClt, Nullable<double> chequeCharges, Nullable<double> counterChequeCharge, Nullable<double> oDFormFee, Nullable<double> txTVA, Nullable<double> fraisExceptionel, string withdrawalType, string lOC, string chktype, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, Nullable<decimal> v_Series, ObjectParameter msg, string computerName, string language, Nullable<int> limitCashier, string cobacID, string currentBr, string libCurrentBr, string doneBy)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientwParameter = clientw != null ?
                new ObjectParameter("Clientw", clientw) :
                new ObjectParameter("Clientw", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var chequeChargesParameter = chequeCharges.HasValue ?
                new ObjectParameter("ChequeCharges", chequeCharges) :
                new ObjectParameter("ChequeCharges", typeof(double));
    
            var counterChequeChargeParameter = counterChequeCharge.HasValue ?
                new ObjectParameter("CounterChequeCharge", counterChequeCharge) :
                new ObjectParameter("CounterChequeCharge", typeof(double));
    
            var oDFormFeeParameter = oDFormFee.HasValue ?
                new ObjectParameter("ODFormFee", oDFormFee) :
                new ObjectParameter("ODFormFee", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var fraisExceptionelParameter = fraisExceptionel.HasValue ?
                new ObjectParameter("FraisExceptionel", fraisExceptionel) :
                new ObjectParameter("FraisExceptionel", typeof(double));
    
            var withdrawalTypeParameter = withdrawalType != null ?
                new ObjectParameter("WithdrawalType", withdrawalType) :
                new ObjectParameter("WithdrawalType", typeof(string));
    
            var lOCParameter = lOC != null ?
                new ObjectParameter("LOC", lOC) :
                new ObjectParameter("LOC", typeof(string));
    
            var chktypeParameter = chktype != null ?
                new ObjectParameter("Chktype", chktype) :
                new ObjectParameter("Chktype", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var v_SeriesParameter = v_Series.HasValue ?
                new ObjectParameter("V_Series", v_Series) :
                new ObjectParameter("V_Series", typeof(decimal));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var limitCashierParameter = limitCashier.HasValue ?
                new ObjectParameter("LimitCashier", limitCashier) :
                new ObjectParameter("LimitCashier", typeof(int));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            var currentBrParameter = currentBr != null ?
                new ObjectParameter("CurrentBr", currentBr) :
                new ObjectParameter("CurrentBr", typeof(string));
    
            var libCurrentBrParameter = libCurrentBr != null ?
                new ObjectParameter("LibCurrentBr", libCurrentBr) :
                new ObjectParameter("LibCurrentBr", typeof(string));
    
            var doneByParameter = doneBy != null ?
                new ObjectParameter("DoneBy", doneBy) :
                new ObjectParameter("DoneBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DepotGeneralPerAccWNew", agenceParameter, clientwParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, cpteColParameter, prefixtxnnoParameter, integritystatusParameter, dateTransfertParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, codeMajParameter, libCaisseParameter, libDeviseParameter, libCpteCaisseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, chequeChargesParameter, counterChequeChargeParameter, oDFormFeeParameter, txTVAParameter, fraisExceptionelParameter, withdrawalTypeParameter, lOCParameter, chktypeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, v_SeriesParameter, msg, computerNameParameter, languageParameter, limitCashierParameter, cobacIDParameter, currentBrParameter, libCurrentBrParameter, doneByParameter);
        }
    
        public virtual int DepotGeneralPerAccWUpd(string agence, string clientw, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string cpteCol, string prefixtxnno, string integritystatus, Nullable<System.DateTime> dateTransfert, string caisse, string cpteCaisse, string cleCpteCaisse, string codeMaj, string libCaisse, string libDevise, string libCpteCaisse, string cpteColClt, string cleColClt, string libCpteColClt, Nullable<double> chequeCharges, Nullable<double> counterChequeCharge, Nullable<double> oDFormFee, Nullable<double> txTVA, Nullable<double> fraisExceptionel, string withdrawalType, string lOC, string chktype, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, Nullable<decimal> v_Series, ObjectParameter msg, string computerName, string language, Nullable<int> limitCashier, string cobacID, string currentBr, string libCurrentBr, string doneBy)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientwParameter = clientw != null ?
                new ObjectParameter("Clientw", clientw) :
                new ObjectParameter("Clientw", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var chequeChargesParameter = chequeCharges.HasValue ?
                new ObjectParameter("ChequeCharges", chequeCharges) :
                new ObjectParameter("ChequeCharges", typeof(double));
    
            var counterChequeChargeParameter = counterChequeCharge.HasValue ?
                new ObjectParameter("CounterChequeCharge", counterChequeCharge) :
                new ObjectParameter("CounterChequeCharge", typeof(double));
    
            var oDFormFeeParameter = oDFormFee.HasValue ?
                new ObjectParameter("ODFormFee", oDFormFee) :
                new ObjectParameter("ODFormFee", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var fraisExceptionelParameter = fraisExceptionel.HasValue ?
                new ObjectParameter("FraisExceptionel", fraisExceptionel) :
                new ObjectParameter("FraisExceptionel", typeof(double));
    
            var withdrawalTypeParameter = withdrawalType != null ?
                new ObjectParameter("WithdrawalType", withdrawalType) :
                new ObjectParameter("WithdrawalType", typeof(string));
    
            var lOCParameter = lOC != null ?
                new ObjectParameter("LOC", lOC) :
                new ObjectParameter("LOC", typeof(string));
    
            var chktypeParameter = chktype != null ?
                new ObjectParameter("Chktype", chktype) :
                new ObjectParameter("Chktype", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var v_SeriesParameter = v_Series.HasValue ?
                new ObjectParameter("V_Series", v_Series) :
                new ObjectParameter("V_Series", typeof(decimal));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var limitCashierParameter = limitCashier.HasValue ?
                new ObjectParameter("LimitCashier", limitCashier) :
                new ObjectParameter("LimitCashier", typeof(int));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            var currentBrParameter = currentBr != null ?
                new ObjectParameter("CurrentBr", currentBr) :
                new ObjectParameter("CurrentBr", typeof(string));
    
            var libCurrentBrParameter = libCurrentBr != null ?
                new ObjectParameter("LibCurrentBr", libCurrentBr) :
                new ObjectParameter("LibCurrentBr", typeof(string));
    
            var doneByParameter = doneBy != null ?
                new ObjectParameter("DoneBy", doneBy) :
                new ObjectParameter("DoneBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DepotGeneralPerAccWUpd", agenceParameter, clientwParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, cpteColParameter, prefixtxnnoParameter, integritystatusParameter, dateTransfertParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, codeMajParameter, libCaisseParameter, libDeviseParameter, libCpteCaisseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, chequeChargesParameter, counterChequeChargeParameter, oDFormFeeParameter, txTVAParameter, fraisExceptionelParameter, withdrawalTypeParameter, lOCParameter, chktypeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, v_SeriesParameter, msg, computerNameParameter, languageParameter, limitCashierParameter, cobacIDParameter, currentBrParameter, libCurrentBrParameter, doneByParameter);
        }
    
        public virtual int DepotGeneralW(string agence, string client, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string cpteCol, string prefixtxnno, string integritystatus, Nullable<System.DateTime> dateTransfert, string caisse, string cpteCaisse, string cleCpteCaisse, string codeMaj, string libCaisse, string libDevise, string libCpteCaisse, string cpteColClt, string cleColClt, string libCpteColClt, Nullable<double> chequeCharges, Nullable<double> counterChequeCharge, Nullable<double> oDFormFee, Nullable<double> txTVA, Nullable<double> fraisExceptionel, string withdrawalType, string lOC, string chktype, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, Nullable<decimal> v_Series, ObjectParameter msg, string computerName, string language, Nullable<int> limitCashier, string cobacID, string currentBr, string libCurrentBr)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var chequeChargesParameter = chequeCharges.HasValue ?
                new ObjectParameter("ChequeCharges", chequeCharges) :
                new ObjectParameter("ChequeCharges", typeof(double));
    
            var counterChequeChargeParameter = counterChequeCharge.HasValue ?
                new ObjectParameter("CounterChequeCharge", counterChequeCharge) :
                new ObjectParameter("CounterChequeCharge", typeof(double));
    
            var oDFormFeeParameter = oDFormFee.HasValue ?
                new ObjectParameter("ODFormFee", oDFormFee) :
                new ObjectParameter("ODFormFee", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var fraisExceptionelParameter = fraisExceptionel.HasValue ?
                new ObjectParameter("FraisExceptionel", fraisExceptionel) :
                new ObjectParameter("FraisExceptionel", typeof(double));
    
            var withdrawalTypeParameter = withdrawalType != null ?
                new ObjectParameter("WithdrawalType", withdrawalType) :
                new ObjectParameter("WithdrawalType", typeof(string));
    
            var lOCParameter = lOC != null ?
                new ObjectParameter("LOC", lOC) :
                new ObjectParameter("LOC", typeof(string));
    
            var chktypeParameter = chktype != null ?
                new ObjectParameter("Chktype", chktype) :
                new ObjectParameter("Chktype", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var v_SeriesParameter = v_Series.HasValue ?
                new ObjectParameter("V_Series", v_Series) :
                new ObjectParameter("V_Series", typeof(decimal));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var limitCashierParameter = limitCashier.HasValue ?
                new ObjectParameter("LimitCashier", limitCashier) :
                new ObjectParameter("LimitCashier", typeof(int));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            var currentBrParameter = currentBr != null ?
                new ObjectParameter("CurrentBr", currentBr) :
                new ObjectParameter("CurrentBr", typeof(string));
    
            var libCurrentBrParameter = libCurrentBr != null ?
                new ObjectParameter("LibCurrentBr", libCurrentBr) :
                new ObjectParameter("LibCurrentBr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DepotGeneralW", agenceParameter, clientParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, cpteColParameter, prefixtxnnoParameter, integritystatusParameter, dateTransfertParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, codeMajParameter, libCaisseParameter, libDeviseParameter, libCpteCaisseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, chequeChargesParameter, counterChequeChargeParameter, oDFormFeeParameter, txTVAParameter, fraisExceptionelParameter, withdrawalTypeParameter, lOCParameter, chktypeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, v_SeriesParameter, msg, computerNameParameter, languageParameter, limitCashierParameter, cobacIDParameter, currentBrParameter, libCurrentBrParameter);
        }
    
        public virtual int DepotGeneralWNew(string agence, string client, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string cpteCol, string prefixtxnno, string integritystatus, Nullable<System.DateTime> dateTransfert, string caisse, string cpteCaisse, string cleCpteCaisse, string codeMaj, string libCaisse, string libDevise, string libCpteCaisse, string cpteColClt, string cleColClt, string libCpteColClt, Nullable<double> chequeCharges, Nullable<double> counterChequeCharge, Nullable<double> oDFormFee, Nullable<double> txTVA, Nullable<double> fraisExceptionel, string withdrawalType, string lOC, string chktype, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, Nullable<decimal> v_Series, ObjectParameter msg, string computerName, string language, Nullable<int> limitCashier, string cobacID, string currentBr, string libCurrentBr, string doneBy)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var chequeChargesParameter = chequeCharges.HasValue ?
                new ObjectParameter("ChequeCharges", chequeCharges) :
                new ObjectParameter("ChequeCharges", typeof(double));
    
            var counterChequeChargeParameter = counterChequeCharge.HasValue ?
                new ObjectParameter("CounterChequeCharge", counterChequeCharge) :
                new ObjectParameter("CounterChequeCharge", typeof(double));
    
            var oDFormFeeParameter = oDFormFee.HasValue ?
                new ObjectParameter("ODFormFee", oDFormFee) :
                new ObjectParameter("ODFormFee", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var fraisExceptionelParameter = fraisExceptionel.HasValue ?
                new ObjectParameter("FraisExceptionel", fraisExceptionel) :
                new ObjectParameter("FraisExceptionel", typeof(double));
    
            var withdrawalTypeParameter = withdrawalType != null ?
                new ObjectParameter("WithdrawalType", withdrawalType) :
                new ObjectParameter("WithdrawalType", typeof(string));
    
            var lOCParameter = lOC != null ?
                new ObjectParameter("LOC", lOC) :
                new ObjectParameter("LOC", typeof(string));
    
            var chktypeParameter = chktype != null ?
                new ObjectParameter("Chktype", chktype) :
                new ObjectParameter("Chktype", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var v_SeriesParameter = v_Series.HasValue ?
                new ObjectParameter("V_Series", v_Series) :
                new ObjectParameter("V_Series", typeof(decimal));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var limitCashierParameter = limitCashier.HasValue ?
                new ObjectParameter("LimitCashier", limitCashier) :
                new ObjectParameter("LimitCashier", typeof(int));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            var currentBrParameter = currentBr != null ?
                new ObjectParameter("CurrentBr", currentBr) :
                new ObjectParameter("CurrentBr", typeof(string));
    
            var libCurrentBrParameter = libCurrentBr != null ?
                new ObjectParameter("LibCurrentBr", libCurrentBr) :
                new ObjectParameter("LibCurrentBr", typeof(string));
    
            var doneByParameter = doneBy != null ?
                new ObjectParameter("DoneBy", doneBy) :
                new ObjectParameter("DoneBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DepotGeneralWNew", agenceParameter, clientParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, cpteColParameter, prefixtxnnoParameter, integritystatusParameter, dateTransfertParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, codeMajParameter, libCaisseParameter, libDeviseParameter, libCpteCaisseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, chequeChargesParameter, counterChequeChargeParameter, oDFormFeeParameter, txTVAParameter, fraisExceptionelParameter, withdrawalTypeParameter, lOCParameter, chktypeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, v_SeriesParameter, msg, computerNameParameter, languageParameter, limitCashierParameter, cobacIDParameter, currentBrParameter, libCurrentBrParameter, doneByParameter);
        }
    
        public virtual int DepotGeneralWUpd(string agence, string client, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string cpteCol, string prefixtxnno, string integritystatus, Nullable<System.DateTime> dateTransfert, string caisse, string cpteCaisse, string cleCpteCaisse, string codeMaj, string libCaisse, string libDevise, string libCpteCaisse, string cpteColClt, string cleColClt, string libCpteColClt, Nullable<double> chequeCharges, Nullable<double> counterChequeCharge, Nullable<double> oDFormFee, Nullable<double> txTVA, Nullable<double> fraisExceptionel, string withdrawalType, string lOC, string chktype, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, Nullable<decimal> v_Series, ObjectParameter msg, string computerName, string language, Nullable<int> limitCashier, string cobacID, string currentBr, string libCurrentBr, string doneBy)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var chequeChargesParameter = chequeCharges.HasValue ?
                new ObjectParameter("ChequeCharges", chequeCharges) :
                new ObjectParameter("ChequeCharges", typeof(double));
    
            var counterChequeChargeParameter = counterChequeCharge.HasValue ?
                new ObjectParameter("CounterChequeCharge", counterChequeCharge) :
                new ObjectParameter("CounterChequeCharge", typeof(double));
    
            var oDFormFeeParameter = oDFormFee.HasValue ?
                new ObjectParameter("ODFormFee", oDFormFee) :
                new ObjectParameter("ODFormFee", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var fraisExceptionelParameter = fraisExceptionel.HasValue ?
                new ObjectParameter("FraisExceptionel", fraisExceptionel) :
                new ObjectParameter("FraisExceptionel", typeof(double));
    
            var withdrawalTypeParameter = withdrawalType != null ?
                new ObjectParameter("WithdrawalType", withdrawalType) :
                new ObjectParameter("WithdrawalType", typeof(string));
    
            var lOCParameter = lOC != null ?
                new ObjectParameter("LOC", lOC) :
                new ObjectParameter("LOC", typeof(string));
    
            var chktypeParameter = chktype != null ?
                new ObjectParameter("Chktype", chktype) :
                new ObjectParameter("Chktype", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var v_SeriesParameter = v_Series.HasValue ?
                new ObjectParameter("V_Series", v_Series) :
                new ObjectParameter("V_Series", typeof(decimal));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var limitCashierParameter = limitCashier.HasValue ?
                new ObjectParameter("LimitCashier", limitCashier) :
                new ObjectParameter("LimitCashier", typeof(int));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            var currentBrParameter = currentBr != null ?
                new ObjectParameter("CurrentBr", currentBr) :
                new ObjectParameter("CurrentBr", typeof(string));
    
            var libCurrentBrParameter = libCurrentBr != null ?
                new ObjectParameter("LibCurrentBr", libCurrentBr) :
                new ObjectParameter("LibCurrentBr", typeof(string));
    
            var doneByParameter = doneBy != null ?
                new ObjectParameter("DoneBy", doneBy) :
                new ObjectParameter("DoneBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DepotGeneralWUpd", agenceParameter, clientParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, cpteColParameter, prefixtxnnoParameter, integritystatusParameter, dateTransfertParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, codeMajParameter, libCaisseParameter, libDeviseParameter, libCpteCaisseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, chequeChargesParameter, counterChequeChargeParameter, oDFormFeeParameter, txTVAParameter, fraisExceptionelParameter, withdrawalTypeParameter, lOCParameter, chktypeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, v_SeriesParameter, msg, computerNameParameter, languageParameter, limitCashierParameter, cobacIDParameter, currentBrParameter, libCurrentBrParameter, doneByParameter);
        }
    
        public virtual ObjectResult<DepotTerme_Deletebis_Result> DepotTerme_Deletebis(Nullable<short> agence, string numeroContrat, ObjectParameter lect, Nullable<int> employe, string computername, string libEmploye, string language)
        {
            var agenceParameter = agence.HasValue ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(short));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(int));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DepotTerme_Deletebis_Result>("DepotTerme_Deletebis", agenceParameter, numeroContratParameter, lect, employeParameter, computernameParameter, libEmployeParameter, languageParameter);
        }
    
        public virtual ObjectResult<DepotTerme_Filter_Result> DepotTerme_Filter(Nullable<short> intFilterMode, string agence, string numeroContrat, ObjectParameter countfield)
        {
            var intFilterModeParameter = intFilterMode.HasValue ?
                new ObjectParameter("IntFilterMode", intFilterMode) :
                new ObjectParameter("IntFilterMode", typeof(short));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DepotTerme_Filter_Result>("DepotTerme_Filter", intFilterModeParameter, agenceParameter, numeroContratParameter, countfield);
        }
    
        public virtual ObjectResult<DepotTerme_Insert_S_Tran_Result> DepotTerme_Insert_S_Tran(string agence, string client, string denomination, string cpteJumelleCC, Nullable<short> catCpte, string cpteJumelleCpteTerm, string cpteGL, string cleCpte, string libCpteGl, Nullable<double> montant, Nullable<double> tauxInt, Nullable<double> txTVA, Nullable<double> txTPRCM, Nullable<System.DateTime> dateContrat, Nullable<System.DateTime> datePriseEffet, Nullable<short> duree, Nullable<System.DateTime> dateDernCalInt, Nullable<double> cumulIntMensuel, Nullable<double> interetCouru, Nullable<double> interetMois, string modePayInt, string dateExpiration, string numeroContrat, Nullable<short> nbreSign, Nullable<System.DateTime> dateCptaTerm, Nullable<System.DateTime> dateCptaInteret, Nullable<System.DateTime> dateCptaRemb, string statut, string calfrequency, Nullable<System.DateTime> dateRemb, Nullable<double> tauxPenalite, Nullable<double> mtPenalite, Nullable<short> nbreReconduit, Nullable<System.DateTime> dateDerniereRecond, string libAgence, string libCatCpte, string description, Nullable<System.DateTime> dateCreation, string employe, string libEmploye, Nullable<System.DateTime> dateVals, Nullable<System.DateTime> dateCptaMens, string txnNo, Nullable<double> mtInteret, Nullable<double> supInt, Nullable<System.DateTime> dateTransfert, Nullable<int> dureecourue, Nullable<double> currentintamount, string caisseCpte, ObjectParameter lect, Nullable<double> tPRCM, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var cpteJumelleCpteTermParameter = cpteJumelleCpteTerm != null ?
                new ObjectParameter("CpteJumelleCpteTerm", cpteJumelleCpteTerm) :
                new ObjectParameter("CpteJumelleCpteTerm", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var libCpteGlParameter = libCpteGl != null ?
                new ObjectParameter("LibCpteGl", libCpteGl) :
                new ObjectParameter("LibCpteGl", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var tauxIntParameter = tauxInt.HasValue ?
                new ObjectParameter("TauxInt", tauxInt) :
                new ObjectParameter("TauxInt", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var txTPRCMParameter = txTPRCM.HasValue ?
                new ObjectParameter("TxTPRCM", txTPRCM) :
                new ObjectParameter("TxTPRCM", typeof(double));
    
            var dateContratParameter = dateContrat.HasValue ?
                new ObjectParameter("DateContrat", dateContrat) :
                new ObjectParameter("DateContrat", typeof(System.DateTime));
    
            var datePriseEffetParameter = datePriseEffet.HasValue ?
                new ObjectParameter("DatePriseEffet", datePriseEffet) :
                new ObjectParameter("DatePriseEffet", typeof(System.DateTime));
    
            var dureeParameter = duree.HasValue ?
                new ObjectParameter("Duree", duree) :
                new ObjectParameter("Duree", typeof(short));
    
            var dateDernCalIntParameter = dateDernCalInt.HasValue ?
                new ObjectParameter("DateDernCalInt", dateDernCalInt) :
                new ObjectParameter("DateDernCalInt", typeof(System.DateTime));
    
            var cumulIntMensuelParameter = cumulIntMensuel.HasValue ?
                new ObjectParameter("CumulIntMensuel", cumulIntMensuel) :
                new ObjectParameter("CumulIntMensuel", typeof(double));
    
            var interetCouruParameter = interetCouru.HasValue ?
                new ObjectParameter("InteretCouru", interetCouru) :
                new ObjectParameter("InteretCouru", typeof(double));
    
            var interetMoisParameter = interetMois.HasValue ?
                new ObjectParameter("InteretMois", interetMois) :
                new ObjectParameter("InteretMois", typeof(double));
    
            var modePayIntParameter = modePayInt != null ?
                new ObjectParameter("ModePayInt", modePayInt) :
                new ObjectParameter("ModePayInt", typeof(string));
    
            var dateExpirationParameter = dateExpiration != null ?
                new ObjectParameter("DateExpiration", dateExpiration) :
                new ObjectParameter("DateExpiration", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var nbreSignParameter = nbreSign.HasValue ?
                new ObjectParameter("NbreSign", nbreSign) :
                new ObjectParameter("NbreSign", typeof(short));
    
            var dateCptaTermParameter = dateCptaTerm.HasValue ?
                new ObjectParameter("DateCptaTerm", dateCptaTerm) :
                new ObjectParameter("DateCptaTerm", typeof(System.DateTime));
    
            var dateCptaInteretParameter = dateCptaInteret.HasValue ?
                new ObjectParameter("DateCptaInteret", dateCptaInteret) :
                new ObjectParameter("DateCptaInteret", typeof(System.DateTime));
    
            var dateCptaRembParameter = dateCptaRemb.HasValue ?
                new ObjectParameter("DateCptaRemb", dateCptaRemb) :
                new ObjectParameter("DateCptaRemb", typeof(System.DateTime));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var calfrequencyParameter = calfrequency != null ?
                new ObjectParameter("calfrequency", calfrequency) :
                new ObjectParameter("calfrequency", typeof(string));
    
            var dateRembParameter = dateRemb.HasValue ?
                new ObjectParameter("DateRemb", dateRemb) :
                new ObjectParameter("DateRemb", typeof(System.DateTime));
    
            var tauxPenaliteParameter = tauxPenalite.HasValue ?
                new ObjectParameter("TauxPenalite", tauxPenalite) :
                new ObjectParameter("TauxPenalite", typeof(double));
    
            var mtPenaliteParameter = mtPenalite.HasValue ?
                new ObjectParameter("MtPenalite", mtPenalite) :
                new ObjectParameter("MtPenalite", typeof(double));
    
            var nbreReconduitParameter = nbreReconduit.HasValue ?
                new ObjectParameter("NbreReconduit", nbreReconduit) :
                new ObjectParameter("NbreReconduit", typeof(short));
    
            var dateDerniereRecondParameter = dateDerniereRecond.HasValue ?
                new ObjectParameter("DateDerniereRecond", dateDerniereRecond) :
                new ObjectParameter("DateDerniereRecond", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libCatCpteParameter = libCatCpte != null ?
                new ObjectParameter("LibCatCpte", libCatCpte) :
                new ObjectParameter("LibCatCpte", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var dateValsParameter = dateVals.HasValue ?
                new ObjectParameter("DateVals", dateVals) :
                new ObjectParameter("DateVals", typeof(System.DateTime));
    
            var dateCptaMensParameter = dateCptaMens.HasValue ?
                new ObjectParameter("DateCptaMens", dateCptaMens) :
                new ObjectParameter("DateCptaMens", typeof(System.DateTime));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var mtInteretParameter = mtInteret.HasValue ?
                new ObjectParameter("MtInteret", mtInteret) :
                new ObjectParameter("MtInteret", typeof(double));
    
            var supIntParameter = supInt.HasValue ?
                new ObjectParameter("SupInt", supInt) :
                new ObjectParameter("SupInt", typeof(double));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var dureecourueParameter = dureecourue.HasValue ?
                new ObjectParameter("dureecourue", dureecourue) :
                new ObjectParameter("dureecourue", typeof(int));
    
            var currentintamountParameter = currentintamount.HasValue ?
                new ObjectParameter("currentintamount", currentintamount) :
                new ObjectParameter("currentintamount", typeof(double));
    
            var caisseCpteParameter = caisseCpte != null ?
                new ObjectParameter("CaisseCpte", caisseCpte) :
                new ObjectParameter("CaisseCpte", typeof(string));
    
            var tPRCMParameter = tPRCM.HasValue ?
                new ObjectParameter("TPRCM", tPRCM) :
                new ObjectParameter("TPRCM", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DepotTerme_Insert_S_Tran_Result>("DepotTerme_Insert_S_Tran", agenceParameter, clientParameter, denominationParameter, cpteJumelleCCParameter, catCpteParameter, cpteJumelleCpteTermParameter, cpteGLParameter, cleCpteParameter, libCpteGlParameter, montantParameter, tauxIntParameter, txTVAParameter, txTPRCMParameter, dateContratParameter, datePriseEffetParameter, dureeParameter, dateDernCalIntParameter, cumulIntMensuelParameter, interetCouruParameter, interetMoisParameter, modePayIntParameter, dateExpirationParameter, numeroContratParameter, nbreSignParameter, dateCptaTermParameter, dateCptaInteretParameter, dateCptaRembParameter, statutParameter, calfrequencyParameter, dateRembParameter, tauxPenaliteParameter, mtPenaliteParameter, nbreReconduitParameter, dateDerniereRecondParameter, libAgenceParameter, libCatCpteParameter, descriptionParameter, dateCreationParameter, employeParameter, libEmployeParameter, dateValsParameter, dateCptaMensParameter, txnNoParameter, mtInteretParameter, supIntParameter, dateTransfertParameter, dureecourueParameter, currentintamountParameter, caisseCpteParameter, lect, tPRCMParameter, languageParameter);
        }
    
        public virtual ObjectResult<DepotTerme_Update_Result> DepotTerme_Update(string agence, Nullable<decimal> client, string denomination, string cpteJumelleCC, Nullable<short> catCpte, string cpteJumelleCpteTerm, string cpteGL, string cleCpte, string libCpteGl, Nullable<double> montant, Nullable<double> tauxInt, Nullable<double> txTVA, Nullable<double> txTPRCM, Nullable<System.DateTime> dateContrat, Nullable<System.DateTime> datePriseEffet, Nullable<short> duree, Nullable<System.DateTime> dateDernCalInt, Nullable<double> cumulIntMensuel, Nullable<double> interetCouru, Nullable<double> interetMois, string modePayInt, Nullable<System.DateTime> dateExpiration, string numeroContrat, Nullable<short> nbreSign, Nullable<System.DateTime> dateCptaTerm, Nullable<System.DateTime> dateCptaInteret, Nullable<System.DateTime> dateCptaRemb, string statut, string calfrequency, Nullable<System.DateTime> dateRemb, Nullable<double> tauxPenalite, Nullable<double> mtPenalite, Nullable<short> nbreReconduit, Nullable<System.DateTime> dateDerniereRecond, string libAgence, string libCatCpte, string description, Nullable<System.DateTime> dateCreation, string employe, string libEmploye, Nullable<System.DateTime> dateVals, Nullable<System.DateTime> dateCptaMens, string txnNo, Nullable<double> mtInteret, Nullable<double> supInt, Nullable<System.DateTime> dateTransfert, Nullable<int> dureecourue, Nullable<double> currentintamount, ObjectParameter lect, ObjectParameter msg, string cpteCaisse, Nullable<double> svTprcm, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client.HasValue ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(decimal));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var cpteJumelleCpteTermParameter = cpteJumelleCpteTerm != null ?
                new ObjectParameter("CpteJumelleCpteTerm", cpteJumelleCpteTerm) :
                new ObjectParameter("CpteJumelleCpteTerm", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var libCpteGlParameter = libCpteGl != null ?
                new ObjectParameter("LibCpteGl", libCpteGl) :
                new ObjectParameter("LibCpteGl", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var tauxIntParameter = tauxInt.HasValue ?
                new ObjectParameter("TauxInt", tauxInt) :
                new ObjectParameter("TauxInt", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var txTPRCMParameter = txTPRCM.HasValue ?
                new ObjectParameter("TxTPRCM", txTPRCM) :
                new ObjectParameter("TxTPRCM", typeof(double));
    
            var dateContratParameter = dateContrat.HasValue ?
                new ObjectParameter("DateContrat", dateContrat) :
                new ObjectParameter("DateContrat", typeof(System.DateTime));
    
            var datePriseEffetParameter = datePriseEffet.HasValue ?
                new ObjectParameter("DatePriseEffet", datePriseEffet) :
                new ObjectParameter("DatePriseEffet", typeof(System.DateTime));
    
            var dureeParameter = duree.HasValue ?
                new ObjectParameter("Duree", duree) :
                new ObjectParameter("Duree", typeof(short));
    
            var dateDernCalIntParameter = dateDernCalInt.HasValue ?
                new ObjectParameter("DateDernCalInt", dateDernCalInt) :
                new ObjectParameter("DateDernCalInt", typeof(System.DateTime));
    
            var cumulIntMensuelParameter = cumulIntMensuel.HasValue ?
                new ObjectParameter("CumulIntMensuel", cumulIntMensuel) :
                new ObjectParameter("CumulIntMensuel", typeof(double));
    
            var interetCouruParameter = interetCouru.HasValue ?
                new ObjectParameter("InteretCouru", interetCouru) :
                new ObjectParameter("InteretCouru", typeof(double));
    
            var interetMoisParameter = interetMois.HasValue ?
                new ObjectParameter("InteretMois", interetMois) :
                new ObjectParameter("InteretMois", typeof(double));
    
            var modePayIntParameter = modePayInt != null ?
                new ObjectParameter("ModePayInt", modePayInt) :
                new ObjectParameter("ModePayInt", typeof(string));
    
            var dateExpirationParameter = dateExpiration.HasValue ?
                new ObjectParameter("DateExpiration", dateExpiration) :
                new ObjectParameter("DateExpiration", typeof(System.DateTime));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var nbreSignParameter = nbreSign.HasValue ?
                new ObjectParameter("NbreSign", nbreSign) :
                new ObjectParameter("NbreSign", typeof(short));
    
            var dateCptaTermParameter = dateCptaTerm.HasValue ?
                new ObjectParameter("DateCptaTerm", dateCptaTerm) :
                new ObjectParameter("DateCptaTerm", typeof(System.DateTime));
    
            var dateCptaInteretParameter = dateCptaInteret.HasValue ?
                new ObjectParameter("DateCptaInteret", dateCptaInteret) :
                new ObjectParameter("DateCptaInteret", typeof(System.DateTime));
    
            var dateCptaRembParameter = dateCptaRemb.HasValue ?
                new ObjectParameter("DateCptaRemb", dateCptaRemb) :
                new ObjectParameter("DateCptaRemb", typeof(System.DateTime));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var calfrequencyParameter = calfrequency != null ?
                new ObjectParameter("calfrequency", calfrequency) :
                new ObjectParameter("calfrequency", typeof(string));
    
            var dateRembParameter = dateRemb.HasValue ?
                new ObjectParameter("DateRemb", dateRemb) :
                new ObjectParameter("DateRemb", typeof(System.DateTime));
    
            var tauxPenaliteParameter = tauxPenalite.HasValue ?
                new ObjectParameter("TauxPenalite", tauxPenalite) :
                new ObjectParameter("TauxPenalite", typeof(double));
    
            var mtPenaliteParameter = mtPenalite.HasValue ?
                new ObjectParameter("MtPenalite", mtPenalite) :
                new ObjectParameter("MtPenalite", typeof(double));
    
            var nbreReconduitParameter = nbreReconduit.HasValue ?
                new ObjectParameter("NbreReconduit", nbreReconduit) :
                new ObjectParameter("NbreReconduit", typeof(short));
    
            var dateDerniereRecondParameter = dateDerniereRecond.HasValue ?
                new ObjectParameter("DateDerniereRecond", dateDerniereRecond) :
                new ObjectParameter("DateDerniereRecond", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libCatCpteParameter = libCatCpte != null ?
                new ObjectParameter("LibCatCpte", libCatCpte) :
                new ObjectParameter("LibCatCpte", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var dateValsParameter = dateVals.HasValue ?
                new ObjectParameter("DateVals", dateVals) :
                new ObjectParameter("DateVals", typeof(System.DateTime));
    
            var dateCptaMensParameter = dateCptaMens.HasValue ?
                new ObjectParameter("DateCptaMens", dateCptaMens) :
                new ObjectParameter("DateCptaMens", typeof(System.DateTime));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var mtInteretParameter = mtInteret.HasValue ?
                new ObjectParameter("MtInteret", mtInteret) :
                new ObjectParameter("MtInteret", typeof(double));
    
            var supIntParameter = supInt.HasValue ?
                new ObjectParameter("SupInt", supInt) :
                new ObjectParameter("SupInt", typeof(double));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var dureecourueParameter = dureecourue.HasValue ?
                new ObjectParameter("dureecourue", dureecourue) :
                new ObjectParameter("dureecourue", typeof(int));
    
            var currentintamountParameter = currentintamount.HasValue ?
                new ObjectParameter("currentintamount", currentintamount) :
                new ObjectParameter("currentintamount", typeof(double));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var svTprcmParameter = svTprcm.HasValue ?
                new ObjectParameter("SvTprcm", svTprcm) :
                new ObjectParameter("SvTprcm", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DepotTerme_Update_Result>("DepotTerme_Update", agenceParameter, clientParameter, denominationParameter, cpteJumelleCCParameter, catCpteParameter, cpteJumelleCpteTermParameter, cpteGLParameter, cleCpteParameter, libCpteGlParameter, montantParameter, tauxIntParameter, txTVAParameter, txTPRCMParameter, dateContratParameter, datePriseEffetParameter, dureeParameter, dateDernCalIntParameter, cumulIntMensuelParameter, interetCouruParameter, interetMoisParameter, modePayIntParameter, dateExpirationParameter, numeroContratParameter, nbreSignParameter, dateCptaTermParameter, dateCptaInteretParameter, dateCptaRembParameter, statutParameter, calfrequencyParameter, dateRembParameter, tauxPenaliteParameter, mtPenaliteParameter, nbreReconduitParameter, dateDerniereRecondParameter, libAgenceParameter, libCatCpteParameter, descriptionParameter, dateCreationParameter, employeParameter, libEmployeParameter, dateValsParameter, dateCptaMensParameter, txnNoParameter, mtInteretParameter, supIntParameter, dateTransfertParameter, dureecourueParameter, currentintamountParameter, lect, msg, cpteCaisseParameter, svTprcmParameter, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<DepotTerme_Update_S_Tran_Result> DepotTerme_Update_S_Tran(string agence, string client, string denomination, string cpteJumelleCC, Nullable<short> catCpte, string cpteJumelleCpteTerm, string cpteGL, string cleCpte, string libCpteGl, Nullable<double> montant, Nullable<double> tauxInt, Nullable<double> txTVA, Nullable<double> txTPRCM, Nullable<System.DateTime> dateContrat, Nullable<System.DateTime> datePriseEffet, Nullable<short> duree, Nullable<System.DateTime> dateDernCalInt, Nullable<double> cumulIntMensuel, Nullable<double> interetCouru, Nullable<double> interetMois, string modePayInt, Nullable<System.DateTime> dateExpiration, string numeroContrat, Nullable<short> nbreSign, Nullable<System.DateTime> dateCptaTerm, Nullable<System.DateTime> dateCptaInteret, Nullable<System.DateTime> dateCptaRemb, string statut, string calfrequency, Nullable<System.DateTime> dateRemb, Nullable<double> tauxPenalite, Nullable<double> mtPenalite, Nullable<short> nbreReconduit, Nullable<System.DateTime> dateDerniereRecond, string libAgence, string libCatCpte, string description, Nullable<System.DateTime> dateCreation, string employe, string libEmploye, Nullable<System.DateTime> dateVals, Nullable<System.DateTime> dateCptaMens, string txnNo, Nullable<double> mtInteret, Nullable<double> supInt, Nullable<System.DateTime> dateTransfert, Nullable<int> dureecourue, Nullable<double> currentintamount, ObjectParameter lect, ObjectParameter msg, string statutMarch, string statutJune, string statutSeptember, string statutDecember, string caisseCpte, Nullable<double> wMtTPRCM, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var cpteJumelleCpteTermParameter = cpteJumelleCpteTerm != null ?
                new ObjectParameter("CpteJumelleCpteTerm", cpteJumelleCpteTerm) :
                new ObjectParameter("CpteJumelleCpteTerm", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var libCpteGlParameter = libCpteGl != null ?
                new ObjectParameter("LibCpteGl", libCpteGl) :
                new ObjectParameter("LibCpteGl", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var tauxIntParameter = tauxInt.HasValue ?
                new ObjectParameter("TauxInt", tauxInt) :
                new ObjectParameter("TauxInt", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var txTPRCMParameter = txTPRCM.HasValue ?
                new ObjectParameter("TxTPRCM", txTPRCM) :
                new ObjectParameter("TxTPRCM", typeof(double));
    
            var dateContratParameter = dateContrat.HasValue ?
                new ObjectParameter("DateContrat", dateContrat) :
                new ObjectParameter("DateContrat", typeof(System.DateTime));
    
            var datePriseEffetParameter = datePriseEffet.HasValue ?
                new ObjectParameter("DatePriseEffet", datePriseEffet) :
                new ObjectParameter("DatePriseEffet", typeof(System.DateTime));
    
            var dureeParameter = duree.HasValue ?
                new ObjectParameter("Duree", duree) :
                new ObjectParameter("Duree", typeof(short));
    
            var dateDernCalIntParameter = dateDernCalInt.HasValue ?
                new ObjectParameter("DateDernCalInt", dateDernCalInt) :
                new ObjectParameter("DateDernCalInt", typeof(System.DateTime));
    
            var cumulIntMensuelParameter = cumulIntMensuel.HasValue ?
                new ObjectParameter("CumulIntMensuel", cumulIntMensuel) :
                new ObjectParameter("CumulIntMensuel", typeof(double));
    
            var interetCouruParameter = interetCouru.HasValue ?
                new ObjectParameter("InteretCouru", interetCouru) :
                new ObjectParameter("InteretCouru", typeof(double));
    
            var interetMoisParameter = interetMois.HasValue ?
                new ObjectParameter("InteretMois", interetMois) :
                new ObjectParameter("InteretMois", typeof(double));
    
            var modePayIntParameter = modePayInt != null ?
                new ObjectParameter("ModePayInt", modePayInt) :
                new ObjectParameter("ModePayInt", typeof(string));
    
            var dateExpirationParameter = dateExpiration.HasValue ?
                new ObjectParameter("DateExpiration", dateExpiration) :
                new ObjectParameter("DateExpiration", typeof(System.DateTime));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var nbreSignParameter = nbreSign.HasValue ?
                new ObjectParameter("NbreSign", nbreSign) :
                new ObjectParameter("NbreSign", typeof(short));
    
            var dateCptaTermParameter = dateCptaTerm.HasValue ?
                new ObjectParameter("DateCptaTerm", dateCptaTerm) :
                new ObjectParameter("DateCptaTerm", typeof(System.DateTime));
    
            var dateCptaInteretParameter = dateCptaInteret.HasValue ?
                new ObjectParameter("DateCptaInteret", dateCptaInteret) :
                new ObjectParameter("DateCptaInteret", typeof(System.DateTime));
    
            var dateCptaRembParameter = dateCptaRemb.HasValue ?
                new ObjectParameter("DateCptaRemb", dateCptaRemb) :
                new ObjectParameter("DateCptaRemb", typeof(System.DateTime));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var calfrequencyParameter = calfrequency != null ?
                new ObjectParameter("calfrequency", calfrequency) :
                new ObjectParameter("calfrequency", typeof(string));
    
            var dateRembParameter = dateRemb.HasValue ?
                new ObjectParameter("DateRemb", dateRemb) :
                new ObjectParameter("DateRemb", typeof(System.DateTime));
    
            var tauxPenaliteParameter = tauxPenalite.HasValue ?
                new ObjectParameter("TauxPenalite", tauxPenalite) :
                new ObjectParameter("TauxPenalite", typeof(double));
    
            var mtPenaliteParameter = mtPenalite.HasValue ?
                new ObjectParameter("MtPenalite", mtPenalite) :
                new ObjectParameter("MtPenalite", typeof(double));
    
            var nbreReconduitParameter = nbreReconduit.HasValue ?
                new ObjectParameter("NbreReconduit", nbreReconduit) :
                new ObjectParameter("NbreReconduit", typeof(short));
    
            var dateDerniereRecondParameter = dateDerniereRecond.HasValue ?
                new ObjectParameter("DateDerniereRecond", dateDerniereRecond) :
                new ObjectParameter("DateDerniereRecond", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libCatCpteParameter = libCatCpte != null ?
                new ObjectParameter("LibCatCpte", libCatCpte) :
                new ObjectParameter("LibCatCpte", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var dateValsParameter = dateVals.HasValue ?
                new ObjectParameter("DateVals", dateVals) :
                new ObjectParameter("DateVals", typeof(System.DateTime));
    
            var dateCptaMensParameter = dateCptaMens.HasValue ?
                new ObjectParameter("DateCptaMens", dateCptaMens) :
                new ObjectParameter("DateCptaMens", typeof(System.DateTime));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var mtInteretParameter = mtInteret.HasValue ?
                new ObjectParameter("MtInteret", mtInteret) :
                new ObjectParameter("MtInteret", typeof(double));
    
            var supIntParameter = supInt.HasValue ?
                new ObjectParameter("SupInt", supInt) :
                new ObjectParameter("SupInt", typeof(double));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var dureecourueParameter = dureecourue.HasValue ?
                new ObjectParameter("dureecourue", dureecourue) :
                new ObjectParameter("dureecourue", typeof(int));
    
            var currentintamountParameter = currentintamount.HasValue ?
                new ObjectParameter("currentintamount", currentintamount) :
                new ObjectParameter("currentintamount", typeof(double));
    
            var statutMarchParameter = statutMarch != null ?
                new ObjectParameter("StatutMarch", statutMarch) :
                new ObjectParameter("StatutMarch", typeof(string));
    
            var statutJuneParameter = statutJune != null ?
                new ObjectParameter("StatutJune", statutJune) :
                new ObjectParameter("StatutJune", typeof(string));
    
            var statutSeptemberParameter = statutSeptember != null ?
                new ObjectParameter("StatutSeptember", statutSeptember) :
                new ObjectParameter("StatutSeptember", typeof(string));
    
            var statutDecemberParameter = statutDecember != null ?
                new ObjectParameter("StatutDecember", statutDecember) :
                new ObjectParameter("StatutDecember", typeof(string));
    
            var caisseCpteParameter = caisseCpte != null ?
                new ObjectParameter("CaisseCpte", caisseCpte) :
                new ObjectParameter("CaisseCpte", typeof(string));
    
            var wMtTPRCMParameter = wMtTPRCM.HasValue ?
                new ObjectParameter("wMtTPRCM", wMtTPRCM) :
                new ObjectParameter("wMtTPRCM", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DepotTerme_Update_S_Tran_Result>("DepotTerme_Update_S_Tran", agenceParameter, clientParameter, denominationParameter, cpteJumelleCCParameter, catCpteParameter, cpteJumelleCpteTermParameter, cpteGLParameter, cleCpteParameter, libCpteGlParameter, montantParameter, tauxIntParameter, txTVAParameter, txTPRCMParameter, dateContratParameter, datePriseEffetParameter, dureeParameter, dateDernCalIntParameter, cumulIntMensuelParameter, interetCouruParameter, interetMoisParameter, modePayIntParameter, dateExpirationParameter, numeroContratParameter, nbreSignParameter, dateCptaTermParameter, dateCptaInteretParameter, dateCptaRembParameter, statutParameter, calfrequencyParameter, dateRembParameter, tauxPenaliteParameter, mtPenaliteParameter, nbreReconduitParameter, dateDerniereRecondParameter, libAgenceParameter, libCatCpteParameter, descriptionParameter, dateCreationParameter, employeParameter, libEmployeParameter, dateValsParameter, dateCptaMensParameter, txnNoParameter, mtInteretParameter, supIntParameter, dateTransfertParameter, dureecourueParameter, currentintamountParameter, lect, msg, statutMarchParameter, statutJuneParameter, statutSeptemberParameter, statutDecemberParameter, caisseCpteParameter, wMtTPRCMParameter, languageParameter);
        }
    
        public virtual ObjectResult<DepTerme_delete_Result> DepTerme_delete(string agence, string employe, string libAgence, string libEmploye, string numeroContrat, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DepTerme_delete_Result>("DepTerme_delete", agenceParameter, employeParameter, libAgenceParameter, libEmployeParameter, numeroContratParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<DepTerme_Update_Result> DepTerme_Update(string agence, string client, string denomination, string cpteJumelleCC, Nullable<short> catCpte, string cpteJumelleCpteTerm, string cpteGL, string cleCpte, string libCpteGl, Nullable<double> montant, Nullable<double> tauxInt, Nullable<double> txTVA, Nullable<double> txTPRCM, Nullable<System.DateTime> dateContrat, Nullable<System.DateTime> datePriseEffet, Nullable<short> duree, Nullable<System.DateTime> dateDernCalInt, Nullable<double> cumulIntMensuel, Nullable<double> interetCouru, Nullable<double> interetMois, string modePayInt, Nullable<System.DateTime> dateExpiration, string numeroContrat, Nullable<short> nbreSign, Nullable<System.DateTime> dateCptaTerm, Nullable<System.DateTime> dateCptaInteret, Nullable<System.DateTime> dateCptaRemb, string statut, string calfrequency, Nullable<System.DateTime> dateRemb, Nullable<double> tauxPenalite, Nullable<double> mtPenalite, Nullable<short> nbreReconduit, Nullable<System.DateTime> dateDerniereRecond, string libAgence, string libCatCpte, string description, Nullable<System.DateTime> dateCreation, string employe, string libEmploye, Nullable<System.DateTime> dateVals, Nullable<System.DateTime> dateCptaMens, string txnNo, Nullable<double> mtInteret, Nullable<double> supInt, Nullable<System.DateTime> dateTransfert, Nullable<int> dureecourue, Nullable<double> currentintamount, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var cpteJumelleCpteTermParameter = cpteJumelleCpteTerm != null ?
                new ObjectParameter("CpteJumelleCpteTerm", cpteJumelleCpteTerm) :
                new ObjectParameter("CpteJumelleCpteTerm", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var libCpteGlParameter = libCpteGl != null ?
                new ObjectParameter("LibCpteGl", libCpteGl) :
                new ObjectParameter("LibCpteGl", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var tauxIntParameter = tauxInt.HasValue ?
                new ObjectParameter("TauxInt", tauxInt) :
                new ObjectParameter("TauxInt", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var txTPRCMParameter = txTPRCM.HasValue ?
                new ObjectParameter("TxTPRCM", txTPRCM) :
                new ObjectParameter("TxTPRCM", typeof(double));
    
            var dateContratParameter = dateContrat.HasValue ?
                new ObjectParameter("DateContrat", dateContrat) :
                new ObjectParameter("DateContrat", typeof(System.DateTime));
    
            var datePriseEffetParameter = datePriseEffet.HasValue ?
                new ObjectParameter("DatePriseEffet", datePriseEffet) :
                new ObjectParameter("DatePriseEffet", typeof(System.DateTime));
    
            var dureeParameter = duree.HasValue ?
                new ObjectParameter("Duree", duree) :
                new ObjectParameter("Duree", typeof(short));
    
            var dateDernCalIntParameter = dateDernCalInt.HasValue ?
                new ObjectParameter("DateDernCalInt", dateDernCalInt) :
                new ObjectParameter("DateDernCalInt", typeof(System.DateTime));
    
            var cumulIntMensuelParameter = cumulIntMensuel.HasValue ?
                new ObjectParameter("CumulIntMensuel", cumulIntMensuel) :
                new ObjectParameter("CumulIntMensuel", typeof(double));
    
            var interetCouruParameter = interetCouru.HasValue ?
                new ObjectParameter("InteretCouru", interetCouru) :
                new ObjectParameter("InteretCouru", typeof(double));
    
            var interetMoisParameter = interetMois.HasValue ?
                new ObjectParameter("InteretMois", interetMois) :
                new ObjectParameter("InteretMois", typeof(double));
    
            var modePayIntParameter = modePayInt != null ?
                new ObjectParameter("ModePayInt", modePayInt) :
                new ObjectParameter("ModePayInt", typeof(string));
    
            var dateExpirationParameter = dateExpiration.HasValue ?
                new ObjectParameter("DateExpiration", dateExpiration) :
                new ObjectParameter("DateExpiration", typeof(System.DateTime));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var nbreSignParameter = nbreSign.HasValue ?
                new ObjectParameter("NbreSign", nbreSign) :
                new ObjectParameter("NbreSign", typeof(short));
    
            var dateCptaTermParameter = dateCptaTerm.HasValue ?
                new ObjectParameter("DateCptaTerm", dateCptaTerm) :
                new ObjectParameter("DateCptaTerm", typeof(System.DateTime));
    
            var dateCptaInteretParameter = dateCptaInteret.HasValue ?
                new ObjectParameter("DateCptaInteret", dateCptaInteret) :
                new ObjectParameter("DateCptaInteret", typeof(System.DateTime));
    
            var dateCptaRembParameter = dateCptaRemb.HasValue ?
                new ObjectParameter("DateCptaRemb", dateCptaRemb) :
                new ObjectParameter("DateCptaRemb", typeof(System.DateTime));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var calfrequencyParameter = calfrequency != null ?
                new ObjectParameter("calfrequency", calfrequency) :
                new ObjectParameter("calfrequency", typeof(string));
    
            var dateRembParameter = dateRemb.HasValue ?
                new ObjectParameter("DateRemb", dateRemb) :
                new ObjectParameter("DateRemb", typeof(System.DateTime));
    
            var tauxPenaliteParameter = tauxPenalite.HasValue ?
                new ObjectParameter("TauxPenalite", tauxPenalite) :
                new ObjectParameter("TauxPenalite", typeof(double));
    
            var mtPenaliteParameter = mtPenalite.HasValue ?
                new ObjectParameter("MtPenalite", mtPenalite) :
                new ObjectParameter("MtPenalite", typeof(double));
    
            var nbreReconduitParameter = nbreReconduit.HasValue ?
                new ObjectParameter("NbreReconduit", nbreReconduit) :
                new ObjectParameter("NbreReconduit", typeof(short));
    
            var dateDerniereRecondParameter = dateDerniereRecond.HasValue ?
                new ObjectParameter("DateDerniereRecond", dateDerniereRecond) :
                new ObjectParameter("DateDerniereRecond", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libCatCpteParameter = libCatCpte != null ?
                new ObjectParameter("LibCatCpte", libCatCpte) :
                new ObjectParameter("LibCatCpte", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var dateValsParameter = dateVals.HasValue ?
                new ObjectParameter("DateVals", dateVals) :
                new ObjectParameter("DateVals", typeof(System.DateTime));
    
            var dateCptaMensParameter = dateCptaMens.HasValue ?
                new ObjectParameter("DateCptaMens", dateCptaMens) :
                new ObjectParameter("DateCptaMens", typeof(System.DateTime));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var mtInteretParameter = mtInteret.HasValue ?
                new ObjectParameter("MtInteret", mtInteret) :
                new ObjectParameter("MtInteret", typeof(double));
    
            var supIntParameter = supInt.HasValue ?
                new ObjectParameter("SupInt", supInt) :
                new ObjectParameter("SupInt", typeof(double));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var dureecourueParameter = dureecourue.HasValue ?
                new ObjectParameter("dureecourue", dureecourue) :
                new ObjectParameter("dureecourue", typeof(int));
    
            var currentintamountParameter = currentintamount.HasValue ?
                new ObjectParameter("currentintamount", currentintamount) :
                new ObjectParameter("currentintamount", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DepTerme_Update_Result>("DepTerme_Update", agenceParameter, clientParameter, denominationParameter, cpteJumelleCCParameter, catCpteParameter, cpteJumelleCpteTermParameter, cpteGLParameter, cleCpteParameter, libCpteGlParameter, montantParameter, tauxIntParameter, txTVAParameter, txTPRCMParameter, dateContratParameter, datePriseEffetParameter, dureeParameter, dateDernCalIntParameter, cumulIntMensuelParameter, interetCouruParameter, interetMoisParameter, modePayIntParameter, dateExpirationParameter, numeroContratParameter, nbreSignParameter, dateCptaTermParameter, dateCptaInteretParameter, dateCptaRembParameter, statutParameter, calfrequencyParameter, dateRembParameter, tauxPenaliteParameter, mtPenaliteParameter, nbreReconduitParameter, dateDerniereRecondParameter, libAgenceParameter, libCatCpteParameter, descriptionParameter, dateCreationParameter, employeParameter, libEmployeParameter, dateValsParameter, dateCptaMensParameter, txnNoParameter, mtInteretParameter, supIntParameter, dateTransfertParameter, dureecourueParameter, currentintamountParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int DetMntDepotTerme(string centralBr, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, ObjectParameter mntDepotFinal, ObjectParameter msg, ObjectParameter lect, string language, string employe)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DetMntDepotTerme", centralBrParameter, dateDebutParameter, dateFinParameter, mntDepotFinal, msg, lect, languageParameter, employeParameter);
        }
    
        public virtual int Devise_Delete(string devcod, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var devcodParameter = devcod != null ?
                new ObjectParameter("devcod", devcod) :
                new ObjectParameter("devcod", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Devise_Delete", devcodParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int Devise_Insert(string devcod, string devsign, Nullable<System.DateTime> devdate, string employe, string devlib, Nullable<decimal> trv, string currentCurrency, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var devcodParameter = devcod != null ?
                new ObjectParameter("devcod", devcod) :
                new ObjectParameter("devcod", typeof(string));
    
            var devsignParameter = devsign != null ?
                new ObjectParameter("devsign", devsign) :
                new ObjectParameter("devsign", typeof(string));
    
            var devdateParameter = devdate.HasValue ?
                new ObjectParameter("devdate", devdate) :
                new ObjectParameter("devdate", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var devlibParameter = devlib != null ?
                new ObjectParameter("devlib", devlib) :
                new ObjectParameter("devlib", typeof(string));
    
            var trvParameter = trv.HasValue ?
                new ObjectParameter("trv", trv) :
                new ObjectParameter("trv", typeof(decimal));
    
            var currentCurrencyParameter = currentCurrency != null ?
                new ObjectParameter("CurrentCurrency", currentCurrency) :
                new ObjectParameter("CurrentCurrency", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Devise_Insert", devcodParameter, devsignParameter, devdateParameter, employeParameter, devlibParameter, trvParameter, currentCurrencyParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int Devise_Update(string devcod, string devsign, Nullable<System.DateTime> devdate, string employe, string devlib, Nullable<decimal> trv, string currentCurrency, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var devcodParameter = devcod != null ?
                new ObjectParameter("devcod", devcod) :
                new ObjectParameter("devcod", typeof(string));
    
            var devsignParameter = devsign != null ?
                new ObjectParameter("devsign", devsign) :
                new ObjectParameter("devsign", typeof(string));
    
            var devdateParameter = devdate.HasValue ?
                new ObjectParameter("devdate", devdate) :
                new ObjectParameter("devdate", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var devlibParameter = devlib != null ?
                new ObjectParameter("devlib", devlib) :
                new ObjectParameter("devlib", typeof(string));
    
            var trvParameter = trv.HasValue ?
                new ObjectParameter("trv", trv) :
                new ObjectParameter("trv", typeof(decimal));
    
            var currentCurrencyParameter = currentCurrency != null ?
                new ObjectParameter("CurrentCurrency", currentCurrency) :
                new ObjectParameter("CurrentCurrency", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Devise_Update", devcodParameter, devsignParameter, devdateParameter, employeParameter, devlibParameter, trvParameter, currentCurrencyParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int difbackfront(string agence, Nullable<System.DateTime> dateTrait, string cpte, string cpteJumelle)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var dateTraitParameter = dateTrait.HasValue ?
                new ObjectParameter("DateTrait", dateTrait) :
                new ObjectParameter("DateTrait", typeof(System.DateTime));
    
            var cpteParameter = cpte != null ?
                new ObjectParameter("Cpte", cpte) :
                new ObjectParameter("Cpte", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("difbackfront", agenceParameter, dateTraitParameter, cpteParameter, cpteJumelleParameter);
        }
    
        public virtual int difbackfrontbyCpteCol(Nullable<int> agence, Nullable<System.DateTime> dateTrait, string cpte)
        {
            var agenceParameter = agence.HasValue ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(int));
    
            var dateTraitParameter = dateTrait.HasValue ?
                new ObjectParameter("DateTrait", dateTrait) :
                new ObjectParameter("DateTrait", typeof(System.DateTime));
    
            var cpteParameter = cpte != null ?
                new ObjectParameter("Cpte", cpte) :
                new ObjectParameter("Cpte", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("difbackfrontbyCpteCol", agenceParameter, dateTraitParameter, cpteParameter);
        }
    
        public virtual int Document_Delete(string agence, string cpteJumelle, Nullable<decimal> documentId, string employe, string libEmploye, string computername, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(decimal));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Document_Delete", agenceParameter, cpteJumelleParameter, documentIdParameter, employeParameter, libEmployeParameter, computernameParameter, lect, languageParameter);
        }
    
        public virtual int Document_Filter(Nullable<short> intFilterMode, string cpteJumelle, Nullable<decimal> documentId, ObjectParameter countfield)
        {
            var intFilterModeParameter = intFilterMode.HasValue ?
                new ObjectParameter("IntFilterMode", intFilterMode) :
                new ObjectParameter("IntFilterMode", typeof(short));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Document_Filter", intFilterModeParameter, cpteJumelleParameter, documentIdParameter, countfield);
        }
    
        public virtual int Duplicata(string agence, string client, string cpteJumelle, string denomination, Nullable<System.DateTime> dateOperation, Nullable<double> debit, Nullable<double> credit, string refOperation, string employe, string libEmploye, string libAgence, string description, string caisse, string libCaisse, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, string computerName, string enteteFr, string enteteEn, Nullable<int> typeDup, ObjectParameter lect)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var enteteFrParameter = enteteFr != null ?
                new ObjectParameter("enteteFr", enteteFr) :
                new ObjectParameter("enteteFr", typeof(string));
    
            var enteteEnParameter = enteteEn != null ?
                new ObjectParameter("enteteEn", enteteEn) :
                new ObjectParameter("enteteEn", typeof(string));
    
            var typeDupParameter = typeDup.HasValue ?
                new ObjectParameter("typeDup", typeDup) :
                new ObjectParameter("typeDup", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Duplicata", agenceParameter, clientParameter, cpteJumelleParameter, denominationParameter, dateOperationParameter, debitParameter, creditParameter, refOperationParameter, employeParameter, libEmployeParameter, libAgenceParameter, descriptionParameter, caisseParameter, libCaisseParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, computerNameParameter, enteteFrParameter, enteteEnParameter, typeDupParameter, lect);
        }
    
        public virtual int DuplicataNew(string agence, string client, string cpteJumelle, string denomination, Nullable<System.DateTime> dateOperation, Nullable<double> debit, Nullable<double> credit, string refOperation, string employe, string libEmploye, string libAgence, string description, string caisse, string libCaisse, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, string computerName, string enteteFr, string enteteEn, Nullable<int> typeDup, ObjectParameter lect, string representative)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var enteteFrParameter = enteteFr != null ?
                new ObjectParameter("enteteFr", enteteFr) :
                new ObjectParameter("enteteFr", typeof(string));
    
            var enteteEnParameter = enteteEn != null ?
                new ObjectParameter("enteteEn", enteteEn) :
                new ObjectParameter("enteteEn", typeof(string));
    
            var typeDupParameter = typeDup.HasValue ?
                new ObjectParameter("typeDup", typeDup) :
                new ObjectParameter("typeDup", typeof(int));
    
            var representativeParameter = representative != null ?
                new ObjectParameter("representative", representative) :
                new ObjectParameter("representative", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DuplicataNew", agenceParameter, clientParameter, cpteJumelleParameter, denominationParameter, dateOperationParameter, debitParameter, creditParameter, refOperationParameter, employeParameter, libEmployeParameter, libAgenceParameter, descriptionParameter, caisseParameter, libCaisseParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, computerNameParameter, enteteFrParameter, enteteEnParameter, typeDupParameter, lect, representativeParameter);
        }
    
        public virtual int EcrireFAsset(string zAgence, string zLibAgence, string zDevise, string zCodeGroupe, string zLibelleGroupe, string zCodeDetail, string zLibelleDetail, Nullable<double> zGrossAmount1, Nullable<double> zGrossAmount2, Nullable<double> zDepreciation1, Nullable<double> zDepreciation2, Nullable<System.DateTime> zDateDebut, Nullable<System.DateTime> zDateFin, ObjectParameter message, ObjectParameter lecture, string employe, string language)
        {
            var zAgenceParameter = zAgence != null ?
                new ObjectParameter("ZAgence", zAgence) :
                new ObjectParameter("ZAgence", typeof(string));
    
            var zLibAgenceParameter = zLibAgence != null ?
                new ObjectParameter("zLibAgence", zLibAgence) :
                new ObjectParameter("zLibAgence", typeof(string));
    
            var zDeviseParameter = zDevise != null ?
                new ObjectParameter("ZDevise", zDevise) :
                new ObjectParameter("ZDevise", typeof(string));
    
            var zCodeGroupeParameter = zCodeGroupe != null ?
                new ObjectParameter("zCodeGroupe", zCodeGroupe) :
                new ObjectParameter("zCodeGroupe", typeof(string));
    
            var zLibelleGroupeParameter = zLibelleGroupe != null ?
                new ObjectParameter("zLibelleGroupe", zLibelleGroupe) :
                new ObjectParameter("zLibelleGroupe", typeof(string));
    
            var zCodeDetailParameter = zCodeDetail != null ?
                new ObjectParameter("zCodeDetail", zCodeDetail) :
                new ObjectParameter("zCodeDetail", typeof(string));
    
            var zLibelleDetailParameter = zLibelleDetail != null ?
                new ObjectParameter("zLibelleDetail", zLibelleDetail) :
                new ObjectParameter("zLibelleDetail", typeof(string));
    
            var zGrossAmount1Parameter = zGrossAmount1.HasValue ?
                new ObjectParameter("zGrossAmount1", zGrossAmount1) :
                new ObjectParameter("zGrossAmount1", typeof(double));
    
            var zGrossAmount2Parameter = zGrossAmount2.HasValue ?
                new ObjectParameter("zGrossAmount2", zGrossAmount2) :
                new ObjectParameter("zGrossAmount2", typeof(double));
    
            var zDepreciation1Parameter = zDepreciation1.HasValue ?
                new ObjectParameter("zDepreciation1", zDepreciation1) :
                new ObjectParameter("zDepreciation1", typeof(double));
    
            var zDepreciation2Parameter = zDepreciation2.HasValue ?
                new ObjectParameter("zDepreciation2", zDepreciation2) :
                new ObjectParameter("zDepreciation2", typeof(double));
    
            var zDateDebutParameter = zDateDebut.HasValue ?
                new ObjectParameter("zDateDebut", zDateDebut) :
                new ObjectParameter("zDateDebut", typeof(System.DateTime));
    
            var zDateFinParameter = zDateFin.HasValue ?
                new ObjectParameter("zDateFin", zDateFin) :
                new ObjectParameter("zDateFin", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EcrireFAsset", zAgenceParameter, zLibAgenceParameter, zDeviseParameter, zCodeGroupeParameter, zLibelleGroupeParameter, zCodeDetailParameter, zLibelleDetailParameter, zGrossAmount1Parameter, zGrossAmount2Parameter, zDepreciation1Parameter, zDepreciation2Parameter, zDateDebutParameter, zDateFinParameter, message, lecture, employeParameter, languageParameter);
        }
    
        public virtual int EcrireFLiabilities(string zAgence, string zLibAgence, string zDevise, string zCodeGroupe, string zLibelleGroupe, string zCodeDetail, string zLibelleDetail, Nullable<double> zGrossAmount1, Nullable<double> zGrossAmount2, Nullable<System.DateTime> zDateDebut, Nullable<System.DateTime> zDateFin, ObjectParameter message, ObjectParameter lecture, string employe, string language)
        {
            var zAgenceParameter = zAgence != null ?
                new ObjectParameter("ZAgence", zAgence) :
                new ObjectParameter("ZAgence", typeof(string));
    
            var zLibAgenceParameter = zLibAgence != null ?
                new ObjectParameter("zLibAgence", zLibAgence) :
                new ObjectParameter("zLibAgence", typeof(string));
    
            var zDeviseParameter = zDevise != null ?
                new ObjectParameter("ZDevise", zDevise) :
                new ObjectParameter("ZDevise", typeof(string));
    
            var zCodeGroupeParameter = zCodeGroupe != null ?
                new ObjectParameter("zCodeGroupe", zCodeGroupe) :
                new ObjectParameter("zCodeGroupe", typeof(string));
    
            var zLibelleGroupeParameter = zLibelleGroupe != null ?
                new ObjectParameter("zLibelleGroupe", zLibelleGroupe) :
                new ObjectParameter("zLibelleGroupe", typeof(string));
    
            var zCodeDetailParameter = zCodeDetail != null ?
                new ObjectParameter("zCodeDetail", zCodeDetail) :
                new ObjectParameter("zCodeDetail", typeof(string));
    
            var zLibelleDetailParameter = zLibelleDetail != null ?
                new ObjectParameter("zLibelleDetail", zLibelleDetail) :
                new ObjectParameter("zLibelleDetail", typeof(string));
    
            var zGrossAmount1Parameter = zGrossAmount1.HasValue ?
                new ObjectParameter("zGrossAmount1", zGrossAmount1) :
                new ObjectParameter("zGrossAmount1", typeof(double));
    
            var zGrossAmount2Parameter = zGrossAmount2.HasValue ?
                new ObjectParameter("zGrossAmount2", zGrossAmount2) :
                new ObjectParameter("zGrossAmount2", typeof(double));
    
            var zDateDebutParameter = zDateDebut.HasValue ?
                new ObjectParameter("zDateDebut", zDateDebut) :
                new ObjectParameter("zDateDebut", typeof(System.DateTime));
    
            var zDateFinParameter = zDateFin.HasValue ?
                new ObjectParameter("zDateFin", zDateFin) :
                new ObjectParameter("zDateFin", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EcrireFLiabilities", zAgenceParameter, zLibAgenceParameter, zDeviseParameter, zCodeGroupeParameter, zLibelleGroupeParameter, zCodeDetailParameter, zLibelleDetailParameter, zGrossAmount1Parameter, zGrossAmount2Parameter, zDateDebutParameter, zDateFinParameter, message, lecture, employeParameter, languageParameter);
        }
    
        public virtual int EcrireFTableReport(string zAgence, string zLibAgence, string zDevise, string zCodeGroupe, string zLibelleGroupe, string zCodeDetail, string zLibelleDetail, Nullable<double> zGrossamount1, Nullable<double> zGrossamount2, Nullable<System.DateTime> zDateDebut, Nullable<System.DateTime> zDateFin, string fEtat, string commentOne, string commentTwo, string formulas, string optionF, Nullable<int> ponderation, string wTypeCpte, ObjectParameter message, ObjectParameter lecture, string language, string employe)
        {
            var zAgenceParameter = zAgence != null ?
                new ObjectParameter("ZAgence", zAgence) :
                new ObjectParameter("ZAgence", typeof(string));
    
            var zLibAgenceParameter = zLibAgence != null ?
                new ObjectParameter("zLibAgence", zLibAgence) :
                new ObjectParameter("zLibAgence", typeof(string));
    
            var zDeviseParameter = zDevise != null ?
                new ObjectParameter("ZDevise", zDevise) :
                new ObjectParameter("ZDevise", typeof(string));
    
            var zCodeGroupeParameter = zCodeGroupe != null ?
                new ObjectParameter("zCodeGroupe", zCodeGroupe) :
                new ObjectParameter("zCodeGroupe", typeof(string));
    
            var zLibelleGroupeParameter = zLibelleGroupe != null ?
                new ObjectParameter("zLibelleGroupe", zLibelleGroupe) :
                new ObjectParameter("zLibelleGroupe", typeof(string));
    
            var zCodeDetailParameter = zCodeDetail != null ?
                new ObjectParameter("zCodeDetail", zCodeDetail) :
                new ObjectParameter("zCodeDetail", typeof(string));
    
            var zLibelleDetailParameter = zLibelleDetail != null ?
                new ObjectParameter("zLibelleDetail", zLibelleDetail) :
                new ObjectParameter("zLibelleDetail", typeof(string));
    
            var zGrossamount1Parameter = zGrossamount1.HasValue ?
                new ObjectParameter("zGrossamount1", zGrossamount1) :
                new ObjectParameter("zGrossamount1", typeof(double));
    
            var zGrossamount2Parameter = zGrossamount2.HasValue ?
                new ObjectParameter("zGrossamount2", zGrossamount2) :
                new ObjectParameter("zGrossamount2", typeof(double));
    
            var zDateDebutParameter = zDateDebut.HasValue ?
                new ObjectParameter("zDateDebut", zDateDebut) :
                new ObjectParameter("zDateDebut", typeof(System.DateTime));
    
            var zDateFinParameter = zDateFin.HasValue ?
                new ObjectParameter("zDateFin", zDateFin) :
                new ObjectParameter("zDateFin", typeof(System.DateTime));
    
            var fEtatParameter = fEtat != null ?
                new ObjectParameter("FEtat", fEtat) :
                new ObjectParameter("FEtat", typeof(string));
    
            var commentOneParameter = commentOne != null ?
                new ObjectParameter("CommentOne", commentOne) :
                new ObjectParameter("CommentOne", typeof(string));
    
            var commentTwoParameter = commentTwo != null ?
                new ObjectParameter("CommentTwo", commentTwo) :
                new ObjectParameter("CommentTwo", typeof(string));
    
            var formulasParameter = formulas != null ?
                new ObjectParameter("Formulas", formulas) :
                new ObjectParameter("Formulas", typeof(string));
    
            var optionFParameter = optionF != null ?
                new ObjectParameter("OptionF", optionF) :
                new ObjectParameter("OptionF", typeof(string));
    
            var ponderationParameter = ponderation.HasValue ?
                new ObjectParameter("Ponderation", ponderation) :
                new ObjectParameter("Ponderation", typeof(int));
    
            var wTypeCpteParameter = wTypeCpte != null ?
                new ObjectParameter("wTypeCpte", wTypeCpte) :
                new ObjectParameter("wTypeCpte", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EcrireFTableReport", zAgenceParameter, zLibAgenceParameter, zDeviseParameter, zCodeGroupeParameter, zLibelleGroupeParameter, zCodeDetailParameter, zLibelleDetailParameter, zGrossamount1Parameter, zGrossamount2Parameter, zDateDebutParameter, zDateFinParameter, fEtatParameter, commentOneParameter, commentTwoParameter, formulasParameter, optionFParameter, ponderationParameter, wTypeCpteParameter, message, lecture, languageParameter, employeParameter);
        }
    
        public virtual int EcritBackToBackAttente_S_Trans(string pi_CptePrincClient, string pi_CpteClientSlave, string pc_TypeOp, string devise, string txnno, string refOperation, Nullable<double> baseTaux, string sensOp, string employe, string libEmploye, ObjectParameter lect, ObjectParameter errMsg, Nullable<double> useAmount, string description, string pc_CodeOp, string language)
        {
            var pi_CptePrincClientParameter = pi_CptePrincClient != null ?
                new ObjectParameter("Pi_CptePrincClient", pi_CptePrincClient) :
                new ObjectParameter("Pi_CptePrincClient", typeof(string));
    
            var pi_CpteClientSlaveParameter = pi_CpteClientSlave != null ?
                new ObjectParameter("Pi_CpteClientSlave", pi_CpteClientSlave) :
                new ObjectParameter("Pi_CpteClientSlave", typeof(string));
    
            var pc_TypeOpParameter = pc_TypeOp != null ?
                new ObjectParameter("Pc_TypeOp", pc_TypeOp) :
                new ObjectParameter("Pc_TypeOp", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var baseTauxParameter = baseTaux.HasValue ?
                new ObjectParameter("BaseTaux", baseTaux) :
                new ObjectParameter("BaseTaux", typeof(double));
    
            var sensOpParameter = sensOp != null ?
                new ObjectParameter("SensOp", sensOp) :
                new ObjectParameter("SensOp", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var useAmountParameter = useAmount.HasValue ?
                new ObjectParameter("UseAmount", useAmount) :
                new ObjectParameter("UseAmount", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var pc_CodeOpParameter = pc_CodeOp != null ?
                new ObjectParameter("Pc_CodeOp", pc_CodeOp) :
                new ObjectParameter("Pc_CodeOp", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EcritBackToBackAttente_S_Trans", pi_CptePrincClientParameter, pi_CpteClientSlaveParameter, pc_TypeOpParameter, deviseParameter, txnnoParameter, refOperationParameter, baseTauxParameter, sensOpParameter, employeParameter, libEmployeParameter, lect, errMsg, useAmountParameter, descriptionParameter, pc_CodeOpParameter, languageParameter);
        }
    
        public virtual int EcritBackToBackAttentePrinc_S_Trans(string pi_CptePrincClient, string pi_CpteClientSlave, string pc_TypeOp, string devise, string txnno, string refOperation, Nullable<double> baseTaux, string sensOp, string employe, string libEmploye, ObjectParameter lect, ObjectParameter errMsg, Nullable<double> useAmount, string description, string pc_CodeOp, string language)
        {
            var pi_CptePrincClientParameter = pi_CptePrincClient != null ?
                new ObjectParameter("Pi_CptePrincClient", pi_CptePrincClient) :
                new ObjectParameter("Pi_CptePrincClient", typeof(string));
    
            var pi_CpteClientSlaveParameter = pi_CpteClientSlave != null ?
                new ObjectParameter("Pi_CpteClientSlave", pi_CpteClientSlave) :
                new ObjectParameter("Pi_CpteClientSlave", typeof(string));
    
            var pc_TypeOpParameter = pc_TypeOp != null ?
                new ObjectParameter("Pc_TypeOp", pc_TypeOp) :
                new ObjectParameter("Pc_TypeOp", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var baseTauxParameter = baseTaux.HasValue ?
                new ObjectParameter("BaseTaux", baseTaux) :
                new ObjectParameter("BaseTaux", typeof(double));
    
            var sensOpParameter = sensOp != null ?
                new ObjectParameter("SensOp", sensOp) :
                new ObjectParameter("SensOp", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var useAmountParameter = useAmount.HasValue ?
                new ObjectParameter("UseAmount", useAmount) :
                new ObjectParameter("UseAmount", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var pc_CodeOpParameter = pc_CodeOp != null ?
                new ObjectParameter("Pc_CodeOp", pc_CodeOp) :
                new ObjectParameter("Pc_CodeOp", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EcritBackToBackAttentePrinc_S_Trans", pi_CptePrincClientParameter, pi_CpteClientSlaveParameter, pc_TypeOpParameter, deviseParameter, txnnoParameter, refOperationParameter, baseTauxParameter, sensOpParameter, employeParameter, libEmployeParameter, lect, errMsg, useAmountParameter, descriptionParameter, pc_CodeOpParameter, languageParameter);
        }
    
        public virtual int EcritCptable_Insert(string agence, string devise, string journal, Nullable<int> folio, Nullable<System.DateTime> dateOperation, string compte, string codeLibelle, string libelle, string refEcrit, string refOperation, Nullable<double> debit, Nullable<double> credit, Nullable<System.DateTime> dateValeur, Nullable<System.DateTime> dateEch, string codeMaj, string codeEmpl, Nullable<System.DateTime> dateSaisie, string cpteClt, string description, string txnNo, string codeoperation, string libelleoperation, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var compteParameter = compte != null ?
                new ObjectParameter("Compte", compte) :
                new ObjectParameter("Compte", typeof(string));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("Libelle", libelle) :
                new ObjectParameter("Libelle", typeof(string));
    
            var refEcritParameter = refEcrit != null ?
                new ObjectParameter("RefEcrit", refEcrit) :
                new ObjectParameter("RefEcrit", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var dateEchParameter = dateEch.HasValue ?
                new ObjectParameter("DateEch", dateEch) :
                new ObjectParameter("DateEch", typeof(System.DateTime));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var codeEmplParameter = codeEmpl != null ?
                new ObjectParameter("CodeEmpl", codeEmpl) :
                new ObjectParameter("CodeEmpl", typeof(string));
    
            var dateSaisieParameter = dateSaisie.HasValue ?
                new ObjectParameter("DateSaisie", dateSaisie) :
                new ObjectParameter("DateSaisie", typeof(System.DateTime));
    
            var cpteCltParameter = cpteClt != null ?
                new ObjectParameter("CpteClt", cpteClt) :
                new ObjectParameter("CpteClt", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var codeoperationParameter = codeoperation != null ?
                new ObjectParameter("codeoperation", codeoperation) :
                new ObjectParameter("codeoperation", typeof(string));
    
            var libelleoperationParameter = libelleoperation != null ?
                new ObjectParameter("libelleoperation", libelleoperation) :
                new ObjectParameter("libelleoperation", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EcritCptable_Insert", agenceParameter, deviseParameter, journalParameter, folioParameter, dateOperationParameter, compteParameter, codeLibelleParameter, libelleParameter, refEcritParameter, refOperationParameter, debitParameter, creditParameter, dateValeurParameter, dateEchParameter, codeMajParameter, codeEmplParameter, dateSaisieParameter, cpteCltParameter, descriptionParameter, txnNoParameter, codeoperationParameter, libelleoperationParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int EcritCptable_InsertNew(string agence, string devise, string journal, Nullable<int> folio, Nullable<System.DateTime> dateOperation, string compte, string codeLibelle, string libelle, string refEcrit, string refOperation, Nullable<double> debit, Nullable<double> credit, Nullable<System.DateTime> dateValeur, Nullable<System.DateTime> dateEch, string codeMaj, string codeEmpl, Nullable<System.DateTime> dateSaisie, string cpteClt, string description, string txnNo, string codeoperation, string libelleoperation, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName, string representative)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var compteParameter = compte != null ?
                new ObjectParameter("Compte", compte) :
                new ObjectParameter("Compte", typeof(string));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("Libelle", libelle) :
                new ObjectParameter("Libelle", typeof(string));
    
            var refEcritParameter = refEcrit != null ?
                new ObjectParameter("RefEcrit", refEcrit) :
                new ObjectParameter("RefEcrit", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var dateEchParameter = dateEch.HasValue ?
                new ObjectParameter("DateEch", dateEch) :
                new ObjectParameter("DateEch", typeof(System.DateTime));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var codeEmplParameter = codeEmpl != null ?
                new ObjectParameter("CodeEmpl", codeEmpl) :
                new ObjectParameter("CodeEmpl", typeof(string));
    
            var dateSaisieParameter = dateSaisie.HasValue ?
                new ObjectParameter("DateSaisie", dateSaisie) :
                new ObjectParameter("DateSaisie", typeof(System.DateTime));
    
            var cpteCltParameter = cpteClt != null ?
                new ObjectParameter("CpteClt", cpteClt) :
                new ObjectParameter("CpteClt", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var codeoperationParameter = codeoperation != null ?
                new ObjectParameter("codeoperation", codeoperation) :
                new ObjectParameter("codeoperation", typeof(string));
    
            var libelleoperationParameter = libelleoperation != null ?
                new ObjectParameter("libelleoperation", libelleoperation) :
                new ObjectParameter("libelleoperation", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var representativeParameter = representative != null ?
                new ObjectParameter("representative", representative) :
                new ObjectParameter("representative", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EcritCptable_InsertNew", agenceParameter, deviseParameter, journalParameter, folioParameter, dateOperationParameter, compteParameter, codeLibelleParameter, libelleParameter, refEcritParameter, refOperationParameter, debitParameter, creditParameter, dateValeurParameter, dateEchParameter, codeMajParameter, codeEmplParameter, dateSaisieParameter, cpteCltParameter, descriptionParameter, txnNoParameter, codeoperationParameter, libelleoperationParameter, lect, errMsg, languageParameter, computerNameParameter, representativeParameter);
        }
    
        public virtual int EcritCUSTCHARGE(string pi_CpteClient, string pi_CpteClientSlave, string pc_TypeOp, string devise, string txnno, string refOperation, string employe, string libEmploye, ObjectParameter lect, ObjectParameter msg, string description, string pc_CodeOp, string agence, string denomination, string libAgence, string client, string libDevise, Nullable<System.DateTime> dateOperation, string checkKey, Nullable<decimal> nbreCheque, string dSerie, string fSerie, Nullable<System.DateTime> datePers, string chkType, string @interface, Nullable<double> retamount, string computerName, string language, string cobacId)
        {
            var pi_CpteClientParameter = pi_CpteClient != null ?
                new ObjectParameter("Pi_CpteClient", pi_CpteClient) :
                new ObjectParameter("Pi_CpteClient", typeof(string));
    
            var pi_CpteClientSlaveParameter = pi_CpteClientSlave != null ?
                new ObjectParameter("Pi_CpteClientSlave", pi_CpteClientSlave) :
                new ObjectParameter("Pi_CpteClientSlave", typeof(string));
    
            var pc_TypeOpParameter = pc_TypeOp != null ?
                new ObjectParameter("Pc_TypeOp", pc_TypeOp) :
                new ObjectParameter("Pc_TypeOp", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var pc_CodeOpParameter = pc_CodeOp != null ?
                new ObjectParameter("Pc_CodeOp", pc_CodeOp) :
                new ObjectParameter("Pc_CodeOp", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var checkKeyParameter = checkKey != null ?
                new ObjectParameter("CheckKey", checkKey) :
                new ObjectParameter("CheckKey", typeof(string));
    
            var nbreChequeParameter = nbreCheque.HasValue ?
                new ObjectParameter("NbreCheque", nbreCheque) :
                new ObjectParameter("NbreCheque", typeof(decimal));
    
            var dSerieParameter = dSerie != null ?
                new ObjectParameter("DSerie", dSerie) :
                new ObjectParameter("DSerie", typeof(string));
    
            var fSerieParameter = fSerie != null ?
                new ObjectParameter("FSerie", fSerie) :
                new ObjectParameter("FSerie", typeof(string));
    
            var datePersParameter = datePers.HasValue ?
                new ObjectParameter("DatePers", datePers) :
                new ObjectParameter("DatePers", typeof(System.DateTime));
    
            var chkTypeParameter = chkType != null ?
                new ObjectParameter("ChkType", chkType) :
                new ObjectParameter("ChkType", typeof(string));
    
            var interfaceParameter = @interface != null ?
                new ObjectParameter("Interface", @interface) :
                new ObjectParameter("Interface", typeof(string));
    
            var retamountParameter = retamount.HasValue ?
                new ObjectParameter("retamount", retamount) :
                new ObjectParameter("retamount", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var cobacIdParameter = cobacId != null ?
                new ObjectParameter("CobacId", cobacId) :
                new ObjectParameter("CobacId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EcritCUSTCHARGE", pi_CpteClientParameter, pi_CpteClientSlaveParameter, pc_TypeOpParameter, deviseParameter, txnnoParameter, refOperationParameter, employeParameter, libEmployeParameter, lect, msg, descriptionParameter, pc_CodeOpParameter, agenceParameter, denominationParameter, libAgenceParameter, clientParameter, libDeviseParameter, dateOperationParameter, checkKeyParameter, nbreChequeParameter, dSerieParameter, fSerieParameter, datePersParameter, chkTypeParameter, interfaceParameter, retamountParameter, computerNameParameter, languageParameter, cobacIdParameter);
        }
    
        public virtual int EcritFrontBackCharge(string pi_CpteClient, string pi_CpteClientSlave, string pc_TypeOp, string devise, string txnno, string refOperation, Nullable<double> baseTaux, string employe, string libEmploye, ObjectParameter lect, ObjectParameter errMsg, Nullable<double> useAmount, string description, string pc_CodeOp, Nullable<double> pF_TVAAMOUNT, string computerName, string language)
        {
            var pi_CpteClientParameter = pi_CpteClient != null ?
                new ObjectParameter("Pi_CpteClient", pi_CpteClient) :
                new ObjectParameter("Pi_CpteClient", typeof(string));
    
            var pi_CpteClientSlaveParameter = pi_CpteClientSlave != null ?
                new ObjectParameter("Pi_CpteClientSlave", pi_CpteClientSlave) :
                new ObjectParameter("Pi_CpteClientSlave", typeof(string));
    
            var pc_TypeOpParameter = pc_TypeOp != null ?
                new ObjectParameter("Pc_TypeOp", pc_TypeOp) :
                new ObjectParameter("Pc_TypeOp", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var baseTauxParameter = baseTaux.HasValue ?
                new ObjectParameter("BaseTaux", baseTaux) :
                new ObjectParameter("BaseTaux", typeof(double));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var useAmountParameter = useAmount.HasValue ?
                new ObjectParameter("UseAmount", useAmount) :
                new ObjectParameter("UseAmount", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var pc_CodeOpParameter = pc_CodeOp != null ?
                new ObjectParameter("Pc_CodeOp", pc_CodeOp) :
                new ObjectParameter("Pc_CodeOp", typeof(string));
    
            var pF_TVAAMOUNTParameter = pF_TVAAMOUNT.HasValue ?
                new ObjectParameter("PF_TVAAMOUNT", pF_TVAAMOUNT) :
                new ObjectParameter("PF_TVAAMOUNT", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EcritFrontBackCharge", pi_CpteClientParameter, pi_CpteClientSlaveParameter, pc_TypeOpParameter, deviseParameter, txnnoParameter, refOperationParameter, baseTauxParameter, employeParameter, libEmployeParameter, lect, errMsg, useAmountParameter, descriptionParameter, pc_CodeOpParameter, pF_TVAAMOUNTParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int EcritFrontBackCharge_Attente_S_Trans(string pi_CpteClient, string pi_CpteClientSlave, string pc_TypeOp, string devise, string txnno, string refOperation, Nullable<double> baseTaux, string employe, string libEmploye, ObjectParameter lect, ObjectParameter errMsg, Nullable<double> useAmount, string description, string pc_CodeOp, string forceSens, Nullable<double> pF_TVAAMOUNT, string language)
        {
            var pi_CpteClientParameter = pi_CpteClient != null ?
                new ObjectParameter("Pi_CpteClient", pi_CpteClient) :
                new ObjectParameter("Pi_CpteClient", typeof(string));
    
            var pi_CpteClientSlaveParameter = pi_CpteClientSlave != null ?
                new ObjectParameter("Pi_CpteClientSlave", pi_CpteClientSlave) :
                new ObjectParameter("Pi_CpteClientSlave", typeof(string));
    
            var pc_TypeOpParameter = pc_TypeOp != null ?
                new ObjectParameter("Pc_TypeOp", pc_TypeOp) :
                new ObjectParameter("Pc_TypeOp", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var baseTauxParameter = baseTaux.HasValue ?
                new ObjectParameter("BaseTaux", baseTaux) :
                new ObjectParameter("BaseTaux", typeof(double));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var useAmountParameter = useAmount.HasValue ?
                new ObjectParameter("UseAmount", useAmount) :
                new ObjectParameter("UseAmount", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var pc_CodeOpParameter = pc_CodeOp != null ?
                new ObjectParameter("Pc_CodeOp", pc_CodeOp) :
                new ObjectParameter("Pc_CodeOp", typeof(string));
    
            var forceSensParameter = forceSens != null ?
                new ObjectParameter("ForceSens", forceSens) :
                new ObjectParameter("ForceSens", typeof(string));
    
            var pF_TVAAMOUNTParameter = pF_TVAAMOUNT.HasValue ?
                new ObjectParameter("PF_TVAAMOUNT", pF_TVAAMOUNT) :
                new ObjectParameter("PF_TVAAMOUNT", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EcritFrontBackCharge_Attente_S_Trans", pi_CpteClientParameter, pi_CpteClientSlaveParameter, pc_TypeOpParameter, deviseParameter, txnnoParameter, refOperationParameter, baseTauxParameter, employeParameter, libEmployeParameter, lect, errMsg, useAmountParameter, descriptionParameter, pc_CodeOpParameter, forceSensParameter, pF_TVAAMOUNTParameter, languageParameter);
        }
    
        public virtual int EcritFrontBackCharge_S_Trans(string pi_CpteClient, string pi_CpteClientSlave, string pc_TypeOp, string devise, string txnno, string refOperation, Nullable<double> baseTaux, string employe, string libEmploye, ObjectParameter lect, ObjectParameter errMsg, Nullable<double> useAmount, string description, string pc_CodeOp, Nullable<double> pF_TVAAMOUNT, string language)
        {
            var pi_CpteClientParameter = pi_CpteClient != null ?
                new ObjectParameter("Pi_CpteClient", pi_CpteClient) :
                new ObjectParameter("Pi_CpteClient", typeof(string));
    
            var pi_CpteClientSlaveParameter = pi_CpteClientSlave != null ?
                new ObjectParameter("Pi_CpteClientSlave", pi_CpteClientSlave) :
                new ObjectParameter("Pi_CpteClientSlave", typeof(string));
    
            var pc_TypeOpParameter = pc_TypeOp != null ?
                new ObjectParameter("Pc_TypeOp", pc_TypeOp) :
                new ObjectParameter("Pc_TypeOp", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var baseTauxParameter = baseTaux.HasValue ?
                new ObjectParameter("BaseTaux", baseTaux) :
                new ObjectParameter("BaseTaux", typeof(double));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var useAmountParameter = useAmount.HasValue ?
                new ObjectParameter("UseAmount", useAmount) :
                new ObjectParameter("UseAmount", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var pc_CodeOpParameter = pc_CodeOp != null ?
                new ObjectParameter("Pc_CodeOp", pc_CodeOp) :
                new ObjectParameter("Pc_CodeOp", typeof(string));
    
            var pF_TVAAMOUNTParameter = pF_TVAAMOUNT.HasValue ?
                new ObjectParameter("PF_TVAAMOUNT", pF_TVAAMOUNT) :
                new ObjectParameter("PF_TVAAMOUNT", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EcritFrontBackCharge_S_Trans", pi_CpteClientParameter, pi_CpteClientSlaveParameter, pc_TypeOpParameter, deviseParameter, txnnoParameter, refOperationParameter, baseTauxParameter, employeParameter, libEmployeParameter, lect, errMsg, useAmountParameter, descriptionParameter, pc_CodeOpParameter, pF_TVAAMOUNTParameter, languageParameter);
        }
    
        public virtual int EcritFrontBackCharge_S_TransLn(string pi_CpteClient, string pi_CpteClientSlave, string pc_TypeOp, string devise, string txnno, string refOperation, Nullable<double> baseTaux, string employe, string libEmploye, ObjectParameter lect, ObjectParameter errMsg, Nullable<double> useAmount, string description, string pc_CodeOp, Nullable<double> pF_TVAAMOUNT, string language)
        {
            var pi_CpteClientParameter = pi_CpteClient != null ?
                new ObjectParameter("Pi_CpteClient", pi_CpteClient) :
                new ObjectParameter("Pi_CpteClient", typeof(string));
    
            var pi_CpteClientSlaveParameter = pi_CpteClientSlave != null ?
                new ObjectParameter("Pi_CpteClientSlave", pi_CpteClientSlave) :
                new ObjectParameter("Pi_CpteClientSlave", typeof(string));
    
            var pc_TypeOpParameter = pc_TypeOp != null ?
                new ObjectParameter("Pc_TypeOp", pc_TypeOp) :
                new ObjectParameter("Pc_TypeOp", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var baseTauxParameter = baseTaux.HasValue ?
                new ObjectParameter("BaseTaux", baseTaux) :
                new ObjectParameter("BaseTaux", typeof(double));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var useAmountParameter = useAmount.HasValue ?
                new ObjectParameter("UseAmount", useAmount) :
                new ObjectParameter("UseAmount", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var pc_CodeOpParameter = pc_CodeOp != null ?
                new ObjectParameter("Pc_CodeOp", pc_CodeOp) :
                new ObjectParameter("Pc_CodeOp", typeof(string));
    
            var pF_TVAAMOUNTParameter = pF_TVAAMOUNT.HasValue ?
                new ObjectParameter("PF_TVAAMOUNT", pF_TVAAMOUNT) :
                new ObjectParameter("PF_TVAAMOUNT", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EcritFrontBackCharge_S_TransLn", pi_CpteClientParameter, pi_CpteClientSlaveParameter, pc_TypeOpParameter, deviseParameter, txnnoParameter, refOperationParameter, baseTauxParameter, employeParameter, libEmployeParameter, lect, errMsg, useAmountParameter, descriptionParameter, pc_CodeOpParameter, pF_TVAAMOUNTParameter, languageParameter);
        }
    
        public virtual int EcritFrontBackCharge_S_Transnew(string pi_CpteClient, string pi_CpteClientSlave, string pc_TypeOp, string devise, string txnno, string refOperation, Nullable<double> baseTaux, string employe, string libEmploye, ObjectParameter lect, ObjectParameter errMsg, Nullable<double> useAmount, string description, string pc_CodeOp, Nullable<double> pF_TVAAMOUNT, string language, string doneBy)
        {
            var pi_CpteClientParameter = pi_CpteClient != null ?
                new ObjectParameter("Pi_CpteClient", pi_CpteClient) :
                new ObjectParameter("Pi_CpteClient", typeof(string));
    
            var pi_CpteClientSlaveParameter = pi_CpteClientSlave != null ?
                new ObjectParameter("Pi_CpteClientSlave", pi_CpteClientSlave) :
                new ObjectParameter("Pi_CpteClientSlave", typeof(string));
    
            var pc_TypeOpParameter = pc_TypeOp != null ?
                new ObjectParameter("Pc_TypeOp", pc_TypeOp) :
                new ObjectParameter("Pc_TypeOp", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var baseTauxParameter = baseTaux.HasValue ?
                new ObjectParameter("BaseTaux", baseTaux) :
                new ObjectParameter("BaseTaux", typeof(double));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var useAmountParameter = useAmount.HasValue ?
                new ObjectParameter("UseAmount", useAmount) :
                new ObjectParameter("UseAmount", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var pc_CodeOpParameter = pc_CodeOp != null ?
                new ObjectParameter("Pc_CodeOp", pc_CodeOp) :
                new ObjectParameter("Pc_CodeOp", typeof(string));
    
            var pF_TVAAMOUNTParameter = pF_TVAAMOUNT.HasValue ?
                new ObjectParameter("PF_TVAAMOUNT", pF_TVAAMOUNT) :
                new ObjectParameter("PF_TVAAMOUNT", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var doneByParameter = doneBy != null ?
                new ObjectParameter("DoneBy", doneBy) :
                new ObjectParameter("DoneBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EcritFrontBackCharge_S_Transnew", pi_CpteClientParameter, pi_CpteClientSlaveParameter, pc_TypeOpParameter, deviseParameter, txnnoParameter, refOperationParameter, baseTauxParameter, employeParameter, libEmployeParameter, lect, errMsg, useAmountParameter, descriptionParameter, pc_CodeOpParameter, pF_TVAAMOUNTParameter, languageParameter, doneByParameter);
        }
    
        public virtual int EcritFrontBackCharge_S_TransnewLn(string pi_CpteClient, string pi_CpteClientSlave, string pc_TypeOp, string devise, string txnno, string refOperation, Nullable<double> baseTaux, string employe, string libEmploye, ObjectParameter lect, ObjectParameter errMsg, Nullable<double> useAmount, string description, string pc_CodeOp, Nullable<double> pF_TVAAMOUNT, string language, string doneBy)
        {
            var pi_CpteClientParameter = pi_CpteClient != null ?
                new ObjectParameter("Pi_CpteClient", pi_CpteClient) :
                new ObjectParameter("Pi_CpteClient", typeof(string));
    
            var pi_CpteClientSlaveParameter = pi_CpteClientSlave != null ?
                new ObjectParameter("Pi_CpteClientSlave", pi_CpteClientSlave) :
                new ObjectParameter("Pi_CpteClientSlave", typeof(string));
    
            var pc_TypeOpParameter = pc_TypeOp != null ?
                new ObjectParameter("Pc_TypeOp", pc_TypeOp) :
                new ObjectParameter("Pc_TypeOp", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var baseTauxParameter = baseTaux.HasValue ?
                new ObjectParameter("BaseTaux", baseTaux) :
                new ObjectParameter("BaseTaux", typeof(double));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var useAmountParameter = useAmount.HasValue ?
                new ObjectParameter("UseAmount", useAmount) :
                new ObjectParameter("UseAmount", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var pc_CodeOpParameter = pc_CodeOp != null ?
                new ObjectParameter("Pc_CodeOp", pc_CodeOp) :
                new ObjectParameter("Pc_CodeOp", typeof(string));
    
            var pF_TVAAMOUNTParameter = pF_TVAAMOUNT.HasValue ?
                new ObjectParameter("PF_TVAAMOUNT", pF_TVAAMOUNT) :
                new ObjectParameter("PF_TVAAMOUNT", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var doneByParameter = doneBy != null ?
                new ObjectParameter("DoneBy", doneBy) :
                new ObjectParameter("DoneBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EcritFrontBackCharge_S_TransnewLn", pi_CpteClientParameter, pi_CpteClientSlaveParameter, pc_TypeOpParameter, deviseParameter, txnnoParameter, refOperationParameter, baseTauxParameter, employeParameter, libEmployeParameter, lect, errMsg, useAmountParameter, descriptionParameter, pc_CodeOpParameter, pF_TVAAMOUNTParameter, languageParameter, doneByParameter);
        }
    
        public virtual int EcritFrontBackChargeTrBilling_S_Trans(string pi_CpteClient, string pc_TRCODE, string pc_TypeOp, string devise, string txnno, string refOperation, Nullable<double> baseTaux, string employe, string libEmploye, ObjectParameter lect, ObjectParameter errMsg, Nullable<double> useAmount, string description, string pc_CodeOp, Nullable<double> pF_TVAAMOUNT, string language)
        {
            var pi_CpteClientParameter = pi_CpteClient != null ?
                new ObjectParameter("Pi_CpteClient", pi_CpteClient) :
                new ObjectParameter("Pi_CpteClient", typeof(string));
    
            var pc_TRCODEParameter = pc_TRCODE != null ?
                new ObjectParameter("Pc_TRCODE", pc_TRCODE) :
                new ObjectParameter("Pc_TRCODE", typeof(string));
    
            var pc_TypeOpParameter = pc_TypeOp != null ?
                new ObjectParameter("Pc_TypeOp", pc_TypeOp) :
                new ObjectParameter("Pc_TypeOp", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var baseTauxParameter = baseTaux.HasValue ?
                new ObjectParameter("BaseTaux", baseTaux) :
                new ObjectParameter("BaseTaux", typeof(double));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var useAmountParameter = useAmount.HasValue ?
                new ObjectParameter("UseAmount", useAmount) :
                new ObjectParameter("UseAmount", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var pc_CodeOpParameter = pc_CodeOp != null ?
                new ObjectParameter("Pc_CodeOp", pc_CodeOp) :
                new ObjectParameter("Pc_CodeOp", typeof(string));
    
            var pF_TVAAMOUNTParameter = pF_TVAAMOUNT.HasValue ?
                new ObjectParameter("PF_TVAAMOUNT", pF_TVAAMOUNT) :
                new ObjectParameter("PF_TVAAMOUNT", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EcritFrontBackChargeTrBilling_S_Trans", pi_CpteClientParameter, pc_TRCODEParameter, pc_TypeOpParameter, deviseParameter, txnnoParameter, refOperationParameter, baseTauxParameter, employeParameter, libEmployeParameter, lect, errMsg, useAmountParameter, descriptionParameter, pc_CodeOpParameter, pF_TVAAMOUNTParameter, languageParameter);
        }
    
        public virtual ObjectResult<EcritInfoCustomer_Result> EcritInfoCustomer(string agence, string client, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string cpteCol, string txnno, string integritystatus, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, ObjectParameter msg, Nullable<int> validation, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var validationParameter = validation.HasValue ?
                new ObjectParameter("Validation", validation) :
                new ObjectParameter("Validation", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EcritInfoCustomer_Result>("EcritInfoCustomer", agenceParameter, clientParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, cpteColParameter, txnnoParameter, integritystatusParameter, dateTransfertParameter, lect, msg, validationParameter, languageParameter);
        }
    
        public virtual int EcritInfoCustomer_Migrate(string agence, string client, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string cpteCol, string txnno, string integritystatus, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, ObjectParameter msg, Nullable<int> validation, string language, string bENEFICIARY)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var validationParameter = validation.HasValue ?
                new ObjectParameter("Validation", validation) :
                new ObjectParameter("Validation", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var bENEFICIARYParameter = bENEFICIARY != null ?
                new ObjectParameter("BENEFICIARY", bENEFICIARY) :
                new ObjectParameter("BENEFICIARY", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EcritInfoCustomer_Migrate", agenceParameter, clientParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, cpteColParameter, txnnoParameter, integritystatusParameter, dateTransfertParameter, lect, msg, validationParameter, languageParameter, bENEFICIARYParameter);
        }
    
        public virtual ObjectResult<EcritInfoCustomerNew_Result> EcritInfoCustomerNew(string agence, string client, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string cpteCol, string txnno, string integritystatus, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, ObjectParameter msg, Nullable<int> validation, string language, string doneBy)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var validationParameter = validation.HasValue ?
                new ObjectParameter("Validation", validation) :
                new ObjectParameter("Validation", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var doneByParameter = doneBy != null ?
                new ObjectParameter("DoneBy", doneBy) :
                new ObjectParameter("DoneBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EcritInfoCustomerNew_Result>("EcritInfoCustomerNew", agenceParameter, clientParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, cpteColParameter, txnnoParameter, integritystatusParameter, dateTransfertParameter, lect, msg, validationParameter, languageParameter, doneByParameter);
        }
    
        public virtual int EcritJnlInt(string agence, string client, Nullable<int> catCpte, Nullable<int> sub, string letCle, string cpteJumelle, string denomination, string cpteCol, string devise, Nullable<double> intDb, Nullable<double> intCr, Nullable<double> comMvt, Nullable<double> comDec, Nullable<double> fTC, Nullable<double> tVA, Nullable<double> tPRCM, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string txnCode, Nullable<double> sMSAmount, Nullable<double> sMSVATAmount, Nullable<System.DateTime> currentDate, ObjectParameter lect, ObjectParameter msgbox, string language, string employe)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("agence", agence) :
                new ObjectParameter("agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(int));
    
            var subParameter = sub.HasValue ?
                new ObjectParameter("Sub", sub) :
                new ObjectParameter("Sub", typeof(int));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var intDbParameter = intDb.HasValue ?
                new ObjectParameter("IntDb", intDb) :
                new ObjectParameter("IntDb", typeof(double));
    
            var intCrParameter = intCr.HasValue ?
                new ObjectParameter("IntCr", intCr) :
                new ObjectParameter("IntCr", typeof(double));
    
            var comMvtParameter = comMvt.HasValue ?
                new ObjectParameter("ComMvt", comMvt) :
                new ObjectParameter("ComMvt", typeof(double));
    
            var comDecParameter = comDec.HasValue ?
                new ObjectParameter("ComDec", comDec) :
                new ObjectParameter("ComDec", typeof(double));
    
            var fTCParameter = fTC.HasValue ?
                new ObjectParameter("FTC", fTC) :
                new ObjectParameter("FTC", typeof(double));
    
            var tVAParameter = tVA.HasValue ?
                new ObjectParameter("TVA", tVA) :
                new ObjectParameter("TVA", typeof(double));
    
            var tPRCMParameter = tPRCM.HasValue ?
                new ObjectParameter("TPRCM", tPRCM) :
                new ObjectParameter("TPRCM", typeof(double));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var txnCodeParameter = txnCode != null ?
                new ObjectParameter("TxnCode", txnCode) :
                new ObjectParameter("TxnCode", typeof(string));
    
            var sMSAmountParameter = sMSAmount.HasValue ?
                new ObjectParameter("SMSAmount", sMSAmount) :
                new ObjectParameter("SMSAmount", typeof(double));
    
            var sMSVATAmountParameter = sMSVATAmount.HasValue ?
                new ObjectParameter("SMSVATAmount", sMSVATAmount) :
                new ObjectParameter("SMSVATAmount", typeof(double));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("CurrentDate", currentDate) :
                new ObjectParameter("CurrentDate", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("employe", employe) :
                new ObjectParameter("employe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EcritJnlInt", agenceParameter, clientParameter, catCpteParameter, subParameter, letCleParameter, cpteJumelleParameter, denominationParameter, cpteColParameter, deviseParameter, intDbParameter, intCrParameter, comMvtParameter, comDecParameter, fTCParameter, tVAParameter, tPRCMParameter, dateDebutParameter, dateFinParameter, txnCodeParameter, sMSAmountParameter, sMSVATAmountParameter, currentDateParameter, lect, msgbox, languageParameter, employeParameter);
        }
    
        public virtual int EcritJnlIntPerDay(string agence, string client, Nullable<int> catCpte, Nullable<int> sub, string letCle, string cpteJumelle, string denomination, string cpteCol, string devise, Nullable<double> intDb, Nullable<double> intCr, Nullable<double> comMvt, Nullable<double> comDec, Nullable<double> fTC, Nullable<double> tVA, Nullable<double> tPRCM, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string txnCode, Nullable<System.DateTime> currentDate, ObjectParameter lect, ObjectParameter msgbox, string language, string employe)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("agence", agence) :
                new ObjectParameter("agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(int));
    
            var subParameter = sub.HasValue ?
                new ObjectParameter("Sub", sub) :
                new ObjectParameter("Sub", typeof(int));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var intDbParameter = intDb.HasValue ?
                new ObjectParameter("IntDb", intDb) :
                new ObjectParameter("IntDb", typeof(double));
    
            var intCrParameter = intCr.HasValue ?
                new ObjectParameter("IntCr", intCr) :
                new ObjectParameter("IntCr", typeof(double));
    
            var comMvtParameter = comMvt.HasValue ?
                new ObjectParameter("ComMvt", comMvt) :
                new ObjectParameter("ComMvt", typeof(double));
    
            var comDecParameter = comDec.HasValue ?
                new ObjectParameter("ComDec", comDec) :
                new ObjectParameter("ComDec", typeof(double));
    
            var fTCParameter = fTC.HasValue ?
                new ObjectParameter("FTC", fTC) :
                new ObjectParameter("FTC", typeof(double));
    
            var tVAParameter = tVA.HasValue ?
                new ObjectParameter("TVA", tVA) :
                new ObjectParameter("TVA", typeof(double));
    
            var tPRCMParameter = tPRCM.HasValue ?
                new ObjectParameter("TPRCM", tPRCM) :
                new ObjectParameter("TPRCM", typeof(double));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var txnCodeParameter = txnCode != null ?
                new ObjectParameter("TxnCode", txnCode) :
                new ObjectParameter("TxnCode", typeof(string));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("CurrentDate", currentDate) :
                new ObjectParameter("CurrentDate", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("employe", employe) :
                new ObjectParameter("employe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EcritJnlIntPerDay", agenceParameter, clientParameter, catCpteParameter, subParameter, letCleParameter, cpteJumelleParameter, denominationParameter, cpteColParameter, deviseParameter, intDbParameter, intCrParameter, comMvtParameter, comDecParameter, fTCParameter, tVAParameter, tPRCMParameter, dateDebutParameter, dateFinParameter, txnCodeParameter, currentDateParameter, lect, msgbox, languageParameter, employeParameter);
        }
    
        public virtual int Emp_Det_Prod_Stats(string pi_InAgence, string pc_LibAgence, string pi_InMatricule, Nullable<System.DateTime> pd_InDateDebut, Nullable<System.DateTime> pd_InDateFin, ObjectParameter pi_OutErreur, ObjectParameter msg, string computerName, string language)
        {
            var pi_InAgenceParameter = pi_InAgence != null ?
                new ObjectParameter("pi_InAgence", pi_InAgence) :
                new ObjectParameter("pi_InAgence", typeof(string));
    
            var pc_LibAgenceParameter = pc_LibAgence != null ?
                new ObjectParameter("pc_LibAgence", pc_LibAgence) :
                new ObjectParameter("pc_LibAgence", typeof(string));
    
            var pi_InMatriculeParameter = pi_InMatricule != null ?
                new ObjectParameter("pi_InMatricule", pi_InMatricule) :
                new ObjectParameter("pi_InMatricule", typeof(string));
    
            var pd_InDateDebutParameter = pd_InDateDebut.HasValue ?
                new ObjectParameter("pd_InDateDebut", pd_InDateDebut) :
                new ObjectParameter("pd_InDateDebut", typeof(System.DateTime));
    
            var pd_InDateFinParameter = pd_InDateFin.HasValue ?
                new ObjectParameter("pd_InDateFin", pd_InDateFin) :
                new ObjectParameter("pd_InDateFin", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Emp_Det_Prod_Stats", pi_InAgenceParameter, pc_LibAgenceParameter, pi_InMatriculeParameter, pd_InDateDebutParameter, pd_InDateFinParameter, pi_OutErreur, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int Emp_Prod_Stats(string pi_InAgence, string pc_LibAgence, string pi_InMatricule, Nullable<System.DateTime> pd_InDateDebut, Nullable<System.DateTime> pd_InDateFin, ObjectParameter pi_OutErreur, ObjectParameter msg, string computerName, string language)
        {
            var pi_InAgenceParameter = pi_InAgence != null ?
                new ObjectParameter("pi_InAgence", pi_InAgence) :
                new ObjectParameter("pi_InAgence", typeof(string));
    
            var pc_LibAgenceParameter = pc_LibAgence != null ?
                new ObjectParameter("pc_LibAgence", pc_LibAgence) :
                new ObjectParameter("pc_LibAgence", typeof(string));
    
            var pi_InMatriculeParameter = pi_InMatricule != null ?
                new ObjectParameter("pi_InMatricule", pi_InMatricule) :
                new ObjectParameter("pi_InMatricule", typeof(string));
    
            var pd_InDateDebutParameter = pd_InDateDebut.HasValue ?
                new ObjectParameter("pd_InDateDebut", pd_InDateDebut) :
                new ObjectParameter("pd_InDateDebut", typeof(System.DateTime));
    
            var pd_InDateFinParameter = pd_InDateFin.HasValue ?
                new ObjectParameter("pd_InDateFin", pd_InDateFin) :
                new ObjectParameter("pd_InDateFin", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Emp_Prod_Stats", pi_InAgenceParameter, pc_LibAgenceParameter, pi_InMatriculeParameter, pd_InDateDebutParameter, pd_InDateFinParameter, pi_OutErreur, msg, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<Employe_Delete_Result> Employe_Delete(string agence, string matricule, string nomEmploye, string computerName, ObjectParameter lect, ObjectParameter msg, Nullable<int> userCon, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var nomEmployeParameter = nomEmploye != null ?
                new ObjectParameter("NomEmploye", nomEmploye) :
                new ObjectParameter("NomEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var userConParameter = userCon.HasValue ?
                new ObjectParameter("UserCon", userCon) :
                new ObjectParameter("UserCon", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employe_Delete_Result>("Employe_Delete", agenceParameter, matriculeParameter, nomEmployeParameter, computerNameParameter, lect, msg, userConParameter, languageParameter);
        }
    
        public virtual ObjectResult<Employe_Filter_Result> Employe_Filter(Nullable<short> intFilterMode, string agence, string matricule, ObjectParameter countfield)
        {
            var intFilterModeParameter = intFilterMode.HasValue ?
                new ObjectParameter("IntFilterMode", intFilterMode) :
                new ObjectParameter("IntFilterMode", typeof(short));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employe_Filter_Result>("Employe_Filter", intFilterModeParameter, agenceParameter, matriculeParameter, countfield);
        }
    
        public virtual ObjectResult<Employe_Insert_Result> Employe_Insert(string agence, string matricule, string nomPrenom, string qualite, Nullable<short> securityLevel, string motPasse, string libQualite, string dateCreation, string dateAttMP, Nullable<bool> suspension, Nullable<short> dureeMP, string employe, string nomEmploye, Nullable<double> maximumLimit, string status, string dateSuspension, string serverDate, string computerName, string dateTransfert, string allocateComputer, string empAccess, string openBr, string backDate, string backDateWk, ObjectParameter lect, ObjectParameter msg, string language, string auth)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var nomPrenomParameter = nomPrenom != null ?
                new ObjectParameter("NomPrenom", nomPrenom) :
                new ObjectParameter("NomPrenom", typeof(string));
    
            var qualiteParameter = qualite != null ?
                new ObjectParameter("Qualite", qualite) :
                new ObjectParameter("Qualite", typeof(string));
    
            var securityLevelParameter = securityLevel.HasValue ?
                new ObjectParameter("SecurityLevel", securityLevel) :
                new ObjectParameter("SecurityLevel", typeof(short));
    
            var motPasseParameter = motPasse != null ?
                new ObjectParameter("MotPasse", motPasse) :
                new ObjectParameter("MotPasse", typeof(string));
    
            var libQualiteParameter = libQualite != null ?
                new ObjectParameter("LibQualite", libQualite) :
                new ObjectParameter("LibQualite", typeof(string));
    
            var dateCreationParameter = dateCreation != null ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(string));
    
            var dateAttMPParameter = dateAttMP != null ?
                new ObjectParameter("DateAttMP", dateAttMP) :
                new ObjectParameter("DateAttMP", typeof(string));
    
            var suspensionParameter = suspension.HasValue ?
                new ObjectParameter("Suspension", suspension) :
                new ObjectParameter("Suspension", typeof(bool));
    
            var dureeMPParameter = dureeMP.HasValue ?
                new ObjectParameter("DureeMP", dureeMP) :
                new ObjectParameter("DureeMP", typeof(short));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var nomEmployeParameter = nomEmploye != null ?
                new ObjectParameter("NomEmploye", nomEmploye) :
                new ObjectParameter("NomEmploye", typeof(string));
    
            var maximumLimitParameter = maximumLimit.HasValue ?
                new ObjectParameter("MaximumLimit", maximumLimit) :
                new ObjectParameter("MaximumLimit", typeof(double));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var dateSuspensionParameter = dateSuspension != null ?
                new ObjectParameter("DateSuspension", dateSuspension) :
                new ObjectParameter("DateSuspension", typeof(string));
    
            var serverDateParameter = serverDate != null ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var dateTransfertParameter = dateTransfert != null ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(string));
    
            var allocateComputerParameter = allocateComputer != null ?
                new ObjectParameter("AllocateComputer", allocateComputer) :
                new ObjectParameter("AllocateComputer", typeof(string));
    
            var empAccessParameter = empAccess != null ?
                new ObjectParameter("EmpAccess", empAccess) :
                new ObjectParameter("EmpAccess", typeof(string));
    
            var openBrParameter = openBr != null ?
                new ObjectParameter("OpenBr", openBr) :
                new ObjectParameter("OpenBr", typeof(string));
    
            var backDateParameter = backDate != null ?
                new ObjectParameter("BackDate", backDate) :
                new ObjectParameter("BackDate", typeof(string));
    
            var backDateWkParameter = backDateWk != null ?
                new ObjectParameter("BackDateWk", backDateWk) :
                new ObjectParameter("BackDateWk", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var authParameter = auth != null ?
                new ObjectParameter("Auth", auth) :
                new ObjectParameter("Auth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employe_Insert_Result>("Employe_Insert", agenceParameter, matriculeParameter, nomPrenomParameter, qualiteParameter, securityLevelParameter, motPasseParameter, libQualiteParameter, dateCreationParameter, dateAttMPParameter, suspensionParameter, dureeMPParameter, employeParameter, nomEmployeParameter, maximumLimitParameter, statusParameter, dateSuspensionParameter, serverDateParameter, computerNameParameter, dateTransfertParameter, allocateComputerParameter, empAccessParameter, openBrParameter, backDateParameter, backDateWkParameter, lect, msg, languageParameter, authParameter);
        }
    
        public virtual ObjectResult<Employe_Update_Result> Employe_Update(string agence, string matricule, string nomPrenom, string qualite, Nullable<short> securityLevel, string motPasse, string libQualite, string dateCreation, string dateAttMP, Nullable<bool> suspension, Nullable<short> dureeMP, string employe, string nomEmploye, Nullable<double> maximumLimit, string status, string dateSuspension, string serverDate, string computerName, string dateTransfert, string allocateComputer, string empAccess, string openBr, string backDate, string backDateWk, ObjectParameter lect, ObjectParameter msg, string language, string auth)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var nomPrenomParameter = nomPrenom != null ?
                new ObjectParameter("NomPrenom", nomPrenom) :
                new ObjectParameter("NomPrenom", typeof(string));
    
            var qualiteParameter = qualite != null ?
                new ObjectParameter("Qualite", qualite) :
                new ObjectParameter("Qualite", typeof(string));
    
            var securityLevelParameter = securityLevel.HasValue ?
                new ObjectParameter("SecurityLevel", securityLevel) :
                new ObjectParameter("SecurityLevel", typeof(short));
    
            var motPasseParameter = motPasse != null ?
                new ObjectParameter("MotPasse", motPasse) :
                new ObjectParameter("MotPasse", typeof(string));
    
            var libQualiteParameter = libQualite != null ?
                new ObjectParameter("LibQualite", libQualite) :
                new ObjectParameter("LibQualite", typeof(string));
    
            var dateCreationParameter = dateCreation != null ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(string));
    
            var dateAttMPParameter = dateAttMP != null ?
                new ObjectParameter("DateAttMP", dateAttMP) :
                new ObjectParameter("DateAttMP", typeof(string));
    
            var suspensionParameter = suspension.HasValue ?
                new ObjectParameter("Suspension", suspension) :
                new ObjectParameter("Suspension", typeof(bool));
    
            var dureeMPParameter = dureeMP.HasValue ?
                new ObjectParameter("DureeMP", dureeMP) :
                new ObjectParameter("DureeMP", typeof(short));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var nomEmployeParameter = nomEmploye != null ?
                new ObjectParameter("NomEmploye", nomEmploye) :
                new ObjectParameter("NomEmploye", typeof(string));
    
            var maximumLimitParameter = maximumLimit.HasValue ?
                new ObjectParameter("MaximumLimit", maximumLimit) :
                new ObjectParameter("MaximumLimit", typeof(double));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var dateSuspensionParameter = dateSuspension != null ?
                new ObjectParameter("DateSuspension", dateSuspension) :
                new ObjectParameter("DateSuspension", typeof(string));
    
            var serverDateParameter = serverDate != null ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var dateTransfertParameter = dateTransfert != null ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(string));
    
            var allocateComputerParameter = allocateComputer != null ?
                new ObjectParameter("AllocateComputer", allocateComputer) :
                new ObjectParameter("AllocateComputer", typeof(string));
    
            var empAccessParameter = empAccess != null ?
                new ObjectParameter("EmpAccess", empAccess) :
                new ObjectParameter("EmpAccess", typeof(string));
    
            var openBrParameter = openBr != null ?
                new ObjectParameter("OpenBr", openBr) :
                new ObjectParameter("OpenBr", typeof(string));
    
            var backDateParameter = backDate != null ?
                new ObjectParameter("BackDate", backDate) :
                new ObjectParameter("BackDate", typeof(string));
    
            var backDateWkParameter = backDateWk != null ?
                new ObjectParameter("BackDateWk", backDateWk) :
                new ObjectParameter("BackDateWk", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var authParameter = auth != null ?
                new ObjectParameter("Auth", auth) :
                new ObjectParameter("Auth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employe_Update_Result>("Employe_Update", agenceParameter, matriculeParameter, nomPrenomParameter, qualiteParameter, securityLevelParameter, motPasseParameter, libQualiteParameter, dateCreationParameter, dateAttMPParameter, suspensionParameter, dureeMPParameter, employeParameter, nomEmployeParameter, maximumLimitParameter, statusParameter, dateSuspensionParameter, serverDateParameter, computerNameParameter, dateTransfertParameter, allocateComputerParameter, empAccessParameter, openBrParameter, backDateParameter, backDateWkParameter, lect, msg, languageParameter, authParameter);
        }
    
        public virtual ObjectResult<EOYACCOUNTING_Result> EOYACCOUNTING(string cptAgence, string year, string employe, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var cptAgenceParameter = cptAgence != null ?
                new ObjectParameter("CptAgence", cptAgence) :
                new ObjectParameter("CptAgence", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EOYACCOUNTING_Result>("EOYACCOUNTING", cptAgenceParameter, yearParameter, employeParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int EOYProcess(string year, string devise, ObjectParameter lect, ObjectParameter msg, string employe, string computerName, string language)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EOYProcess", yearParameter, deviseParameter, lect, msg, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int exclumanualpostgl_Delete(string chapcpte, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var chapcpteParameter = chapcpte != null ?
                new ObjectParameter("chapcpte", chapcpte) :
                new ObjectParameter("chapcpte", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("exclumanualpostgl_Delete", chapcpteParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int exclumanualpostgl_Insert(string chapcpte, string operationType, string libchapcpte, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var chapcpteParameter = chapcpte != null ?
                new ObjectParameter("chapcpte", chapcpte) :
                new ObjectParameter("chapcpte", typeof(string));
    
            var operationTypeParameter = operationType != null ?
                new ObjectParameter("OperationType", operationType) :
                new ObjectParameter("OperationType", typeof(string));
    
            var libchapcpteParameter = libchapcpte != null ?
                new ObjectParameter("libchapcpte", libchapcpte) :
                new ObjectParameter("libchapcpte", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("exclumanualpostgl_Insert", chapcpteParameter, operationTypeParameter, libchapcpteParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int exclumanualpostgl_Update(string chapcpte, string operationType, string libchapcpte, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var chapcpteParameter = chapcpte != null ?
                new ObjectParameter("chapcpte", chapcpte) :
                new ObjectParameter("chapcpte", typeof(string));
    
            var operationTypeParameter = operationType != null ?
                new ObjectParameter("OperationType", operationType) :
                new ObjectParameter("OperationType", typeof(string));
    
            var libchapcpteParameter = libchapcpte != null ?
                new ObjectParameter("libchapcpte", libchapcpte) :
                new ObjectParameter("libchapcpte", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("exclumanualpostgl_Update", chapcpteParameter, operationTypeParameter, libchapcpteParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int fcptg_Delete(string devcod, string cgnum, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var devcodParameter = devcod != null ?
                new ObjectParameter("devcod", devcod) :
                new ObjectParameter("devcod", typeof(string));
    
            var cgnumParameter = cgnum != null ?
                new ObjectParameter("cgnum", cgnum) :
                new ObjectParameter("cgnum", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("fcptg_Delete", devcodParameter, cgnumParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual ObjectResult<fcptg_Filter_Result> fcptg_Filter(Nullable<short> intFilterMode, string devcod, string cgnum, ObjectParameter countfield)
        {
            var intFilterModeParameter = intFilterMode.HasValue ?
                new ObjectParameter("IntFilterMode", intFilterMode) :
                new ObjectParameter("IntFilterMode", typeof(short));
    
            var devcodParameter = devcod != null ?
                new ObjectParameter("devcod", devcod) :
                new ObjectParameter("devcod", typeof(string));
    
            var cgnumParameter = cgnum != null ?
                new ObjectParameter("cgnum", cgnum) :
                new ObjectParameter("cgnum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<fcptg_Filter_Result>("fcptg_Filter", intFilterModeParameter, devcodParameter, cgnumParameter, countfield);
        }
    
        public virtual ObjectResult<fcptg_FilterNew_Result> fcptg_FilterNew(Nullable<short> intFilterMode, Nullable<short> agcod, string devcod, string cgnum, ObjectParameter countfield, ObjectParameter cgdbm, ObjectParameter cgcrm, ObjectParameter cgdbe, ObjectParameter cgcre)
        {
            var intFilterModeParameter = intFilterMode.HasValue ?
                new ObjectParameter("IntFilterMode", intFilterMode) :
                new ObjectParameter("IntFilterMode", typeof(short));
    
            var agcodParameter = agcod.HasValue ?
                new ObjectParameter("Agcod", agcod) :
                new ObjectParameter("Agcod", typeof(short));
    
            var devcodParameter = devcod != null ?
                new ObjectParameter("devcod", devcod) :
                new ObjectParameter("devcod", typeof(string));
    
            var cgnumParameter = cgnum != null ?
                new ObjectParameter("cgnum", cgnum) :
                new ObjectParameter("cgnum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<fcptg_FilterNew_Result>("fcptg_FilterNew", intFilterModeParameter, agcodParameter, devcodParameter, cgnumParameter, countfield, cgdbm, cgcrm, cgdbe, cgcre);
        }
    
        public virtual ObjectResult<fcptg_Insertbis_Result> fcptg_Insertbis(string employe, ObjectParameter lect, ObjectParameter errMsg, string computerName, string language)
        {
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<fcptg_Insertbis_Result>("fcptg_Insertbis", employeParameter, lect, errMsg, computerNameParameter, languageParameter);
        }
    
        public virtual int fcptg_InsertbisNew(Nullable<int> employe, ObjectParameter lect, ObjectParameter errMsg, string computerName, string language)
        {
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(int));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("fcptg_InsertbisNew", employeParameter, lect, errMsg, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<fcptg_Update_Result> fcptg_Update(string devcod, string cgnum, string cglc, string cglibf, string cgtype, Nullable<System.DateTime> cgdatcr, string employe, string cgsens, string cgstatus, ObjectParameter lect, ObjectParameter errMsg, string computerName, string language)
        {
            var devcodParameter = devcod != null ?
                new ObjectParameter("devcod", devcod) :
                new ObjectParameter("devcod", typeof(string));
    
            var cgnumParameter = cgnum != null ?
                new ObjectParameter("cgnum", cgnum) :
                new ObjectParameter("cgnum", typeof(string));
    
            var cglcParameter = cglc != null ?
                new ObjectParameter("cglc", cglc) :
                new ObjectParameter("cglc", typeof(string));
    
            var cglibfParameter = cglibf != null ?
                new ObjectParameter("cglibf", cglibf) :
                new ObjectParameter("cglibf", typeof(string));
    
            var cgtypeParameter = cgtype != null ?
                new ObjectParameter("cgtype", cgtype) :
                new ObjectParameter("cgtype", typeof(string));
    
            var cgdatcrParameter = cgdatcr.HasValue ?
                new ObjectParameter("cgdatcr", cgdatcr) :
                new ObjectParameter("cgdatcr", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var cgsensParameter = cgsens != null ?
                new ObjectParameter("Cgsens", cgsens) :
                new ObjectParameter("Cgsens", typeof(string));
    
            var cgstatusParameter = cgstatus != null ?
                new ObjectParameter("Cgstatus", cgstatus) :
                new ObjectParameter("Cgstatus", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<fcptg_Update_Result>("fcptg_Update", devcodParameter, cgnumParameter, cglcParameter, cglibfParameter, cgtypeParameter, cgdatcrParameter, employeParameter, cgsensParameter, cgstatusParameter, lect, errMsg, computerNameParameter, languageParameter);
        }
    
        public virtual int FCPTGTEMP_INSERT(string devcod, string cgnum, string cglc, string cglibf, string cgtype, Nullable<System.DateTime> cgdatcr, string employe, string cgsens, string cgstatus, ObjectParameter lect, ObjectParameter errMsg, string computerName, string language)
        {
            var devcodParameter = devcod != null ?
                new ObjectParameter("devcod", devcod) :
                new ObjectParameter("devcod", typeof(string));
    
            var cgnumParameter = cgnum != null ?
                new ObjectParameter("cgnum", cgnum) :
                new ObjectParameter("cgnum", typeof(string));
    
            var cglcParameter = cglc != null ?
                new ObjectParameter("cglc", cglc) :
                new ObjectParameter("cglc", typeof(string));
    
            var cglibfParameter = cglibf != null ?
                new ObjectParameter("cglibf", cglibf) :
                new ObjectParameter("cglibf", typeof(string));
    
            var cgtypeParameter = cgtype != null ?
                new ObjectParameter("cgtype", cgtype) :
                new ObjectParameter("cgtype", typeof(string));
    
            var cgdatcrParameter = cgdatcr.HasValue ?
                new ObjectParameter("cgdatcr", cgdatcr) :
                new ObjectParameter("cgdatcr", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var cgsensParameter = cgsens != null ?
                new ObjectParameter("Cgsens", cgsens) :
                new ObjectParameter("Cgsens", typeof(string));
    
            var cgstatusParameter = cgstatus != null ?
                new ObjectParameter("Cgstatus", cgstatus) :
                new ObjectParameter("Cgstatus", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FCPTGTEMP_INSERT", devcodParameter, cgnumParameter, cglcParameter, cglibfParameter, cgtypeParameter, cgdatcrParameter, employeParameter, cgsensParameter, cgstatusParameter, lect, errMsg, computerNameParameter, languageParameter);
        }
    
        public virtual int GaranteeAcc_Delete(string agence, string pc_COMPTEDEB, string pc_COMPTECRED, string pc_TYPEGARANTEE, string pc_CatClient, Nullable<int> pi_ProductCode, string pc_LibCatClient, string pc_LibProduct, string matricule, string libEmploye, string computername, string pc_CustomerType, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var pc_COMPTEDEBParameter = pc_COMPTEDEB != null ?
                new ObjectParameter("Pc_COMPTEDEB", pc_COMPTEDEB) :
                new ObjectParameter("Pc_COMPTEDEB", typeof(string));
    
            var pc_COMPTECREDParameter = pc_COMPTECRED != null ?
                new ObjectParameter("Pc_COMPTECRED", pc_COMPTECRED) :
                new ObjectParameter("Pc_COMPTECRED", typeof(string));
    
            var pc_TYPEGARANTEEParameter = pc_TYPEGARANTEE != null ?
                new ObjectParameter("Pc_TYPEGARANTEE", pc_TYPEGARANTEE) :
                new ObjectParameter("Pc_TYPEGARANTEE", typeof(string));
    
            var pc_CatClientParameter = pc_CatClient != null ?
                new ObjectParameter("Pc_CatClient", pc_CatClient) :
                new ObjectParameter("Pc_CatClient", typeof(string));
    
            var pi_ProductCodeParameter = pi_ProductCode.HasValue ?
                new ObjectParameter("Pi_ProductCode", pi_ProductCode) :
                new ObjectParameter("Pi_ProductCode", typeof(int));
    
            var pc_LibCatClientParameter = pc_LibCatClient != null ?
                new ObjectParameter("Pc_LibCatClient", pc_LibCatClient) :
                new ObjectParameter("Pc_LibCatClient", typeof(string));
    
            var pc_LibProductParameter = pc_LibProduct != null ?
                new ObjectParameter("Pc_LibProduct", pc_LibProduct) :
                new ObjectParameter("Pc_LibProduct", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var pc_CustomerTypeParameter = pc_CustomerType != null ?
                new ObjectParameter("Pc_CustomerType", pc_CustomerType) :
                new ObjectParameter("Pc_CustomerType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GaranteeAcc_Delete", agenceParameter, pc_COMPTEDEBParameter, pc_COMPTECREDParameter, pc_TYPEGARANTEEParameter, pc_CatClientParameter, pi_ProductCodeParameter, pc_LibCatClientParameter, pc_LibProductParameter, matriculeParameter, libEmployeParameter, computernameParameter, pc_CustomerTypeParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int GaranteeAcc_Insert(string agence, string pc_COMPTEDEB, string pc_COMPTECRED, string pc_TYPEGARANTEE, string pc_CatClient, Nullable<int> pi_ProductCode, string pc_LibCatClient, string pc_LibProduct, string matricule, string libEmploye, string computername, string pc_CustomerType, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var pc_COMPTEDEBParameter = pc_COMPTEDEB != null ?
                new ObjectParameter("Pc_COMPTEDEB", pc_COMPTEDEB) :
                new ObjectParameter("Pc_COMPTEDEB", typeof(string));
    
            var pc_COMPTECREDParameter = pc_COMPTECRED != null ?
                new ObjectParameter("Pc_COMPTECRED", pc_COMPTECRED) :
                new ObjectParameter("Pc_COMPTECRED", typeof(string));
    
            var pc_TYPEGARANTEEParameter = pc_TYPEGARANTEE != null ?
                new ObjectParameter("Pc_TYPEGARANTEE", pc_TYPEGARANTEE) :
                new ObjectParameter("Pc_TYPEGARANTEE", typeof(string));
    
            var pc_CatClientParameter = pc_CatClient != null ?
                new ObjectParameter("Pc_CatClient", pc_CatClient) :
                new ObjectParameter("Pc_CatClient", typeof(string));
    
            var pi_ProductCodeParameter = pi_ProductCode.HasValue ?
                new ObjectParameter("Pi_ProductCode", pi_ProductCode) :
                new ObjectParameter("Pi_ProductCode", typeof(int));
    
            var pc_LibCatClientParameter = pc_LibCatClient != null ?
                new ObjectParameter("Pc_LibCatClient", pc_LibCatClient) :
                new ObjectParameter("Pc_LibCatClient", typeof(string));
    
            var pc_LibProductParameter = pc_LibProduct != null ?
                new ObjectParameter("Pc_LibProduct", pc_LibProduct) :
                new ObjectParameter("Pc_LibProduct", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var pc_CustomerTypeParameter = pc_CustomerType != null ?
                new ObjectParameter("Pc_CustomerType", pc_CustomerType) :
                new ObjectParameter("Pc_CustomerType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GaranteeAcc_Insert", agenceParameter, pc_COMPTEDEBParameter, pc_COMPTECREDParameter, pc_TYPEGARANTEEParameter, pc_CatClientParameter, pi_ProductCodeParameter, pc_LibCatClientParameter, pc_LibProductParameter, matriculeParameter, libEmployeParameter, computernameParameter, pc_CustomerTypeParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int GaranteeAcc_Update(string agence, string pc_COMPTEDEB, string pc_COMPTECRED, string pc_TYPEGARANTEE, string pc_CatClient, Nullable<int> pi_ProductCode, string pc_LibCatClient, string pc_LibProduct, string matricule, string libEmploye, string computername, string pc_CustomerType, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var pc_COMPTEDEBParameter = pc_COMPTEDEB != null ?
                new ObjectParameter("Pc_COMPTEDEB", pc_COMPTEDEB) :
                new ObjectParameter("Pc_COMPTEDEB", typeof(string));
    
            var pc_COMPTECREDParameter = pc_COMPTECRED != null ?
                new ObjectParameter("Pc_COMPTECRED", pc_COMPTECRED) :
                new ObjectParameter("Pc_COMPTECRED", typeof(string));
    
            var pc_TYPEGARANTEEParameter = pc_TYPEGARANTEE != null ?
                new ObjectParameter("Pc_TYPEGARANTEE", pc_TYPEGARANTEE) :
                new ObjectParameter("Pc_TYPEGARANTEE", typeof(string));
    
            var pc_CatClientParameter = pc_CatClient != null ?
                new ObjectParameter("Pc_CatClient", pc_CatClient) :
                new ObjectParameter("Pc_CatClient", typeof(string));
    
            var pi_ProductCodeParameter = pi_ProductCode.HasValue ?
                new ObjectParameter("Pi_ProductCode", pi_ProductCode) :
                new ObjectParameter("Pi_ProductCode", typeof(int));
    
            var pc_LibCatClientParameter = pc_LibCatClient != null ?
                new ObjectParameter("Pc_LibCatClient", pc_LibCatClient) :
                new ObjectParameter("Pc_LibCatClient", typeof(string));
    
            var pc_LibProductParameter = pc_LibProduct != null ?
                new ObjectParameter("Pc_LibProduct", pc_LibProduct) :
                new ObjectParameter("Pc_LibProduct", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var pc_CustomerTypeParameter = pc_CustomerType != null ?
                new ObjectParameter("Pc_CustomerType", pc_CustomerType) :
                new ObjectParameter("Pc_CustomerType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GaranteeAcc_Update", agenceParameter, pc_COMPTEDEBParameter, pc_COMPTECREDParameter, pc_TYPEGARANTEEParameter, pc_CatClientParameter, pi_ProductCodeParameter, pc_LibCatClientParameter, pc_LibProductParameter, matriculeParameter, libEmployeParameter, computernameParameter, pc_CustomerTypeParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int GaranteeAccounting(string libAgence, string client, string denomination, string cpteJumelle, string cpteJumelleCredit, string numeroContrat, string employe, string libEmploye, string devise, string libDevise, string txnNo, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var cpteJumelleCreditParameter = cpteJumelleCredit != null ?
                new ObjectParameter("CpteJumelleCredit", cpteJumelleCredit) :
                new ObjectParameter("CpteJumelleCredit", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GaranteeAccounting", libAgenceParameter, clientParameter, denominationParameter, cpteJumelleParameter, cpteJumelleCreditParameter, numeroContratParameter, employeParameter, libEmployeParameter, deviseParameter, libDeviseParameter, txnNoParameter, lect, msg, languageParameter);
        }
    
        public virtual ObjectResult<Garanti_Delete_Result> Garanti_Delete(string refGarantie, string numeroContrat, string typeGarantie, Nullable<double> valeur, string description, Nullable<System.DateTime> dateCreation, string employe, ObjectParameter lect, ObjectParameter errMsg, Nullable<decimal> serie, string language, string computerName)
        {
            var refGarantieParameter = refGarantie != null ?
                new ObjectParameter("RefGarantie", refGarantie) :
                new ObjectParameter("RefGarantie", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var typeGarantieParameter = typeGarantie != null ?
                new ObjectParameter("TypeGarantie", typeGarantie) :
                new ObjectParameter("TypeGarantie", typeof(string));
    
            var valeurParameter = valeur.HasValue ?
                new ObjectParameter("Valeur", valeur) :
                new ObjectParameter("Valeur", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var serieParameter = serie.HasValue ?
                new ObjectParameter("serie", serie) :
                new ObjectParameter("serie", typeof(decimal));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Garanti_Delete_Result>("Garanti_Delete", refGarantieParameter, numeroContratParameter, typeGarantieParameter, valeurParameter, descriptionParameter, dateCreationParameter, employeParameter, lect, errMsg, serieParameter, languageParameter, computerNameParameter);
        }
    
        public virtual int Garanti_Insert(string refGarantie, string numeroContrat, string typeGarantie, Nullable<double> valeur, string description, Nullable<System.DateTime> dateCreation, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var refGarantieParameter = refGarantie != null ?
                new ObjectParameter("RefGarantie", refGarantie) :
                new ObjectParameter("RefGarantie", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var typeGarantieParameter = typeGarantie != null ?
                new ObjectParameter("TypeGarantie", typeGarantie) :
                new ObjectParameter("TypeGarantie", typeof(string));
    
            var valeurParameter = valeur.HasValue ?
                new ObjectParameter("Valeur", valeur) :
                new ObjectParameter("Valeur", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Garanti_Insert", refGarantieParameter, numeroContratParameter, typeGarantieParameter, valeurParameter, descriptionParameter, dateCreationParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual ObjectResult<Garanti_Reverse_Result> Garanti_Reverse(string refGarantie, string numeroContrat, string typeGarantie, Nullable<double> valeur, string description, string employe, ObjectParameter lect, ObjectParameter errMsg, Nullable<decimal> serie, string language, string computerName, string libAgence, string denomination, string cpteJumelle, string cpteJumelleCredit, string libEmploye, string devise, string libDevise)
        {
            var refGarantieParameter = refGarantie != null ?
                new ObjectParameter("RefGarantie", refGarantie) :
                new ObjectParameter("RefGarantie", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var typeGarantieParameter = typeGarantie != null ?
                new ObjectParameter("TypeGarantie", typeGarantie) :
                new ObjectParameter("TypeGarantie", typeof(string));
    
            var valeurParameter = valeur.HasValue ?
                new ObjectParameter("Valeur", valeur) :
                new ObjectParameter("Valeur", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var serieParameter = serie.HasValue ?
                new ObjectParameter("serie", serie) :
                new ObjectParameter("serie", typeof(decimal));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var cpteJumelleCreditParameter = cpteJumelleCredit != null ?
                new ObjectParameter("CpteJumelleCredit", cpteJumelleCredit) :
                new ObjectParameter("CpteJumelleCredit", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Garanti_Reverse_Result>("Garanti_Reverse", refGarantieParameter, numeroContratParameter, typeGarantieParameter, valeurParameter, descriptionParameter, employeParameter, lect, errMsg, serieParameter, languageParameter, computerNameParameter, libAgenceParameter, denominationParameter, cpteJumelleParameter, cpteJumelleCreditParameter, libEmployeParameter, deviseParameter, libDeviseParameter);
        }
    
        public virtual ObjectResult<Garanti_Update_Result> Garanti_Update(string refGarantie, string numeroContrat, string typeGarantie, Nullable<double> valeur, string description, Nullable<System.DateTime> dateCreation, string employe, ObjectParameter lect, ObjectParameter errMsg, Nullable<decimal> serie, string language, string computerName)
        {
            var refGarantieParameter = refGarantie != null ?
                new ObjectParameter("RefGarantie", refGarantie) :
                new ObjectParameter("RefGarantie", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var typeGarantieParameter = typeGarantie != null ?
                new ObjectParameter("TypeGarantie", typeGarantie) :
                new ObjectParameter("TypeGarantie", typeof(string));
    
            var valeurParameter = valeur.HasValue ?
                new ObjectParameter("Valeur", valeur) :
                new ObjectParameter("Valeur", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var serieParameter = serie.HasValue ?
                new ObjectParameter("serie", serie) :
                new ObjectParameter("serie", typeof(decimal));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Garanti_Update_Result>("Garanti_Update", refGarantieParameter, numeroContratParameter, typeGarantieParameter, valeurParameter, descriptionParameter, dateCreationParameter, employeParameter, lect, errMsg, serieParameter, languageParameter, computerNameParameter);
        }
    
        public virtual int GENCAISSE(string cptAgence, string state, string wCaisse, ObjectParameter lect, ObjectParameter msg, string employe, string computerName, string language)
        {
            var cptAgenceParameter = cptAgence != null ?
                new ObjectParameter("CptAgence", cptAgence) :
                new ObjectParameter("CptAgence", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var wCaisseParameter = wCaisse != null ?
                new ObjectParameter("wCaisse", wCaisse) :
                new ObjectParameter("wCaisse", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GENCAISSE", cptAgenceParameter, stateParameter, wCaisseParameter, lect, msg, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int GENCAISSESIMPLE(string cptAgence, string state, string wCaisse, ObjectParameter lect, ObjectParameter msg, string employe, string computerName, string language)
        {
            var cptAgenceParameter = cptAgence != null ?
                new ObjectParameter("CptAgence", cptAgence) :
                new ObjectParameter("CptAgence", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var wCaisseParameter = wCaisse != null ?
                new ObjectParameter("wCaisse", wCaisse) :
                new ObjectParameter("wCaisse", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GENCAISSESIMPLE", cptAgenceParameter, stateParameter, wCaisseParameter, lect, msg, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int GENCAISSESIMPLEnew(string cptAgence, string state, string wCaisse, ObjectParameter lect, ObjectParameter msg, string employe, string computerName, string language)
        {
            var cptAgenceParameter = cptAgence != null ?
                new ObjectParameter("CptAgence", cptAgence) :
                new ObjectParameter("CptAgence", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var wCaisseParameter = wCaisse != null ?
                new ObjectParameter("wCaisse", wCaisse) :
                new ObjectParameter("wCaisse", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GENCAISSESIMPLEnew", cptAgenceParameter, stateParameter, wCaisseParameter, lect, msg, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int GenDormantAccount(string svagence, Nullable<System.DateTime> serverDate, ObjectParameter lect, ObjectParameter msg, string employe, string computerName, string language)
        {
            var svagenceParameter = svagence != null ?
                new ObjectParameter("Svagence", svagence) :
                new ObjectParameter("Svagence", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenDormantAccount", svagenceParameter, serverDateParameter, lect, msg, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int GeneralPara_Validate(string employe, string modspatt, string pageCount, Nullable<System.DateTime> dateCreation, Nullable<int> sTMTPageCount, string collectionPost, string lendingPost, string updatePosition, string checkBookVerif, Nullable<int> dormantperiode, Nullable<int> nopymentperiode, string smsbnk, string typeAttente, Nullable<int> dayContentieux, Nullable<int> dayWriteoff, string useLoanContentious, string newConfigPhoto, string cobacLitMethod, string depositPost, string trfDataWEST, string centralversion, string ccul, string backupMethod, string pathFirstBackup, string pathLastBackup, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName, string nbLoan, string usesession, string vat, string countaccount, Nullable<int> delayTime, Nullable<int> dayBackDate)
        {
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var modspattParameter = modspatt != null ?
                new ObjectParameter("Modspatt", modspatt) :
                new ObjectParameter("Modspatt", typeof(string));
    
            var pageCountParameter = pageCount != null ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var sTMTPageCountParameter = sTMTPageCount.HasValue ?
                new ObjectParameter("STMTPageCount", sTMTPageCount) :
                new ObjectParameter("STMTPageCount", typeof(int));
    
            var collectionPostParameter = collectionPost != null ?
                new ObjectParameter("CollectionPost", collectionPost) :
                new ObjectParameter("CollectionPost", typeof(string));
    
            var lendingPostParameter = lendingPost != null ?
                new ObjectParameter("LendingPost", lendingPost) :
                new ObjectParameter("LendingPost", typeof(string));
    
            var updatePositionParameter = updatePosition != null ?
                new ObjectParameter("UpdatePosition", updatePosition) :
                new ObjectParameter("UpdatePosition", typeof(string));
    
            var checkBookVerifParameter = checkBookVerif != null ?
                new ObjectParameter("CheckBookVerif", checkBookVerif) :
                new ObjectParameter("CheckBookVerif", typeof(string));
    
            var dormantperiodeParameter = dormantperiode.HasValue ?
                new ObjectParameter("Dormantperiode", dormantperiode) :
                new ObjectParameter("Dormantperiode", typeof(int));
    
            var nopymentperiodeParameter = nopymentperiode.HasValue ?
                new ObjectParameter("Nopymentperiode", nopymentperiode) :
                new ObjectParameter("Nopymentperiode", typeof(int));
    
            var smsbnkParameter = smsbnk != null ?
                new ObjectParameter("smsbnk", smsbnk) :
                new ObjectParameter("smsbnk", typeof(string));
    
            var typeAttenteParameter = typeAttente != null ?
                new ObjectParameter("TypeAttente", typeAttente) :
                new ObjectParameter("TypeAttente", typeof(string));
    
            var dayContentieuxParameter = dayContentieux.HasValue ?
                new ObjectParameter("DayContentieux", dayContentieux) :
                new ObjectParameter("DayContentieux", typeof(int));
    
            var dayWriteoffParameter = dayWriteoff.HasValue ?
                new ObjectParameter("DayWriteoff", dayWriteoff) :
                new ObjectParameter("DayWriteoff", typeof(int));
    
            var useLoanContentiousParameter = useLoanContentious != null ?
                new ObjectParameter("UseLoanContentious", useLoanContentious) :
                new ObjectParameter("UseLoanContentious", typeof(string));
    
            var newConfigPhotoParameter = newConfigPhoto != null ?
                new ObjectParameter("NewConfigPhoto", newConfigPhoto) :
                new ObjectParameter("NewConfigPhoto", typeof(string));
    
            var cobacLitMethodParameter = cobacLitMethod != null ?
                new ObjectParameter("CobacLitMethod", cobacLitMethod) :
                new ObjectParameter("CobacLitMethod", typeof(string));
    
            var depositPostParameter = depositPost != null ?
                new ObjectParameter("DepositPost", depositPost) :
                new ObjectParameter("DepositPost", typeof(string));
    
            var trfDataWESTParameter = trfDataWEST != null ?
                new ObjectParameter("TrfDataWEST", trfDataWEST) :
                new ObjectParameter("TrfDataWEST", typeof(string));
    
            var centralversionParameter = centralversion != null ?
                new ObjectParameter("centralversion", centralversion) :
                new ObjectParameter("centralversion", typeof(string));
    
            var cculParameter = ccul != null ?
                new ObjectParameter("ccul", ccul) :
                new ObjectParameter("ccul", typeof(string));
    
            var backupMethodParameter = backupMethod != null ?
                new ObjectParameter("BackupMethod", backupMethod) :
                new ObjectParameter("BackupMethod", typeof(string));
    
            var pathFirstBackupParameter = pathFirstBackup != null ?
                new ObjectParameter("PathFirstBackup", pathFirstBackup) :
                new ObjectParameter("PathFirstBackup", typeof(string));
    
            var pathLastBackupParameter = pathLastBackup != null ?
                new ObjectParameter("PathLastBackup", pathLastBackup) :
                new ObjectParameter("PathLastBackup", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var nbLoanParameter = nbLoan != null ?
                new ObjectParameter("NbLoan", nbLoan) :
                new ObjectParameter("NbLoan", typeof(string));
    
            var usesessionParameter = usesession != null ?
                new ObjectParameter("usesession", usesession) :
                new ObjectParameter("usesession", typeof(string));
    
            var vatParameter = vat != null ?
                new ObjectParameter("Vat", vat) :
                new ObjectParameter("Vat", typeof(string));
    
            var countaccountParameter = countaccount != null ?
                new ObjectParameter("countaccount", countaccount) :
                new ObjectParameter("countaccount", typeof(string));
    
            var delayTimeParameter = delayTime.HasValue ?
                new ObjectParameter("DelayTime", delayTime) :
                new ObjectParameter("DelayTime", typeof(int));
    
            var dayBackDateParameter = dayBackDate.HasValue ?
                new ObjectParameter("DayBackDate", dayBackDate) :
                new ObjectParameter("DayBackDate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeneralPara_Validate", employeParameter, modspattParameter, pageCountParameter, dateCreationParameter, sTMTPageCountParameter, collectionPostParameter, lendingPostParameter, updatePositionParameter, checkBookVerifParameter, dormantperiodeParameter, nopymentperiodeParameter, smsbnkParameter, typeAttenteParameter, dayContentieuxParameter, dayWriteoffParameter, useLoanContentiousParameter, newConfigPhotoParameter, cobacLitMethodParameter, depositPostParameter, trfDataWESTParameter, centralversionParameter, cculParameter, backupMethodParameter, pathFirstBackupParameter, pathLastBackupParameter, lect, errMsg, languageParameter, computerNameParameter, nbLoanParameter, usesessionParameter, vatParameter, countaccountParameter, delayTimeParameter, dayBackDateParameter);
        }
    
        public virtual int GENJOURNALS(string cptAgence, string employe, string libEmploye, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var cptAgenceParameter = cptAgence != null ?
                new ObjectParameter("CptAgence", cptAgence) :
                new ObjectParameter("CptAgence", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GENJOURNALS", cptAgenceParameter, employeParameter, libEmployeParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int GENJOURNALSSIMPLE(string cptAgence, string employe, string libEmploye, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var cptAgenceParameter = cptAgence != null ?
                new ObjectParameter("CptAgence", cptAgence) :
                new ObjectParameter("CptAgence", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GENJOURNALSSIMPLE", cptAgenceParameter, employeParameter, libEmployeParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int GENJOURNALSSIMPLENew(string cptAgence, string employe, string libEmploye, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var cptAgenceParameter = cptAgence != null ?
                new ObjectParameter("CptAgence", cptAgence) :
                new ObjectParameter("CptAgence", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GENJOURNALSSIMPLENew", cptAgenceParameter, employeParameter, libEmployeParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int GenRef(string agenceEmetrice, string agencerecept, string optionTransfert, Nullable<System.DateTime> serverdate, ObjectParameter refReturn, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var agenceEmetriceParameter = agenceEmetrice != null ?
                new ObjectParameter("AgenceEmetrice", agenceEmetrice) :
                new ObjectParameter("AgenceEmetrice", typeof(string));
    
            var agencereceptParameter = agencerecept != null ?
                new ObjectParameter("Agencerecept", agencerecept) :
                new ObjectParameter("Agencerecept", typeof(string));
    
            var optionTransfertParameter = optionTransfert != null ?
                new ObjectParameter("OptionTransfert", optionTransfert) :
                new ObjectParameter("OptionTransfert", typeof(string));
    
            var serverdateParameter = serverdate.HasValue ?
                new ObjectParameter("serverdate", serverdate) :
                new ObjectParameter("serverdate", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenRef", agenceEmetriceParameter, agencereceptParameter, optionTransfertParameter, serverdateParameter, refReturn, lect, msg, languageParameter);
        }
    
        public virtual int GenRefOD(string agenceEmetrice, string optionTransfert, Nullable<System.DateTime> serverdate, ObjectParameter refReturn, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var agenceEmetriceParameter = agenceEmetrice != null ?
                new ObjectParameter("AgenceEmetrice", agenceEmetrice) :
                new ObjectParameter("AgenceEmetrice", typeof(string));
    
            var optionTransfertParameter = optionTransfert != null ?
                new ObjectParameter("OptionTransfert", optionTransfert) :
                new ObjectParameter("OptionTransfert", typeof(string));
    
            var serverdateParameter = serverdate.HasValue ?
                new ObjectParameter("serverdate", serverdate) :
                new ObjectParameter("serverdate", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenRefOD", agenceEmetriceParameter, optionTransfertParameter, serverdateParameter, refReturn, lect, msg, languageParameter);
        }
    
        public virtual int GeNSpeedyHO(Nullable<int> wAgence, string wlibAgence, Nullable<System.DateTime> dateoperation, Nullable<System.DateTime> serverDate, Nullable<int> wEmploye, string wlibEmploye, string wdevise, string wLibDevise, string wJournal, string wlibjournal, string wtrcode, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var wAgenceParameter = wAgence.HasValue ?
                new ObjectParameter("wAgence", wAgence) :
                new ObjectParameter("wAgence", typeof(int));
    
            var wlibAgenceParameter = wlibAgence != null ?
                new ObjectParameter("wlibAgence", wlibAgence) :
                new ObjectParameter("wlibAgence", typeof(string));
    
            var dateoperationParameter = dateoperation.HasValue ?
                new ObjectParameter("dateoperation", dateoperation) :
                new ObjectParameter("dateoperation", typeof(System.DateTime));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var wEmployeParameter = wEmploye.HasValue ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(int));
    
            var wlibEmployeParameter = wlibEmploye != null ?
                new ObjectParameter("wlibEmploye", wlibEmploye) :
                new ObjectParameter("wlibEmploye", typeof(string));
    
            var wdeviseParameter = wdevise != null ?
                new ObjectParameter("wdevise", wdevise) :
                new ObjectParameter("wdevise", typeof(string));
    
            var wLibDeviseParameter = wLibDevise != null ?
                new ObjectParameter("WLibDevise", wLibDevise) :
                new ObjectParameter("WLibDevise", typeof(string));
    
            var wJournalParameter = wJournal != null ?
                new ObjectParameter("WJournal", wJournal) :
                new ObjectParameter("WJournal", typeof(string));
    
            var wlibjournalParameter = wlibjournal != null ?
                new ObjectParameter("wlibjournal", wlibjournal) :
                new ObjectParameter("wlibjournal", typeof(string));
    
            var wtrcodeParameter = wtrcode != null ?
                new ObjectParameter("wtrcode", wtrcode) :
                new ObjectParameter("wtrcode", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeNSpeedyHO", wAgenceParameter, wlibAgenceParameter, dateoperationParameter, serverDateParameter, wEmployeParameter, wlibEmployeParameter, wdeviseParameter, wLibDeviseParameter, wJournalParameter, wlibjournalParameter, wtrcodeParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int GenStopPaymentAccount(string svagence, Nullable<System.DateTime> serverDate, ObjectParameter lect, ObjectParameter msg, string employe, string computerName, string language)
        {
            var svagenceParameter = svagence != null ?
                new ObjectParameter("Svagence", svagence) :
                new ObjectParameter("Svagence", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenStopPaymentAccount", svagenceParameter, serverDateParameter, lect, msg, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int GetAuthorisationInfoVal(string matricule, Nullable<int> type, Nullable<double> montant, Nullable<double> balacct, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var balacctParameter = balacct.HasValue ?
                new ObjectParameter("balacct", balacct) :
                new ObjectParameter("balacct", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAuthorisationInfoVal", matriculeParameter, typeParameter, montantParameter, balacctParameter, lect, msg, languageParameter);
        }
    
        public virtual int Glhist_Insert(string agence, string devise, string compte, Nullable<System.DateTime> dateOperation, string journal, Nullable<int> folio, Nullable<decimal> ligne, string codeoperation, string libelleoperation, string refEcrit, string refOperation, Nullable<double> debit, Nullable<double> credit, string description, string dateValeur, Nullable<System.DateTime> dateMaj, string codeEmpl, Nullable<System.DateTime> dateSaisie, Nullable<int> piece, string cpteJumelle, string txnNo, string numpiece, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName, string representative)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var compteParameter = compte != null ?
                new ObjectParameter("Compte", compte) :
                new ObjectParameter("Compte", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var ligneParameter = ligne.HasValue ?
                new ObjectParameter("Ligne", ligne) :
                new ObjectParameter("Ligne", typeof(decimal));
    
            var codeoperationParameter = codeoperation != null ?
                new ObjectParameter("Codeoperation", codeoperation) :
                new ObjectParameter("Codeoperation", typeof(string));
    
            var libelleoperationParameter = libelleoperation != null ?
                new ObjectParameter("Libelleoperation", libelleoperation) :
                new ObjectParameter("Libelleoperation", typeof(string));
    
            var refEcritParameter = refEcrit != null ?
                new ObjectParameter("RefEcrit", refEcrit) :
                new ObjectParameter("RefEcrit", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateValeurParameter = dateValeur != null ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(string));
    
            var dateMajParameter = dateMaj.HasValue ?
                new ObjectParameter("DateMaj", dateMaj) :
                new ObjectParameter("DateMaj", typeof(System.DateTime));
    
            var codeEmplParameter = codeEmpl != null ?
                new ObjectParameter("CodeEmpl", codeEmpl) :
                new ObjectParameter("CodeEmpl", typeof(string));
    
            var dateSaisieParameter = dateSaisie.HasValue ?
                new ObjectParameter("DateSaisie", dateSaisie) :
                new ObjectParameter("DateSaisie", typeof(System.DateTime));
    
            var pieceParameter = piece.HasValue ?
                new ObjectParameter("Piece", piece) :
                new ObjectParameter("Piece", typeof(int));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var numpieceParameter = numpiece != null ?
                new ObjectParameter("Numpiece", numpiece) :
                new ObjectParameter("Numpiece", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var representativeParameter = representative != null ?
                new ObjectParameter("Representative", representative) :
                new ObjectParameter("Representative", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Glhist_Insert", agenceParameter, deviseParameter, compteParameter, dateOperationParameter, journalParameter, folioParameter, ligneParameter, codeoperationParameter, libelleoperationParameter, refEcritParameter, refOperationParameter, debitParameter, creditParameter, descriptionParameter, dateValeurParameter, dateMajParameter, codeEmplParameter, dateSaisieParameter, pieceParameter, cpteJumelleParameter, txnNoParameter, numpieceParameter, lect, errMsg, languageParameter, computerNameParameter, representativeParameter);
        }
    
        public virtual int GlHist_Select(string condition)
        {
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GlHist_Select", conditionParameter);
        }
    
        public virtual int HistoCaisse_Insert(string codeCaisse, string libelle, Nullable<double> montantDep, Nullable<double> debitJour, Nullable<double> creditJour, string compte, string cle, string journal, string libJournal, string libCompte, Nullable<System.DateTime> dateOp, string employe, string libEmploye, Nullable<double> maxAmount, Nullable<double> solde, Nullable<System.DateTime> dateServer, Nullable<double> cashHand, Nullable<System.DateTime> dateCreation, string agence, Nullable<System.DateTime> dateTransfert, string devise, ObjectParameter lect, string language)
        {
            var codeCaisseParameter = codeCaisse != null ?
                new ObjectParameter("CodeCaisse", codeCaisse) :
                new ObjectParameter("CodeCaisse", typeof(string));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("Libelle", libelle) :
                new ObjectParameter("Libelle", typeof(string));
    
            var montantDepParameter = montantDep.HasValue ?
                new ObjectParameter("MontantDep", montantDep) :
                new ObjectParameter("MontantDep", typeof(double));
    
            var debitJourParameter = debitJour.HasValue ?
                new ObjectParameter("DebitJour", debitJour) :
                new ObjectParameter("DebitJour", typeof(double));
    
            var creditJourParameter = creditJour.HasValue ?
                new ObjectParameter("CreditJour", creditJour) :
                new ObjectParameter("CreditJour", typeof(double));
    
            var compteParameter = compte != null ?
                new ObjectParameter("Compte", compte) :
                new ObjectParameter("Compte", typeof(string));
    
            var cleParameter = cle != null ?
                new ObjectParameter("Cle", cle) :
                new ObjectParameter("Cle", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var libJournalParameter = libJournal != null ?
                new ObjectParameter("LibJournal", libJournal) :
                new ObjectParameter("LibJournal", typeof(string));
    
            var libCompteParameter = libCompte != null ?
                new ObjectParameter("LibCompte", libCompte) :
                new ObjectParameter("LibCompte", typeof(string));
    
            var dateOpParameter = dateOp.HasValue ?
                new ObjectParameter("DateOp", dateOp) :
                new ObjectParameter("DateOp", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var maxAmountParameter = maxAmount.HasValue ?
                new ObjectParameter("MaxAmount", maxAmount) :
                new ObjectParameter("MaxAmount", typeof(double));
    
            var soldeParameter = solde.HasValue ?
                new ObjectParameter("Solde", solde) :
                new ObjectParameter("Solde", typeof(double));
    
            var dateServerParameter = dateServer.HasValue ?
                new ObjectParameter("DateServer", dateServer) :
                new ObjectParameter("DateServer", typeof(System.DateTime));
    
            var cashHandParameter = cashHand.HasValue ?
                new ObjectParameter("CashHand", cashHand) :
                new ObjectParameter("CashHand", typeof(double));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HistoCaisse_Insert", codeCaisseParameter, libelleParameter, montantDepParameter, debitJourParameter, creditJourParameter, compteParameter, cleParameter, journalParameter, libJournalParameter, libCompteParameter, dateOpParameter, employeParameter, libEmployeParameter, maxAmountParameter, soldeParameter, dateServerParameter, cashHandParameter, dateCreationParameter, agenceParameter, dateTransfertParameter, deviseParameter, lect, languageParameter);
        }
    
        public virtual int Immo_Insert(string agence, string numero, Nullable<System.DateTime> dateAcquisition, string designation, Nullable<double> dureeIm, Nullable<double> tauxAmortissement, Nullable<double> amortCummule, Nullable<double> valeurResiduelle, string cpteAmortissement, Nullable<short> dureeGarantie, Nullable<double> amortCalPeriode, Nullable<System.DateTime> dateDernCalAm, Nullable<System.DateTime> dateCptabAmort, string libFournisseur, string typeAcq, string refFacture, Nullable<System.DateTime> dateProvCal, Nullable<System.DateTime> dateCreation, string codeType, string codeLocal, Nullable<System.DateTime> dateMiseService, string periodiciteCompta, string periodiciteAmort, Nullable<int> monthnumber, string statusAcq, string cpteDepreciation, Nullable<System.DateTime> dateInitCalcul, Nullable<double> montantInitial, string cpteImmob, Nullable<System.DateTime> dateCptabAcq, ObjectParameter lect, ObjectParameter msg, string language, string computerName, string employe)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("Numero", numero) :
                new ObjectParameter("Numero", typeof(string));
    
            var dateAcquisitionParameter = dateAcquisition.HasValue ?
                new ObjectParameter("DateAcquisition", dateAcquisition) :
                new ObjectParameter("DateAcquisition", typeof(System.DateTime));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var dureeImParameter = dureeIm.HasValue ?
                new ObjectParameter("DureeIm", dureeIm) :
                new ObjectParameter("DureeIm", typeof(double));
    
            var tauxAmortissementParameter = tauxAmortissement.HasValue ?
                new ObjectParameter("TauxAmortissement", tauxAmortissement) :
                new ObjectParameter("TauxAmortissement", typeof(double));
    
            var amortCummuleParameter = amortCummule.HasValue ?
                new ObjectParameter("AmortCummule", amortCummule) :
                new ObjectParameter("AmortCummule", typeof(double));
    
            var valeurResiduelleParameter = valeurResiduelle.HasValue ?
                new ObjectParameter("ValeurResiduelle", valeurResiduelle) :
                new ObjectParameter("ValeurResiduelle", typeof(double));
    
            var cpteAmortissementParameter = cpteAmortissement != null ?
                new ObjectParameter("CpteAmortissement", cpteAmortissement) :
                new ObjectParameter("CpteAmortissement", typeof(string));
    
            var dureeGarantieParameter = dureeGarantie.HasValue ?
                new ObjectParameter("DureeGarantie", dureeGarantie) :
                new ObjectParameter("DureeGarantie", typeof(short));
    
            var amortCalPeriodeParameter = amortCalPeriode.HasValue ?
                new ObjectParameter("AmortCalPeriode", amortCalPeriode) :
                new ObjectParameter("AmortCalPeriode", typeof(double));
    
            var dateDernCalAmParameter = dateDernCalAm.HasValue ?
                new ObjectParameter("DateDernCalAm", dateDernCalAm) :
                new ObjectParameter("DateDernCalAm", typeof(System.DateTime));
    
            var dateCptabAmortParameter = dateCptabAmort.HasValue ?
                new ObjectParameter("DateCptabAmort", dateCptabAmort) :
                new ObjectParameter("DateCptabAmort", typeof(System.DateTime));
    
            var libFournisseurParameter = libFournisseur != null ?
                new ObjectParameter("LibFournisseur", libFournisseur) :
                new ObjectParameter("LibFournisseur", typeof(string));
    
            var typeAcqParameter = typeAcq != null ?
                new ObjectParameter("TypeAcq", typeAcq) :
                new ObjectParameter("TypeAcq", typeof(string));
    
            var refFactureParameter = refFacture != null ?
                new ObjectParameter("RefFacture", refFacture) :
                new ObjectParameter("RefFacture", typeof(string));
    
            var dateProvCalParameter = dateProvCal.HasValue ?
                new ObjectParameter("DateProvCal", dateProvCal) :
                new ObjectParameter("DateProvCal", typeof(System.DateTime));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var codeTypeParameter = codeType != null ?
                new ObjectParameter("CodeType", codeType) :
                new ObjectParameter("CodeType", typeof(string));
    
            var codeLocalParameter = codeLocal != null ?
                new ObjectParameter("CodeLocal", codeLocal) :
                new ObjectParameter("CodeLocal", typeof(string));
    
            var dateMiseServiceParameter = dateMiseService.HasValue ?
                new ObjectParameter("DateMiseService", dateMiseService) :
                new ObjectParameter("DateMiseService", typeof(System.DateTime));
    
            var periodiciteComptaParameter = periodiciteCompta != null ?
                new ObjectParameter("PeriodiciteCompta", periodiciteCompta) :
                new ObjectParameter("PeriodiciteCompta", typeof(string));
    
            var periodiciteAmortParameter = periodiciteAmort != null ?
                new ObjectParameter("PeriodiciteAmort", periodiciteAmort) :
                new ObjectParameter("PeriodiciteAmort", typeof(string));
    
            var monthnumberParameter = monthnumber.HasValue ?
                new ObjectParameter("monthnumber", monthnumber) :
                new ObjectParameter("monthnumber", typeof(int));
    
            var statusAcqParameter = statusAcq != null ?
                new ObjectParameter("StatusAcq", statusAcq) :
                new ObjectParameter("StatusAcq", typeof(string));
    
            var cpteDepreciationParameter = cpteDepreciation != null ?
                new ObjectParameter("CpteDepreciation", cpteDepreciation) :
                new ObjectParameter("CpteDepreciation", typeof(string));
    
            var dateInitCalculParameter = dateInitCalcul.HasValue ?
                new ObjectParameter("DateInitCalcul", dateInitCalcul) :
                new ObjectParameter("DateInitCalcul", typeof(System.DateTime));
    
            var montantInitialParameter = montantInitial.HasValue ?
                new ObjectParameter("MontantInitial", montantInitial) :
                new ObjectParameter("MontantInitial", typeof(double));
    
            var cpteImmobParameter = cpteImmob != null ?
                new ObjectParameter("CpteImmob", cpteImmob) :
                new ObjectParameter("CpteImmob", typeof(string));
    
            var dateCptabAcqParameter = dateCptabAcq.HasValue ?
                new ObjectParameter("DateCptabAcq", dateCptabAcq) :
                new ObjectParameter("DateCptabAcq", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Immo_Insert", agenceParameter, numeroParameter, dateAcquisitionParameter, designationParameter, dureeImParameter, tauxAmortissementParameter, amortCummuleParameter, valeurResiduelleParameter, cpteAmortissementParameter, dureeGarantieParameter, amortCalPeriodeParameter, dateDernCalAmParameter, dateCptabAmortParameter, libFournisseurParameter, typeAcqParameter, refFactureParameter, dateProvCalParameter, dateCreationParameter, codeTypeParameter, codeLocalParameter, dateMiseServiceParameter, periodiciteComptaParameter, periodiciteAmortParameter, monthnumberParameter, statusAcqParameter, cpteDepreciationParameter, dateInitCalculParameter, montantInitialParameter, cpteImmobParameter, dateCptabAcqParameter, lect, msg, languageParameter, computerNameParameter, employeParameter);
        }
    
        public virtual int Immo_Update(string agence, string refTransaction, string numero, Nullable<System.DateTime> dateAcquisition, string designation, Nullable<double> dureeIm, Nullable<double> tauxAmortissement, Nullable<double> amortCummule, Nullable<double> valeurResiduelle, string cpteAmortissement, Nullable<short> dureeGarantie, Nullable<double> amortCalPeriode, Nullable<System.DateTime> dateDernCalAm, Nullable<System.DateTime> dateCptabAmort, string libFournisseur, string typeAcq, string refFacture, Nullable<System.DateTime> dateProvCal, Nullable<System.DateTime> dateCreation, string codeType, string codeLocal, Nullable<System.DateTime> dateMiseService, string periodiciteCompta, string periodiciteAmort, Nullable<int> monthnumber, string statusAcq, string cpteDepreciation, Nullable<System.DateTime> dateInitCalcul, Nullable<double> montantInitial, string cpteImmob, ObjectParameter lect, ObjectParameter msg, string employe, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var refTransactionParameter = refTransaction != null ?
                new ObjectParameter("RefTransaction", refTransaction) :
                new ObjectParameter("RefTransaction", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("Numero", numero) :
                new ObjectParameter("Numero", typeof(string));
    
            var dateAcquisitionParameter = dateAcquisition.HasValue ?
                new ObjectParameter("DateAcquisition", dateAcquisition) :
                new ObjectParameter("DateAcquisition", typeof(System.DateTime));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var dureeImParameter = dureeIm.HasValue ?
                new ObjectParameter("DureeIm", dureeIm) :
                new ObjectParameter("DureeIm", typeof(double));
    
            var tauxAmortissementParameter = tauxAmortissement.HasValue ?
                new ObjectParameter("TauxAmortissement", tauxAmortissement) :
                new ObjectParameter("TauxAmortissement", typeof(double));
    
            var amortCummuleParameter = amortCummule.HasValue ?
                new ObjectParameter("AmortCummule", amortCummule) :
                new ObjectParameter("AmortCummule", typeof(double));
    
            var valeurResiduelleParameter = valeurResiduelle.HasValue ?
                new ObjectParameter("ValeurResiduelle", valeurResiduelle) :
                new ObjectParameter("ValeurResiduelle", typeof(double));
    
            var cpteAmortissementParameter = cpteAmortissement != null ?
                new ObjectParameter("CpteAmortissement", cpteAmortissement) :
                new ObjectParameter("CpteAmortissement", typeof(string));
    
            var dureeGarantieParameter = dureeGarantie.HasValue ?
                new ObjectParameter("DureeGarantie", dureeGarantie) :
                new ObjectParameter("DureeGarantie", typeof(short));
    
            var amortCalPeriodeParameter = amortCalPeriode.HasValue ?
                new ObjectParameter("AmortCalPeriode", amortCalPeriode) :
                new ObjectParameter("AmortCalPeriode", typeof(double));
    
            var dateDernCalAmParameter = dateDernCalAm.HasValue ?
                new ObjectParameter("DateDernCalAm", dateDernCalAm) :
                new ObjectParameter("DateDernCalAm", typeof(System.DateTime));
    
            var dateCptabAmortParameter = dateCptabAmort.HasValue ?
                new ObjectParameter("DateCptabAmort", dateCptabAmort) :
                new ObjectParameter("DateCptabAmort", typeof(System.DateTime));
    
            var libFournisseurParameter = libFournisseur != null ?
                new ObjectParameter("LibFournisseur", libFournisseur) :
                new ObjectParameter("LibFournisseur", typeof(string));
    
            var typeAcqParameter = typeAcq != null ?
                new ObjectParameter("TypeAcq", typeAcq) :
                new ObjectParameter("TypeAcq", typeof(string));
    
            var refFactureParameter = refFacture != null ?
                new ObjectParameter("RefFacture", refFacture) :
                new ObjectParameter("RefFacture", typeof(string));
    
            var dateProvCalParameter = dateProvCal.HasValue ?
                new ObjectParameter("DateProvCal", dateProvCal) :
                new ObjectParameter("DateProvCal", typeof(System.DateTime));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var codeTypeParameter = codeType != null ?
                new ObjectParameter("CodeType", codeType) :
                new ObjectParameter("CodeType", typeof(string));
    
            var codeLocalParameter = codeLocal != null ?
                new ObjectParameter("CodeLocal", codeLocal) :
                new ObjectParameter("CodeLocal", typeof(string));
    
            var dateMiseServiceParameter = dateMiseService.HasValue ?
                new ObjectParameter("DateMiseService", dateMiseService) :
                new ObjectParameter("DateMiseService", typeof(System.DateTime));
    
            var periodiciteComptaParameter = periodiciteCompta != null ?
                new ObjectParameter("PeriodiciteCompta", periodiciteCompta) :
                new ObjectParameter("PeriodiciteCompta", typeof(string));
    
            var periodiciteAmortParameter = periodiciteAmort != null ?
                new ObjectParameter("PeriodiciteAmort", periodiciteAmort) :
                new ObjectParameter("PeriodiciteAmort", typeof(string));
    
            var monthnumberParameter = monthnumber.HasValue ?
                new ObjectParameter("monthnumber", monthnumber) :
                new ObjectParameter("monthnumber", typeof(int));
    
            var statusAcqParameter = statusAcq != null ?
                new ObjectParameter("StatusAcq", statusAcq) :
                new ObjectParameter("StatusAcq", typeof(string));
    
            var cpteDepreciationParameter = cpteDepreciation != null ?
                new ObjectParameter("CpteDepreciation", cpteDepreciation) :
                new ObjectParameter("CpteDepreciation", typeof(string));
    
            var dateInitCalculParameter = dateInitCalcul.HasValue ?
                new ObjectParameter("DateInitCalcul", dateInitCalcul) :
                new ObjectParameter("DateInitCalcul", typeof(System.DateTime));
    
            var montantInitialParameter = montantInitial.HasValue ?
                new ObjectParameter("MontantInitial", montantInitial) :
                new ObjectParameter("MontantInitial", typeof(double));
    
            var cpteImmobParameter = cpteImmob != null ?
                new ObjectParameter("CpteImmob", cpteImmob) :
                new ObjectParameter("CpteImmob", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Immo_Update", agenceParameter, refTransactionParameter, numeroParameter, dateAcquisitionParameter, designationParameter, dureeImParameter, tauxAmortissementParameter, amortCummuleParameter, valeurResiduelleParameter, cpteAmortissementParameter, dureeGarantieParameter, amortCalPeriodeParameter, dateDernCalAmParameter, dateCptabAmortParameter, libFournisseurParameter, typeAcqParameter, refFactureParameter, dateProvCalParameter, dateCreationParameter, codeTypeParameter, codeLocalParameter, dateMiseServiceParameter, periodiciteComptaParameter, periodiciteAmortParameter, monthnumberParameter, statusAcqParameter, cpteDepreciationParameter, dateInitCalculParameter, montantInitialParameter, cpteImmobParameter, lect, msg, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int Impayes_Insert_S_Trans(string agence, Nullable<decimal> serieV, string client, string denomination, string cpteJumelleCC, string cpteJumelleCredit, Nullable<short> catCpte, string cpteJumelleImp, string cpteIndAgioRes, string cpteGenAgioRes, string cleGenAgioRes, string libCpteGenAgioRes, string cpteGL, string cleCpte, string libCpteGl, Nullable<double> montant, Nullable<double> capital, Nullable<double> interet, Nullable<double> mtTVA, Nullable<double> mtTDC, Nullable<double> portionDiff, Nullable<System.DateTime> dateImpaye, string regul, Nullable<System.DateTime> dateRegul, Nullable<System.DateTime> dateTransfContent, string numeroContrat, Nullable<System.DateTime> dateAccord, Nullable<double> mtPenalite, Nullable<System.DateTime> dateCptaPenalite, Nullable<System.DateTime> dateCreation, string fPVal, string txnNo, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var serieVParameter = serieV.HasValue ?
                new ObjectParameter("SerieV", serieV) :
                new ObjectParameter("SerieV", typeof(decimal));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var cpteJumelleCreditParameter = cpteJumelleCredit != null ?
                new ObjectParameter("CpteJumelleCredit", cpteJumelleCredit) :
                new ObjectParameter("CpteJumelleCredit", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var cpteJumelleImpParameter = cpteJumelleImp != null ?
                new ObjectParameter("CpteJumelleImp", cpteJumelleImp) :
                new ObjectParameter("CpteJumelleImp", typeof(string));
    
            var cpteIndAgioResParameter = cpteIndAgioRes != null ?
                new ObjectParameter("CpteIndAgioRes", cpteIndAgioRes) :
                new ObjectParameter("CpteIndAgioRes", typeof(string));
    
            var cpteGenAgioResParameter = cpteGenAgioRes != null ?
                new ObjectParameter("CpteGenAgioRes", cpteGenAgioRes) :
                new ObjectParameter("CpteGenAgioRes", typeof(string));
    
            var cleGenAgioResParameter = cleGenAgioRes != null ?
                new ObjectParameter("CleGenAgioRes", cleGenAgioRes) :
                new ObjectParameter("CleGenAgioRes", typeof(string));
    
            var libCpteGenAgioResParameter = libCpteGenAgioRes != null ?
                new ObjectParameter("LibCpteGenAgioRes", libCpteGenAgioRes) :
                new ObjectParameter("LibCpteGenAgioRes", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var libCpteGlParameter = libCpteGl != null ?
                new ObjectParameter("LibCpteGl", libCpteGl) :
                new ObjectParameter("LibCpteGl", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var capitalParameter = capital.HasValue ?
                new ObjectParameter("Capital", capital) :
                new ObjectParameter("Capital", typeof(double));
    
            var interetParameter = interet.HasValue ?
                new ObjectParameter("Interet", interet) :
                new ObjectParameter("Interet", typeof(double));
    
            var mtTVAParameter = mtTVA.HasValue ?
                new ObjectParameter("MtTVA", mtTVA) :
                new ObjectParameter("MtTVA", typeof(double));
    
            var mtTDCParameter = mtTDC.HasValue ?
                new ObjectParameter("MtTDC", mtTDC) :
                new ObjectParameter("MtTDC", typeof(double));
    
            var portionDiffParameter = portionDiff.HasValue ?
                new ObjectParameter("PortionDiff", portionDiff) :
                new ObjectParameter("PortionDiff", typeof(double));
    
            var dateImpayeParameter = dateImpaye.HasValue ?
                new ObjectParameter("DateImpaye", dateImpaye) :
                new ObjectParameter("DateImpaye", typeof(System.DateTime));
    
            var regulParameter = regul != null ?
                new ObjectParameter("Regul", regul) :
                new ObjectParameter("Regul", typeof(string));
    
            var dateRegulParameter = dateRegul.HasValue ?
                new ObjectParameter("DateRegul", dateRegul) :
                new ObjectParameter("DateRegul", typeof(System.DateTime));
    
            var dateTransfContentParameter = dateTransfContent.HasValue ?
                new ObjectParameter("DateTransfContent", dateTransfContent) :
                new ObjectParameter("DateTransfContent", typeof(System.DateTime));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var dateAccordParameter = dateAccord.HasValue ?
                new ObjectParameter("DateAccord", dateAccord) :
                new ObjectParameter("DateAccord", typeof(System.DateTime));
    
            var mtPenaliteParameter = mtPenalite.HasValue ?
                new ObjectParameter("MtPenalite", mtPenalite) :
                new ObjectParameter("MtPenalite", typeof(double));
    
            var dateCptaPenaliteParameter = dateCptaPenalite.HasValue ?
                new ObjectParameter("DateCptaPenalite", dateCptaPenalite) :
                new ObjectParameter("DateCptaPenalite", typeof(System.DateTime));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var fPValParameter = fPVal != null ?
                new ObjectParameter("FPVal", fPVal) :
                new ObjectParameter("FPVal", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Impayes_Insert_S_Trans", agenceParameter, serieVParameter, clientParameter, denominationParameter, cpteJumelleCCParameter, cpteJumelleCreditParameter, catCpteParameter, cpteJumelleImpParameter, cpteIndAgioResParameter, cpteGenAgioResParameter, cleGenAgioResParameter, libCpteGenAgioResParameter, cpteGLParameter, cleCpteParameter, libCpteGlParameter, montantParameter, capitalParameter, interetParameter, mtTVAParameter, mtTDCParameter, portionDiffParameter, dateImpayeParameter, regulParameter, dateRegulParameter, dateTransfContentParameter, numeroContratParameter, dateAccordParameter, mtPenaliteParameter, dateCptaPenaliteParameter, dateCreationParameter, fPValParameter, txnNoParameter, dateTransfertParameter, lect, languageParameter);
        }
    
        public virtual int Impayes_Update_S_Trans(string agence, Nullable<decimal> serie, Nullable<decimal> serieV, string client, string denomination, string cpteJumelleCC, string cpteJumelleCredit, Nullable<short> catCpte, string cpteJumelleImp, string cpteIndAgioRes, string cpteGenAgioRes, string cleGenAgioRes, string libCpteGenAgioRes, string cpteGL, string cleCpte, string libCpteGl, Nullable<double> montant, Nullable<double> capital, Nullable<double> interet, Nullable<double> mtTVA, Nullable<double> mtTDC, Nullable<double> portionDiff, Nullable<System.DateTime> dateImpaye, string regul, Nullable<System.DateTime> dateRegul, Nullable<System.DateTime> dateTransfContent, string numeroContrat, Nullable<System.DateTime> dateAccord, Nullable<double> mtPenalite, Nullable<System.DateTime> dateCptaPenalite, Nullable<System.DateTime> dateCreation, string fPVal, string txnNo, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, string impStatus, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var serieParameter = serie.HasValue ?
                new ObjectParameter("Serie", serie) :
                new ObjectParameter("Serie", typeof(decimal));
    
            var serieVParameter = serieV.HasValue ?
                new ObjectParameter("SerieV", serieV) :
                new ObjectParameter("SerieV", typeof(decimal));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var cpteJumelleCreditParameter = cpteJumelleCredit != null ?
                new ObjectParameter("CpteJumelleCredit", cpteJumelleCredit) :
                new ObjectParameter("CpteJumelleCredit", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var cpteJumelleImpParameter = cpteJumelleImp != null ?
                new ObjectParameter("CpteJumelleImp", cpteJumelleImp) :
                new ObjectParameter("CpteJumelleImp", typeof(string));
    
            var cpteIndAgioResParameter = cpteIndAgioRes != null ?
                new ObjectParameter("CpteIndAgioRes", cpteIndAgioRes) :
                new ObjectParameter("CpteIndAgioRes", typeof(string));
    
            var cpteGenAgioResParameter = cpteGenAgioRes != null ?
                new ObjectParameter("CpteGenAgioRes", cpteGenAgioRes) :
                new ObjectParameter("CpteGenAgioRes", typeof(string));
    
            var cleGenAgioResParameter = cleGenAgioRes != null ?
                new ObjectParameter("CleGenAgioRes", cleGenAgioRes) :
                new ObjectParameter("CleGenAgioRes", typeof(string));
    
            var libCpteGenAgioResParameter = libCpteGenAgioRes != null ?
                new ObjectParameter("LibCpteGenAgioRes", libCpteGenAgioRes) :
                new ObjectParameter("LibCpteGenAgioRes", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var libCpteGlParameter = libCpteGl != null ?
                new ObjectParameter("LibCpteGl", libCpteGl) :
                new ObjectParameter("LibCpteGl", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var capitalParameter = capital.HasValue ?
                new ObjectParameter("Capital", capital) :
                new ObjectParameter("Capital", typeof(double));
    
            var interetParameter = interet.HasValue ?
                new ObjectParameter("Interet", interet) :
                new ObjectParameter("Interet", typeof(double));
    
            var mtTVAParameter = mtTVA.HasValue ?
                new ObjectParameter("MtTVA", mtTVA) :
                new ObjectParameter("MtTVA", typeof(double));
    
            var mtTDCParameter = mtTDC.HasValue ?
                new ObjectParameter("MtTDC", mtTDC) :
                new ObjectParameter("MtTDC", typeof(double));
    
            var portionDiffParameter = portionDiff.HasValue ?
                new ObjectParameter("PortionDiff", portionDiff) :
                new ObjectParameter("PortionDiff", typeof(double));
    
            var dateImpayeParameter = dateImpaye.HasValue ?
                new ObjectParameter("DateImpaye", dateImpaye) :
                new ObjectParameter("DateImpaye", typeof(System.DateTime));
    
            var regulParameter = regul != null ?
                new ObjectParameter("Regul", regul) :
                new ObjectParameter("Regul", typeof(string));
    
            var dateRegulParameter = dateRegul.HasValue ?
                new ObjectParameter("DateRegul", dateRegul) :
                new ObjectParameter("DateRegul", typeof(System.DateTime));
    
            var dateTransfContentParameter = dateTransfContent.HasValue ?
                new ObjectParameter("DateTransfContent", dateTransfContent) :
                new ObjectParameter("DateTransfContent", typeof(System.DateTime));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var dateAccordParameter = dateAccord.HasValue ?
                new ObjectParameter("DateAccord", dateAccord) :
                new ObjectParameter("DateAccord", typeof(System.DateTime));
    
            var mtPenaliteParameter = mtPenalite.HasValue ?
                new ObjectParameter("MtPenalite", mtPenalite) :
                new ObjectParameter("MtPenalite", typeof(double));
    
            var dateCptaPenaliteParameter = dateCptaPenalite.HasValue ?
                new ObjectParameter("DateCptaPenalite", dateCptaPenalite) :
                new ObjectParameter("DateCptaPenalite", typeof(System.DateTime));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var fPValParameter = fPVal != null ?
                new ObjectParameter("FPVal", fPVal) :
                new ObjectParameter("FPVal", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var impStatusParameter = impStatus != null ?
                new ObjectParameter("ImpStatus", impStatus) :
                new ObjectParameter("ImpStatus", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Impayes_Update_S_Trans", agenceParameter, serieParameter, serieVParameter, clientParameter, denominationParameter, cpteJumelleCCParameter, cpteJumelleCreditParameter, catCpteParameter, cpteJumelleImpParameter, cpteIndAgioResParameter, cpteGenAgioResParameter, cleGenAgioResParameter, libCpteGenAgioResParameter, cpteGLParameter, cleCpteParameter, libCpteGlParameter, montantParameter, capitalParameter, interetParameter, mtTVAParameter, mtTDCParameter, portionDiffParameter, dateImpayeParameter, regulParameter, dateRegulParameter, dateTransfContentParameter, numeroContratParameter, dateAccordParameter, mtPenaliteParameter, dateCptaPenaliteParameter, dateCreationParameter, fPValParameter, txnNoParameter, dateTransfertParameter, lect, impStatusParameter, languageParameter);
        }
    
        public virtual ObjectResult<ImpCpteIndImp_Result> ImpCpteIndImp(Nullable<double> totdisccommission, Nullable<double> totdisctax, string wtxnno, string wDiscName, string wDevise, string wEmploye, string wLibEmploye, string wLibAgence, string wcptecltres, string wcptecltresint, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var totdisccommissionParameter = totdisccommission.HasValue ?
                new ObjectParameter("totdisccommission", totdisccommission) :
                new ObjectParameter("totdisccommission", typeof(double));
    
            var totdisctaxParameter = totdisctax.HasValue ?
                new ObjectParameter("totdisctax", totdisctax) :
                new ObjectParameter("totdisctax", typeof(double));
    
            var wtxnnoParameter = wtxnno != null ?
                new ObjectParameter("Wtxnno", wtxnno) :
                new ObjectParameter("Wtxnno", typeof(string));
    
            var wDiscNameParameter = wDiscName != null ?
                new ObjectParameter("wDiscName", wDiscName) :
                new ObjectParameter("wDiscName", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wcptecltresParameter = wcptecltres != null ?
                new ObjectParameter("wcptecltres", wcptecltres) :
                new ObjectParameter("wcptecltres", typeof(string));
    
            var wcptecltresintParameter = wcptecltresint != null ?
                new ObjectParameter("wcptecltresint", wcptecltresint) :
                new ObjectParameter("wcptecltresint", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ImpCpteIndImp_Result>("ImpCpteIndImp", totdisccommissionParameter, totdisctaxParameter, wtxnnoParameter, wDiscNameParameter, wDeviseParameter, wEmployeParameter, wLibEmployeParameter, wLibAgenceParameter, wcptecltresParameter, wcptecltresintParameter, dateOperationParameter, dateValeurParameter, lect, msg, languageParameter);
        }
    
        public virtual ObjectResult<ImpCpteIndImpCredit_Result> ImpCpteIndImpCredit(string wAgence, string wLibAgence, string wCpteClt, string wDenomination, string wDevise, Nullable<double> wDebit, Nullable<double> wCredit, string wCodeLibelle, string wEmploye, string wLibEmploye, string wTrCode, string wDescription, string refOp, string wtxnno, ObjectParameter lect, ObjectParameter msg, string codeTaux, string language)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("WAgence", wAgence) :
                new ObjectParameter("WAgence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("WLibAgence", wLibAgence) :
                new ObjectParameter("WLibAgence", typeof(string));
    
            var wCpteCltParameter = wCpteClt != null ?
                new ObjectParameter("WCpteClt", wCpteClt) :
                new ObjectParameter("WCpteClt", typeof(string));
    
            var wDenominationParameter = wDenomination != null ?
                new ObjectParameter("wDenomination", wDenomination) :
                new ObjectParameter("wDenomination", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var wDebitParameter = wDebit.HasValue ?
                new ObjectParameter("wDebit", wDebit) :
                new ObjectParameter("wDebit", typeof(double));
    
            var wCreditParameter = wCredit.HasValue ?
                new ObjectParameter("wCredit", wCredit) :
                new ObjectParameter("wCredit", typeof(double));
    
            var wCodeLibelleParameter = wCodeLibelle != null ?
                new ObjectParameter("wCodeLibelle", wCodeLibelle) :
                new ObjectParameter("wCodeLibelle", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("WEmploye", wEmploye) :
                new ObjectParameter("WEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("WLibEmploye", wLibEmploye) :
                new ObjectParameter("WLibEmploye", typeof(string));
    
            var wTrCodeParameter = wTrCode != null ?
                new ObjectParameter("wTrCode", wTrCode) :
                new ObjectParameter("wTrCode", typeof(string));
    
            var wDescriptionParameter = wDescription != null ?
                new ObjectParameter("wDescription", wDescription) :
                new ObjectParameter("wDescription", typeof(string));
    
            var refOpParameter = refOp != null ?
                new ObjectParameter("RefOp", refOp) :
                new ObjectParameter("RefOp", typeof(string));
    
            var wtxnnoParameter = wtxnno != null ?
                new ObjectParameter("wtxnno", wtxnno) :
                new ObjectParameter("wtxnno", typeof(string));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ImpCpteIndImpCredit_Result>("ImpCpteIndImpCredit", wAgenceParameter, wLibAgenceParameter, wCpteCltParameter, wDenominationParameter, wDeviseParameter, wDebitParameter, wCreditParameter, wCodeLibelleParameter, wEmployeParameter, wLibEmployeParameter, wTrCodeParameter, wDescriptionParameter, refOpParameter, wtxnnoParameter, lect, msg, codeTauxParameter, languageParameter);
        }
    
        public virtual ObjectResult<ImpCpteIndImpNew_Result> ImpCpteIndImpNew(Nullable<double> totdisccommission, Nullable<double> totdisctax, string wtxnno, string wDiscName, string wDevise, string wEmploye, string wLibEmploye, string wLibAgence, string wcptecltres, string wcptecltresint, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, ObjectParameter lect, ObjectParameter msg, string language, string doneBy)
        {
            var totdisccommissionParameter = totdisccommission.HasValue ?
                new ObjectParameter("totdisccommission", totdisccommission) :
                new ObjectParameter("totdisccommission", typeof(double));
    
            var totdisctaxParameter = totdisctax.HasValue ?
                new ObjectParameter("totdisctax", totdisctax) :
                new ObjectParameter("totdisctax", typeof(double));
    
            var wtxnnoParameter = wtxnno != null ?
                new ObjectParameter("Wtxnno", wtxnno) :
                new ObjectParameter("Wtxnno", typeof(string));
    
            var wDiscNameParameter = wDiscName != null ?
                new ObjectParameter("wDiscName", wDiscName) :
                new ObjectParameter("wDiscName", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wcptecltresParameter = wcptecltres != null ?
                new ObjectParameter("wcptecltres", wcptecltres) :
                new ObjectParameter("wcptecltres", typeof(string));
    
            var wcptecltresintParameter = wcptecltresint != null ?
                new ObjectParameter("wcptecltresint", wcptecltresint) :
                new ObjectParameter("wcptecltresint", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var doneByParameter = doneBy != null ?
                new ObjectParameter("DoneBy", doneBy) :
                new ObjectParameter("DoneBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ImpCpteIndImpNew_Result>("ImpCpteIndImpNew", totdisccommissionParameter, totdisctaxParameter, wtxnnoParameter, wDiscNameParameter, wDeviseParameter, wEmployeParameter, wLibEmployeParameter, wLibAgenceParameter, wcptecltresParameter, wcptecltresintParameter, dateOperationParameter, dateValeurParameter, lect, msg, languageParameter, doneByParameter);
        }
    
        public virtual int ImportTxtFile(string bpcVal, ObjectParameter err)
        {
            var bpcValParameter = bpcVal != null ?
                new ObjectParameter("BpcVal", bpcVal) :
                new ObjectParameter("BpcVal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImportTxtFile", bpcValParameter, err);
        }
    
        public virtual int IncExpAcc_Delete(string chapcpte, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var chapcpteParameter = chapcpte != null ?
                new ObjectParameter("chapcpte", chapcpte) :
                new ObjectParameter("chapcpte", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IncExpAcc_Delete", chapcpteParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int IncExpAcc_Insert(string chapcpte, string libchapcpte, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var chapcpteParameter = chapcpte != null ?
                new ObjectParameter("chapcpte", chapcpte) :
                new ObjectParameter("chapcpte", typeof(string));
    
            var libchapcpteParameter = libchapcpte != null ?
                new ObjectParameter("libchapcpte", libchapcpte) :
                new ObjectParameter("libchapcpte", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IncExpAcc_Insert", chapcpteParameter, libchapcpteParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int IncExpAcc_Update(string chapcpte, string libchapcpte, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var chapcpteParameter = chapcpte != null ?
                new ObjectParameter("chapcpte", chapcpte) :
                new ObjectParameter("chapcpte", typeof(string));
    
            var libchapcpteParameter = libchapcpte != null ?
                new ObjectParameter("libchapcpte", libchapcpte) :
                new ObjectParameter("libchapcpte", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IncExpAcc_Update", chapcpteParameter, libchapcpteParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int IncomeExpense(Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string devise, ObjectParameter lect, ObjectParameter msg, string employe, string computerName, string language)
        {
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IncomeExpense", dateDebutParameter, dateFinParameter, deviseParameter, lect, msg, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int InsertOptns(string description, string reference, Nullable<double> optnAmount, Nullable<double> comAmount, Nullable<double> payAmount, Nullable<double> taxAmount, Nullable<System.DateTime> trnDate, string cashTrCodeName, string cashTrCode, string sensImput, string trCode, string cpteGlCom, string cleCpteCom, string libCpteGLCom, string cpteGl, string cleCpte, string libCpteGL, string employe, string libEmploye, Nullable<System.DateTime> datecpta, string cptejumelle, string denomination, Nullable<System.DateTime> dateoperation, string sMSTransText, string agenceDest, string flag, string cptecltBenef, string custnameben, string senderName, string receiverName, string statusOperation, string postType, ObjectParameter lect, ObjectParameter msg, string language, Nullable<System.DateTime> datecptapayment, string employepayment, string agenceemt, string agencepay)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var optnAmountParameter = optnAmount.HasValue ?
                new ObjectParameter("OptnAmount", optnAmount) :
                new ObjectParameter("OptnAmount", typeof(double));
    
            var comAmountParameter = comAmount.HasValue ?
                new ObjectParameter("ComAmount", comAmount) :
                new ObjectParameter("ComAmount", typeof(double));
    
            var payAmountParameter = payAmount.HasValue ?
                new ObjectParameter("PayAmount", payAmount) :
                new ObjectParameter("PayAmount", typeof(double));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(double));
    
            var trnDateParameter = trnDate.HasValue ?
                new ObjectParameter("TrnDate", trnDate) :
                new ObjectParameter("TrnDate", typeof(System.DateTime));
    
            var cashTrCodeNameParameter = cashTrCodeName != null ?
                new ObjectParameter("CashTrCodeName", cashTrCodeName) :
                new ObjectParameter("CashTrCodeName", typeof(string));
    
            var cashTrCodeParameter = cashTrCode != null ?
                new ObjectParameter("CashTrCode", cashTrCode) :
                new ObjectParameter("CashTrCode", typeof(string));
    
            var sensImputParameter = sensImput != null ?
                new ObjectParameter("SensImput", sensImput) :
                new ObjectParameter("SensImput", typeof(string));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var cpteGlComParameter = cpteGlCom != null ?
                new ObjectParameter("CpteGlCom", cpteGlCom) :
                new ObjectParameter("CpteGlCom", typeof(string));
    
            var cleCpteComParameter = cleCpteCom != null ?
                new ObjectParameter("CleCpteCom", cleCpteCom) :
                new ObjectParameter("CleCpteCom", typeof(string));
    
            var libCpteGLComParameter = libCpteGLCom != null ?
                new ObjectParameter("LibCpteGLCom", libCpteGLCom) :
                new ObjectParameter("LibCpteGLCom", typeof(string));
    
            var cpteGlParameter = cpteGl != null ?
                new ObjectParameter("CpteGl", cpteGl) :
                new ObjectParameter("CpteGl", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var libCpteGLParameter = libCpteGL != null ?
                new ObjectParameter("LibCpteGL", libCpteGL) :
                new ObjectParameter("LibCpteGL", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var datecptaParameter = datecpta.HasValue ?
                new ObjectParameter("datecpta", datecpta) :
                new ObjectParameter("datecpta", typeof(System.DateTime));
    
            var cptejumelleParameter = cptejumelle != null ?
                new ObjectParameter("Cptejumelle", cptejumelle) :
                new ObjectParameter("Cptejumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var dateoperationParameter = dateoperation.HasValue ?
                new ObjectParameter("dateoperation", dateoperation) :
                new ObjectParameter("dateoperation", typeof(System.DateTime));
    
            var sMSTransTextParameter = sMSTransText != null ?
                new ObjectParameter("SMSTransText", sMSTransText) :
                new ObjectParameter("SMSTransText", typeof(string));
    
            var agenceDestParameter = agenceDest != null ?
                new ObjectParameter("AgenceDest", agenceDest) :
                new ObjectParameter("AgenceDest", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var cptecltBenefParameter = cptecltBenef != null ?
                new ObjectParameter("CptecltBenef", cptecltBenef) :
                new ObjectParameter("CptecltBenef", typeof(string));
    
            var custnamebenParameter = custnameben != null ?
                new ObjectParameter("custnameben", custnameben) :
                new ObjectParameter("custnameben", typeof(string));
    
            var senderNameParameter = senderName != null ?
                new ObjectParameter("SenderName", senderName) :
                new ObjectParameter("SenderName", typeof(string));
    
            var receiverNameParameter = receiverName != null ?
                new ObjectParameter("ReceiverName", receiverName) :
                new ObjectParameter("ReceiverName", typeof(string));
    
            var statusOperationParameter = statusOperation != null ?
                new ObjectParameter("StatusOperation", statusOperation) :
                new ObjectParameter("StatusOperation", typeof(string));
    
            var postTypeParameter = postType != null ?
                new ObjectParameter("PostType", postType) :
                new ObjectParameter("PostType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var datecptapaymentParameter = datecptapayment.HasValue ?
                new ObjectParameter("datecptapayment", datecptapayment) :
                new ObjectParameter("datecptapayment", typeof(System.DateTime));
    
            var employepaymentParameter = employepayment != null ?
                new ObjectParameter("employepayment", employepayment) :
                new ObjectParameter("employepayment", typeof(string));
    
            var agenceemtParameter = agenceemt != null ?
                new ObjectParameter("agenceemt", agenceemt) :
                new ObjectParameter("agenceemt", typeof(string));
    
            var agencepayParameter = agencepay != null ?
                new ObjectParameter("agencepay", agencepay) :
                new ObjectParameter("agencepay", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOptns", descriptionParameter, referenceParameter, optnAmountParameter, comAmountParameter, payAmountParameter, taxAmountParameter, trnDateParameter, cashTrCodeNameParameter, cashTrCodeParameter, sensImputParameter, trCodeParameter, cpteGlComParameter, cleCpteComParameter, libCpteGLComParameter, cpteGlParameter, cleCpteParameter, libCpteGLParameter, employeParameter, libEmployeParameter, datecptaParameter, cptejumelleParameter, denominationParameter, dateoperationParameter, sMSTransTextParameter, agenceDestParameter, flagParameter, cptecltBenefParameter, custnamebenParameter, senderNameParameter, receiverNameParameter, statusOperationParameter, postTypeParameter, lect, msg, languageParameter, datecptapaymentParameter, employepaymentParameter, agenceemtParameter, agencepayParameter);
        }
    
        public virtual ObjectResult<InsertUpdateCpteClt_Migrate_Result> InsertUpdateCpteClt_Migrate(string agence, string client, string cpteJumelle, Nullable<double> debit, Nullable<double> credit, string libClient, Nullable<short> catCpte, string libCatCpte, string subcpte, string letCle, string devise, Nullable<double> ligneDec, Nullable<System.DateTime> expiration, string cpteCol, string cleCol, Nullable<System.DateTime> dateOuverture, string gestionnaire, string statut, Nullable<System.DateTime> dateEff, Nullable<short> totalSignature, Nullable<short> signatureVal, string fusion, string libAgence, string libDevise, string libCpteCol, string libGestionnaire, string cpteOvation, Nullable<double> txIntDb, Nullable<double> txIntCr, string exoTDC, string exoTVA, string exoTPRCM, string exoFTC, Nullable<double> txComDec, Nullable<double> txComMvt, Nullable<double> txTVA, Nullable<int> mtFTC, string employe, string nomemploye, string cpteIndAgioRes, string cpteGenAgioRes, string cleGenAgioRes, string libCpteGenAgioRes, Nullable<System.DateTime> dateCreation, Nullable<System.DateTime> expirationlignedec, string cRBlocage, string dBBlocage, Nullable<double> cantonnement, Nullable<System.DateTime> cRBlockDate, Nullable<System.DateTime> dBBlockDate, Nullable<System.DateTime> dateDernierMvtDB, Nullable<System.DateTime> dateDernierMvtCR, Nullable<System.DateTime> stopIntDate, string stopInt, string reservedInt, string controlAcces, string signerinfo, Nullable<System.DateTime> dateDeclaration, string dormantstatus, string integritystatus, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, string language, string aNCIENCPTCLT)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var libClientParameter = libClient != null ?
                new ObjectParameter("LibClient", libClient) :
                new ObjectParameter("LibClient", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var libCatCpteParameter = libCatCpte != null ?
                new ObjectParameter("LibCatCpte", libCatCpte) :
                new ObjectParameter("LibCatCpte", typeof(string));
    
            var subcpteParameter = subcpte != null ?
                new ObjectParameter("Subcpte", subcpte) :
                new ObjectParameter("Subcpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var ligneDecParameter = ligneDec.HasValue ?
                new ObjectParameter("LigneDec", ligneDec) :
                new ObjectParameter("LigneDec", typeof(double));
    
            var expirationParameter = expiration.HasValue ?
                new ObjectParameter("Expiration", expiration) :
                new ObjectParameter("Expiration", typeof(System.DateTime));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var cleColParameter = cleCol != null ?
                new ObjectParameter("CleCol", cleCol) :
                new ObjectParameter("CleCol", typeof(string));
    
            var dateOuvertureParameter = dateOuverture.HasValue ?
                new ObjectParameter("DateOuverture", dateOuverture) :
                new ObjectParameter("DateOuverture", typeof(System.DateTime));
    
            var gestionnaireParameter = gestionnaire != null ?
                new ObjectParameter("Gestionnaire", gestionnaire) :
                new ObjectParameter("Gestionnaire", typeof(string));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var dateEffParameter = dateEff.HasValue ?
                new ObjectParameter("DateEff", dateEff) :
                new ObjectParameter("DateEff", typeof(System.DateTime));
    
            var totalSignatureParameter = totalSignature.HasValue ?
                new ObjectParameter("TotalSignature", totalSignature) :
                new ObjectParameter("TotalSignature", typeof(short));
    
            var signatureValParameter = signatureVal.HasValue ?
                new ObjectParameter("SignatureVal", signatureVal) :
                new ObjectParameter("SignatureVal", typeof(short));
    
            var fusionParameter = fusion != null ?
                new ObjectParameter("Fusion", fusion) :
                new ObjectParameter("Fusion", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteColParameter = libCpteCol != null ?
                new ObjectParameter("LibCpteCol", libCpteCol) :
                new ObjectParameter("LibCpteCol", typeof(string));
    
            var libGestionnaireParameter = libGestionnaire != null ?
                new ObjectParameter("LibGestionnaire", libGestionnaire) :
                new ObjectParameter("LibGestionnaire", typeof(string));
    
            var cpteOvationParameter = cpteOvation != null ?
                new ObjectParameter("CpteOvation", cpteOvation) :
                new ObjectParameter("CpteOvation", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var exoTDCParameter = exoTDC != null ?
                new ObjectParameter("ExoTDC", exoTDC) :
                new ObjectParameter("ExoTDC", typeof(string));
    
            var exoTVAParameter = exoTVA != null ?
                new ObjectParameter("ExoTVA", exoTVA) :
                new ObjectParameter("ExoTVA", typeof(string));
    
            var exoTPRCMParameter = exoTPRCM != null ?
                new ObjectParameter("ExoTPRCM", exoTPRCM) :
                new ObjectParameter("ExoTPRCM", typeof(string));
    
            var exoFTCParameter = exoFTC != null ?
                new ObjectParameter("ExoFTC", exoFTC) :
                new ObjectParameter("ExoFTC", typeof(string));
    
            var txComDecParameter = txComDec.HasValue ?
                new ObjectParameter("TxComDec", txComDec) :
                new ObjectParameter("TxComDec", typeof(double));
    
            var txComMvtParameter = txComMvt.HasValue ?
                new ObjectParameter("TxComMvt", txComMvt) :
                new ObjectParameter("TxComMvt", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var mtFTCParameter = mtFTC.HasValue ?
                new ObjectParameter("MtFTC", mtFTC) :
                new ObjectParameter("MtFTC", typeof(int));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var nomemployeParameter = nomemploye != null ?
                new ObjectParameter("Nomemploye", nomemploye) :
                new ObjectParameter("Nomemploye", typeof(string));
    
            var cpteIndAgioResParameter = cpteIndAgioRes != null ?
                new ObjectParameter("CpteIndAgioRes", cpteIndAgioRes) :
                new ObjectParameter("CpteIndAgioRes", typeof(string));
    
            var cpteGenAgioResParameter = cpteGenAgioRes != null ?
                new ObjectParameter("CpteGenAgioRes", cpteGenAgioRes) :
                new ObjectParameter("CpteGenAgioRes", typeof(string));
    
            var cleGenAgioResParameter = cleGenAgioRes != null ?
                new ObjectParameter("CleGenAgioRes", cleGenAgioRes) :
                new ObjectParameter("CleGenAgioRes", typeof(string));
    
            var libCpteGenAgioResParameter = libCpteGenAgioRes != null ?
                new ObjectParameter("LibCpteGenAgioRes", libCpteGenAgioRes) :
                new ObjectParameter("LibCpteGenAgioRes", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var expirationlignedecParameter = expirationlignedec.HasValue ?
                new ObjectParameter("Expirationlignedec", expirationlignedec) :
                new ObjectParameter("Expirationlignedec", typeof(System.DateTime));
    
            var cRBlocageParameter = cRBlocage != null ?
                new ObjectParameter("CRBlocage", cRBlocage) :
                new ObjectParameter("CRBlocage", typeof(string));
    
            var dBBlocageParameter = dBBlocage != null ?
                new ObjectParameter("DBBlocage", dBBlocage) :
                new ObjectParameter("DBBlocage", typeof(string));
    
            var cantonnementParameter = cantonnement.HasValue ?
                new ObjectParameter("Cantonnement", cantonnement) :
                new ObjectParameter("Cantonnement", typeof(double));
    
            var cRBlockDateParameter = cRBlockDate.HasValue ?
                new ObjectParameter("CRBlockDate", cRBlockDate) :
                new ObjectParameter("CRBlockDate", typeof(System.DateTime));
    
            var dBBlockDateParameter = dBBlockDate.HasValue ?
                new ObjectParameter("DBBlockDate", dBBlockDate) :
                new ObjectParameter("DBBlockDate", typeof(System.DateTime));
    
            var dateDernierMvtDBParameter = dateDernierMvtDB.HasValue ?
                new ObjectParameter("DateDernierMvtDB", dateDernierMvtDB) :
                new ObjectParameter("DateDernierMvtDB", typeof(System.DateTime));
    
            var dateDernierMvtCRParameter = dateDernierMvtCR.HasValue ?
                new ObjectParameter("DateDernierMvtCR", dateDernierMvtCR) :
                new ObjectParameter("DateDernierMvtCR", typeof(System.DateTime));
    
            var stopIntDateParameter = stopIntDate.HasValue ?
                new ObjectParameter("StopIntDate", stopIntDate) :
                new ObjectParameter("StopIntDate", typeof(System.DateTime));
    
            var stopIntParameter = stopInt != null ?
                new ObjectParameter("StopInt", stopInt) :
                new ObjectParameter("StopInt", typeof(string));
    
            var reservedIntParameter = reservedInt != null ?
                new ObjectParameter("ReservedInt", reservedInt) :
                new ObjectParameter("ReservedInt", typeof(string));
    
            var controlAccesParameter = controlAcces != null ?
                new ObjectParameter("ControlAcces", controlAcces) :
                new ObjectParameter("ControlAcces", typeof(string));
    
            var signerinfoParameter = signerinfo != null ?
                new ObjectParameter("Signerinfo", signerinfo) :
                new ObjectParameter("Signerinfo", typeof(string));
    
            var dateDeclarationParameter = dateDeclaration.HasValue ?
                new ObjectParameter("DateDeclaration", dateDeclaration) :
                new ObjectParameter("DateDeclaration", typeof(System.DateTime));
    
            var dormantstatusParameter = dormantstatus != null ?
                new ObjectParameter("dormantstatus", dormantstatus) :
                new ObjectParameter("dormantstatus", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var aNCIENCPTCLTParameter = aNCIENCPTCLT != null ?
                new ObjectParameter("ANCIENCPTCLT", aNCIENCPTCLT) :
                new ObjectParameter("ANCIENCPTCLT", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateCpteClt_Migrate_Result>("InsertUpdateCpteClt_Migrate", agenceParameter, clientParameter, cpteJumelleParameter, debitParameter, creditParameter, libClientParameter, catCpteParameter, libCatCpteParameter, subcpteParameter, letCleParameter, deviseParameter, ligneDecParameter, expirationParameter, cpteColParameter, cleColParameter, dateOuvertureParameter, gestionnaireParameter, statutParameter, dateEffParameter, totalSignatureParameter, signatureValParameter, fusionParameter, libAgenceParameter, libDeviseParameter, libCpteColParameter, libGestionnaireParameter, cpteOvationParameter, txIntDbParameter, txIntCrParameter, exoTDCParameter, exoTVAParameter, exoTPRCMParameter, exoFTCParameter, txComDecParameter, txComMvtParameter, txTVAParameter, mtFTCParameter, employeParameter, nomemployeParameter, cpteIndAgioResParameter, cpteGenAgioResParameter, cleGenAgioResParameter, libCpteGenAgioResParameter, dateCreationParameter, expirationlignedecParameter, cRBlocageParameter, dBBlocageParameter, cantonnementParameter, cRBlockDateParameter, dBBlockDateParameter, dateDernierMvtDBParameter, dateDernierMvtCRParameter, stopIntDateParameter, stopIntParameter, reservedIntParameter, controlAccesParameter, signerinfoParameter, dateDeclarationParameter, dormantstatusParameter, integritystatusParameter, dateTransfertParameter, lect, languageParameter, aNCIENCPTCLTParameter);
        }
    
        public virtual ObjectResult<InsertUpdateCpteClt_S_Trans_Result> InsertUpdateCpteClt_S_Trans(string agence, string client, string cpteJumelle, Nullable<double> debit, Nullable<double> credit, string libClient, Nullable<short> catCpte, string libCatCpte, string subcpte, string letCle, string devise, Nullable<double> ligneDec, Nullable<System.DateTime> expiration, string cpteCol, string cleCol, Nullable<System.DateTime> dateOuverture, string gestionnaire, string statut, Nullable<System.DateTime> dateEff, Nullable<short> totalSignature, Nullable<short> signatureVal, string fusion, string libAgence, string libDevise, string libCpteCol, string libGestionnaire, string cpteOvation, Nullable<double> txIntDb, Nullable<double> txIntCr, string exoTDC, string exoTVA, string exoTPRCM, string exoFTC, Nullable<double> txComDec, Nullable<double> txComMvt, Nullable<double> txTVA, Nullable<int> mtFTC, string employe, string nomemploye, string cpteIndAgioRes, string cpteGenAgioRes, string cleGenAgioRes, string libCpteGenAgioRes, Nullable<System.DateTime> dateCreation, Nullable<System.DateTime> expirationlignedec, string cRBlocage, string dBBlocage, Nullable<double> cantonnement, Nullable<System.DateTime> cRBlockDate, Nullable<System.DateTime> dBBlockDate, Nullable<System.DateTime> dateDernierMvtDB, Nullable<System.DateTime> dateDernierMvtCR, Nullable<System.DateTime> stopIntDate, string stopInt, string reservedInt, string controlAcces, string signerinfo, Nullable<System.DateTime> dateDeclaration, string dormantstatus, string integritystatus, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var libClientParameter = libClient != null ?
                new ObjectParameter("LibClient", libClient) :
                new ObjectParameter("LibClient", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var libCatCpteParameter = libCatCpte != null ?
                new ObjectParameter("LibCatCpte", libCatCpte) :
                new ObjectParameter("LibCatCpte", typeof(string));
    
            var subcpteParameter = subcpte != null ?
                new ObjectParameter("Subcpte", subcpte) :
                new ObjectParameter("Subcpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var ligneDecParameter = ligneDec.HasValue ?
                new ObjectParameter("LigneDec", ligneDec) :
                new ObjectParameter("LigneDec", typeof(double));
    
            var expirationParameter = expiration.HasValue ?
                new ObjectParameter("Expiration", expiration) :
                new ObjectParameter("Expiration", typeof(System.DateTime));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var cleColParameter = cleCol != null ?
                new ObjectParameter("CleCol", cleCol) :
                new ObjectParameter("CleCol", typeof(string));
    
            var dateOuvertureParameter = dateOuverture.HasValue ?
                new ObjectParameter("DateOuverture", dateOuverture) :
                new ObjectParameter("DateOuverture", typeof(System.DateTime));
    
            var gestionnaireParameter = gestionnaire != null ?
                new ObjectParameter("Gestionnaire", gestionnaire) :
                new ObjectParameter("Gestionnaire", typeof(string));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var dateEffParameter = dateEff.HasValue ?
                new ObjectParameter("DateEff", dateEff) :
                new ObjectParameter("DateEff", typeof(System.DateTime));
    
            var totalSignatureParameter = totalSignature.HasValue ?
                new ObjectParameter("TotalSignature", totalSignature) :
                new ObjectParameter("TotalSignature", typeof(short));
    
            var signatureValParameter = signatureVal.HasValue ?
                new ObjectParameter("SignatureVal", signatureVal) :
                new ObjectParameter("SignatureVal", typeof(short));
    
            var fusionParameter = fusion != null ?
                new ObjectParameter("Fusion", fusion) :
                new ObjectParameter("Fusion", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteColParameter = libCpteCol != null ?
                new ObjectParameter("LibCpteCol", libCpteCol) :
                new ObjectParameter("LibCpteCol", typeof(string));
    
            var libGestionnaireParameter = libGestionnaire != null ?
                new ObjectParameter("LibGestionnaire", libGestionnaire) :
                new ObjectParameter("LibGestionnaire", typeof(string));
    
            var cpteOvationParameter = cpteOvation != null ?
                new ObjectParameter("CpteOvation", cpteOvation) :
                new ObjectParameter("CpteOvation", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var exoTDCParameter = exoTDC != null ?
                new ObjectParameter("ExoTDC", exoTDC) :
                new ObjectParameter("ExoTDC", typeof(string));
    
            var exoTVAParameter = exoTVA != null ?
                new ObjectParameter("ExoTVA", exoTVA) :
                new ObjectParameter("ExoTVA", typeof(string));
    
            var exoTPRCMParameter = exoTPRCM != null ?
                new ObjectParameter("ExoTPRCM", exoTPRCM) :
                new ObjectParameter("ExoTPRCM", typeof(string));
    
            var exoFTCParameter = exoFTC != null ?
                new ObjectParameter("ExoFTC", exoFTC) :
                new ObjectParameter("ExoFTC", typeof(string));
    
            var txComDecParameter = txComDec.HasValue ?
                new ObjectParameter("TxComDec", txComDec) :
                new ObjectParameter("TxComDec", typeof(double));
    
            var txComMvtParameter = txComMvt.HasValue ?
                new ObjectParameter("TxComMvt", txComMvt) :
                new ObjectParameter("TxComMvt", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var mtFTCParameter = mtFTC.HasValue ?
                new ObjectParameter("MtFTC", mtFTC) :
                new ObjectParameter("MtFTC", typeof(int));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var nomemployeParameter = nomemploye != null ?
                new ObjectParameter("Nomemploye", nomemploye) :
                new ObjectParameter("Nomemploye", typeof(string));
    
            var cpteIndAgioResParameter = cpteIndAgioRes != null ?
                new ObjectParameter("CpteIndAgioRes", cpteIndAgioRes) :
                new ObjectParameter("CpteIndAgioRes", typeof(string));
    
            var cpteGenAgioResParameter = cpteGenAgioRes != null ?
                new ObjectParameter("CpteGenAgioRes", cpteGenAgioRes) :
                new ObjectParameter("CpteGenAgioRes", typeof(string));
    
            var cleGenAgioResParameter = cleGenAgioRes != null ?
                new ObjectParameter("CleGenAgioRes", cleGenAgioRes) :
                new ObjectParameter("CleGenAgioRes", typeof(string));
    
            var libCpteGenAgioResParameter = libCpteGenAgioRes != null ?
                new ObjectParameter("LibCpteGenAgioRes", libCpteGenAgioRes) :
                new ObjectParameter("LibCpteGenAgioRes", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var expirationlignedecParameter = expirationlignedec.HasValue ?
                new ObjectParameter("Expirationlignedec", expirationlignedec) :
                new ObjectParameter("Expirationlignedec", typeof(System.DateTime));
    
            var cRBlocageParameter = cRBlocage != null ?
                new ObjectParameter("CRBlocage", cRBlocage) :
                new ObjectParameter("CRBlocage", typeof(string));
    
            var dBBlocageParameter = dBBlocage != null ?
                new ObjectParameter("DBBlocage", dBBlocage) :
                new ObjectParameter("DBBlocage", typeof(string));
    
            var cantonnementParameter = cantonnement.HasValue ?
                new ObjectParameter("Cantonnement", cantonnement) :
                new ObjectParameter("Cantonnement", typeof(double));
    
            var cRBlockDateParameter = cRBlockDate.HasValue ?
                new ObjectParameter("CRBlockDate", cRBlockDate) :
                new ObjectParameter("CRBlockDate", typeof(System.DateTime));
    
            var dBBlockDateParameter = dBBlockDate.HasValue ?
                new ObjectParameter("DBBlockDate", dBBlockDate) :
                new ObjectParameter("DBBlockDate", typeof(System.DateTime));
    
            var dateDernierMvtDBParameter = dateDernierMvtDB.HasValue ?
                new ObjectParameter("DateDernierMvtDB", dateDernierMvtDB) :
                new ObjectParameter("DateDernierMvtDB", typeof(System.DateTime));
    
            var dateDernierMvtCRParameter = dateDernierMvtCR.HasValue ?
                new ObjectParameter("DateDernierMvtCR", dateDernierMvtCR) :
                new ObjectParameter("DateDernierMvtCR", typeof(System.DateTime));
    
            var stopIntDateParameter = stopIntDate.HasValue ?
                new ObjectParameter("StopIntDate", stopIntDate) :
                new ObjectParameter("StopIntDate", typeof(System.DateTime));
    
            var stopIntParameter = stopInt != null ?
                new ObjectParameter("StopInt", stopInt) :
                new ObjectParameter("StopInt", typeof(string));
    
            var reservedIntParameter = reservedInt != null ?
                new ObjectParameter("ReservedInt", reservedInt) :
                new ObjectParameter("ReservedInt", typeof(string));
    
            var controlAccesParameter = controlAcces != null ?
                new ObjectParameter("ControlAcces", controlAcces) :
                new ObjectParameter("ControlAcces", typeof(string));
    
            var signerinfoParameter = signerinfo != null ?
                new ObjectParameter("Signerinfo", signerinfo) :
                new ObjectParameter("Signerinfo", typeof(string));
    
            var dateDeclarationParameter = dateDeclaration.HasValue ?
                new ObjectParameter("DateDeclaration", dateDeclaration) :
                new ObjectParameter("DateDeclaration", typeof(System.DateTime));
    
            var dormantstatusParameter = dormantstatus != null ?
                new ObjectParameter("dormantstatus", dormantstatus) :
                new ObjectParameter("dormantstatus", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUpdateCpteClt_S_Trans_Result>("InsertUpdateCpteClt_S_Trans", agenceParameter, clientParameter, cpteJumelleParameter, debitParameter, creditParameter, libClientParameter, catCpteParameter, libCatCpteParameter, subcpteParameter, letCleParameter, deviseParameter, ligneDecParameter, expirationParameter, cpteColParameter, cleColParameter, dateOuvertureParameter, gestionnaireParameter, statutParameter, dateEffParameter, totalSignatureParameter, signatureValParameter, fusionParameter, libAgenceParameter, libDeviseParameter, libCpteColParameter, libGestionnaireParameter, cpteOvationParameter, txIntDbParameter, txIntCrParameter, exoTDCParameter, exoTVAParameter, exoTPRCMParameter, exoFTCParameter, txComDecParameter, txComMvtParameter, txTVAParameter, mtFTCParameter, employeParameter, nomemployeParameter, cpteIndAgioResParameter, cpteGenAgioResParameter, cleGenAgioResParameter, libCpteGenAgioResParameter, dateCreationParameter, expirationlignedecParameter, cRBlocageParameter, dBBlocageParameter, cantonnementParameter, cRBlockDateParameter, dBBlockDateParameter, dateDernierMvtDBParameter, dateDernierMvtCRParameter, stopIntDateParameter, stopIntParameter, reservedIntParameter, controlAccesParameter, signerinfoParameter, dateDeclarationParameter, dormantstatusParameter, integritystatusParameter, dateTransfertParameter, lect, languageParameter);
        }
    
        public virtual int InsprintIntStat(string agence, string devise, string svCpte, string svDenomination, Nullable<System.DateTime> dateV1, Nullable<System.DateTime> wDateOp, Nullable<double> mtDebit, Nullable<double> mtCredit, Nullable<double> soldedb, Nullable<double> soldecr, Nullable<decimal> nbJours, Nullable<double> txIntDb, Nullable<double> txIntCr, Nullable<int> nbjDb, Nullable<int> nbjCr, string ndesc, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, ObjectParameter lecture, string language, string employe)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var svCpteParameter = svCpte != null ?
                new ObjectParameter("SvCpte", svCpte) :
                new ObjectParameter("SvCpte", typeof(string));
    
            var svDenominationParameter = svDenomination != null ?
                new ObjectParameter("SvDenomination", svDenomination) :
                new ObjectParameter("SvDenomination", typeof(string));
    
            var dateV1Parameter = dateV1.HasValue ?
                new ObjectParameter("DateV1", dateV1) :
                new ObjectParameter("DateV1", typeof(System.DateTime));
    
            var wDateOpParameter = wDateOp.HasValue ?
                new ObjectParameter("WDateOp", wDateOp) :
                new ObjectParameter("WDateOp", typeof(System.DateTime));
    
            var mtDebitParameter = mtDebit.HasValue ?
                new ObjectParameter("MtDebit", mtDebit) :
                new ObjectParameter("MtDebit", typeof(double));
    
            var mtCreditParameter = mtCredit.HasValue ?
                new ObjectParameter("MtCredit", mtCredit) :
                new ObjectParameter("MtCredit", typeof(double));
    
            var soldedbParameter = soldedb.HasValue ?
                new ObjectParameter("soldedb", soldedb) :
                new ObjectParameter("soldedb", typeof(double));
    
            var soldecrParameter = soldecr.HasValue ?
                new ObjectParameter("soldecr", soldecr) :
                new ObjectParameter("soldecr", typeof(double));
    
            var nbJoursParameter = nbJours.HasValue ?
                new ObjectParameter("NbJours", nbJours) :
                new ObjectParameter("NbJours", typeof(decimal));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var nbjDbParameter = nbjDb.HasValue ?
                new ObjectParameter("NbjDb", nbjDb) :
                new ObjectParameter("NbjDb", typeof(int));
    
            var nbjCrParameter = nbjCr.HasValue ?
                new ObjectParameter("NbjCr", nbjCr) :
                new ObjectParameter("NbjCr", typeof(int));
    
            var ndescParameter = ndesc != null ?
                new ObjectParameter("ndesc", ndesc) :
                new ObjectParameter("ndesc", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsprintIntStat", agenceParameter, deviseParameter, svCpteParameter, svDenominationParameter, dateV1Parameter, wDateOpParameter, mtDebitParameter, mtCreditParameter, soldedbParameter, soldecrParameter, nbJoursParameter, txIntDbParameter, txIntCrParameter, nbjDbParameter, nbjCrParameter, ndescParameter, dateDebutParameter, dateFinParameter, lecture, languageParameter, employeParameter);
        }
    
        public virtual int Institution_Insert(string cobacID, string motto, string publicite, string institution, string typesociete, string companyAbbreviation, string sauvegarde, ObjectParameter lect, ObjectParameter errMsg)
        {
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            var mottoParameter = motto != null ?
                new ObjectParameter("motto", motto) :
                new ObjectParameter("motto", typeof(string));
    
            var publiciteParameter = publicite != null ?
                new ObjectParameter("publicite", publicite) :
                new ObjectParameter("publicite", typeof(string));
    
            var institutionParameter = institution != null ?
                new ObjectParameter("institution", institution) :
                new ObjectParameter("institution", typeof(string));
    
            var typesocieteParameter = typesociete != null ?
                new ObjectParameter("Typesociete", typesociete) :
                new ObjectParameter("Typesociete", typeof(string));
    
            var companyAbbreviationParameter = companyAbbreviation != null ?
                new ObjectParameter("CompanyAbbreviation", companyAbbreviation) :
                new ObjectParameter("CompanyAbbreviation", typeof(string));
    
            var sauvegardeParameter = sauvegarde != null ?
                new ObjectParameter("Sauvegarde", sauvegarde) :
                new ObjectParameter("Sauvegarde", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Institution_Insert", cobacIDParameter, mottoParameter, publiciteParameter, institutionParameter, typesocieteParameter, companyAbbreviationParameter, sauvegardeParameter, lect, errMsg);
        }
    
        public virtual int Institution_Update(string cobacID, string motto, string publicite, string institution, string typesociete, string companyAbbreviation, string sauvegarde, ObjectParameter lect, ObjectParameter errMsg)
        {
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            var mottoParameter = motto != null ?
                new ObjectParameter("motto", motto) :
                new ObjectParameter("motto", typeof(string));
    
            var publiciteParameter = publicite != null ?
                new ObjectParameter("publicite", publicite) :
                new ObjectParameter("publicite", typeof(string));
    
            var institutionParameter = institution != null ?
                new ObjectParameter("institution", institution) :
                new ObjectParameter("institution", typeof(string));
    
            var typesocieteParameter = typesociete != null ?
                new ObjectParameter("Typesociete", typesociete) :
                new ObjectParameter("Typesociete", typeof(string));
    
            var companyAbbreviationParameter = companyAbbreviation != null ?
                new ObjectParameter("CompanyAbbreviation", companyAbbreviation) :
                new ObjectParameter("CompanyAbbreviation", typeof(string));
    
            var sauvegardeParameter = sauvegarde != null ?
                new ObjectParameter("Sauvegarde", sauvegarde) :
                new ObjectParameter("Sauvegarde", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Institution_Update", cobacIDParameter, mottoParameter, publiciteParameter, institutionParameter, typesocieteParameter, companyAbbreviationParameter, sauvegardeParameter, lect, errMsg);
        }
    
        public virtual int InsTotIntStat(string agence, string devise, string svCpte, string svDenomination, Nullable<int> intDb, Nullable<int> intCr, Nullable<double> comMvt, Nullable<double> comDec, Nullable<double> fTC, Nullable<double> mtTVA, Nullable<double> tPRCM, ObjectParameter lecture, string employe)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var svCpteParameter = svCpte != null ?
                new ObjectParameter("SvCpte", svCpte) :
                new ObjectParameter("SvCpte", typeof(string));
    
            var svDenominationParameter = svDenomination != null ?
                new ObjectParameter("SvDenomination", svDenomination) :
                new ObjectParameter("SvDenomination", typeof(string));
    
            var intDbParameter = intDb.HasValue ?
                new ObjectParameter("IntDb", intDb) :
                new ObjectParameter("IntDb", typeof(int));
    
            var intCrParameter = intCr.HasValue ?
                new ObjectParameter("IntCr", intCr) :
                new ObjectParameter("IntCr", typeof(int));
    
            var comMvtParameter = comMvt.HasValue ?
                new ObjectParameter("ComMvt", comMvt) :
                new ObjectParameter("ComMvt", typeof(double));
    
            var comDecParameter = comDec.HasValue ?
                new ObjectParameter("ComDec", comDec) :
                new ObjectParameter("ComDec", typeof(double));
    
            var fTCParameter = fTC.HasValue ?
                new ObjectParameter("FTC", fTC) :
                new ObjectParameter("FTC", typeof(double));
    
            var mtTVAParameter = mtTVA.HasValue ?
                new ObjectParameter("MtTVA", mtTVA) :
                new ObjectParameter("MtTVA", typeof(double));
    
            var tPRCMParameter = tPRCM.HasValue ?
                new ObjectParameter("TPRCM", tPRCM) :
                new ObjectParameter("TPRCM", typeof(double));
    
            var employeParameter = employe != null ?
                new ObjectParameter("employe", employe) :
                new ObjectParameter("employe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsTotIntStat", agenceParameter, deviseParameter, svCpteParameter, svDenominationParameter, intDbParameter, intCrParameter, comMvtParameter, comDecParameter, fTCParameter, mtTVAParameter, tPRCMParameter, lecture, employeParameter);
        }
    
        public virtual int IntegrateFiles_insert(Nullable<short> agence, string libAgence, Nullable<System.DateTime> dateIntegrate, string fichierIntagrate, Nullable<int> employe, string libEmploye, string operationType, string status, ObjectParameter countfield, string computerName, string language)
        {
            var agenceParameter = agence.HasValue ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(short));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var dateIntegrateParameter = dateIntegrate.HasValue ?
                new ObjectParameter("DateIntegrate", dateIntegrate) :
                new ObjectParameter("DateIntegrate", typeof(System.DateTime));
    
            var fichierIntagrateParameter = fichierIntagrate != null ?
                new ObjectParameter("FichierIntagrate", fichierIntagrate) :
                new ObjectParameter("FichierIntagrate", typeof(string));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(int));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var operationTypeParameter = operationType != null ?
                new ObjectParameter("OperationType", operationType) :
                new ObjectParameter("OperationType", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IntegrateFiles_insert", agenceParameter, libAgenceParameter, dateIntegrateParameter, fichierIntagrateParameter, employeParameter, libEmployeParameter, operationTypeParameter, statusParameter, countfield, computerNameParameter, languageParameter);
        }
    
        public virtual int IntervalDeterm(string periodicite, ObjectParameter lect)
        {
            var periodiciteParameter = periodicite != null ?
                new ObjectParameter("Periodicite", periodicite) :
                new ObjectParameter("Periodicite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IntervalDeterm", periodiciteParameter, lect);
        }
    
        public virtual int JnalInteretDepot(string devise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, Nullable<int> allAccts, string cpteDebut, string cpteFin, Nullable<int> intStmt, string companyname, string catClient, string custoType, Nullable<int> accountType, string wTxnCode, Nullable<System.DateTime> serverDate, ObjectParameter lect, ObjectParameter msg, string computerName, string employe, string language)
        {
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var allAcctsParameter = allAccts.HasValue ?
                new ObjectParameter("AllAccts", allAccts) :
                new ObjectParameter("AllAccts", typeof(int));
    
            var cpteDebutParameter = cpteDebut != null ?
                new ObjectParameter("CpteDebut", cpteDebut) :
                new ObjectParameter("CpteDebut", typeof(string));
    
            var cpteFinParameter = cpteFin != null ?
                new ObjectParameter("CpteFin", cpteFin) :
                new ObjectParameter("CpteFin", typeof(string));
    
            var intStmtParameter = intStmt.HasValue ?
                new ObjectParameter("IntStmt", intStmt) :
                new ObjectParameter("IntStmt", typeof(int));
    
            var companynameParameter = companyname != null ?
                new ObjectParameter("companyname", companyname) :
                new ObjectParameter("companyname", typeof(string));
    
            var catClientParameter = catClient != null ?
                new ObjectParameter("CatClient", catClient) :
                new ObjectParameter("CatClient", typeof(string));
    
            var custoTypeParameter = custoType != null ?
                new ObjectParameter("CustoType", custoType) :
                new ObjectParameter("CustoType", typeof(string));
    
            var accountTypeParameter = accountType.HasValue ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(int));
    
            var wTxnCodeParameter = wTxnCode != null ?
                new ObjectParameter("wTxnCode", wTxnCode) :
                new ObjectParameter("wTxnCode", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JnalInteretDepot", deviseParameter, dateDebutParameter, dateFinParameter, allAcctsParameter, cpteDebutParameter, cpteFinParameter, intStmtParameter, companynameParameter, catClientParameter, custoTypeParameter, accountTypeParameter, wTxnCodeParameter, serverDateParameter, lect, msg, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int JnalRembLoan_Insert_S_Trans(string agence, string cpteCredit, Nullable<int> serie, string cpteCC, Nullable<System.DateTime> dateOp, Nullable<double> capitalARemb, Nullable<double> montant, Nullable<System.DateTime> dateAccord, Nullable<double> rembCapMois, Nullable<double> intMois, Nullable<double> tVAMois, Nullable<double> rembPerDiff, string zoneMaj, Nullable<double> pourcentProv, Nullable<System.DateTime> dateTrait, Nullable<System.DateTime> dateTrImp, Nullable<System.DateTime> dateCpta, Nullable<System.DateTime> dateCptaAccord, Nullable<System.DateTime> datePassAutre, string fPVal, string cpteIndAgioRes, string cpteJumelleImp, string numeroContrat, Nullable<System.DateTime> dateCreation, string denomination, Nullable<System.DateTime> datetcptafpval, Nullable<int> catCpte, string txnNo, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, string language, Nullable<double> intRetard)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var cpteCreditParameter = cpteCredit != null ?
                new ObjectParameter("CpteCredit", cpteCredit) :
                new ObjectParameter("CpteCredit", typeof(string));
    
            var serieParameter = serie.HasValue ?
                new ObjectParameter("Serie", serie) :
                new ObjectParameter("Serie", typeof(int));
    
            var cpteCCParameter = cpteCC != null ?
                new ObjectParameter("CpteCC", cpteCC) :
                new ObjectParameter("CpteCC", typeof(string));
    
            var dateOpParameter = dateOp.HasValue ?
                new ObjectParameter("DateOp", dateOp) :
                new ObjectParameter("DateOp", typeof(System.DateTime));
    
            var capitalARembParameter = capitalARemb.HasValue ?
                new ObjectParameter("CapitalARemb", capitalARemb) :
                new ObjectParameter("CapitalARemb", typeof(double));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var dateAccordParameter = dateAccord.HasValue ?
                new ObjectParameter("DateAccord", dateAccord) :
                new ObjectParameter("DateAccord", typeof(System.DateTime));
    
            var rembCapMoisParameter = rembCapMois.HasValue ?
                new ObjectParameter("RembCapMois", rembCapMois) :
                new ObjectParameter("RembCapMois", typeof(double));
    
            var intMoisParameter = intMois.HasValue ?
                new ObjectParameter("IntMois", intMois) :
                new ObjectParameter("IntMois", typeof(double));
    
            var tVAMoisParameter = tVAMois.HasValue ?
                new ObjectParameter("TVAMois", tVAMois) :
                new ObjectParameter("TVAMois", typeof(double));
    
            var rembPerDiffParameter = rembPerDiff.HasValue ?
                new ObjectParameter("RembPerDiff", rembPerDiff) :
                new ObjectParameter("RembPerDiff", typeof(double));
    
            var zoneMajParameter = zoneMaj != null ?
                new ObjectParameter("ZoneMaj", zoneMaj) :
                new ObjectParameter("ZoneMaj", typeof(string));
    
            var pourcentProvParameter = pourcentProv.HasValue ?
                new ObjectParameter("PourcentProv", pourcentProv) :
                new ObjectParameter("PourcentProv", typeof(double));
    
            var dateTraitParameter = dateTrait.HasValue ?
                new ObjectParameter("DateTrait", dateTrait) :
                new ObjectParameter("DateTrait", typeof(System.DateTime));
    
            var dateTrImpParameter = dateTrImp.HasValue ?
                new ObjectParameter("DateTrImp", dateTrImp) :
                new ObjectParameter("DateTrImp", typeof(System.DateTime));
    
            var dateCptaParameter = dateCpta.HasValue ?
                new ObjectParameter("DateCpta", dateCpta) :
                new ObjectParameter("DateCpta", typeof(System.DateTime));
    
            var dateCptaAccordParameter = dateCptaAccord.HasValue ?
                new ObjectParameter("DateCptaAccord", dateCptaAccord) :
                new ObjectParameter("DateCptaAccord", typeof(System.DateTime));
    
            var datePassAutreParameter = datePassAutre.HasValue ?
                new ObjectParameter("DatePassAutre", datePassAutre) :
                new ObjectParameter("DatePassAutre", typeof(System.DateTime));
    
            var fPValParameter = fPVal != null ?
                new ObjectParameter("FPVal", fPVal) :
                new ObjectParameter("FPVal", typeof(string));
    
            var cpteIndAgioResParameter = cpteIndAgioRes != null ?
                new ObjectParameter("CpteIndAgioRes", cpteIndAgioRes) :
                new ObjectParameter("CpteIndAgioRes", typeof(string));
    
            var cpteJumelleImpParameter = cpteJumelleImp != null ?
                new ObjectParameter("CpteJumelleImp", cpteJumelleImp) :
                new ObjectParameter("CpteJumelleImp", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var datetcptafpvalParameter = datetcptafpval.HasValue ?
                new ObjectParameter("datetcptafpval", datetcptafpval) :
                new ObjectParameter("datetcptafpval", typeof(System.DateTime));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(int));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var intRetardParameter = intRetard.HasValue ?
                new ObjectParameter("IntRetard", intRetard) :
                new ObjectParameter("IntRetard", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JnalRembLoan_Insert_S_Trans", agenceParameter, cpteCreditParameter, serieParameter, cpteCCParameter, dateOpParameter, capitalARembParameter, montantParameter, dateAccordParameter, rembCapMoisParameter, intMoisParameter, tVAMoisParameter, rembPerDiffParameter, zoneMajParameter, pourcentProvParameter, dateTraitParameter, dateTrImpParameter, dateCptaParameter, dateCptaAccordParameter, datePassAutreParameter, fPValParameter, cpteIndAgioResParameter, cpteJumelleImpParameter, numeroContratParameter, dateCreationParameter, denominationParameter, datetcptafpvalParameter, catCpteParameter, txnNoParameter, dateTransfertParameter, lect, languageParameter, intRetardParameter);
        }
    
        public virtual int Jour_Ouvrable(Nullable<System.DateTime> pDate, ObjectParameter jOuvrable)
        {
            var pDateParameter = pDate.HasValue ?
                new ObjectParameter("PDate", pDate) :
                new ObjectParameter("PDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Jour_Ouvrable", pDateParameter, jOuvrable);
        }
    
        public virtual int JourFerie_Delete(string dateFete, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var dateFeteParameter = dateFete != null ?
                new ObjectParameter("DateFete", dateFete) :
                new ObjectParameter("DateFete", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JourFerie_Delete", dateFeteParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int JourFerie_Insert(string dateFete, string motif, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var dateFeteParameter = dateFete != null ?
                new ObjectParameter("DateFete", dateFete) :
                new ObjectParameter("DateFete", typeof(string));
    
            var motifParameter = motif != null ?
                new ObjectParameter("Motif", motif) :
                new ObjectParameter("Motif", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JourFerie_Insert", dateFeteParameter, motifParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int JourFerie_Update(string dateFete, string motif, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var dateFeteParameter = dateFete != null ?
                new ObjectParameter("DateFete", dateFete) :
                new ObjectParameter("DateFete", typeof(string));
    
            var motifParameter = motif != null ?
                new ObjectParameter("Motif", motif) :
                new ObjectParameter("Motif", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JourFerie_Update", dateFeteParameter, motifParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int LectParaInt(string codepara, Nullable<int> orient, ObjectParameter valLectPara, ObjectParameter msgErr, string language)
        {
            var codeparaParameter = codepara != null ?
                new ObjectParameter("Codepara", codepara) :
                new ObjectParameter("Codepara", typeof(string));
    
            var orientParameter = orient.HasValue ?
                new ObjectParameter("Orient", orient) :
                new ObjectParameter("Orient", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LectParaInt", codeparaParameter, orientParameter, valLectPara, msgErr, languageParameter);
        }
    
        public virtual int LoanProvAcc_Delete(string agence, string pc_COMPTEDEB, string pc_COMPTECRED, string pc_COMPTEINC, string pc_CatClient, Nullable<int> pi_ProductCode, string pc_LibCatClient, string pc_LibProduct, string matricule, string libEmploye, string computername, string pc_CustomerType, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var pc_COMPTEDEBParameter = pc_COMPTEDEB != null ?
                new ObjectParameter("Pc_COMPTEDEB", pc_COMPTEDEB) :
                new ObjectParameter("Pc_COMPTEDEB", typeof(string));
    
            var pc_COMPTECREDParameter = pc_COMPTECRED != null ?
                new ObjectParameter("Pc_COMPTECRED", pc_COMPTECRED) :
                new ObjectParameter("Pc_COMPTECRED", typeof(string));
    
            var pc_COMPTEINCParameter = pc_COMPTEINC != null ?
                new ObjectParameter("Pc_COMPTEINC", pc_COMPTEINC) :
                new ObjectParameter("Pc_COMPTEINC", typeof(string));
    
            var pc_CatClientParameter = pc_CatClient != null ?
                new ObjectParameter("Pc_CatClient", pc_CatClient) :
                new ObjectParameter("Pc_CatClient", typeof(string));
    
            var pi_ProductCodeParameter = pi_ProductCode.HasValue ?
                new ObjectParameter("Pi_ProductCode", pi_ProductCode) :
                new ObjectParameter("Pi_ProductCode", typeof(int));
    
            var pc_LibCatClientParameter = pc_LibCatClient != null ?
                new ObjectParameter("Pc_LibCatClient", pc_LibCatClient) :
                new ObjectParameter("Pc_LibCatClient", typeof(string));
    
            var pc_LibProductParameter = pc_LibProduct != null ?
                new ObjectParameter("Pc_LibProduct", pc_LibProduct) :
                new ObjectParameter("Pc_LibProduct", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var pc_CustomerTypeParameter = pc_CustomerType != null ?
                new ObjectParameter("Pc_CustomerType", pc_CustomerType) :
                new ObjectParameter("Pc_CustomerType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoanProvAcc_Delete", agenceParameter, pc_COMPTEDEBParameter, pc_COMPTECREDParameter, pc_COMPTEINCParameter, pc_CatClientParameter, pi_ProductCodeParameter, pc_LibCatClientParameter, pc_LibProductParameter, matriculeParameter, libEmployeParameter, computernameParameter, pc_CustomerTypeParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int LoanProvAcc_Insert(string agence, string pc_COMPTEDEB, string pc_COMPTECRED, string pc_COMPTEINC, string pc_CatClient, Nullable<int> pi_ProductCode, string pc_LibCatClient, string pc_LibProduct, string matricule, string libEmploye, string computername, string pc_CustomerType, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var pc_COMPTEDEBParameter = pc_COMPTEDEB != null ?
                new ObjectParameter("Pc_COMPTEDEB", pc_COMPTEDEB) :
                new ObjectParameter("Pc_COMPTEDEB", typeof(string));
    
            var pc_COMPTECREDParameter = pc_COMPTECRED != null ?
                new ObjectParameter("Pc_COMPTECRED", pc_COMPTECRED) :
                new ObjectParameter("Pc_COMPTECRED", typeof(string));
    
            var pc_COMPTEINCParameter = pc_COMPTEINC != null ?
                new ObjectParameter("Pc_COMPTEINC", pc_COMPTEINC) :
                new ObjectParameter("Pc_COMPTEINC", typeof(string));
    
            var pc_CatClientParameter = pc_CatClient != null ?
                new ObjectParameter("Pc_CatClient", pc_CatClient) :
                new ObjectParameter("Pc_CatClient", typeof(string));
    
            var pi_ProductCodeParameter = pi_ProductCode.HasValue ?
                new ObjectParameter("Pi_ProductCode", pi_ProductCode) :
                new ObjectParameter("Pi_ProductCode", typeof(int));
    
            var pc_LibCatClientParameter = pc_LibCatClient != null ?
                new ObjectParameter("Pc_LibCatClient", pc_LibCatClient) :
                new ObjectParameter("Pc_LibCatClient", typeof(string));
    
            var pc_LibProductParameter = pc_LibProduct != null ?
                new ObjectParameter("Pc_LibProduct", pc_LibProduct) :
                new ObjectParameter("Pc_LibProduct", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var pc_CustomerTypeParameter = pc_CustomerType != null ?
                new ObjectParameter("Pc_CustomerType", pc_CustomerType) :
                new ObjectParameter("Pc_CustomerType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoanProvAcc_Insert", agenceParameter, pc_COMPTEDEBParameter, pc_COMPTECREDParameter, pc_COMPTEINCParameter, pc_CatClientParameter, pi_ProductCodeParameter, pc_LibCatClientParameter, pc_LibProductParameter, matriculeParameter, libEmployeParameter, computernameParameter, pc_CustomerTypeParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int LoanProvAcc_Update(string agence, string pc_COMPTEDEB, string pc_COMPTECRED, string pc_COMPTEINC, string pc_CatClient, Nullable<int> pi_ProductCode, string pc_LibCatClient, string pc_LibProduct, string matricule, string libEmploye, string computername, string pc_CustomerType, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var pc_COMPTEDEBParameter = pc_COMPTEDEB != null ?
                new ObjectParameter("Pc_COMPTEDEB", pc_COMPTEDEB) :
                new ObjectParameter("Pc_COMPTEDEB", typeof(string));
    
            var pc_COMPTECREDParameter = pc_COMPTECRED != null ?
                new ObjectParameter("Pc_COMPTECRED", pc_COMPTECRED) :
                new ObjectParameter("Pc_COMPTECRED", typeof(string));
    
            var pc_COMPTEINCParameter = pc_COMPTEINC != null ?
                new ObjectParameter("Pc_COMPTEINC", pc_COMPTEINC) :
                new ObjectParameter("Pc_COMPTEINC", typeof(string));
    
            var pc_CatClientParameter = pc_CatClient != null ?
                new ObjectParameter("Pc_CatClient", pc_CatClient) :
                new ObjectParameter("Pc_CatClient", typeof(string));
    
            var pi_ProductCodeParameter = pi_ProductCode.HasValue ?
                new ObjectParameter("Pi_ProductCode", pi_ProductCode) :
                new ObjectParameter("Pi_ProductCode", typeof(int));
    
            var pc_LibCatClientParameter = pc_LibCatClient != null ?
                new ObjectParameter("Pc_LibCatClient", pc_LibCatClient) :
                new ObjectParameter("Pc_LibCatClient", typeof(string));
    
            var pc_LibProductParameter = pc_LibProduct != null ?
                new ObjectParameter("Pc_LibProduct", pc_LibProduct) :
                new ObjectParameter("Pc_LibProduct", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var pc_CustomerTypeParameter = pc_CustomerType != null ?
                new ObjectParameter("Pc_CustomerType", pc_CustomerType) :
                new ObjectParameter("Pc_CustomerType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoanProvAcc_Update", agenceParameter, pc_COMPTEDEBParameter, pc_COMPTECREDParameter, pc_COMPTEINCParameter, pc_CatClientParameter, pi_ProductCodeParameter, pc_LibCatClientParameter, pc_LibProductParameter, matriculeParameter, libEmployeParameter, computernameParameter, pc_CustomerTypeParameter, lect, errMsg, languageParameter);
        }
    
        public virtual ObjectResult<LoanRepayment_Result> LoanRepayment(string wagence, Nullable<double> totint, string wLibAgence, string repayacc, string wEmploye, string wLibEmploye, Nullable<double> capitalRec, Nullable<double> interestRec, Nullable<double> vatRec, Nullable<double> recPena, string devise, string libDevise, ObjectParameter lecture, ObjectParameter msg, string computername, string language, string v_NumeroContrat)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var totintParameter = totint.HasValue ?
                new ObjectParameter("totint", totint) :
                new ObjectParameter("totint", typeof(double));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var repayaccParameter = repayacc != null ?
                new ObjectParameter("repayacc", repayacc) :
                new ObjectParameter("repayacc", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var capitalRecParameter = capitalRec.HasValue ?
                new ObjectParameter("CapitalRec", capitalRec) :
                new ObjectParameter("CapitalRec", typeof(double));
    
            var interestRecParameter = interestRec.HasValue ?
                new ObjectParameter("InterestRec", interestRec) :
                new ObjectParameter("InterestRec", typeof(double));
    
            var vatRecParameter = vatRec.HasValue ?
                new ObjectParameter("VatRec", vatRec) :
                new ObjectParameter("VatRec", typeof(double));
    
            var recPenaParameter = recPena.HasValue ?
                new ObjectParameter("RecPena", recPena) :
                new ObjectParameter("RecPena", typeof(double));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var v_NumeroContratParameter = v_NumeroContrat != null ?
                new ObjectParameter("V_NumeroContrat", v_NumeroContrat) :
                new ObjectParameter("V_NumeroContrat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoanRepayment_Result>("LoanRepayment", wagenceParameter, totintParameter, wLibAgenceParameter, repayaccParameter, wEmployeParameter, wLibEmployeParameter, capitalRecParameter, interestRecParameter, vatRecParameter, recPenaParameter, deviseParameter, libDeviseParameter, lecture, msg, computernameParameter, languageParameter, v_NumeroContratParameter);
        }
    
        public virtual ObjectResult<LoanRepayment_ST_Result> LoanRepayment_ST(string wagence, Nullable<double> totint, string svTxnNo, string wLibAgence, string repayacc, string wEmploye, string wLibEmploye, Nullable<double> capitalRec, Nullable<double> interestRec, Nullable<double> vatRec, Nullable<double> recPena, string devise, string libDevise, ObjectParameter lecture, ObjectParameter msg, string computername, string language, string v_NumeroContrat)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var totintParameter = totint.HasValue ?
                new ObjectParameter("totint", totint) :
                new ObjectParameter("totint", typeof(double));
    
            var svTxnNoParameter = svTxnNo != null ?
                new ObjectParameter("SvTxnNo", svTxnNo) :
                new ObjectParameter("SvTxnNo", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var repayaccParameter = repayacc != null ?
                new ObjectParameter("repayacc", repayacc) :
                new ObjectParameter("repayacc", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var capitalRecParameter = capitalRec.HasValue ?
                new ObjectParameter("CapitalRec", capitalRec) :
                new ObjectParameter("CapitalRec", typeof(double));
    
            var interestRecParameter = interestRec.HasValue ?
                new ObjectParameter("InterestRec", interestRec) :
                new ObjectParameter("InterestRec", typeof(double));
    
            var vatRecParameter = vatRec.HasValue ?
                new ObjectParameter("VatRec", vatRec) :
                new ObjectParameter("VatRec", typeof(double));
    
            var recPenaParameter = recPena.HasValue ?
                new ObjectParameter("RecPena", recPena) :
                new ObjectParameter("RecPena", typeof(double));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var v_NumeroContratParameter = v_NumeroContrat != null ?
                new ObjectParameter("V_NumeroContrat", v_NumeroContrat) :
                new ObjectParameter("V_NumeroContrat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoanRepayment_ST_Result>("LoanRepayment_ST", wagenceParameter, totintParameter, svTxnNoParameter, wLibAgenceParameter, repayaccParameter, wEmployeParameter, wLibEmployeParameter, capitalRecParameter, interestRecParameter, vatRecParameter, recPenaParameter, deviseParameter, libDeviseParameter, lecture, msg, computernameParameter, languageParameter, v_NumeroContratParameter);
        }
    
        public virtual ObjectResult<LoanRepaymentOpe_ST_Result> LoanRepaymentOpe_ST(string wagence, Nullable<double> totint, string svTxnNo, string wLibAgence, string repayacc, string wEmploye, string wLibEmploye, Nullable<double> capitalRec, Nullable<double> interestRec, Nullable<double> vatRec, Nullable<double> recPena, string devise, string libDevise, ObjectParameter lecture, ObjectParameter msg, string computername, string language, string v_NumeroContrat, Nullable<System.DateTime> currentDate, string journal, string libJournal)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var totintParameter = totint.HasValue ?
                new ObjectParameter("totint", totint) :
                new ObjectParameter("totint", typeof(double));
    
            var svTxnNoParameter = svTxnNo != null ?
                new ObjectParameter("SvTxnNo", svTxnNo) :
                new ObjectParameter("SvTxnNo", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var repayaccParameter = repayacc != null ?
                new ObjectParameter("repayacc", repayacc) :
                new ObjectParameter("repayacc", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var capitalRecParameter = capitalRec.HasValue ?
                new ObjectParameter("CapitalRec", capitalRec) :
                new ObjectParameter("CapitalRec", typeof(double));
    
            var interestRecParameter = interestRec.HasValue ?
                new ObjectParameter("InterestRec", interestRec) :
                new ObjectParameter("InterestRec", typeof(double));
    
            var vatRecParameter = vatRec.HasValue ?
                new ObjectParameter("VatRec", vatRec) :
                new ObjectParameter("VatRec", typeof(double));
    
            var recPenaParameter = recPena.HasValue ?
                new ObjectParameter("RecPena", recPena) :
                new ObjectParameter("RecPena", typeof(double));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var v_NumeroContratParameter = v_NumeroContrat != null ?
                new ObjectParameter("V_NumeroContrat", v_NumeroContrat) :
                new ObjectParameter("V_NumeroContrat", typeof(string));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("CurrentDate", currentDate) :
                new ObjectParameter("CurrentDate", typeof(System.DateTime));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var libJournalParameter = libJournal != null ?
                new ObjectParameter("LibJournal", libJournal) :
                new ObjectParameter("LibJournal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoanRepaymentOpe_ST_Result>("LoanRepaymentOpe_ST", wagenceParameter, totintParameter, svTxnNoParameter, wLibAgenceParameter, repayaccParameter, wEmployeParameter, wLibEmployeParameter, capitalRecParameter, interestRecParameter, vatRecParameter, recPenaParameter, deviseParameter, libDeviseParameter, lecture, msg, computernameParameter, languageParameter, v_NumeroContratParameter, currentDateParameter, journalParameter, libJournalParameter);
        }
    
        public virtual ObjectResult<LoanRepaymentTrf_Result> LoanRepaymentTrf(string wagence, Nullable<double> totint, string wLibAgence, string wEmploye, string wLibEmploye, Nullable<double> capitalRec, Nullable<double> interestRec, Nullable<double> vatRec, Nullable<double> recPena, string devise, string libDevise, ObjectParameter lecture, ObjectParameter msg, string cpteAg, string cleCpteAg, string libCpteAg, string currentBr, string libCurrentBr, string description, string denomination, string svTxnNo, string computername, string language, string v_NumeroContrat)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var totintParameter = totint.HasValue ?
                new ObjectParameter("totint", totint) :
                new ObjectParameter("totint", typeof(double));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var capitalRecParameter = capitalRec.HasValue ?
                new ObjectParameter("CapitalRec", capitalRec) :
                new ObjectParameter("CapitalRec", typeof(double));
    
            var interestRecParameter = interestRec.HasValue ?
                new ObjectParameter("InterestRec", interestRec) :
                new ObjectParameter("InterestRec", typeof(double));
    
            var vatRecParameter = vatRec.HasValue ?
                new ObjectParameter("VatRec", vatRec) :
                new ObjectParameter("VatRec", typeof(double));
    
            var recPenaParameter = recPena.HasValue ?
                new ObjectParameter("RecPena", recPena) :
                new ObjectParameter("RecPena", typeof(double));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var cpteAgParameter = cpteAg != null ?
                new ObjectParameter("CpteAg", cpteAg) :
                new ObjectParameter("CpteAg", typeof(string));
    
            var cleCpteAgParameter = cleCpteAg != null ?
                new ObjectParameter("CleCpteAg", cleCpteAg) :
                new ObjectParameter("CleCpteAg", typeof(string));
    
            var libCpteAgParameter = libCpteAg != null ?
                new ObjectParameter("LibCpteAg", libCpteAg) :
                new ObjectParameter("LibCpteAg", typeof(string));
    
            var currentBrParameter = currentBr != null ?
                new ObjectParameter("CurrentBr", currentBr) :
                new ObjectParameter("CurrentBr", typeof(string));
    
            var libCurrentBrParameter = libCurrentBr != null ?
                new ObjectParameter("LibCurrentBr", libCurrentBr) :
                new ObjectParameter("LibCurrentBr", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var svTxnNoParameter = svTxnNo != null ?
                new ObjectParameter("SvTxnNo", svTxnNo) :
                new ObjectParameter("SvTxnNo", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var v_NumeroContratParameter = v_NumeroContrat != null ?
                new ObjectParameter("V_NumeroContrat", v_NumeroContrat) :
                new ObjectParameter("V_NumeroContrat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoanRepaymentTrf_Result>("LoanRepaymentTrf", wagenceParameter, totintParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, capitalRecParameter, interestRecParameter, vatRecParameter, recPenaParameter, deviseParameter, libDeviseParameter, lecture, msg, cpteAgParameter, cleCpteAgParameter, libCpteAgParameter, currentBrParameter, libCurrentBrParameter, descriptionParameter, denominationParameter, svTxnNoParameter, computernameParameter, languageParameter, v_NumeroContratParameter);
        }
    
        public virtual int MajBisTable(Nullable<System.DateTime> serverdate, ObjectParameter lect, ObjectParameter msg, string computerName, string employe, string language)
        {
            var serverdateParameter = serverdate.HasValue ?
                new ObjectParameter("serverdate", serverdate) :
                new ObjectParameter("serverdate", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MajBisTable", serverdateParameter, lect, msg, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int MajCaisse(string caisse, string devise, Nullable<double> zDebit, Nullable<double> zCredit, ObjectParameter lect, string language, string agence)
        {
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var zDebitParameter = zDebit.HasValue ?
                new ObjectParameter("ZDebit", zDebit) :
                new ObjectParameter("ZDebit", typeof(double));
    
            var zCreditParameter = zCredit.HasValue ?
                new ObjectParameter("ZCredit", zCredit) :
                new ObjectParameter("ZCredit", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("agence", agence) :
                new ObjectParameter("agence", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MajCaisse", caisseParameter, deviseParameter, zDebitParameter, zCreditParameter, lect, languageParameter, agenceParameter);
        }
    
        public virtual int MajCaisse_Vault(string caisse, string devise, Nullable<double> zDebit, Nullable<double> zCredit, string zOPTN, ObjectParameter lect, string language, string agence)
        {
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var zDebitParameter = zDebit.HasValue ?
                new ObjectParameter("ZDebit", zDebit) :
                new ObjectParameter("ZDebit", typeof(double));
    
            var zCreditParameter = zCredit.HasValue ?
                new ObjectParameter("ZCredit", zCredit) :
                new ObjectParameter("ZCredit", typeof(double));
    
            var zOPTNParameter = zOPTN != null ?
                new ObjectParameter("ZOPTN", zOPTN) :
                new ObjectParameter("ZOPTN", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("agence", agence) :
                new ObjectParameter("agence", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MajCaisse_Vault", caisseParameter, deviseParameter, zDebitParameter, zCreditParameter, zOPTNParameter, lect, languageParameter, agenceParameter);
        }
    
        public virtual int MajCaisse_VaultTeller(string caisse, string devise, Nullable<double> zDebit, Nullable<double> zCredit, string zOPTN, ObjectParameter lect, string language, string agence, string type)
        {
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var zDebitParameter = zDebit.HasValue ?
                new ObjectParameter("ZDebit", zDebit) :
                new ObjectParameter("ZDebit", typeof(double));
    
            var zCreditParameter = zCredit.HasValue ?
                new ObjectParameter("ZCredit", zCredit) :
                new ObjectParameter("ZCredit", typeof(double));
    
            var zOPTNParameter = zOPTN != null ?
                new ObjectParameter("ZOPTN", zOPTN) :
                new ObjectParameter("ZOPTN", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("agence", agence) :
                new ObjectParameter("agence", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MajCaisse_VaultTeller", caisseParameter, deviseParameter, zDebitParameter, zCreditParameter, zOPTNParameter, lect, languageParameter, agenceParameter, typeParameter);
        }
    
        public virtual int MajCaisseClose(string pC_OPTN, string typeclose, string codeCaisse, string libelle, Nullable<double> montantDep, Nullable<double> debitJour, Nullable<double> creditJour, string compte, string cle, string journal, string libJournal, string libCompte, Nullable<System.DateTime> dateOp, string employe, string libEmploye, Nullable<double> maxAmount, Nullable<double> solde, Nullable<System.DateTime> dateServer, Nullable<double> cashHand, string agence, string devise, ObjectParameter tellerStatusOUT, ObjectParameter lect, ObjectParameter errMsg, string computerName, string language)
        {
            var pC_OPTNParameter = pC_OPTN != null ?
                new ObjectParameter("PC_OPTN", pC_OPTN) :
                new ObjectParameter("PC_OPTN", typeof(string));
    
            var typecloseParameter = typeclose != null ?
                new ObjectParameter("typeclose", typeclose) :
                new ObjectParameter("typeclose", typeof(string));
    
            var codeCaisseParameter = codeCaisse != null ?
                new ObjectParameter("CodeCaisse", codeCaisse) :
                new ObjectParameter("CodeCaisse", typeof(string));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("Libelle", libelle) :
                new ObjectParameter("Libelle", typeof(string));
    
            var montantDepParameter = montantDep.HasValue ?
                new ObjectParameter("MontantDep", montantDep) :
                new ObjectParameter("MontantDep", typeof(double));
    
            var debitJourParameter = debitJour.HasValue ?
                new ObjectParameter("DebitJour", debitJour) :
                new ObjectParameter("DebitJour", typeof(double));
    
            var creditJourParameter = creditJour.HasValue ?
                new ObjectParameter("CreditJour", creditJour) :
                new ObjectParameter("CreditJour", typeof(double));
    
            var compteParameter = compte != null ?
                new ObjectParameter("Compte", compte) :
                new ObjectParameter("Compte", typeof(string));
    
            var cleParameter = cle != null ?
                new ObjectParameter("Cle", cle) :
                new ObjectParameter("Cle", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var libJournalParameter = libJournal != null ?
                new ObjectParameter("LibJournal", libJournal) :
                new ObjectParameter("LibJournal", typeof(string));
    
            var libCompteParameter = libCompte != null ?
                new ObjectParameter("LibCompte", libCompte) :
                new ObjectParameter("LibCompte", typeof(string));
    
            var dateOpParameter = dateOp.HasValue ?
                new ObjectParameter("DateOp", dateOp) :
                new ObjectParameter("DateOp", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var maxAmountParameter = maxAmount.HasValue ?
                new ObjectParameter("MaxAmount", maxAmount) :
                new ObjectParameter("MaxAmount", typeof(double));
    
            var soldeParameter = solde.HasValue ?
                new ObjectParameter("Solde", solde) :
                new ObjectParameter("Solde", typeof(double));
    
            var dateServerParameter = dateServer.HasValue ?
                new ObjectParameter("DateServer", dateServer) :
                new ObjectParameter("DateServer", typeof(System.DateTime));
    
            var cashHandParameter = cashHand.HasValue ?
                new ObjectParameter("CashHand", cashHand) :
                new ObjectParameter("CashHand", typeof(double));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MajCaisseClose", pC_OPTNParameter, typecloseParameter, codeCaisseParameter, libelleParameter, montantDepParameter, debitJourParameter, creditJourParameter, compteParameter, cleParameter, journalParameter, libJournalParameter, libCompteParameter, dateOpParameter, employeParameter, libEmployeParameter, maxAmountParameter, soldeParameter, dateServerParameter, cashHandParameter, agenceParameter, deviseParameter, tellerStatusOUT, lect, errMsg, computerNameParameter, languageParameter);
        }
    
        public virtual int MajCaisseOpen(string pI_agence, string pC_Caisse, Nullable<System.DateTime> pD_Date, Nullable<double> pF_balance, string pC_OPTN, string pC_devise, ObjectParameter lect, ObjectParameter errMsg, ObjectParameter tellerStatusOUT, string language)
        {
            var pI_agenceParameter = pI_agence != null ?
                new ObjectParameter("PI_agence", pI_agence) :
                new ObjectParameter("PI_agence", typeof(string));
    
            var pC_CaisseParameter = pC_Caisse != null ?
                new ObjectParameter("PC_Caisse", pC_Caisse) :
                new ObjectParameter("PC_Caisse", typeof(string));
    
            var pD_DateParameter = pD_Date.HasValue ?
                new ObjectParameter("PD_Date", pD_Date) :
                new ObjectParameter("PD_Date", typeof(System.DateTime));
    
            var pF_balanceParameter = pF_balance.HasValue ?
                new ObjectParameter("PF_balance", pF_balance) :
                new ObjectParameter("PF_balance", typeof(double));
    
            var pC_OPTNParameter = pC_OPTN != null ?
                new ObjectParameter("PC_OPTN", pC_OPTN) :
                new ObjectParameter("PC_OPTN", typeof(string));
    
            var pC_deviseParameter = pC_devise != null ?
                new ObjectParameter("PC_devise", pC_devise) :
                new ObjectParameter("PC_devise", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MajCaisseOpen", pI_agenceParameter, pC_CaisseParameter, pD_DateParameter, pF_balanceParameter, pC_OPTNParameter, pC_deviseParameter, lect, errMsg, tellerStatusOUT, languageParameter);
        }
    
        public virtual int MajCaisseOpen_Vault(string pI_agence, string pC_Caisse, Nullable<System.DateTime> pD_Date, Nullable<double> pF_balance, string pC_OPTN, string pC_devise, Nullable<System.DateTime> pD_CreationTime, Nullable<System.DateTime> pD_Datemouch, string pC_TaskCode, string pC_TaskDescription, string pC_ComputerName, string pC_ancienneVal, string pC_NouvelleVal, string pC_TableMouch, string pC_LibEmploye, string pI_Employe, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, ObjectParameter errMsg, ObjectParameter tellerStatusOUT, string language)
        {
            var pI_agenceParameter = pI_agence != null ?
                new ObjectParameter("PI_agence", pI_agence) :
                new ObjectParameter("PI_agence", typeof(string));
    
            var pC_CaisseParameter = pC_Caisse != null ?
                new ObjectParameter("PC_Caisse", pC_Caisse) :
                new ObjectParameter("PC_Caisse", typeof(string));
    
            var pD_DateParameter = pD_Date.HasValue ?
                new ObjectParameter("PD_Date", pD_Date) :
                new ObjectParameter("PD_Date", typeof(System.DateTime));
    
            var pF_balanceParameter = pF_balance.HasValue ?
                new ObjectParameter("PF_balance", pF_balance) :
                new ObjectParameter("PF_balance", typeof(double));
    
            var pC_OPTNParameter = pC_OPTN != null ?
                new ObjectParameter("PC_OPTN", pC_OPTN) :
                new ObjectParameter("PC_OPTN", typeof(string));
    
            var pC_deviseParameter = pC_devise != null ?
                new ObjectParameter("PC_devise", pC_devise) :
                new ObjectParameter("PC_devise", typeof(string));
    
            var pD_CreationTimeParameter = pD_CreationTime.HasValue ?
                new ObjectParameter("PD_CreationTime", pD_CreationTime) :
                new ObjectParameter("PD_CreationTime", typeof(System.DateTime));
    
            var pD_DatemouchParameter = pD_Datemouch.HasValue ?
                new ObjectParameter("PD_Datemouch", pD_Datemouch) :
                new ObjectParameter("PD_Datemouch", typeof(System.DateTime));
    
            var pC_TaskCodeParameter = pC_TaskCode != null ?
                new ObjectParameter("PC_TaskCode", pC_TaskCode) :
                new ObjectParameter("PC_TaskCode", typeof(string));
    
            var pC_TaskDescriptionParameter = pC_TaskDescription != null ?
                new ObjectParameter("PC_TaskDescription", pC_TaskDescription) :
                new ObjectParameter("PC_TaskDescription", typeof(string));
    
            var pC_ComputerNameParameter = pC_ComputerName != null ?
                new ObjectParameter("PC_ComputerName", pC_ComputerName) :
                new ObjectParameter("PC_ComputerName", typeof(string));
    
            var pC_ancienneValParameter = pC_ancienneVal != null ?
                new ObjectParameter("PC_ancienneVal", pC_ancienneVal) :
                new ObjectParameter("PC_ancienneVal", typeof(string));
    
            var pC_NouvelleValParameter = pC_NouvelleVal != null ?
                new ObjectParameter("PC_NouvelleVal", pC_NouvelleVal) :
                new ObjectParameter("PC_NouvelleVal", typeof(string));
    
            var pC_TableMouchParameter = pC_TableMouch != null ?
                new ObjectParameter("PC_TableMouch", pC_TableMouch) :
                new ObjectParameter("PC_TableMouch", typeof(string));
    
            var pC_LibEmployeParameter = pC_LibEmploye != null ?
                new ObjectParameter("PC_LibEmploye", pC_LibEmploye) :
                new ObjectParameter("PC_LibEmploye", typeof(string));
    
            var pI_EmployeParameter = pI_Employe != null ?
                new ObjectParameter("PI_Employe", pI_Employe) :
                new ObjectParameter("PI_Employe", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MajCaisseOpen_Vault", pI_agenceParameter, pC_CaisseParameter, pD_DateParameter, pF_balanceParameter, pC_OPTNParameter, pC_deviseParameter, pD_CreationTimeParameter, pD_DatemouchParameter, pC_TaskCodeParameter, pC_TaskDescriptionParameter, pC_ComputerNameParameter, pC_ancienneValParameter, pC_NouvelleValParameter, pC_TableMouchParameter, pC_LibEmployeParameter, pI_EmployeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, errMsg, tellerStatusOUT, languageParameter);
        }
    
        public virtual ObjectResult<MajCpteClient_S_Trans_Result> MajCpteClient_S_Trans(string agence, string cpteClt, Nullable<double> debit, Nullable<double> credit, Nullable<System.DateTime> datederniermvtdb, Nullable<System.DateTime> datederniermvtcr, string espion, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("agence", agence) :
                new ObjectParameter("agence", typeof(string));
    
            var cpteCltParameter = cpteClt != null ?
                new ObjectParameter("CpteClt", cpteClt) :
                new ObjectParameter("CpteClt", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var datederniermvtdbParameter = datederniermvtdb.HasValue ?
                new ObjectParameter("datederniermvtdb", datederniermvtdb) :
                new ObjectParameter("datederniermvtdb", typeof(System.DateTime));
    
            var datederniermvtcrParameter = datederniermvtcr.HasValue ?
                new ObjectParameter("datederniermvtcr", datederniermvtcr) :
                new ObjectParameter("datederniermvtcr", typeof(System.DateTime));
    
            var espionParameter = espion != null ?
                new ObjectParameter("espion", espion) :
                new ObjectParameter("espion", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MajCpteClient_S_Trans_Result>("MajCpteClient_S_Trans", agenceParameter, cpteCltParameter, debitParameter, creditParameter, datederniermvtdbParameter, datederniermvtcrParameter, espionParameter, lect, languageParameter);
        }
    
        public virtual int MAJHistCaisInsert(Nullable<double> pF_NP1, Nullable<double> pI_P1, Nullable<double> pF_NP2, Nullable<double> pI_P2, Nullable<double> pF_NP5, Nullable<double> pI_P5, Nullable<double> pF_NP10, Nullable<double> pI_P10, Nullable<double> pF_NP25, Nullable<double> pI_P25, Nullable<double> pF_NP50, Nullable<double> pI_P50, Nullable<double> pF_NP100, Nullable<double> pI_P100, Nullable<double> pF_NP500, Nullable<double> pI_P500, Nullable<double> pF_NB500, Nullable<double> pI_B500, Nullable<double> pF_NB1000, Nullable<double> pI_B1000, Nullable<double> pF_NB2000, Nullable<double> pI_B2000, Nullable<double> pF_NB5000, Nullable<double> pI_B5000, Nullable<double> pF_NB10000, Nullable<double> pI_B10000, string pC_DEVISE, string pC_CAISSE, string pI_AGENCE, ObjectParameter lecture, ObjectParameter error, string language)
        {
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pI_P1Parameter = pI_P1.HasValue ?
                new ObjectParameter("PI_P1", pI_P1) :
                new ObjectParameter("PI_P1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pI_P2Parameter = pI_P2.HasValue ?
                new ObjectParameter("PI_P2", pI_P2) :
                new ObjectParameter("PI_P2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pI_P5Parameter = pI_P5.HasValue ?
                new ObjectParameter("PI_P5", pI_P5) :
                new ObjectParameter("PI_P5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pI_P10Parameter = pI_P10.HasValue ?
                new ObjectParameter("PI_P10", pI_P10) :
                new ObjectParameter("PI_P10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pI_P25Parameter = pI_P25.HasValue ?
                new ObjectParameter("PI_P25", pI_P25) :
                new ObjectParameter("PI_P25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pI_P50Parameter = pI_P50.HasValue ?
                new ObjectParameter("PI_P50", pI_P50) :
                new ObjectParameter("PI_P50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pI_P100Parameter = pI_P100.HasValue ?
                new ObjectParameter("PI_P100", pI_P100) :
                new ObjectParameter("PI_P100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pI_P500Parameter = pI_P500.HasValue ?
                new ObjectParameter("PI_P500", pI_P500) :
                new ObjectParameter("PI_P500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pI_B500Parameter = pI_B500.HasValue ?
                new ObjectParameter("PI_B500", pI_B500) :
                new ObjectParameter("PI_B500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pI_B1000Parameter = pI_B1000.HasValue ?
                new ObjectParameter("PI_B1000", pI_B1000) :
                new ObjectParameter("PI_B1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pI_B2000Parameter = pI_B2000.HasValue ?
                new ObjectParameter("PI_B2000", pI_B2000) :
                new ObjectParameter("PI_B2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pI_B5000Parameter = pI_B5000.HasValue ?
                new ObjectParameter("PI_B5000", pI_B5000) :
                new ObjectParameter("PI_B5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var pI_B10000Parameter = pI_B10000.HasValue ?
                new ObjectParameter("PI_B10000", pI_B10000) :
                new ObjectParameter("PI_B10000", typeof(double));
    
            var pC_DEVISEParameter = pC_DEVISE != null ?
                new ObjectParameter("PC_DEVISE", pC_DEVISE) :
                new ObjectParameter("PC_DEVISE", typeof(string));
    
            var pC_CAISSEParameter = pC_CAISSE != null ?
                new ObjectParameter("PC_CAISSE", pC_CAISSE) :
                new ObjectParameter("PC_CAISSE", typeof(string));
    
            var pI_AGENCEParameter = pI_AGENCE != null ?
                new ObjectParameter("PI_AGENCE", pI_AGENCE) :
                new ObjectParameter("PI_AGENCE", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MAJHistCaisInsert", pF_NP1Parameter, pI_P1Parameter, pF_NP2Parameter, pI_P2Parameter, pF_NP5Parameter, pI_P5Parameter, pF_NP10Parameter, pI_P10Parameter, pF_NP25Parameter, pI_P25Parameter, pF_NP50Parameter, pI_P50Parameter, pF_NP100Parameter, pI_P100Parameter, pF_NP500Parameter, pI_P500Parameter, pF_NB500Parameter, pI_B500Parameter, pF_NB1000Parameter, pI_B1000Parameter, pF_NB2000Parameter, pI_B2000Parameter, pF_NB5000Parameter, pI_B5000Parameter, pF_NB10000Parameter, pI_B10000Parameter, pC_DEVISEParameter, pC_CAISSEParameter, pI_AGENCEParameter, lecture, error, languageParameter);
        }
    
        public virtual int MAJHistCaisPlus(Nullable<double> pF_NP1, Nullable<double> pI_P1, Nullable<double> pF_NP2, Nullable<double> pI_P2, Nullable<double> pF_NP5, Nullable<double> pI_P5, Nullable<double> pF_NP10, Nullable<double> pI_P10, Nullable<double> pF_NP25, Nullable<double> pI_P25, Nullable<double> pF_NP50, Nullable<double> pI_P50, Nullable<double> pF_NP100, Nullable<double> pI_P100, Nullable<double> pF_NP500, Nullable<double> pI_P500, Nullable<double> pF_NB500, Nullable<double> pI_B500, Nullable<double> pF_NB1000, Nullable<double> pI_B1000, Nullable<double> pF_NB2000, Nullable<double> pI_B2000, Nullable<double> pF_NB5000, Nullable<double> pI_B5000, Nullable<double> pF_NB10000, Nullable<double> pI_B10000, string pC_DEVISE, string pC_CAISSE, string pI_AGENCE, ObjectParameter lecture, ObjectParameter error, string language)
        {
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pI_P1Parameter = pI_P1.HasValue ?
                new ObjectParameter("PI_P1", pI_P1) :
                new ObjectParameter("PI_P1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pI_P2Parameter = pI_P2.HasValue ?
                new ObjectParameter("PI_P2", pI_P2) :
                new ObjectParameter("PI_P2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pI_P5Parameter = pI_P5.HasValue ?
                new ObjectParameter("PI_P5", pI_P5) :
                new ObjectParameter("PI_P5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pI_P10Parameter = pI_P10.HasValue ?
                new ObjectParameter("PI_P10", pI_P10) :
                new ObjectParameter("PI_P10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pI_P25Parameter = pI_P25.HasValue ?
                new ObjectParameter("PI_P25", pI_P25) :
                new ObjectParameter("PI_P25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pI_P50Parameter = pI_P50.HasValue ?
                new ObjectParameter("PI_P50", pI_P50) :
                new ObjectParameter("PI_P50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pI_P100Parameter = pI_P100.HasValue ?
                new ObjectParameter("PI_P100", pI_P100) :
                new ObjectParameter("PI_P100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pI_P500Parameter = pI_P500.HasValue ?
                new ObjectParameter("PI_P500", pI_P500) :
                new ObjectParameter("PI_P500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pI_B500Parameter = pI_B500.HasValue ?
                new ObjectParameter("PI_B500", pI_B500) :
                new ObjectParameter("PI_B500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pI_B1000Parameter = pI_B1000.HasValue ?
                new ObjectParameter("PI_B1000", pI_B1000) :
                new ObjectParameter("PI_B1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pI_B2000Parameter = pI_B2000.HasValue ?
                new ObjectParameter("PI_B2000", pI_B2000) :
                new ObjectParameter("PI_B2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pI_B5000Parameter = pI_B5000.HasValue ?
                new ObjectParameter("PI_B5000", pI_B5000) :
                new ObjectParameter("PI_B5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var pI_B10000Parameter = pI_B10000.HasValue ?
                new ObjectParameter("PI_B10000", pI_B10000) :
                new ObjectParameter("PI_B10000", typeof(double));
    
            var pC_DEVISEParameter = pC_DEVISE != null ?
                new ObjectParameter("PC_DEVISE", pC_DEVISE) :
                new ObjectParameter("PC_DEVISE", typeof(string));
    
            var pC_CAISSEParameter = pC_CAISSE != null ?
                new ObjectParameter("PC_CAISSE", pC_CAISSE) :
                new ObjectParameter("PC_CAISSE", typeof(string));
    
            var pI_AGENCEParameter = pI_AGENCE != null ?
                new ObjectParameter("PI_AGENCE", pI_AGENCE) :
                new ObjectParameter("PI_AGENCE", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MAJHistCaisPlus", pF_NP1Parameter, pI_P1Parameter, pF_NP2Parameter, pI_P2Parameter, pF_NP5Parameter, pI_P5Parameter, pF_NP10Parameter, pI_P10Parameter, pF_NP25Parameter, pI_P25Parameter, pF_NP50Parameter, pI_P50Parameter, pF_NP100Parameter, pI_P100Parameter, pF_NP500Parameter, pI_P500Parameter, pF_NB500Parameter, pI_B500Parameter, pF_NB1000Parameter, pI_B1000Parameter, pF_NB2000Parameter, pI_B2000Parameter, pF_NB5000Parameter, pI_B5000Parameter, pF_NB10000Parameter, pI_B10000Parameter, pC_DEVISEParameter, pC_CAISSEParameter, pI_AGENCEParameter, lecture, error, languageParameter);
        }
    
        public virtual int MAJHISTCAISSEGLOBEX(Nullable<double> pF_NP1, Nullable<double> pI_P1, Nullable<double> pF_NP2, Nullable<double> pI_P2, Nullable<double> pF_NP5, Nullable<double> pI_P5, Nullable<double> pF_NP10, Nullable<double> pI_P10, Nullable<double> pF_NP25, Nullable<double> pI_P25, Nullable<double> pF_NP50, Nullable<double> pI_P50, Nullable<double> pF_NP100, Nullable<double> pI_P100, Nullable<double> pF_NP500, Nullable<double> pI_P500, Nullable<double> pF_NB500, Nullable<double> pI_B500, Nullable<double> pF_NB1000, Nullable<double> pI_B1000, Nullable<double> pF_NB2000, Nullable<double> pI_B2000, Nullable<double> pF_NB5000, Nullable<double> pI_B5000, Nullable<double> pF_NB10000, Nullable<double> pI_B10000, string pC_DEVISE, string pC_CAISSE, Nullable<int> pI_AGENCE, ObjectParameter lecture, ObjectParameter error, string computerName, Nullable<int> employe, string language)
        {
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pI_P1Parameter = pI_P1.HasValue ?
                new ObjectParameter("PI_P1", pI_P1) :
                new ObjectParameter("PI_P1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pI_P2Parameter = pI_P2.HasValue ?
                new ObjectParameter("PI_P2", pI_P2) :
                new ObjectParameter("PI_P2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pI_P5Parameter = pI_P5.HasValue ?
                new ObjectParameter("PI_P5", pI_P5) :
                new ObjectParameter("PI_P5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pI_P10Parameter = pI_P10.HasValue ?
                new ObjectParameter("PI_P10", pI_P10) :
                new ObjectParameter("PI_P10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pI_P25Parameter = pI_P25.HasValue ?
                new ObjectParameter("PI_P25", pI_P25) :
                new ObjectParameter("PI_P25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pI_P50Parameter = pI_P50.HasValue ?
                new ObjectParameter("PI_P50", pI_P50) :
                new ObjectParameter("PI_P50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pI_P100Parameter = pI_P100.HasValue ?
                new ObjectParameter("PI_P100", pI_P100) :
                new ObjectParameter("PI_P100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pI_P500Parameter = pI_P500.HasValue ?
                new ObjectParameter("PI_P500", pI_P500) :
                new ObjectParameter("PI_P500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pI_B500Parameter = pI_B500.HasValue ?
                new ObjectParameter("PI_B500", pI_B500) :
                new ObjectParameter("PI_B500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pI_B1000Parameter = pI_B1000.HasValue ?
                new ObjectParameter("PI_B1000", pI_B1000) :
                new ObjectParameter("PI_B1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pI_B2000Parameter = pI_B2000.HasValue ?
                new ObjectParameter("PI_B2000", pI_B2000) :
                new ObjectParameter("PI_B2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pI_B5000Parameter = pI_B5000.HasValue ?
                new ObjectParameter("PI_B5000", pI_B5000) :
                new ObjectParameter("PI_B5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var pI_B10000Parameter = pI_B10000.HasValue ?
                new ObjectParameter("PI_B10000", pI_B10000) :
                new ObjectParameter("PI_B10000", typeof(double));
    
            var pC_DEVISEParameter = pC_DEVISE != null ?
                new ObjectParameter("PC_DEVISE", pC_DEVISE) :
                new ObjectParameter("PC_DEVISE", typeof(string));
    
            var pC_CAISSEParameter = pC_CAISSE != null ?
                new ObjectParameter("PC_CAISSE", pC_CAISSE) :
                new ObjectParameter("PC_CAISSE", typeof(string));
    
            var pI_AGENCEParameter = pI_AGENCE.HasValue ?
                new ObjectParameter("PI_AGENCE", pI_AGENCE) :
                new ObjectParameter("PI_AGENCE", typeof(int));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MAJHISTCAISSEGLOBEX", pF_NP1Parameter, pI_P1Parameter, pF_NP2Parameter, pI_P2Parameter, pF_NP5Parameter, pI_P5Parameter, pF_NP10Parameter, pI_P10Parameter, pF_NP25Parameter, pI_P25Parameter, pF_NP50Parameter, pI_P50Parameter, pF_NP100Parameter, pI_P100Parameter, pF_NP500Parameter, pI_P500Parameter, pF_NB500Parameter, pI_B500Parameter, pF_NB1000Parameter, pI_B1000Parameter, pF_NB2000Parameter, pI_B2000Parameter, pF_NB5000Parameter, pI_B5000Parameter, pF_NB10000Parameter, pI_B10000Parameter, pC_DEVISEParameter, pC_CAISSEParameter, pI_AGENCEParameter, lecture, error, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int MAJHISTCAISSETRF(Nullable<double> pF_NP1, Nullable<double> pI_P1, Nullable<double> pF_NP2, Nullable<double> pI_P2, Nullable<double> pF_NP5, Nullable<double> pI_P5, Nullable<double> pF_NP10, Nullable<double> pI_P10, Nullable<double> pF_NP25, Nullable<double> pI_P25, Nullable<double> pF_NP50, Nullable<double> pI_P50, Nullable<double> pF_NP100, Nullable<double> pI_P100, Nullable<double> pF_NP500, Nullable<double> pI_P500, Nullable<double> pF_NB500, Nullable<double> pI_B500, Nullable<double> pF_NB1000, Nullable<double> pI_B1000, Nullable<double> pF_NB2000, Nullable<double> pI_B2000, Nullable<double> pF_NB5000, Nullable<double> pI_B5000, Nullable<double> pF_NB10000, Nullable<double> pI_B10000, string pC_DEVISE, string pC_CAISSE, string pI_AGENCE, string pC_CODE, ObjectParameter lecture, ObjectParameter error, string language)
        {
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pI_P1Parameter = pI_P1.HasValue ?
                new ObjectParameter("PI_P1", pI_P1) :
                new ObjectParameter("PI_P1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pI_P2Parameter = pI_P2.HasValue ?
                new ObjectParameter("PI_P2", pI_P2) :
                new ObjectParameter("PI_P2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pI_P5Parameter = pI_P5.HasValue ?
                new ObjectParameter("PI_P5", pI_P5) :
                new ObjectParameter("PI_P5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pI_P10Parameter = pI_P10.HasValue ?
                new ObjectParameter("PI_P10", pI_P10) :
                new ObjectParameter("PI_P10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pI_P25Parameter = pI_P25.HasValue ?
                new ObjectParameter("PI_P25", pI_P25) :
                new ObjectParameter("PI_P25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pI_P50Parameter = pI_P50.HasValue ?
                new ObjectParameter("PI_P50", pI_P50) :
                new ObjectParameter("PI_P50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pI_P100Parameter = pI_P100.HasValue ?
                new ObjectParameter("PI_P100", pI_P100) :
                new ObjectParameter("PI_P100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pI_P500Parameter = pI_P500.HasValue ?
                new ObjectParameter("PI_P500", pI_P500) :
                new ObjectParameter("PI_P500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pI_B500Parameter = pI_B500.HasValue ?
                new ObjectParameter("PI_B500", pI_B500) :
                new ObjectParameter("PI_B500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pI_B1000Parameter = pI_B1000.HasValue ?
                new ObjectParameter("PI_B1000", pI_B1000) :
                new ObjectParameter("PI_B1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pI_B2000Parameter = pI_B2000.HasValue ?
                new ObjectParameter("PI_B2000", pI_B2000) :
                new ObjectParameter("PI_B2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pI_B5000Parameter = pI_B5000.HasValue ?
                new ObjectParameter("PI_B5000", pI_B5000) :
                new ObjectParameter("PI_B5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var pI_B10000Parameter = pI_B10000.HasValue ?
                new ObjectParameter("PI_B10000", pI_B10000) :
                new ObjectParameter("PI_B10000", typeof(double));
    
            var pC_DEVISEParameter = pC_DEVISE != null ?
                new ObjectParameter("PC_DEVISE", pC_DEVISE) :
                new ObjectParameter("PC_DEVISE", typeof(string));
    
            var pC_CAISSEParameter = pC_CAISSE != null ?
                new ObjectParameter("PC_CAISSE", pC_CAISSE) :
                new ObjectParameter("PC_CAISSE", typeof(string));
    
            var pI_AGENCEParameter = pI_AGENCE != null ?
                new ObjectParameter("PI_AGENCE", pI_AGENCE) :
                new ObjectParameter("PI_AGENCE", typeof(string));
    
            var pC_CODEParameter = pC_CODE != null ?
                new ObjectParameter("PC_CODE", pC_CODE) :
                new ObjectParameter("PC_CODE", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MAJHISTCAISSETRF", pF_NP1Parameter, pI_P1Parameter, pF_NP2Parameter, pI_P2Parameter, pF_NP5Parameter, pI_P5Parameter, pF_NP10Parameter, pI_P10Parameter, pF_NP25Parameter, pI_P25Parameter, pF_NP50Parameter, pI_P50Parameter, pF_NP100Parameter, pI_P100Parameter, pF_NP500Parameter, pI_P500Parameter, pF_NB500Parameter, pI_B500Parameter, pF_NB1000Parameter, pI_B1000Parameter, pF_NB2000Parameter, pI_B2000Parameter, pF_NB5000Parameter, pI_B5000Parameter, pF_NB10000Parameter, pI_B10000Parameter, pC_DEVISEParameter, pC_CAISSEParameter, pI_AGENCEParameter, pC_CODEParameter, lecture, error, languageParameter);
        }
    
        public virtual int MajTableBalResultat(string zAgence, string zLibAgence, string zDevise, string zLibDevise, string zCodeGroupe, string zLibelleGroupe, string zCodeDetail, string zLibelleDetail, Nullable<double> zMontanAnne1, Nullable<double> zMontanAnne2, Nullable<System.DateTime> zDateDebut, Nullable<System.DateTime> zDateFin, string wlibelleetat, string lignecode, ObjectParameter message, ObjectParameter lecture, string language, string employe)
        {
            var zAgenceParameter = zAgence != null ?
                new ObjectParameter("ZAgence", zAgence) :
                new ObjectParameter("ZAgence", typeof(string));
    
            var zLibAgenceParameter = zLibAgence != null ?
                new ObjectParameter("zLibAgence", zLibAgence) :
                new ObjectParameter("zLibAgence", typeof(string));
    
            var zDeviseParameter = zDevise != null ?
                new ObjectParameter("ZDevise", zDevise) :
                new ObjectParameter("ZDevise", typeof(string));
    
            var zLibDeviseParameter = zLibDevise != null ?
                new ObjectParameter("zLibDevise", zLibDevise) :
                new ObjectParameter("zLibDevise", typeof(string));
    
            var zCodeGroupeParameter = zCodeGroupe != null ?
                new ObjectParameter("zCodeGroupe", zCodeGroupe) :
                new ObjectParameter("zCodeGroupe", typeof(string));
    
            var zLibelleGroupeParameter = zLibelleGroupe != null ?
                new ObjectParameter("zLibelleGroupe", zLibelleGroupe) :
                new ObjectParameter("zLibelleGroupe", typeof(string));
    
            var zCodeDetailParameter = zCodeDetail != null ?
                new ObjectParameter("zCodeDetail", zCodeDetail) :
                new ObjectParameter("zCodeDetail", typeof(string));
    
            var zLibelleDetailParameter = zLibelleDetail != null ?
                new ObjectParameter("zLibelleDetail", zLibelleDetail) :
                new ObjectParameter("zLibelleDetail", typeof(string));
    
            var zMontanAnne1Parameter = zMontanAnne1.HasValue ?
                new ObjectParameter("zMontanAnne1", zMontanAnne1) :
                new ObjectParameter("zMontanAnne1", typeof(double));
    
            var zMontanAnne2Parameter = zMontanAnne2.HasValue ?
                new ObjectParameter("zMontanAnne2", zMontanAnne2) :
                new ObjectParameter("zMontanAnne2", typeof(double));
    
            var zDateDebutParameter = zDateDebut.HasValue ?
                new ObjectParameter("zDateDebut", zDateDebut) :
                new ObjectParameter("zDateDebut", typeof(System.DateTime));
    
            var zDateFinParameter = zDateFin.HasValue ?
                new ObjectParameter("zDateFin", zDateFin) :
                new ObjectParameter("zDateFin", typeof(System.DateTime));
    
            var wlibelleetatParameter = wlibelleetat != null ?
                new ObjectParameter("wlibelleetat", wlibelleetat) :
                new ObjectParameter("wlibelleetat", typeof(string));
    
            var lignecodeParameter = lignecode != null ?
                new ObjectParameter("lignecode", lignecode) :
                new ObjectParameter("lignecode", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MajTableBalResultat", zAgenceParameter, zLibAgenceParameter, zDeviseParameter, zLibDeviseParameter, zCodeGroupeParameter, zLibelleGroupeParameter, zCodeDetailParameter, zLibelleDetailParameter, zMontanAnne1Parameter, zMontanAnne2Parameter, zDateDebutParameter, zDateFinParameter, wlibelleetatParameter, lignecodeParameter, message, lecture, languageParameter, employeParameter);
        }
    
        public virtual int MajTableGl_CptaBis(Nullable<System.DateTime> serverdate, ObjectParameter lect, ObjectParameter msg, string computerName, string employe, string language, Nullable<int> eodparam)
        {
            var serverdateParameter = serverdate.HasValue ?
                new ObjectParameter("serverdate", serverdate) :
                new ObjectParameter("serverdate", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var eodparamParameter = eodparam.HasValue ?
                new ObjectParameter("Eodparam", eodparam) :
                new ObjectParameter("Eodparam", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MajTableGl_CptaBis", serverdateParameter, lect, msg, computerNameParameter, employeParameter, languageParameter, eodparamParameter);
        }
    
        public virtual int ManualCrInterest_Insert(string accountNum, string denomination, Nullable<System.DateTime> dateSaisie, string typePaiement, Nullable<double> amount, string institution, string opt1, ObjectParameter lect, string language)
        {
            var accountNumParameter = accountNum != null ?
                new ObjectParameter("AccountNum", accountNum) :
                new ObjectParameter("AccountNum", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var dateSaisieParameter = dateSaisie.HasValue ?
                new ObjectParameter("DateSaisie", dateSaisie) :
                new ObjectParameter("DateSaisie", typeof(System.DateTime));
    
            var typePaiementParameter = typePaiement != null ?
                new ObjectParameter("TypePaiement", typePaiement) :
                new ObjectParameter("TypePaiement", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var institutionParameter = institution != null ?
                new ObjectParameter("Institution", institution) :
                new ObjectParameter("Institution", typeof(string));
    
            var opt1Parameter = opt1 != null ?
                new ObjectParameter("Opt1", opt1) :
                new ObjectParameter("Opt1", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ManualCrInterest_Insert", accountNumParameter, denominationParameter, dateSaisieParameter, typePaiementParameter, amountParameter, institutionParameter, opt1Parameter, lect, languageParameter);
        }
    
        public virtual int Member_Situation(string client, string computerName, ObjectParameter lect, ObjectParameter msg, string employe, string language)
        {
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Member_Situation", clientParameter, computerNameParameter, lect, msg, employeParameter, languageParameter);
        }
    
        public virtual int MigrateToNewAccount(string myCompteTrait, string v_CpteJumelleCC, Nullable<decimal> nbreCpteFailEnt, string wTableName, string wCompte, string wCle, string wLibCompte, string wCustomerAccount, ObjectParameter myCompteRecursif, ObjectParameter nbreCpteFail, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var myCompteTraitParameter = myCompteTrait != null ?
                new ObjectParameter("myCompteTrait", myCompteTrait) :
                new ObjectParameter("myCompteTrait", typeof(string));
    
            var v_CpteJumelleCCParameter = v_CpteJumelleCC != null ?
                new ObjectParameter("V_CpteJumelleCC", v_CpteJumelleCC) :
                new ObjectParameter("V_CpteJumelleCC", typeof(string));
    
            var nbreCpteFailEntParameter = nbreCpteFailEnt.HasValue ?
                new ObjectParameter("NbreCpteFailEnt", nbreCpteFailEnt) :
                new ObjectParameter("NbreCpteFailEnt", typeof(decimal));
    
            var wTableNameParameter = wTableName != null ?
                new ObjectParameter("WTableName", wTableName) :
                new ObjectParameter("WTableName", typeof(string));
    
            var wCompteParameter = wCompte != null ?
                new ObjectParameter("WCompte", wCompte) :
                new ObjectParameter("WCompte", typeof(string));
    
            var wCleParameter = wCle != null ?
                new ObjectParameter("WCle", wCle) :
                new ObjectParameter("WCle", typeof(string));
    
            var wLibCompteParameter = wLibCompte != null ?
                new ObjectParameter("WLibCompte", wLibCompte) :
                new ObjectParameter("WLibCompte", typeof(string));
    
            var wCustomerAccountParameter = wCustomerAccount != null ?
                new ObjectParameter("WCustomerAccount", wCustomerAccount) :
                new ObjectParameter("WCustomerAccount", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MigrateToNewAccount", myCompteTraitParameter, v_CpteJumelleCCParameter, nbreCpteFailEntParameter, wTableNameParameter, wCompteParameter, wCleParameter, wLibCompteParameter, wCustomerAccountParameter, myCompteRecursif, nbreCpteFail, lect, msg, languageParameter);
        }
    
        public virtual int Migration(string agence, string files, string destfiles, ObjectParameter lect, Nullable<int> type, ObjectParameter msg, string employe, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var filesParameter = files != null ?
                new ObjectParameter("files", files) :
                new ObjectParameter("files", typeof(string));
    
            var destfilesParameter = destfiles != null ?
                new ObjectParameter("destfiles", destfiles) :
                new ObjectParameter("destfiles", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Migration", agenceParameter, filesParameter, destfilesParameter, lect, typeParameter, msg, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int MngtDirectAuthorise(string agence, string client, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string cpteCol, string prefixtxnno, string integritystatus, Nullable<System.DateTime> dateTransfert, string caisse, string cpteCaisse, string cleCpteCaisse, string codeMaj, string libCaisse, string libDevise, string libCpteCaisse, string cpteColClt, string cleColClt, string libCpteColClt, Nullable<double> chequeCharges, Nullable<double> counterChequeCharge, Nullable<double> oDFormFee, Nullable<double> txTVA, Nullable<double> fraisExceptionel, string withdrawalType, string lOC, string chktype, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, Nullable<decimal> v_Series, ObjectParameter msg, string computerName, string language, Nullable<int> limitCashier, string cobacID, string currentBr, string libCurrentBr)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var chequeChargesParameter = chequeCharges.HasValue ?
                new ObjectParameter("ChequeCharges", chequeCharges) :
                new ObjectParameter("ChequeCharges", typeof(double));
    
            var counterChequeChargeParameter = counterChequeCharge.HasValue ?
                new ObjectParameter("CounterChequeCharge", counterChequeCharge) :
                new ObjectParameter("CounterChequeCharge", typeof(double));
    
            var oDFormFeeParameter = oDFormFee.HasValue ?
                new ObjectParameter("ODFormFee", oDFormFee) :
                new ObjectParameter("ODFormFee", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var fraisExceptionelParameter = fraisExceptionel.HasValue ?
                new ObjectParameter("FraisExceptionel", fraisExceptionel) :
                new ObjectParameter("FraisExceptionel", typeof(double));
    
            var withdrawalTypeParameter = withdrawalType != null ?
                new ObjectParameter("WithdrawalType", withdrawalType) :
                new ObjectParameter("WithdrawalType", typeof(string));
    
            var lOCParameter = lOC != null ?
                new ObjectParameter("LOC", lOC) :
                new ObjectParameter("LOC", typeof(string));
    
            var chktypeParameter = chktype != null ?
                new ObjectParameter("Chktype", chktype) :
                new ObjectParameter("Chktype", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var v_SeriesParameter = v_Series.HasValue ?
                new ObjectParameter("V_Series", v_Series) :
                new ObjectParameter("V_Series", typeof(decimal));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var limitCashierParameter = limitCashier.HasValue ?
                new ObjectParameter("LimitCashier", limitCashier) :
                new ObjectParameter("LimitCashier", typeof(int));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            var currentBrParameter = currentBr != null ?
                new ObjectParameter("CurrentBr", currentBr) :
                new ObjectParameter("CurrentBr", typeof(string));
    
            var libCurrentBrParameter = libCurrentBr != null ?
                new ObjectParameter("LibCurrentBr", libCurrentBr) :
                new ObjectParameter("LibCurrentBr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MngtDirectAuthorise", agenceParameter, clientParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, cpteColParameter, prefixtxnnoParameter, integritystatusParameter, dateTransfertParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, codeMajParameter, libCaisseParameter, libDeviseParameter, libCpteCaisseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, chequeChargesParameter, counterChequeChargeParameter, oDFormFeeParameter, txTVAParameter, fraisExceptionelParameter, withdrawalTypeParameter, lOCParameter, chktypeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, v_SeriesParameter, msg, computerNameParameter, languageParameter, limitCashierParameter, cobacIDParameter, currentBrParameter, libCurrentBrParameter);
        }
    
        public virtual int MngtDirectAuthoriseNew(string agence, string client, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string cpteCol, string prefixtxnno, string integritystatus, Nullable<System.DateTime> dateTransfert, string caisse, string cpteCaisse, string cleCpteCaisse, string codeMaj, string libCaisse, string libDevise, string libCpteCaisse, string cpteColClt, string cleColClt, string libCpteColClt, Nullable<double> chequeCharges, Nullable<double> counterChequeCharge, Nullable<double> oDFormFee, Nullable<double> txTVA, Nullable<double> fraisExceptionel, string withdrawalType, string lOC, string chktype, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, Nullable<decimal> v_Series, ObjectParameter msg, string computerName, string language, Nullable<int> limitCashier, string cobacID, string currentBr, string libCurrentBr, string doneBy)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var chequeChargesParameter = chequeCharges.HasValue ?
                new ObjectParameter("ChequeCharges", chequeCharges) :
                new ObjectParameter("ChequeCharges", typeof(double));
    
            var counterChequeChargeParameter = counterChequeCharge.HasValue ?
                new ObjectParameter("CounterChequeCharge", counterChequeCharge) :
                new ObjectParameter("CounterChequeCharge", typeof(double));
    
            var oDFormFeeParameter = oDFormFee.HasValue ?
                new ObjectParameter("ODFormFee", oDFormFee) :
                new ObjectParameter("ODFormFee", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var fraisExceptionelParameter = fraisExceptionel.HasValue ?
                new ObjectParameter("FraisExceptionel", fraisExceptionel) :
                new ObjectParameter("FraisExceptionel", typeof(double));
    
            var withdrawalTypeParameter = withdrawalType != null ?
                new ObjectParameter("WithdrawalType", withdrawalType) :
                new ObjectParameter("WithdrawalType", typeof(string));
    
            var lOCParameter = lOC != null ?
                new ObjectParameter("LOC", lOC) :
                new ObjectParameter("LOC", typeof(string));
    
            var chktypeParameter = chktype != null ?
                new ObjectParameter("Chktype", chktype) :
                new ObjectParameter("Chktype", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var v_SeriesParameter = v_Series.HasValue ?
                new ObjectParameter("V_Series", v_Series) :
                new ObjectParameter("V_Series", typeof(decimal));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var limitCashierParameter = limitCashier.HasValue ?
                new ObjectParameter("LimitCashier", limitCashier) :
                new ObjectParameter("LimitCashier", typeof(int));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            var currentBrParameter = currentBr != null ?
                new ObjectParameter("CurrentBr", currentBr) :
                new ObjectParameter("CurrentBr", typeof(string));
    
            var libCurrentBrParameter = libCurrentBr != null ?
                new ObjectParameter("LibCurrentBr", libCurrentBr) :
                new ObjectParameter("LibCurrentBr", typeof(string));
    
            var doneByParameter = doneBy != null ?
                new ObjectParameter("DoneBy", doneBy) :
                new ObjectParameter("DoneBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MngtDirectAuthoriseNew", agenceParameter, clientParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, cpteColParameter, prefixtxnnoParameter, integritystatusParameter, dateTransfertParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, codeMajParameter, libCaisseParameter, libDeviseParameter, libCpteCaisseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, chequeChargesParameter, counterChequeChargeParameter, oDFormFeeParameter, txTVAParameter, fraisExceptionelParameter, withdrawalTypeParameter, lOCParameter, chktypeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, v_SeriesParameter, msg, computerNameParameter, languageParameter, limitCashierParameter, cobacIDParameter, currentBrParameter, libCurrentBrParameter, doneByParameter);
        }
    
        public virtual int MngtDirectAuthoriseo(string agence, string client, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string cpteCol, string prefixtxnno, string integritystatus, Nullable<System.DateTime> dateTransfert, string caisse, string cpteCaisse, string cleCpteCaisse, string codeMaj, string libCaisse, string libDevise, string libCpteCaisse, string cpteColClt, string cleColClt, string libCpteColClt, Nullable<double> chequeCharges, Nullable<double> counterChequeCharge, Nullable<double> oDFormFee, Nullable<double> txTVA, Nullable<double> fraisExceptionel, string withdrawalType, string lOC, string chktype, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, Nullable<decimal> v_Series, ObjectParameter msg, string computerName, string language, Nullable<int> limitCashier, string cobacID, string currentBr, string libCurrentBr)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var integritystatusParameter = integritystatus != null ?
                new ObjectParameter("integritystatus", integritystatus) :
                new ObjectParameter("integritystatus", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var chequeChargesParameter = chequeCharges.HasValue ?
                new ObjectParameter("ChequeCharges", chequeCharges) :
                new ObjectParameter("ChequeCharges", typeof(double));
    
            var counterChequeChargeParameter = counterChequeCharge.HasValue ?
                new ObjectParameter("CounterChequeCharge", counterChequeCharge) :
                new ObjectParameter("CounterChequeCharge", typeof(double));
    
            var oDFormFeeParameter = oDFormFee.HasValue ?
                new ObjectParameter("ODFormFee", oDFormFee) :
                new ObjectParameter("ODFormFee", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var fraisExceptionelParameter = fraisExceptionel.HasValue ?
                new ObjectParameter("FraisExceptionel", fraisExceptionel) :
                new ObjectParameter("FraisExceptionel", typeof(double));
    
            var withdrawalTypeParameter = withdrawalType != null ?
                new ObjectParameter("WithdrawalType", withdrawalType) :
                new ObjectParameter("WithdrawalType", typeof(string));
    
            var lOCParameter = lOC != null ?
                new ObjectParameter("LOC", lOC) :
                new ObjectParameter("LOC", typeof(string));
    
            var chktypeParameter = chktype != null ?
                new ObjectParameter("Chktype", chktype) :
                new ObjectParameter("Chktype", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var v_SeriesParameter = v_Series.HasValue ?
                new ObjectParameter("V_Series", v_Series) :
                new ObjectParameter("V_Series", typeof(decimal));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var limitCashierParameter = limitCashier.HasValue ?
                new ObjectParameter("LimitCashier", limitCashier) :
                new ObjectParameter("LimitCashier", typeof(int));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            var currentBrParameter = currentBr != null ?
                new ObjectParameter("CurrentBr", currentBr) :
                new ObjectParameter("CurrentBr", typeof(string));
    
            var libCurrentBrParameter = libCurrentBr != null ?
                new ObjectParameter("LibCurrentBr", libCurrentBr) :
                new ObjectParameter("LibCurrentBr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MngtDirectAuthoriseo", agenceParameter, clientParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, cpteColParameter, prefixtxnnoParameter, integritystatusParameter, dateTransfertParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, codeMajParameter, libCaisseParameter, libDeviseParameter, libCpteCaisseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, chequeChargesParameter, counterChequeChargeParameter, oDFormFeeParameter, txTVAParameter, fraisExceptionelParameter, withdrawalTypeParameter, lOCParameter, chktypeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, v_SeriesParameter, msg, computerNameParameter, languageParameter, limitCashierParameter, cobacIDParameter, currentBrParameter, libCurrentBrParameter);
        }
    
        public virtual ObjectResult<ModifAutoCred_Result> ModifAutoCred(string agence, Nullable<decimal> numero, Nullable<System.DateTime> dateAccord, Nullable<double> montant, Nullable<System.DateTime> dateEch, string blocage1, string libAgence, string libClient, Nullable<System.DateTime> dateSaisie, string employe, string libEmploye, string client, string cpteJumelle, Nullable<double> establishmentfee, string statut, Nullable<System.DateTime> dateModifStatut, string devise, ObjectParameter lect, ObjectParameter msg, string computerName, string language, string cobacID)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var numeroParameter = numero.HasValue ?
                new ObjectParameter("Numero", numero) :
                new ObjectParameter("Numero", typeof(decimal));
    
            var dateAccordParameter = dateAccord.HasValue ?
                new ObjectParameter("DateAccord", dateAccord) :
                new ObjectParameter("DateAccord", typeof(System.DateTime));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var dateEchParameter = dateEch.HasValue ?
                new ObjectParameter("DateEch", dateEch) :
                new ObjectParameter("DateEch", typeof(System.DateTime));
    
            var blocage1Parameter = blocage1 != null ?
                new ObjectParameter("Blocage1", blocage1) :
                new ObjectParameter("Blocage1", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libClientParameter = libClient != null ?
                new ObjectParameter("LibClient", libClient) :
                new ObjectParameter("LibClient", typeof(string));
    
            var dateSaisieParameter = dateSaisie.HasValue ?
                new ObjectParameter("DateSaisie", dateSaisie) :
                new ObjectParameter("DateSaisie", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var establishmentfeeParameter = establishmentfee.HasValue ?
                new ObjectParameter("establishmentfee", establishmentfee) :
                new ObjectParameter("establishmentfee", typeof(double));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var dateModifStatutParameter = dateModifStatut.HasValue ?
                new ObjectParameter("DateModifStatut", dateModifStatut) :
                new ObjectParameter("DateModifStatut", typeof(System.DateTime));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ModifAutoCred_Result>("ModifAutoCred", agenceParameter, numeroParameter, dateAccordParameter, montantParameter, dateEchParameter, blocage1Parameter, libAgenceParameter, libClientParameter, dateSaisieParameter, employeParameter, libEmployeParameter, clientParameter, cpteJumelleParameter, establishmentfeeParameter, statutParameter, dateModifStatutParameter, deviseParameter, lect, msg, computerNameParameter, languageParameter, cobacIDParameter);
        }
    
        public virtual int ModifSizeField(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifSizeField", tableNameParameter);
        }
    
        public virtual int MouchardTransact_Insert(string agence, string tableTransact, string infoTransact, string employe, string libEmploye, string libTable, Nullable<System.DateTime> dateTransact, string computerName, string taskCode, string taskDescription, string ancienneVal, string nouvelleVal, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var tableTransactParameter = tableTransact != null ?
                new ObjectParameter("TableTransact", tableTransact) :
                new ObjectParameter("TableTransact", typeof(string));
    
            var infoTransactParameter = infoTransact != null ?
                new ObjectParameter("InfoTransact", infoTransact) :
                new ObjectParameter("InfoTransact", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var libTableParameter = libTable != null ?
                new ObjectParameter("LibTable", libTable) :
                new ObjectParameter("LibTable", typeof(string));
    
            var dateTransactParameter = dateTransact.HasValue ?
                new ObjectParameter("DateTransact", dateTransact) :
                new ObjectParameter("DateTransact", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var taskCodeParameter = taskCode != null ?
                new ObjectParameter("TaskCode", taskCode) :
                new ObjectParameter("TaskCode", typeof(string));
    
            var taskDescriptionParameter = taskDescription != null ?
                new ObjectParameter("TaskDescription", taskDescription) :
                new ObjectParameter("TaskDescription", typeof(string));
    
            var ancienneValParameter = ancienneVal != null ?
                new ObjectParameter("ancienneVal", ancienneVal) :
                new ObjectParameter("ancienneVal", typeof(string));
    
            var nouvelleValParameter = nouvelleVal != null ?
                new ObjectParameter("NouvelleVal", nouvelleVal) :
                new ObjectParameter("NouvelleVal", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MouchardTransact_Insert", agenceParameter, tableTransactParameter, infoTransactParameter, employeParameter, libEmployeParameter, libTableParameter, dateTransactParameter, computerNameParameter, taskCodeParameter, taskDescriptionParameter, ancienneValParameter, nouvelleValParameter, lect, msg, languageParameter);
        }
    
        public virtual int NEW_GLOBE(Nullable<short> agence, string devise, Nullable<double> debit, Nullable<double> credit, string caisse, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, ObjectParameter msg, string computerName, Nullable<int> employe, string language)
        {
            var agenceParameter = agence.HasValue ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(short));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NEW_GLOBE", agenceParameter, deviseParameter, debitParameter, creditParameter, caisseParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, msg, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int NewAssetCpte37(string centralBr, string centralLibBr, string wDevise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string employe, string language, ObjectParameter msg, ObjectParameter lect)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewAssetCpte37", centralBrParameter, centralLibBrParameter, wDeviseParameter, dateDebutParameter, dateFinParameter, employeParameter, languageParameter, msg, lect);
        }
    
        public virtual int NewAssetLiabilitieCpte37(string centralBr, string centralLibBr, string wDevise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string employe, string language, ObjectParameter msg, ObjectParameter lect)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewAssetLiabilitieCpte37", centralBrParameter, centralLibBrParameter, wDeviseParameter, dateDebutParameter, dateFinParameter, employeParameter, languageParameter, msg, lect);
        }
    
        public virtual int NewAssetLiabilitieOtherCpte(string centralBr, string centralLibBr, string wDevise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string employe, string language, ObjectParameter msg, ObjectParameter lect)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewAssetLiabilitieOtherCpte", centralBrParameter, centralLibBrParameter, wDeviseParameter, dateDebutParameter, dateFinParameter, employeParameter, languageParameter, msg, lect);
        }
    
        public virtual int NewAssetLiabilities(string centralBr, string centralLibBr, string wDevise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string employe, string computerName, string language, ObjectParameter msg, ObjectParameter lect, Nullable<int> detail)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var detailParameter = detail.HasValue ?
                new ObjectParameter("Detail", detail) :
                new ObjectParameter("Detail", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewAssetLiabilities", centralBrParameter, centralLibBrParameter, wDeviseParameter, dateDebutParameter, dateFinParameter, employeParameter, computerNameParameter, languageParameter, msg, lect, detailParameter);
        }
    
        public virtual int NewAssetOtherCpte(string centralBr, string centralLibBr, string wDevise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string employe, string language, ObjectParameter msg, ObjectParameter lect)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewAssetOtherCpte", centralBrParameter, centralLibBrParameter, wDeviseParameter, dateDebutParameter, dateFinParameter, employeParameter, languageParameter, msg, lect);
        }
    
        public virtual int NewBalanceClt(Nullable<int> agence, string branchName, string devise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string cpteCol, ObjectParameter lect, ObjectParameter message, string computerName, Nullable<int> employe, string language)
        {
            var agenceParameter = agence.HasValue ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(int));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("devise", devise) :
                new ObjectParameter("devise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewBalanceClt", agenceParameter, branchNameParameter, deviseParameter, dateDebutParameter, dateFinParameter, cpteColParameter, lect, message, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int NewBalanceSheet(string wAgence, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string devise, string employe, string computerName, string language, ObjectParameter lect, ObjectParameter msg)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("wAgence", wAgence) :
                new ObjectParameter("wAgence", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewBalanceSheet", wAgenceParameter, dateDebutParameter, dateFinParameter, deviseParameter, employeParameter, computerNameParameter, languageParameter, lect, msg);
        }
    
        public virtual int NewBalanceSheet45(string wAgence, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string devise, string employe, string computerName, string language, ObjectParameter lect, ObjectParameter msg)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("wAgence", wAgence) :
                new ObjectParameter("wAgence", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewBalanceSheet45", wAgenceParameter, dateDebutParameter, dateFinParameter, deviseParameter, employeParameter, computerNameParameter, languageParameter, lect, msg);
        }
    
        public virtual int NewBalConsoPerBr(string wAgence, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string devise, string employe, string computerName, string language, ObjectParameter lect, ObjectParameter msg)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("wAgence", wAgence) :
                new ObjectParameter("wAgence", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewBalConsoPerBr", wAgenceParameter, dateDebutParameter, dateFinParameter, deviseParameter, employeParameter, computerNameParameter, languageParameter, lect, msg);
        }
    
        public virtual int NewBalConsoPerBrGlHist(Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string devise, ObjectParameter lect, ObjectParameter msg, string computerName, string employe, string language)
        {
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewBalConsoPerBrGlHist", dateDebutParameter, dateFinParameter, deviseParameter, lect, msg, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int NewCalLigne(string agence, string devise, string svCpte, string svDenomination, Nullable<System.DateTime> wDateOp, Nullable<double> mtDebit, Nullable<double> mtCredit, Nullable<int> intStmt, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string ndesc, Nullable<System.DateTime> dateV1, Nullable<System.DateTime> dateV2, Nullable<double> totDebit, Nullable<double> totCredit, Nullable<double> totMntNbjDb, Nullable<double> totMntNbjCr, Nullable<double> txIntDb, Nullable<double> txIntCr, ObjectParameter soldedb, ObjectParameter soldecr, ObjectParameter sensS, ObjectParameter totMntNbjDbFi, ObjectParameter totMntNbjCrFi, ObjectParameter lect, ObjectParameter msgbox, string language, string employe)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var svCpteParameter = svCpte != null ?
                new ObjectParameter("SvCpte", svCpte) :
                new ObjectParameter("SvCpte", typeof(string));
    
            var svDenominationParameter = svDenomination != null ?
                new ObjectParameter("SvDenomination", svDenomination) :
                new ObjectParameter("SvDenomination", typeof(string));
    
            var wDateOpParameter = wDateOp.HasValue ?
                new ObjectParameter("WDateOp", wDateOp) :
                new ObjectParameter("WDateOp", typeof(System.DateTime));
    
            var mtDebitParameter = mtDebit.HasValue ?
                new ObjectParameter("MtDebit", mtDebit) :
                new ObjectParameter("MtDebit", typeof(double));
    
            var mtCreditParameter = mtCredit.HasValue ?
                new ObjectParameter("MtCredit", mtCredit) :
                new ObjectParameter("MtCredit", typeof(double));
    
            var intStmtParameter = intStmt.HasValue ?
                new ObjectParameter("IntStmt", intStmt) :
                new ObjectParameter("IntStmt", typeof(int));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var ndescParameter = ndesc != null ?
                new ObjectParameter("ndesc", ndesc) :
                new ObjectParameter("ndesc", typeof(string));
    
            var dateV1Parameter = dateV1.HasValue ?
                new ObjectParameter("DateV1", dateV1) :
                new ObjectParameter("DateV1", typeof(System.DateTime));
    
            var dateV2Parameter = dateV2.HasValue ?
                new ObjectParameter("DateV2", dateV2) :
                new ObjectParameter("DateV2", typeof(System.DateTime));
    
            var totDebitParameter = totDebit.HasValue ?
                new ObjectParameter("TotDebit", totDebit) :
                new ObjectParameter("TotDebit", typeof(double));
    
            var totCreditParameter = totCredit.HasValue ?
                new ObjectParameter("TotCredit", totCredit) :
                new ObjectParameter("TotCredit", typeof(double));
    
            var totMntNbjDbParameter = totMntNbjDb.HasValue ?
                new ObjectParameter("TotMntNbjDb", totMntNbjDb) :
                new ObjectParameter("TotMntNbjDb", typeof(double));
    
            var totMntNbjCrParameter = totMntNbjCr.HasValue ?
                new ObjectParameter("TotMntNbjCr", totMntNbjCr) :
                new ObjectParameter("TotMntNbjCr", typeof(double));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("employe", employe) :
                new ObjectParameter("employe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewCalLigne", agenceParameter, deviseParameter, svCpteParameter, svDenominationParameter, wDateOpParameter, mtDebitParameter, mtCreditParameter, intStmtParameter, dateDebutParameter, dateFinParameter, ndescParameter, dateV1Parameter, dateV2Parameter, totDebitParameter, totCreditParameter, totMntNbjDbParameter, totMntNbjCrParameter, txIntDbParameter, txIntCrParameter, soldedb, soldecr, sensS, totMntNbjDbFi, totMntNbjCrFi, lect, msgbox, languageParameter, employeParameter);
        }
    
        public virtual int NewCreationCumulJneGL(string wAgence, string devise, Nullable<System.DateTime> serverDate, ObjectParameter lect, ObjectParameter msg, string employe, string computerName, string language)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("wAgence", wAgence) :
                new ObjectParameter("wAgence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewCreationCumulJneGL", wAgenceParameter, deviseParameter, serverDateParameter, lect, msg, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int NewDecompositionClt(string wCpteClt, ObjectParameter cptAgence, ObjectParameter wLetCle, ObjectParameter wSub, ObjectParameter wCatCpte, ObjectParameter wClient, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var wCpteCltParameter = wCpteClt != null ?
                new ObjectParameter("WCpteClt", wCpteClt) :
                new ObjectParameter("WCpteClt", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewDecompositionClt", wCpteCltParameter, cptAgence, wLetCle, wSub, wCatCpte, wClient, lect, errMsg, languageParameter);
        }
    
        public virtual int NewDetMntCreditSaint(string centralBr, Nullable<System.DateTime> dateOperation, Nullable<int> nbreEcheance, ObjectParameter mntCreditSaint, ObjectParameter msg, ObjectParameter lect, string language, string employe)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var nbreEcheanceParameter = nbreEcheance.HasValue ?
                new ObjectParameter("NbreEcheance", nbreEcheance) :
                new ObjectParameter("NbreEcheance", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewDetMntCreditSaint", centralBrParameter, dateOperationParameter, nbreEcheanceParameter, mntCreditSaint, msg, lect, languageParameter, employeParameter);
        }
    
        public virtual int NewJnalInteret(string devise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, Nullable<int> allAccts, string cpteDebut, string cpteFin, Nullable<int> intStmt, Nullable<int> accountType, string companyname, string catClient, string custoType, string wTxnCode, string blockdatetype, Nullable<System.DateTime> serverDate, ObjectParameter lect, ObjectParameter msg, string computerName, string employe, string language)
        {
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var allAcctsParameter = allAccts.HasValue ?
                new ObjectParameter("AllAccts", allAccts) :
                new ObjectParameter("AllAccts", typeof(int));
    
            var cpteDebutParameter = cpteDebut != null ?
                new ObjectParameter("CpteDebut", cpteDebut) :
                new ObjectParameter("CpteDebut", typeof(string));
    
            var cpteFinParameter = cpteFin != null ?
                new ObjectParameter("CpteFin", cpteFin) :
                new ObjectParameter("CpteFin", typeof(string));
    
            var intStmtParameter = intStmt.HasValue ?
                new ObjectParameter("IntStmt", intStmt) :
                new ObjectParameter("IntStmt", typeof(int));
    
            var accountTypeParameter = accountType.HasValue ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(int));
    
            var companynameParameter = companyname != null ?
                new ObjectParameter("companyname", companyname) :
                new ObjectParameter("companyname", typeof(string));
    
            var catClientParameter = catClient != null ?
                new ObjectParameter("CatClient", catClient) :
                new ObjectParameter("CatClient", typeof(string));
    
            var custoTypeParameter = custoType != null ?
                new ObjectParameter("CustoType", custoType) :
                new ObjectParameter("CustoType", typeof(string));
    
            var wTxnCodeParameter = wTxnCode != null ?
                new ObjectParameter("wTxnCode", wTxnCode) :
                new ObjectParameter("wTxnCode", typeof(string));
    
            var blockdatetypeParameter = blockdatetype != null ?
                new ObjectParameter("Blockdatetype", blockdatetype) :
                new ObjectParameter("Blockdatetype", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewJnalInteret", deviseParameter, dateDebutParameter, dateFinParameter, allAcctsParameter, cpteDebutParameter, cpteFinParameter, intStmtParameter, accountTypeParameter, companynameParameter, catClientParameter, custoTypeParameter, wTxnCodeParameter, blockdatetypeParameter, serverDateParameter, lect, msg, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int NewJnalInteretEBanking(string devise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, Nullable<int> allAccts, string cpteDebut, string cpteFin, Nullable<System.DateTime> serverDate, string wTxnCode, ObjectParameter lect, ObjectParameter msg, string computerName, string employe, string language)
        {
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var allAcctsParameter = allAccts.HasValue ?
                new ObjectParameter("AllAccts", allAccts) :
                new ObjectParameter("AllAccts", typeof(int));
    
            var cpteDebutParameter = cpteDebut != null ?
                new ObjectParameter("CpteDebut", cpteDebut) :
                new ObjectParameter("CpteDebut", typeof(string));
    
            var cpteFinParameter = cpteFin != null ?
                new ObjectParameter("CpteFin", cpteFin) :
                new ObjectParameter("CpteFin", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var wTxnCodeParameter = wTxnCode != null ?
                new ObjectParameter("wTxnCode", wTxnCode) :
                new ObjectParameter("wTxnCode", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewJnalInteretEBanking", deviseParameter, dateDebutParameter, dateFinParameter, allAcctsParameter, cpteDebutParameter, cpteFinParameter, serverDateParameter, wTxnCodeParameter, lect, msg, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int NewJnalInteretSMS(string devise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, Nullable<int> allAccts, string cpteDebut, string cpteFin, Nullable<System.DateTime> serverDate, string wTxnCode, ObjectParameter lect, ObjectParameter msg, string computerName, string employe, string language)
        {
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var allAcctsParameter = allAccts.HasValue ?
                new ObjectParameter("AllAccts", allAccts) :
                new ObjectParameter("AllAccts", typeof(int));
    
            var cpteDebutParameter = cpteDebut != null ?
                new ObjectParameter("CpteDebut", cpteDebut) :
                new ObjectParameter("CpteDebut", typeof(string));
    
            var cpteFinParameter = cpteFin != null ?
                new ObjectParameter("CpteFin", cpteFin) :
                new ObjectParameter("CpteFin", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var wTxnCodeParameter = wTxnCode != null ?
                new ObjectParameter("wTxnCode", wTxnCode) :
                new ObjectParameter("wTxnCode", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewJnalInteretSMS", deviseParameter, dateDebutParameter, dateFinParameter, allAcctsParameter, cpteDebutParameter, cpteFinParameter, serverDateParameter, wTxnCodeParameter, lect, msg, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int NewLiabilitiesCpte37(string centralBr, string centralLibBr, string wDevise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string employe, string language, ObjectParameter msg, ObjectParameter lect)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewLiabilitiesCpte37", centralBrParameter, centralLibBrParameter, wDeviseParameter, dateDebutParameter, dateFinParameter, employeParameter, languageParameter, msg, lect);
        }
    
        public virtual int NewLiabilitiesOtherCpte(string centralBr, string centralLibBr, string wDevise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string employe, string language, ObjectParameter msg, ObjectParameter lect)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewLiabilitiesOtherCpte", centralBrParameter, centralLibBrParameter, wDeviseParameter, dateDebutParameter, dateFinParameter, employeParameter, languageParameter, msg, lect);
        }
    
        public virtual int NewProfitLossAllBr(string wAgence, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string wdevise, string wlibDevise, string employe, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("wAgence", wAgence) :
                new ObjectParameter("wAgence", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var wdeviseParameter = wdevise != null ?
                new ObjectParameter("wdevise", wdevise) :
                new ObjectParameter("wdevise", typeof(string));
    
            var wlibDeviseParameter = wlibDevise != null ?
                new ObjectParameter("wlibDevise", wlibDevise) :
                new ObjectParameter("wlibDevise", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewProfitLossAllBr", wAgenceParameter, dateDebutParameter, dateFinParameter, wdeviseParameter, wlibDeviseParameter, employeParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int NewProfitLossPerBr(string wAgence, string wlibagence, string wdevise, string wlibDevise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, ObjectParameter lect, ObjectParameter msg, string employe, string computerName, string language)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("wAgence", wAgence) :
                new ObjectParameter("wAgence", typeof(string));
    
            var wlibagenceParameter = wlibagence != null ?
                new ObjectParameter("wlibagence", wlibagence) :
                new ObjectParameter("wlibagence", typeof(string));
    
            var wdeviseParameter = wdevise != null ?
                new ObjectParameter("wdevise", wdevise) :
                new ObjectParameter("wdevise", typeof(string));
    
            var wlibDeviseParameter = wlibDevise != null ?
                new ObjectParameter("wlibDevise", wlibDevise) :
                new ObjectParameter("wlibDevise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewProfitLossPerBr", wAgenceParameter, wlibagenceParameter, wdeviseParameter, wlibDeviseParameter, dateDebutParameter, dateFinParameter, lect, msg, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int NewProfitLossPerBrGlhist(string agence, string wdevise, string wlibDevise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, ObjectParameter lect, ObjectParameter msg, string computerName, string employe, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var wdeviseParameter = wdevise != null ?
                new ObjectParameter("wdevise", wdevise) :
                new ObjectParameter("wdevise", typeof(string));
    
            var wlibDeviseParameter = wlibDevise != null ?
                new ObjectParameter("wlibDevise", wlibDevise) :
                new ObjectParameter("wlibDevise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewProfitLossPerBrGlhist", agenceParameter, wdeviseParameter, wlibDeviseParameter, dateDebutParameter, dateFinParameter, lect, msg, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int NewReturnAcctProduct(string pi_CpteClient, string attribClient, string typeclient, string optionS, ObjectParameter wProductCode, ObjectParameter productName, ObjectParameter cpteGl, ObjectParameter cleGl, ObjectParameter libCptGl, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var pi_CpteClientParameter = pi_CpteClient != null ?
                new ObjectParameter("Pi_CpteClient", pi_CpteClient) :
                new ObjectParameter("Pi_CpteClient", typeof(string));
    
            var attribClientParameter = attribClient != null ?
                new ObjectParameter("AttribClient", attribClient) :
                new ObjectParameter("AttribClient", typeof(string));
    
            var typeclientParameter = typeclient != null ?
                new ObjectParameter("Typeclient", typeclient) :
                new ObjectParameter("Typeclient", typeof(string));
    
            var optionSParameter = optionS != null ?
                new ObjectParameter("OptionS", optionS) :
                new ObjectParameter("OptionS", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewReturnAcctProduct", pi_CpteClientParameter, attribClientParameter, typeclientParameter, optionSParameter, wProductCode, productName, cpteGl, cleGl, libCptGl, lect, errMsg, languageParameter);
        }
    
        public virtual int NewTraitBalConsoCpte37PerBr(string agence, string zLibAgence, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string devise, string employe, string language, ObjectParameter lect, ObjectParameter msg)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var zLibAgenceParameter = zLibAgence != null ?
                new ObjectParameter("zLibAgence", zLibAgence) :
                new ObjectParameter("zLibAgence", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewTraitBalConsoCpte37PerBr", agenceParameter, zLibAgenceParameter, dateDebutParameter, dateFinParameter, deviseParameter, employeParameter, languageParameter, lect, msg);
        }
    
        public virtual int NewTraitBalConsoCpte37PerBrGlHist(string agence, string zLibAgence, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string devise, ObjectParameter lect, ObjectParameter msg, string language, string employe)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var zLibAgenceParameter = zLibAgence != null ?
                new ObjectParameter("zLibAgence", zLibAgence) :
                new ObjectParameter("zLibAgence", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewTraitBalConsoCpte37PerBrGlHist", agenceParameter, zLibAgenceParameter, dateDebutParameter, dateFinParameter, deviseParameter, lect, msg, languageParameter, employeParameter);
        }
    
        public virtual int NewTraiteCategory(string blockdatetype, Nullable<double> monRenvoiTxIntDb, Nullable<double> monRenvoiTxIntCr, Nullable<int> monRenvoiPeriode, Nullable<System.DateTime> pd_ServerDate, string cptejumelle, ObjectParameter txIntDb, ObjectParameter txIntCr, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var blockdatetypeParameter = blockdatetype != null ?
                new ObjectParameter("Blockdatetype", blockdatetype) :
                new ObjectParameter("Blockdatetype", typeof(string));
    
            var monRenvoiTxIntDbParameter = monRenvoiTxIntDb.HasValue ?
                new ObjectParameter("MonRenvoiTxIntDb", monRenvoiTxIntDb) :
                new ObjectParameter("MonRenvoiTxIntDb", typeof(double));
    
            var monRenvoiTxIntCrParameter = monRenvoiTxIntCr.HasValue ?
                new ObjectParameter("MonRenvoiTxIntCr", monRenvoiTxIntCr) :
                new ObjectParameter("MonRenvoiTxIntCr", typeof(double));
    
            var monRenvoiPeriodeParameter = monRenvoiPeriode.HasValue ?
                new ObjectParameter("MonRenvoiPeriode", monRenvoiPeriode) :
                new ObjectParameter("MonRenvoiPeriode", typeof(int));
    
            var pd_ServerDateParameter = pd_ServerDate.HasValue ?
                new ObjectParameter("Pd_ServerDate", pd_ServerDate) :
                new ObjectParameter("Pd_ServerDate", typeof(System.DateTime));
    
            var cptejumelleParameter = cptejumelle != null ?
                new ObjectParameter("cptejumelle", cptejumelle) :
                new ObjectParameter("cptejumelle", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewTraiteCategory", blockdatetypeParameter, monRenvoiTxIntDbParameter, monRenvoiTxIntCrParameter, monRenvoiPeriodeParameter, pd_ServerDateParameter, cptejumelleParameter, txIntDb, txIntCr, lect, errMsg, languageParameter);
        }
    
        public virtual int NewTraitementCpte37(string agence, string devise, Nullable<System.DateTime> serverDate, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewTraitementCpte37", agenceParameter, deviseParameter, serverDateParameter, lect, msg, languageParameter);
        }
    
        public virtual int NewTraitFinClient(Nullable<System.DateTime> pd_ServerDate, Nullable<double> totMntNbjDb, Nullable<double> totMntNbjCr, Nullable<double> totCredit, Nullable<double> totDebit, Nullable<double> repDebit, string cptejumelle, Nullable<double> monRenvoiTxComMvt, Nullable<double> monRenvoiTxComDec, Nullable<double> monRenvoiMtFTC, string monRenvoiExoFTC, string monRenvoiExoTVA, Nullable<double> monRenvoiTxTVA, string monRenvoiExoTPRCM, Nullable<double> moisTotal, ObjectParameter intDb, ObjectParameter intCr, ObjectParameter comMvt, ObjectParameter comDec, ObjectParameter fTC, ObjectParameter mtTVA, ObjectParameter tPRCM, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var pd_ServerDateParameter = pd_ServerDate.HasValue ?
                new ObjectParameter("Pd_ServerDate", pd_ServerDate) :
                new ObjectParameter("Pd_ServerDate", typeof(System.DateTime));
    
            var totMntNbjDbParameter = totMntNbjDb.HasValue ?
                new ObjectParameter("TotMntNbjDb", totMntNbjDb) :
                new ObjectParameter("TotMntNbjDb", typeof(double));
    
            var totMntNbjCrParameter = totMntNbjCr.HasValue ?
                new ObjectParameter("TotMntNbjCr", totMntNbjCr) :
                new ObjectParameter("TotMntNbjCr", typeof(double));
    
            var totCreditParameter = totCredit.HasValue ?
                new ObjectParameter("TotCredit", totCredit) :
                new ObjectParameter("TotCredit", typeof(double));
    
            var totDebitParameter = totDebit.HasValue ?
                new ObjectParameter("TotDebit", totDebit) :
                new ObjectParameter("TotDebit", typeof(double));
    
            var repDebitParameter = repDebit.HasValue ?
                new ObjectParameter("RepDebit", repDebit) :
                new ObjectParameter("RepDebit", typeof(double));
    
            var cptejumelleParameter = cptejumelle != null ?
                new ObjectParameter("Cptejumelle", cptejumelle) :
                new ObjectParameter("Cptejumelle", typeof(string));
    
            var monRenvoiTxComMvtParameter = monRenvoiTxComMvt.HasValue ?
                new ObjectParameter("MonRenvoiTxComMvt", monRenvoiTxComMvt) :
                new ObjectParameter("MonRenvoiTxComMvt", typeof(double));
    
            var monRenvoiTxComDecParameter = monRenvoiTxComDec.HasValue ?
                new ObjectParameter("MonRenvoiTxComDec", monRenvoiTxComDec) :
                new ObjectParameter("MonRenvoiTxComDec", typeof(double));
    
            var monRenvoiMtFTCParameter = monRenvoiMtFTC.HasValue ?
                new ObjectParameter("MonRenvoiMtFTC", monRenvoiMtFTC) :
                new ObjectParameter("MonRenvoiMtFTC", typeof(double));
    
            var monRenvoiExoFTCParameter = monRenvoiExoFTC != null ?
                new ObjectParameter("MonRenvoiExoFTC", monRenvoiExoFTC) :
                new ObjectParameter("MonRenvoiExoFTC", typeof(string));
    
            var monRenvoiExoTVAParameter = monRenvoiExoTVA != null ?
                new ObjectParameter("MonRenvoiExoTVA", monRenvoiExoTVA) :
                new ObjectParameter("MonRenvoiExoTVA", typeof(string));
    
            var monRenvoiTxTVAParameter = monRenvoiTxTVA.HasValue ?
                new ObjectParameter("MonRenvoiTxTVA", monRenvoiTxTVA) :
                new ObjectParameter("MonRenvoiTxTVA", typeof(double));
    
            var monRenvoiExoTPRCMParameter = monRenvoiExoTPRCM != null ?
                new ObjectParameter("MonRenvoiExoTPRCM", monRenvoiExoTPRCM) :
                new ObjectParameter("MonRenvoiExoTPRCM", typeof(string));
    
            var moisTotalParameter = moisTotal.HasValue ?
                new ObjectParameter("MoisTotal", moisTotal) :
                new ObjectParameter("MoisTotal", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewTraitFinClient", pd_ServerDateParameter, totMntNbjDbParameter, totMntNbjCrParameter, totCreditParameter, totDebitParameter, repDebitParameter, cptejumelleParameter, monRenvoiTxComMvtParameter, monRenvoiTxComDecParameter, monRenvoiMtFTCParameter, monRenvoiExoFTCParameter, monRenvoiExoTVAParameter, monRenvoiTxTVAParameter, monRenvoiExoTPRCMParameter, moisTotalParameter, intDb, intCr, comMvt, comDec, fTC, mtTVA, tPRCM, lect, errMsg, languageParameter);
        }
    
        public virtual int Note_Coin_Change(Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, Nullable<double> pF_NP1C, Nullable<double> pF_NP2C, Nullable<double> pF_NP5C, Nullable<double> pF_NP10C, Nullable<double> pF_NP25C, Nullable<double> pF_NP50C, Nullable<double> pF_NP100C, Nullable<double> pF_NP500C, Nullable<double> pF_NB500C, Nullable<double> pF_NB1000C, Nullable<double> pF_NB2000C, Nullable<double> pF_NB5000C, Nullable<double> pF_NB10000C, string devise, string caisse, string agence, ObjectParameter lect, ObjectParameter msg, string computerName, string employe, string language)
        {
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var pF_NP1CParameter = pF_NP1C.HasValue ?
                new ObjectParameter("PF_NP1C", pF_NP1C) :
                new ObjectParameter("PF_NP1C", typeof(double));
    
            var pF_NP2CParameter = pF_NP2C.HasValue ?
                new ObjectParameter("PF_NP2C", pF_NP2C) :
                new ObjectParameter("PF_NP2C", typeof(double));
    
            var pF_NP5CParameter = pF_NP5C.HasValue ?
                new ObjectParameter("PF_NP5C", pF_NP5C) :
                new ObjectParameter("PF_NP5C", typeof(double));
    
            var pF_NP10CParameter = pF_NP10C.HasValue ?
                new ObjectParameter("PF_NP10C", pF_NP10C) :
                new ObjectParameter("PF_NP10C", typeof(double));
    
            var pF_NP25CParameter = pF_NP25C.HasValue ?
                new ObjectParameter("PF_NP25C", pF_NP25C) :
                new ObjectParameter("PF_NP25C", typeof(double));
    
            var pF_NP50CParameter = pF_NP50C.HasValue ?
                new ObjectParameter("PF_NP50C", pF_NP50C) :
                new ObjectParameter("PF_NP50C", typeof(double));
    
            var pF_NP100CParameter = pF_NP100C.HasValue ?
                new ObjectParameter("PF_NP100C", pF_NP100C) :
                new ObjectParameter("PF_NP100C", typeof(double));
    
            var pF_NP500CParameter = pF_NP500C.HasValue ?
                new ObjectParameter("PF_NP500C", pF_NP500C) :
                new ObjectParameter("PF_NP500C", typeof(double));
    
            var pF_NB500CParameter = pF_NB500C.HasValue ?
                new ObjectParameter("PF_NB500C", pF_NB500C) :
                new ObjectParameter("PF_NB500C", typeof(double));
    
            var pF_NB1000CParameter = pF_NB1000C.HasValue ?
                new ObjectParameter("PF_NB1000C", pF_NB1000C) :
                new ObjectParameter("PF_NB1000C", typeof(double));
    
            var pF_NB2000CParameter = pF_NB2000C.HasValue ?
                new ObjectParameter("PF_NB2000C", pF_NB2000C) :
                new ObjectParameter("PF_NB2000C", typeof(double));
    
            var pF_NB5000CParameter = pF_NB5000C.HasValue ?
                new ObjectParameter("PF_NB5000C", pF_NB5000C) :
                new ObjectParameter("PF_NB5000C", typeof(double));
    
            var pF_NB10000CParameter = pF_NB10000C.HasValue ?
                new ObjectParameter("PF_NB10000C", pF_NB10000C) :
                new ObjectParameter("PF_NB10000C", typeof(double));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Note_Coin_Change", pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, pF_NP1CParameter, pF_NP2CParameter, pF_NP5CParameter, pF_NP10CParameter, pF_NP25CParameter, pF_NP50CParameter, pF_NP100CParameter, pF_NP500CParameter, pF_NB500CParameter, pF_NB1000CParameter, pF_NB2000CParameter, pF_NB5000CParameter, pF_NB10000CParameter, deviseParameter, caisseParameter, agenceParameter, lect, msg, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int Note_Coin_Insert(Nullable<double> pF_COUPURE, Nullable<double> pI_QUANTITE, string pC_DEVISE, string pC_CAISSE, string pI_AGENCE, string pC_TYPE_COUPURE, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var pF_COUPUREParameter = pF_COUPURE.HasValue ?
                new ObjectParameter("PF_COUPURE", pF_COUPURE) :
                new ObjectParameter("PF_COUPURE", typeof(double));
    
            var pI_QUANTITEParameter = pI_QUANTITE.HasValue ?
                new ObjectParameter("PI_QUANTITE", pI_QUANTITE) :
                new ObjectParameter("PI_QUANTITE", typeof(double));
    
            var pC_DEVISEParameter = pC_DEVISE != null ?
                new ObjectParameter("PC_DEVISE", pC_DEVISE) :
                new ObjectParameter("PC_DEVISE", typeof(string));
    
            var pC_CAISSEParameter = pC_CAISSE != null ?
                new ObjectParameter("PC_CAISSE", pC_CAISSE) :
                new ObjectParameter("PC_CAISSE", typeof(string));
    
            var pI_AGENCEParameter = pI_AGENCE != null ?
                new ObjectParameter("PI_AGENCE", pI_AGENCE) :
                new ObjectParameter("PI_AGENCE", typeof(string));
    
            var pC_TYPE_COUPUREParameter = pC_TYPE_COUPURE != null ?
                new ObjectParameter("PC_TYPE_COUPURE", pC_TYPE_COUPURE) :
                new ObjectParameter("PC_TYPE_COUPURE", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Note_Coin_Insert", pF_COUPUREParameter, pI_QUANTITEParameter, pC_DEVISEParameter, pC_CAISSEParameter, pI_AGENCEParameter, pC_TYPE_COUPUREParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int NOTE_COIN_INSERT_GLOBEX(Nullable<double> pF_COUPURE, Nullable<double> pI_QUANTITE, string pC_DEVISE, string pC_CAISSE, Nullable<int> pI_AGENCE, string pC_TYPE_COUPURE, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var pF_COUPUREParameter = pF_COUPURE.HasValue ?
                new ObjectParameter("PF_COUPURE", pF_COUPURE) :
                new ObjectParameter("PF_COUPURE", typeof(double));
    
            var pI_QUANTITEParameter = pI_QUANTITE.HasValue ?
                new ObjectParameter("PI_QUANTITE", pI_QUANTITE) :
                new ObjectParameter("PI_QUANTITE", typeof(double));
    
            var pC_DEVISEParameter = pC_DEVISE != null ?
                new ObjectParameter("PC_DEVISE", pC_DEVISE) :
                new ObjectParameter("PC_DEVISE", typeof(string));
    
            var pC_CAISSEParameter = pC_CAISSE != null ?
                new ObjectParameter("PC_CAISSE", pC_CAISSE) :
                new ObjectParameter("PC_CAISSE", typeof(string));
    
            var pI_AGENCEParameter = pI_AGENCE.HasValue ?
                new ObjectParameter("PI_AGENCE", pI_AGENCE) :
                new ObjectParameter("PI_AGENCE", typeof(int));
    
            var pC_TYPE_COUPUREParameter = pC_TYPE_COUPURE != null ?
                new ObjectParameter("PC_TYPE_COUPURE", pC_TYPE_COUPURE) :
                new ObjectParameter("PC_TYPE_COUPURE", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NOTE_COIN_INSERT_GLOBEX", pF_COUPUREParameter, pI_QUANTITEParameter, pC_DEVISEParameter, pC_CAISSEParameter, pI_AGENCEParameter, pC_TYPE_COUPUREParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int Note_Coin_TRANSFER(Nullable<double> pF_COUPURE, Nullable<double> pI_QUANTITE, string pC_DEVISE, string pC_CAISSE, string pI_AGENCE, string pC_TYPE_COUPURE, string pC_CODE, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var pF_COUPUREParameter = pF_COUPURE.HasValue ?
                new ObjectParameter("PF_COUPURE", pF_COUPURE) :
                new ObjectParameter("PF_COUPURE", typeof(double));
    
            var pI_QUANTITEParameter = pI_QUANTITE.HasValue ?
                new ObjectParameter("PI_QUANTITE", pI_QUANTITE) :
                new ObjectParameter("PI_QUANTITE", typeof(double));
    
            var pC_DEVISEParameter = pC_DEVISE != null ?
                new ObjectParameter("PC_DEVISE", pC_DEVISE) :
                new ObjectParameter("PC_DEVISE", typeof(string));
    
            var pC_CAISSEParameter = pC_CAISSE != null ?
                new ObjectParameter("PC_CAISSE", pC_CAISSE) :
                new ObjectParameter("PC_CAISSE", typeof(string));
    
            var pI_AGENCEParameter = pI_AGENCE != null ?
                new ObjectParameter("PI_AGENCE", pI_AGENCE) :
                new ObjectParameter("PI_AGENCE", typeof(string));
    
            var pC_TYPE_COUPUREParameter = pC_TYPE_COUPURE != null ?
                new ObjectParameter("PC_TYPE_COUPURE", pC_TYPE_COUPURE) :
                new ObjectParameter("PC_TYPE_COUPURE", typeof(string));
    
            var pC_CODEParameter = pC_CODE != null ?
                new ObjectParameter("PC_CODE", pC_CODE) :
                new ObjectParameter("PC_CODE", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Note_Coin_TRANSFER", pF_COUPUREParameter, pI_QUANTITEParameter, pC_DEVISEParameter, pC_CAISSEParameter, pI_AGENCEParameter, pC_TYPE_COUPUREParameter, pC_CODEParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int Note_Coin_Update(Nullable<double> pF_COUPURE, Nullable<double> pI_QUANTITE, string pC_DEVISE, string pC_CAISSE, string pI_AGENCE, string pC_TYPE_COUPURE, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var pF_COUPUREParameter = pF_COUPURE.HasValue ?
                new ObjectParameter("PF_COUPURE", pF_COUPURE) :
                new ObjectParameter("PF_COUPURE", typeof(double));
    
            var pI_QUANTITEParameter = pI_QUANTITE.HasValue ?
                new ObjectParameter("PI_QUANTITE", pI_QUANTITE) :
                new ObjectParameter("PI_QUANTITE", typeof(double));
    
            var pC_DEVISEParameter = pC_DEVISE != null ?
                new ObjectParameter("PC_DEVISE", pC_DEVISE) :
                new ObjectParameter("PC_DEVISE", typeof(string));
    
            var pC_CAISSEParameter = pC_CAISSE != null ?
                new ObjectParameter("PC_CAISSE", pC_CAISSE) :
                new ObjectParameter("PC_CAISSE", typeof(string));
    
            var pI_AGENCEParameter = pI_AGENCE != null ?
                new ObjectParameter("PI_AGENCE", pI_AGENCE) :
                new ObjectParameter("PI_AGENCE", typeof(string));
    
            var pC_TYPE_COUPUREParameter = pC_TYPE_COUPURE != null ?
                new ObjectParameter("PC_TYPE_COUPURE", pC_TYPE_COUPURE) :
                new ObjectParameter("PC_TYPE_COUPURE", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Note_Coin_Update", pF_COUPUREParameter, pI_QUANTITEParameter, pC_DEVISEParameter, pC_CAISSEParameter, pI_AGENCEParameter, pC_TYPE_COUPUREParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int OpCaisA_Cash_Insert(string agence, string cpteClient, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, string devise, string codeLibelle, Nullable<double> debit, Nullable<double> credit, string refOperation, string caisse, string cpteCaisse, string cleCpteCaisse, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string description, string codeTaux, Nullable<System.DateTime> dateCalEI, string codeMaj, string libCaisse, string libAgence, string denomination, Nullable<System.DateTime> dateCreation, string libDevise, string libCpteCaisse, string cpteColClt, string cleColClt, string libCpteColClt, Nullable<double> fraisDecouvert, Nullable<double> fraisDepot, string txnNo, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var cpteClientParameter = cpteClient != null ?
                new ObjectParameter("CpteClient", cpteClient) :
                new ObjectParameter("CpteClient", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var fraisDecouvertParameter = fraisDecouvert.HasValue ?
                new ObjectParameter("FraisDecouvert", fraisDecouvert) :
                new ObjectParameter("FraisDecouvert", typeof(double));
    
            var fraisDepotParameter = fraisDepot.HasValue ?
                new ObjectParameter("FraisDepot", fraisDepot) :
                new ObjectParameter("FraisDepot", typeof(double));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OpCaisA_Cash_Insert", agenceParameter, cpteClientParameter, dateOperationParameter, dateValeurParameter, deviseParameter, codeLibelleParameter, debitParameter, creditParameter, refOperationParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, descriptionParameter, codeTauxParameter, dateCalEIParameter, codeMajParameter, libCaisseParameter, libAgenceParameter, denominationParameter, dateCreationParameter, libDeviseParameter, libCpteCaisseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, fraisDecouvertParameter, fraisDepotParameter, txnNoParameter, dateTransfertParameter, lect, languageParameter);
        }
    
        public virtual int OpCaisA_Cash_Insertnew(string agence, string cpteClient, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, string devise, string codeLibelle, Nullable<double> debit, Nullable<double> credit, string refOperation, string caisse, string cpteCaisse, string cleCpteCaisse, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string description, string codeTaux, Nullable<System.DateTime> dateCalEI, string codeMaj, string libCaisse, string libAgence, string denomination, Nullable<System.DateTime> dateCreation, string libDevise, string libCpteCaisse, string cpteColClt, string cleColClt, string libCpteColClt, Nullable<double> fraisDecouvert, Nullable<double> fraisDepot, string txnNo, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, string language, string doneBy)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var cpteClientParameter = cpteClient != null ?
                new ObjectParameter("CpteClient", cpteClient) :
                new ObjectParameter("CpteClient", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var fraisDecouvertParameter = fraisDecouvert.HasValue ?
                new ObjectParameter("FraisDecouvert", fraisDecouvert) :
                new ObjectParameter("FraisDecouvert", typeof(double));
    
            var fraisDepotParameter = fraisDepot.HasValue ?
                new ObjectParameter("FraisDepot", fraisDepot) :
                new ObjectParameter("FraisDepot", typeof(double));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var doneByParameter = doneBy != null ?
                new ObjectParameter("DoneBy", doneBy) :
                new ObjectParameter("DoneBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OpCaisA_Cash_Insertnew", agenceParameter, cpteClientParameter, dateOperationParameter, dateValeurParameter, deviseParameter, codeLibelleParameter, debitParameter, creditParameter, refOperationParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, descriptionParameter, codeTauxParameter, dateCalEIParameter, codeMajParameter, libCaisseParameter, libAgenceParameter, denominationParameter, dateCreationParameter, libDeviseParameter, libCpteCaisseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, fraisDecouvertParameter, fraisDepotParameter, txnNoParameter, dateTransfertParameter, lect, languageParameter, doneByParameter);
        }
    
        public virtual int OpDiversA_Cash_Insert(string agence, string client, Nullable<short> catCpte, string subcpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string libLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string description, string libAgence, string journal, string libJournal, string cleCol, string libCpteCol, string libDevise, string codeMaj, Nullable<System.DateTime> dateCreation, string cpteCol, string cleColClt, string libCptColClt, string cpteColClt, string txnNo, string trcode, string cptejumelleproduit, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subcpteParameter = subcpte != null ?
                new ObjectParameter("Subcpte", subcpte) :
                new ObjectParameter("Subcpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var libLibelleParameter = libLibelle != null ?
                new ObjectParameter("LibLibelle", libLibelle) :
                new ObjectParameter("LibLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var libJournalParameter = libJournal != null ?
                new ObjectParameter("LibJournal", libJournal) :
                new ObjectParameter("LibJournal", typeof(string));
    
            var cleColParameter = cleCol != null ?
                new ObjectParameter("CleCol", cleCol) :
                new ObjectParameter("CleCol", typeof(string));
    
            var libCpteColParameter = libCpteCol != null ?
                new ObjectParameter("LibCpteCol", libCpteCol) :
                new ObjectParameter("LibCpteCol", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCptColCltParameter = libCptColClt != null ?
                new ObjectParameter("LibCptColClt", libCptColClt) :
                new ObjectParameter("LibCptColClt", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var trcodeParameter = trcode != null ?
                new ObjectParameter("Trcode", trcode) :
                new ObjectParameter("Trcode", typeof(string));
    
            var cptejumelleproduitParameter = cptejumelleproduit != null ?
                new ObjectParameter("cptejumelleproduit", cptejumelleproduit) :
                new ObjectParameter("cptejumelleproduit", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OpDiversA_Cash_Insert", agenceParameter, clientParameter, catCpteParameter, subcpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, libLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, descriptionParameter, libAgenceParameter, journalParameter, libJournalParameter, cleColParameter, libCpteColParameter, libDeviseParameter, codeMajParameter, dateCreationParameter, cpteColParameter, cleColCltParameter, libCptColCltParameter, cpteColCltParameter, txnNoParameter, trcodeParameter, cptejumelleproduitParameter, dateTransfertParameter, lect, languageParameter);
        }
    
        public virtual int OpDiversA_Cash_InsertNew(string agence, string client, Nullable<short> catCpte, string subcpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string libLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string description, string libAgence, string journal, string libJournal, string cleCol, string libCpteCol, string libDevise, string codeMaj, Nullable<System.DateTime> dateCreation, string cpteCol, string cleColClt, string libCptColClt, string cpteColClt, string txnNo, string trcode, string cptejumelleproduit, Nullable<System.DateTime> dateTransfert, ObjectParameter lect, string language, string doneBy)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subcpteParameter = subcpte != null ?
                new ObjectParameter("Subcpte", subcpte) :
                new ObjectParameter("Subcpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var libLibelleParameter = libLibelle != null ?
                new ObjectParameter("LibLibelle", libLibelle) :
                new ObjectParameter("LibLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var libJournalParameter = libJournal != null ?
                new ObjectParameter("LibJournal", libJournal) :
                new ObjectParameter("LibJournal", typeof(string));
    
            var cleColParameter = cleCol != null ?
                new ObjectParameter("CleCol", cleCol) :
                new ObjectParameter("CleCol", typeof(string));
    
            var libCpteColParameter = libCpteCol != null ?
                new ObjectParameter("LibCpteCol", libCpteCol) :
                new ObjectParameter("LibCpteCol", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var cpteColParameter = cpteCol != null ?
                new ObjectParameter("CpteCol", cpteCol) :
                new ObjectParameter("CpteCol", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCptColCltParameter = libCptColClt != null ?
                new ObjectParameter("LibCptColClt", libCptColClt) :
                new ObjectParameter("LibCptColClt", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var trcodeParameter = trcode != null ?
                new ObjectParameter("Trcode", trcode) :
                new ObjectParameter("Trcode", typeof(string));
    
            var cptejumelleproduitParameter = cptejumelleproduit != null ?
                new ObjectParameter("cptejumelleproduit", cptejumelleproduit) :
                new ObjectParameter("cptejumelleproduit", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var doneByParameter = doneBy != null ?
                new ObjectParameter("DoneBy", doneBy) :
                new ObjectParameter("DoneBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OpDiversA_Cash_InsertNew", agenceParameter, clientParameter, catCpteParameter, subcpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, libLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, descriptionParameter, libAgenceParameter, journalParameter, libJournalParameter, cleColParameter, libCpteColParameter, libDeviseParameter, codeMajParameter, dateCreationParameter, cpteColParameter, cleColCltParameter, libCptColCltParameter, cpteColCltParameter, txnNoParameter, trcodeParameter, cptejumelleproduitParameter, dateTransfertParameter, lect, languageParameter, doneByParameter);
        }
    
        public virtual int OpDiversB_Cash_Insert(string agence, string client, Nullable<short> catCpte, string subcpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, string trCode, Nullable<System.DateTime> dateValeur, Nullable<double> montant, Nullable<double> commis, string sensimput, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string description, string libAgence, string libTrCode, string journal, string libJournal, string libDevise, string cpteColClt, string cleColClt, string libCpteColClt, string cpteColTr, string cleColTr, string libCpteColTr, string sensTrCode, string codeMaj, Nullable<System.DateTime> dateCreation, string imputAg, Nullable<double> mtTVA, string txnNo, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subcpteParameter = subcpte != null ?
                new ObjectParameter("Subcpte", subcpte) :
                new ObjectParameter("Subcpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var commisParameter = commis.HasValue ?
                new ObjectParameter("Commis", commis) :
                new ObjectParameter("Commis", typeof(double));
    
            var sensimputParameter = sensimput != null ?
                new ObjectParameter("Sensimput", sensimput) :
                new ObjectParameter("Sensimput", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var libJournalParameter = libJournal != null ?
                new ObjectParameter("LibJournal", libJournal) :
                new ObjectParameter("LibJournal", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var cpteColTrParameter = cpteColTr != null ?
                new ObjectParameter("CpteColTr", cpteColTr) :
                new ObjectParameter("CpteColTr", typeof(string));
    
            var cleColTrParameter = cleColTr != null ?
                new ObjectParameter("CleColTr", cleColTr) :
                new ObjectParameter("CleColTr", typeof(string));
    
            var libCpteColTrParameter = libCpteColTr != null ?
                new ObjectParameter("LibCpteColTr", libCpteColTr) :
                new ObjectParameter("LibCpteColTr", typeof(string));
    
            var sensTrCodeParameter = sensTrCode != null ?
                new ObjectParameter("SensTrCode", sensTrCode) :
                new ObjectParameter("SensTrCode", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var imputAgParameter = imputAg != null ?
                new ObjectParameter("ImputAg", imputAg) :
                new ObjectParameter("ImputAg", typeof(string));
    
            var mtTVAParameter = mtTVA.HasValue ?
                new ObjectParameter("MtTVA", mtTVA) :
                new ObjectParameter("MtTVA", typeof(double));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OpDiversB_Cash_Insert", agenceParameter, clientParameter, catCpteParameter, subcpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, trCodeParameter, dateValeurParameter, montantParameter, commisParameter, sensimputParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, descriptionParameter, libAgenceParameter, libTrCodeParameter, journalParameter, libJournalParameter, libDeviseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, cpteColTrParameter, cleColTrParameter, libCpteColTrParameter, sensTrCodeParameter, codeMajParameter, dateCreationParameter, imputAgParameter, mtTVAParameter, txnNoParameter, lect, languageParameter);
        }
    
        public virtual int Parametre_Delete(string codePara, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var codeParaParameter = codePara != null ?
                new ObjectParameter("CodePara", codePara) :
                new ObjectParameter("CodePara", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Parametre_Delete", codeParaParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int Parametre_Insert(string codePara, string libelle, string cpteGL, Nullable<double> taux, Nullable<double> montant, Nullable<double> plafond, Nullable<double> plancher, string devise, Nullable<System.DateTime> dateCreation, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var codeParaParameter = codePara != null ?
                new ObjectParameter("CodePara", codePara) :
                new ObjectParameter("CodePara", typeof(string));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("Libelle", libelle) :
                new ObjectParameter("Libelle", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var tauxParameter = taux.HasValue ?
                new ObjectParameter("Taux", taux) :
                new ObjectParameter("Taux", typeof(double));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var plafondParameter = plafond.HasValue ?
                new ObjectParameter("Plafond", plafond) :
                new ObjectParameter("Plafond", typeof(double));
    
            var plancherParameter = plancher.HasValue ?
                new ObjectParameter("Plancher", plancher) :
                new ObjectParameter("Plancher", typeof(double));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Parametre_Insert", codeParaParameter, libelleParameter, cpteGLParameter, tauxParameter, montantParameter, plafondParameter, plancherParameter, deviseParameter, dateCreationParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int Parametre_Update(string codePara, string libelle, string cpteGL, Nullable<double> taux, Nullable<double> montant, Nullable<double> plafond, Nullable<double> plancher, string devise, Nullable<System.DateTime> dateCreation, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var codeParaParameter = codePara != null ?
                new ObjectParameter("CodePara", codePara) :
                new ObjectParameter("CodePara", typeof(string));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("Libelle", libelle) :
                new ObjectParameter("Libelle", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var tauxParameter = taux.HasValue ?
                new ObjectParameter("Taux", taux) :
                new ObjectParameter("Taux", typeof(double));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var plafondParameter = plafond.HasValue ?
                new ObjectParameter("Plafond", plafond) :
                new ObjectParameter("Plafond", typeof(double));
    
            var plancherParameter = plancher.HasValue ?
                new ObjectParameter("Plancher", plancher) :
                new ObjectParameter("Plancher", typeof(double));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Parametre_Update", codeParaParameter, libelleParameter, cpteGLParameter, tauxParameter, montantParameter, plafondParameter, plancherParameter, deviseParameter, dateCreationParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int PersonalisedCheque(string svCptejumellecc, string svDenomination, string svCheckKey, Nullable<int> svNbreCheque, string svDSerie, string svFSerie, Nullable<System.DateTime> svDatePers, string svChkType, string chLanguage, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var svCptejumelleccParameter = svCptejumellecc != null ?
                new ObjectParameter("SvCptejumellecc", svCptejumellecc) :
                new ObjectParameter("SvCptejumellecc", typeof(string));
    
            var svDenominationParameter = svDenomination != null ?
                new ObjectParameter("SvDenomination", svDenomination) :
                new ObjectParameter("SvDenomination", typeof(string));
    
            var svCheckKeyParameter = svCheckKey != null ?
                new ObjectParameter("SvCheckKey", svCheckKey) :
                new ObjectParameter("SvCheckKey", typeof(string));
    
            var svNbreChequeParameter = svNbreCheque.HasValue ?
                new ObjectParameter("SvNbreCheque", svNbreCheque) :
                new ObjectParameter("SvNbreCheque", typeof(int));
    
            var svDSerieParameter = svDSerie != null ?
                new ObjectParameter("SvDSerie", svDSerie) :
                new ObjectParameter("SvDSerie", typeof(string));
    
            var svFSerieParameter = svFSerie != null ?
                new ObjectParameter("SvFSerie", svFSerie) :
                new ObjectParameter("SvFSerie", typeof(string));
    
            var svDatePersParameter = svDatePers.HasValue ?
                new ObjectParameter("SvDatePers", svDatePers) :
                new ObjectParameter("SvDatePers", typeof(System.DateTime));
    
            var svChkTypeParameter = svChkType != null ?
                new ObjectParameter("SvChkType", svChkType) :
                new ObjectParameter("SvChkType", typeof(string));
    
            var chLanguageParameter = chLanguage != null ?
                new ObjectParameter("ChLanguage", chLanguage) :
                new ObjectParameter("ChLanguage", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PersonalisedCheque", svCptejumelleccParameter, svDenominationParameter, svCheckKeyParameter, svNbreChequeParameter, svDSerieParameter, svFSerieParameter, svDatePersParameter, svChkTypeParameter, chLanguageParameter, lect, msg, languageParameter);
        }
    
        public virtual int PhotoSign_Delete(string agence, string cpteJumelle, Nullable<decimal> photoId, string employe, string libEmploye, string computername, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var photoIdParameter = photoId.HasValue ?
                new ObjectParameter("PhotoId", photoId) :
                new ObjectParameter("PhotoId", typeof(decimal));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PhotoSign_Delete", agenceParameter, cpteJumelleParameter, photoIdParameter, employeParameter, libEmployeParameter, computernameParameter, lect, languageParameter);
        }
    
        public virtual int PhotoSign_Filter(Nullable<short> intFilterMode, string cpteJumelle, Nullable<decimal> photoId, ObjectParameter countfield)
        {
            var intFilterModeParameter = intFilterMode.HasValue ?
                new ObjectParameter("IntFilterMode", intFilterMode) :
                new ObjectParameter("IntFilterMode", typeof(short));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var photoIdParameter = photoId.HasValue ?
                new ObjectParameter("PhotoId", photoId) :
                new ObjectParameter("PhotoId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PhotoSign_Filter", intFilterModeParameter, cpteJumelleParameter, photoIdParameter, countfield);
        }
    
        public virtual int Piece_Delete(Nullable<decimal> ligne, ObjectParameter lect, string language)
        {
            var ligneParameter = ligne.HasValue ?
                new ObjectParameter("ligne", ligne) :
                new ObjectParameter("ligne", typeof(decimal));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Piece_Delete", ligneParameter, lect, languageParameter);
        }
    
        public virtual int Piece_Insert(string agence, string devise, string journal, Nullable<int> folio, Nullable<System.DateTime> dateOperation, string compte, Nullable<decimal> tiers, string codeLibelle, string libelle, string refEcrit, string refOperation, Nullable<double> montant, Nullable<System.DateTime> dateValeur, string codeMaj, string codeEmpl, Nullable<System.DateTime> dateSaisie, string cpteClt, string description, string txnNo, string codeoperation, string libelleoperation, string compteCr, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var compteParameter = compte != null ?
                new ObjectParameter("Compte", compte) :
                new ObjectParameter("Compte", typeof(string));
    
            var tiersParameter = tiers.HasValue ?
                new ObjectParameter("Tiers", tiers) :
                new ObjectParameter("Tiers", typeof(decimal));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("Libelle", libelle) :
                new ObjectParameter("Libelle", typeof(string));
    
            var refEcritParameter = refEcrit != null ?
                new ObjectParameter("RefEcrit", refEcrit) :
                new ObjectParameter("RefEcrit", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var codeEmplParameter = codeEmpl != null ?
                new ObjectParameter("CodeEmpl", codeEmpl) :
                new ObjectParameter("CodeEmpl", typeof(string));
    
            var dateSaisieParameter = dateSaisie.HasValue ?
                new ObjectParameter("DateSaisie", dateSaisie) :
                new ObjectParameter("DateSaisie", typeof(System.DateTime));
    
            var cpteCltParameter = cpteClt != null ?
                new ObjectParameter("CpteClt", cpteClt) :
                new ObjectParameter("CpteClt", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var codeoperationParameter = codeoperation != null ?
                new ObjectParameter("codeoperation", codeoperation) :
                new ObjectParameter("codeoperation", typeof(string));
    
            var libelleoperationParameter = libelleoperation != null ?
                new ObjectParameter("libelleoperation", libelleoperation) :
                new ObjectParameter("libelleoperation", typeof(string));
    
            var compteCrParameter = compteCr != null ?
                new ObjectParameter("CompteCr", compteCr) :
                new ObjectParameter("CompteCr", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Piece_Insert", agenceParameter, deviseParameter, journalParameter, folioParameter, dateOperationParameter, compteParameter, tiersParameter, codeLibelleParameter, libelleParameter, refEcritParameter, refOperationParameter, montantParameter, dateValeurParameter, codeMajParameter, codeEmplParameter, dateSaisieParameter, cpteCltParameter, descriptionParameter, txnNoParameter, codeoperationParameter, libelleoperationParameter, compteCrParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int Piece_Update(string agence, string devise, string journal, Nullable<int> folio, Nullable<System.DateTime> dateOperation, string compte, Nullable<decimal> tiers, string codeLibelle, string libelle, string refEcrit, string refOperation, Nullable<double> montant, Nullable<System.DateTime> dateValeur, string codeMaj, string codeEmpl, Nullable<System.DateTime> dateSaisie, string cpteClt, string description, string txnNo, string codeoperation, string libelleoperation, Nullable<decimal> ligne, string compteCr, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var compteParameter = compte != null ?
                new ObjectParameter("Compte", compte) :
                new ObjectParameter("Compte", typeof(string));
    
            var tiersParameter = tiers.HasValue ?
                new ObjectParameter("Tiers", tiers) :
                new ObjectParameter("Tiers", typeof(decimal));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("Libelle", libelle) :
                new ObjectParameter("Libelle", typeof(string));
    
            var refEcritParameter = refEcrit != null ?
                new ObjectParameter("RefEcrit", refEcrit) :
                new ObjectParameter("RefEcrit", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var codeEmplParameter = codeEmpl != null ?
                new ObjectParameter("CodeEmpl", codeEmpl) :
                new ObjectParameter("CodeEmpl", typeof(string));
    
            var dateSaisieParameter = dateSaisie.HasValue ?
                new ObjectParameter("DateSaisie", dateSaisie) :
                new ObjectParameter("DateSaisie", typeof(System.DateTime));
    
            var cpteCltParameter = cpteClt != null ?
                new ObjectParameter("CpteClt", cpteClt) :
                new ObjectParameter("CpteClt", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var codeoperationParameter = codeoperation != null ?
                new ObjectParameter("codeoperation", codeoperation) :
                new ObjectParameter("codeoperation", typeof(string));
    
            var libelleoperationParameter = libelleoperation != null ?
                new ObjectParameter("libelleoperation", libelleoperation) :
                new ObjectParameter("libelleoperation", typeof(string));
    
            var ligneParameter = ligne.HasValue ?
                new ObjectParameter("ligne", ligne) :
                new ObjectParameter("ligne", typeof(decimal));
    
            var compteCrParameter = compteCr != null ?
                new ObjectParameter("CompteCr", compteCr) :
                new ObjectParameter("CompteCr", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Piece_Update", agenceParameter, deviseParameter, journalParameter, folioParameter, dateOperationParameter, compteParameter, tiersParameter, codeLibelleParameter, libelleParameter, refEcritParameter, refOperationParameter, montantParameter, dateValeurParameter, codeMajParameter, codeEmplParameter, dateSaisieParameter, cpteCltParameter, descriptionParameter, txnNoParameter, codeoperationParameter, libelleoperationParameter, ligneParameter, compteCrParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int PieceB_Delete(Nullable<decimal> ligne, ObjectParameter lect)
        {
            var ligneParameter = ligne.HasValue ?
                new ObjectParameter("ligne", ligne) :
                new ObjectParameter("ligne", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PieceB_Delete", ligneParameter, lect);
        }
    
        public virtual int PieceB_Insert(string agence, string devise, string journal, Nullable<int> folio, Nullable<System.DateTime> dateOperation, string compte, string tiers, string codeLibelle, string libelle, string refEcrit, string refOperation, Nullable<double> debit, Nullable<double> credit, Nullable<System.DateTime> dateValeur, Nullable<System.DateTime> dateEch, string codeMaj, string codeEmpl, Nullable<System.DateTime> dateSaisie, string cpteClt, string description, string txnNo, string codeoperation, string libelleoperation, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName, string cpteInterBr)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var compteParameter = compte != null ?
                new ObjectParameter("Compte", compte) :
                new ObjectParameter("Compte", typeof(string));
    
            var tiersParameter = tiers != null ?
                new ObjectParameter("Tiers", tiers) :
                new ObjectParameter("Tiers", typeof(string));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("Libelle", libelle) :
                new ObjectParameter("Libelle", typeof(string));
    
            var refEcritParameter = refEcrit != null ?
                new ObjectParameter("RefEcrit", refEcrit) :
                new ObjectParameter("RefEcrit", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var dateEchParameter = dateEch.HasValue ?
                new ObjectParameter("DateEch", dateEch) :
                new ObjectParameter("DateEch", typeof(System.DateTime));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var codeEmplParameter = codeEmpl != null ?
                new ObjectParameter("CodeEmpl", codeEmpl) :
                new ObjectParameter("CodeEmpl", typeof(string));
    
            var dateSaisieParameter = dateSaisie.HasValue ?
                new ObjectParameter("DateSaisie", dateSaisie) :
                new ObjectParameter("DateSaisie", typeof(System.DateTime));
    
            var cpteCltParameter = cpteClt != null ?
                new ObjectParameter("CpteClt", cpteClt) :
                new ObjectParameter("CpteClt", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var codeoperationParameter = codeoperation != null ?
                new ObjectParameter("codeoperation", codeoperation) :
                new ObjectParameter("codeoperation", typeof(string));
    
            var libelleoperationParameter = libelleoperation != null ?
                new ObjectParameter("libelleoperation", libelleoperation) :
                new ObjectParameter("libelleoperation", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var cpteInterBrParameter = cpteInterBr != null ?
                new ObjectParameter("CpteInterBr", cpteInterBr) :
                new ObjectParameter("CpteInterBr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PieceB_Insert", agenceParameter, deviseParameter, journalParameter, folioParameter, dateOperationParameter, compteParameter, tiersParameter, codeLibelleParameter, libelleParameter, refEcritParameter, refOperationParameter, debitParameter, creditParameter, dateValeurParameter, dateEchParameter, codeMajParameter, codeEmplParameter, dateSaisieParameter, cpteCltParameter, descriptionParameter, txnNoParameter, codeoperationParameter, libelleoperationParameter, lect, errMsg, languageParameter, computerNameParameter, cpteInterBrParameter);
        }
    
        public virtual int PieceB_Update(string agence, string devise, string journal, Nullable<int> folio, Nullable<System.DateTime> dateOperation, string compte, string tiers, string codeLibelle, string libelle, string refEcrit, string refOperation, Nullable<double> debit, Nullable<double> credit, Nullable<System.DateTime> dateValeur, Nullable<System.DateTime> dateEch, string codeMaj, string codeEmpl, Nullable<System.DateTime> dateSaisie, string cpteClt, string description, string txnNo, string codeoperation, string libelleoperation, Nullable<decimal> ligne, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName, string cpteInterBr)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var compteParameter = compte != null ?
                new ObjectParameter("Compte", compte) :
                new ObjectParameter("Compte", typeof(string));
    
            var tiersParameter = tiers != null ?
                new ObjectParameter("Tiers", tiers) :
                new ObjectParameter("Tiers", typeof(string));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("Libelle", libelle) :
                new ObjectParameter("Libelle", typeof(string));
    
            var refEcritParameter = refEcrit != null ?
                new ObjectParameter("RefEcrit", refEcrit) :
                new ObjectParameter("RefEcrit", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var dateEchParameter = dateEch.HasValue ?
                new ObjectParameter("DateEch", dateEch) :
                new ObjectParameter("DateEch", typeof(System.DateTime));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var codeEmplParameter = codeEmpl != null ?
                new ObjectParameter("CodeEmpl", codeEmpl) :
                new ObjectParameter("CodeEmpl", typeof(string));
    
            var dateSaisieParameter = dateSaisie.HasValue ?
                new ObjectParameter("DateSaisie", dateSaisie) :
                new ObjectParameter("DateSaisie", typeof(System.DateTime));
    
            var cpteCltParameter = cpteClt != null ?
                new ObjectParameter("CpteClt", cpteClt) :
                new ObjectParameter("CpteClt", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var codeoperationParameter = codeoperation != null ?
                new ObjectParameter("codeoperation", codeoperation) :
                new ObjectParameter("codeoperation", typeof(string));
    
            var libelleoperationParameter = libelleoperation != null ?
                new ObjectParameter("libelleoperation", libelleoperation) :
                new ObjectParameter("libelleoperation", typeof(string));
    
            var ligneParameter = ligne.HasValue ?
                new ObjectParameter("ligne", ligne) :
                new ObjectParameter("ligne", typeof(decimal));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var cpteInterBrParameter = cpteInterBr != null ?
                new ObjectParameter("CpteInterBr", cpteInterBr) :
                new ObjectParameter("CpteInterBr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PieceB_Update", agenceParameter, deviseParameter, journalParameter, folioParameter, dateOperationParameter, compteParameter, tiersParameter, codeLibelleParameter, libelleParameter, refEcritParameter, refOperationParameter, debitParameter, creditParameter, dateValeurParameter, dateEchParameter, codeMajParameter, codeEmplParameter, dateSaisieParameter, cpteCltParameter, descriptionParameter, txnNoParameter, codeoperationParameter, libelleoperationParameter, ligneParameter, lect, errMsg, languageParameter, computerNameParameter, cpteInterBrParameter);
        }
    
        public virtual ObjectResult<PorteFeuille_Result> PorteFeuille(string agence, string wClient, string denomination, string cpteJumelleCC, string chequeEffet, string encEscpte, Nullable<System.DateTime> dateDepot, Nullable<System.DateTime> dateEcheance, string tireur, string domiciliation, string reference, string refInterne, Nullable<double> coursDevise, Nullable<double> montant, Nullable<double> mtEncaisse, Nullable<double> fraisCorresp, string fraisChargeBenefTir, Nullable<double> tauxEscpte, Nullable<short> nbreJours, Nullable<double> mtInteret, string codeReescompte, string situationValeur, string liaisonCorresp, string codeLiaisonCorresp, string cpteLiaisonCorresp, Nullable<double> commission, Nullable<double> taxes, string description, string cpteIndEnc, string cpteIndEscpteChq, string cpteIndEscpteEffet, string cpteIndEncEffEscp, string cpteIndImpEscpte, Nullable<System.DateTime> dateCalcul, string zoneCalcul, string sitAnterieurValeur, Nullable<System.DateTime> dateCreation, Nullable<System.DateTime> dateCptaResult, string libLiaisonCorresp, string codeCorrBnk, string libCorrBnk, string employe, string libEmploye, Nullable<double> pDL, string libAgence, string tracer, Nullable<double> unpaidcheckpenalty, Nullable<double> ourUnPaidCharge, string txnNo, string colType, Nullable<decimal> wserie, ObjectParameter msg, ObjectParameter lect, string computerName, string language, string cobacID)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var wClientParameter = wClient != null ?
                new ObjectParameter("wClient", wClient) :
                new ObjectParameter("wClient", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var chequeEffetParameter = chequeEffet != null ?
                new ObjectParameter("ChequeEffet", chequeEffet) :
                new ObjectParameter("ChequeEffet", typeof(string));
    
            var encEscpteParameter = encEscpte != null ?
                new ObjectParameter("EncEscpte", encEscpte) :
                new ObjectParameter("EncEscpte", typeof(string));
    
            var dateDepotParameter = dateDepot.HasValue ?
                new ObjectParameter("DateDepot", dateDepot) :
                new ObjectParameter("DateDepot", typeof(System.DateTime));
    
            var dateEcheanceParameter = dateEcheance.HasValue ?
                new ObjectParameter("DateEcheance", dateEcheance) :
                new ObjectParameter("DateEcheance", typeof(System.DateTime));
    
            var tireurParameter = tireur != null ?
                new ObjectParameter("Tireur", tireur) :
                new ObjectParameter("Tireur", typeof(string));
    
            var domiciliationParameter = domiciliation != null ?
                new ObjectParameter("Domiciliation", domiciliation) :
                new ObjectParameter("Domiciliation", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var refInterneParameter = refInterne != null ?
                new ObjectParameter("RefInterne", refInterne) :
                new ObjectParameter("RefInterne", typeof(string));
    
            var coursDeviseParameter = coursDevise.HasValue ?
                new ObjectParameter("CoursDevise", coursDevise) :
                new ObjectParameter("CoursDevise", typeof(double));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var mtEncaisseParameter = mtEncaisse.HasValue ?
                new ObjectParameter("MtEncaisse", mtEncaisse) :
                new ObjectParameter("MtEncaisse", typeof(double));
    
            var fraisCorrespParameter = fraisCorresp.HasValue ?
                new ObjectParameter("FraisCorresp", fraisCorresp) :
                new ObjectParameter("FraisCorresp", typeof(double));
    
            var fraisChargeBenefTirParameter = fraisChargeBenefTir != null ?
                new ObjectParameter("FraisChargeBenefTir", fraisChargeBenefTir) :
                new ObjectParameter("FraisChargeBenefTir", typeof(string));
    
            var tauxEscpteParameter = tauxEscpte.HasValue ?
                new ObjectParameter("TauxEscpte", tauxEscpte) :
                new ObjectParameter("TauxEscpte", typeof(double));
    
            var nbreJoursParameter = nbreJours.HasValue ?
                new ObjectParameter("NbreJours", nbreJours) :
                new ObjectParameter("NbreJours", typeof(short));
    
            var mtInteretParameter = mtInteret.HasValue ?
                new ObjectParameter("MtInteret", mtInteret) :
                new ObjectParameter("MtInteret", typeof(double));
    
            var codeReescompteParameter = codeReescompte != null ?
                new ObjectParameter("CodeReescompte", codeReescompte) :
                new ObjectParameter("CodeReescompte", typeof(string));
    
            var situationValeurParameter = situationValeur != null ?
                new ObjectParameter("SituationValeur", situationValeur) :
                new ObjectParameter("SituationValeur", typeof(string));
    
            var liaisonCorrespParameter = liaisonCorresp != null ?
                new ObjectParameter("LiaisonCorresp", liaisonCorresp) :
                new ObjectParameter("LiaisonCorresp", typeof(string));
    
            var codeLiaisonCorrespParameter = codeLiaisonCorresp != null ?
                new ObjectParameter("CodeLiaisonCorresp", codeLiaisonCorresp) :
                new ObjectParameter("CodeLiaisonCorresp", typeof(string));
    
            var cpteLiaisonCorrespParameter = cpteLiaisonCorresp != null ?
                new ObjectParameter("CpteLiaisonCorresp", cpteLiaisonCorresp) :
                new ObjectParameter("CpteLiaisonCorresp", typeof(string));
    
            var commissionParameter = commission.HasValue ?
                new ObjectParameter("Commission", commission) :
                new ObjectParameter("Commission", typeof(double));
    
            var taxesParameter = taxes.HasValue ?
                new ObjectParameter("Taxes", taxes) :
                new ObjectParameter("Taxes", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteIndEncParameter = cpteIndEnc != null ?
                new ObjectParameter("CpteIndEnc", cpteIndEnc) :
                new ObjectParameter("CpteIndEnc", typeof(string));
    
            var cpteIndEscpteChqParameter = cpteIndEscpteChq != null ?
                new ObjectParameter("CpteIndEscpteChq", cpteIndEscpteChq) :
                new ObjectParameter("CpteIndEscpteChq", typeof(string));
    
            var cpteIndEscpteEffetParameter = cpteIndEscpteEffet != null ?
                new ObjectParameter("CpteIndEscpteEffet", cpteIndEscpteEffet) :
                new ObjectParameter("CpteIndEscpteEffet", typeof(string));
    
            var cpteIndEncEffEscpParameter = cpteIndEncEffEscp != null ?
                new ObjectParameter("CpteIndEncEffEscp", cpteIndEncEffEscp) :
                new ObjectParameter("CpteIndEncEffEscp", typeof(string));
    
            var cpteIndImpEscpteParameter = cpteIndImpEscpte != null ?
                new ObjectParameter("CpteIndImpEscpte", cpteIndImpEscpte) :
                new ObjectParameter("CpteIndImpEscpte", typeof(string));
    
            var dateCalculParameter = dateCalcul.HasValue ?
                new ObjectParameter("DateCalcul", dateCalcul) :
                new ObjectParameter("DateCalcul", typeof(System.DateTime));
    
            var zoneCalculParameter = zoneCalcul != null ?
                new ObjectParameter("ZoneCalcul", zoneCalcul) :
                new ObjectParameter("ZoneCalcul", typeof(string));
    
            var sitAnterieurValeurParameter = sitAnterieurValeur != null ?
                new ObjectParameter("SitAnterieurValeur", sitAnterieurValeur) :
                new ObjectParameter("SitAnterieurValeur", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var dateCptaResultParameter = dateCptaResult.HasValue ?
                new ObjectParameter("DateCptaResult", dateCptaResult) :
                new ObjectParameter("DateCptaResult", typeof(System.DateTime));
    
            var libLiaisonCorrespParameter = libLiaisonCorresp != null ?
                new ObjectParameter("LibLiaisonCorresp", libLiaisonCorresp) :
                new ObjectParameter("LibLiaisonCorresp", typeof(string));
    
            var codeCorrBnkParameter = codeCorrBnk != null ?
                new ObjectParameter("CodeCorrBnk", codeCorrBnk) :
                new ObjectParameter("CodeCorrBnk", typeof(string));
    
            var libCorrBnkParameter = libCorrBnk != null ?
                new ObjectParameter("LibCorrBnk", libCorrBnk) :
                new ObjectParameter("LibCorrBnk", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var pDLParameter = pDL.HasValue ?
                new ObjectParameter("PDL", pDL) :
                new ObjectParameter("PDL", typeof(double));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var tracerParameter = tracer != null ?
                new ObjectParameter("Tracer", tracer) :
                new ObjectParameter("Tracer", typeof(string));
    
            var unpaidcheckpenaltyParameter = unpaidcheckpenalty.HasValue ?
                new ObjectParameter("Unpaidcheckpenalty", unpaidcheckpenalty) :
                new ObjectParameter("Unpaidcheckpenalty", typeof(double));
    
            var ourUnPaidChargeParameter = ourUnPaidCharge.HasValue ?
                new ObjectParameter("OurUnPaidCharge", ourUnPaidCharge) :
                new ObjectParameter("OurUnPaidCharge", typeof(double));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var colTypeParameter = colType != null ?
                new ObjectParameter("ColType", colType) :
                new ObjectParameter("ColType", typeof(string));
    
            var wserieParameter = wserie.HasValue ?
                new ObjectParameter("wserie", wserie) :
                new ObjectParameter("wserie", typeof(decimal));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PorteFeuille_Result>("PorteFeuille", agenceParameter, wClientParameter, denominationParameter, cpteJumelleCCParameter, chequeEffetParameter, encEscpteParameter, dateDepotParameter, dateEcheanceParameter, tireurParameter, domiciliationParameter, referenceParameter, refInterneParameter, coursDeviseParameter, montantParameter, mtEncaisseParameter, fraisCorrespParameter, fraisChargeBenefTirParameter, tauxEscpteParameter, nbreJoursParameter, mtInteretParameter, codeReescompteParameter, situationValeurParameter, liaisonCorrespParameter, codeLiaisonCorrespParameter, cpteLiaisonCorrespParameter, commissionParameter, taxesParameter, descriptionParameter, cpteIndEncParameter, cpteIndEscpteChqParameter, cpteIndEscpteEffetParameter, cpteIndEncEffEscpParameter, cpteIndImpEscpteParameter, dateCalculParameter, zoneCalculParameter, sitAnterieurValeurParameter, dateCreationParameter, dateCptaResultParameter, libLiaisonCorrespParameter, codeCorrBnkParameter, libCorrBnkParameter, employeParameter, libEmployeParameter, pDLParameter, libAgenceParameter, tracerParameter, unpaidcheckpenaltyParameter, ourUnPaidChargeParameter, txnNoParameter, colTypeParameter, wserieParameter, msg, lect, computerNameParameter, languageParameter, cobacIDParameter);
        }
    
        public virtual ObjectResult<PorteFeuille_Insert_Result> PorteFeuille_Insert(string agence, string wClient, string denomination, string cpteJumelleCC, string chequeEffet, string encEscpte, Nullable<System.DateTime> dateDepot, Nullable<System.DateTime> dateEcheance, string tireur, string domiciliation, string reference, string refInterne, Nullable<double> coursDevise, Nullable<double> montant, Nullable<double> mtEncaisse, Nullable<double> fraisCorresp, string fraisChargeBenefTir, Nullable<double> tauxEscpte, Nullable<short> nbreJours, Nullable<double> mtInteret, string codeReescompte, string situationValeur, string liaisonCorresp, string codeLiaisonCorresp, string cpteLiaisonCorresp, Nullable<double> commission, Nullable<double> taxes, string description, string cpteIndEnc, string cpteIndEscpteChq, string cpteIndEscpteEffet, string cpteIndEncEffEscp, string cpteIndImpEscpte, Nullable<System.DateTime> dateCalcul, string zoneCalcul, string sitAnterieurValeur, Nullable<System.DateTime> dateCreation, string libLiaisonCorresp, string codeCorrBnk, string libCorrBnk, string employe, string libEmploye, Nullable<double> pDL, string libAgence, string tracer, Nullable<double> unpaidcheckpenalty, Nullable<double> ourUnPaidCharge, string txnNo, string colType, ObjectParameter msg, ObjectParameter lect, string language, string cobacID)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var wClientParameter = wClient != null ?
                new ObjectParameter("wClient", wClient) :
                new ObjectParameter("wClient", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var chequeEffetParameter = chequeEffet != null ?
                new ObjectParameter("ChequeEffet", chequeEffet) :
                new ObjectParameter("ChequeEffet", typeof(string));
    
            var encEscpteParameter = encEscpte != null ?
                new ObjectParameter("EncEscpte", encEscpte) :
                new ObjectParameter("EncEscpte", typeof(string));
    
            var dateDepotParameter = dateDepot.HasValue ?
                new ObjectParameter("DateDepot", dateDepot) :
                new ObjectParameter("DateDepot", typeof(System.DateTime));
    
            var dateEcheanceParameter = dateEcheance.HasValue ?
                new ObjectParameter("DateEcheance", dateEcheance) :
                new ObjectParameter("DateEcheance", typeof(System.DateTime));
    
            var tireurParameter = tireur != null ?
                new ObjectParameter("Tireur", tireur) :
                new ObjectParameter("Tireur", typeof(string));
    
            var domiciliationParameter = domiciliation != null ?
                new ObjectParameter("Domiciliation", domiciliation) :
                new ObjectParameter("Domiciliation", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var refInterneParameter = refInterne != null ?
                new ObjectParameter("RefInterne", refInterne) :
                new ObjectParameter("RefInterne", typeof(string));
    
            var coursDeviseParameter = coursDevise.HasValue ?
                new ObjectParameter("CoursDevise", coursDevise) :
                new ObjectParameter("CoursDevise", typeof(double));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var mtEncaisseParameter = mtEncaisse.HasValue ?
                new ObjectParameter("MtEncaisse", mtEncaisse) :
                new ObjectParameter("MtEncaisse", typeof(double));
    
            var fraisCorrespParameter = fraisCorresp.HasValue ?
                new ObjectParameter("FraisCorresp", fraisCorresp) :
                new ObjectParameter("FraisCorresp", typeof(double));
    
            var fraisChargeBenefTirParameter = fraisChargeBenefTir != null ?
                new ObjectParameter("FraisChargeBenefTir", fraisChargeBenefTir) :
                new ObjectParameter("FraisChargeBenefTir", typeof(string));
    
            var tauxEscpteParameter = tauxEscpte.HasValue ?
                new ObjectParameter("TauxEscpte", tauxEscpte) :
                new ObjectParameter("TauxEscpte", typeof(double));
    
            var nbreJoursParameter = nbreJours.HasValue ?
                new ObjectParameter("NbreJours", nbreJours) :
                new ObjectParameter("NbreJours", typeof(short));
    
            var mtInteretParameter = mtInteret.HasValue ?
                new ObjectParameter("MtInteret", mtInteret) :
                new ObjectParameter("MtInteret", typeof(double));
    
            var codeReescompteParameter = codeReescompte != null ?
                new ObjectParameter("CodeReescompte", codeReescompte) :
                new ObjectParameter("CodeReescompte", typeof(string));
    
            var situationValeurParameter = situationValeur != null ?
                new ObjectParameter("SituationValeur", situationValeur) :
                new ObjectParameter("SituationValeur", typeof(string));
    
            var liaisonCorrespParameter = liaisonCorresp != null ?
                new ObjectParameter("LiaisonCorresp", liaisonCorresp) :
                new ObjectParameter("LiaisonCorresp", typeof(string));
    
            var codeLiaisonCorrespParameter = codeLiaisonCorresp != null ?
                new ObjectParameter("CodeLiaisonCorresp", codeLiaisonCorresp) :
                new ObjectParameter("CodeLiaisonCorresp", typeof(string));
    
            var cpteLiaisonCorrespParameter = cpteLiaisonCorresp != null ?
                new ObjectParameter("CpteLiaisonCorresp", cpteLiaisonCorresp) :
                new ObjectParameter("CpteLiaisonCorresp", typeof(string));
    
            var commissionParameter = commission.HasValue ?
                new ObjectParameter("Commission", commission) :
                new ObjectParameter("Commission", typeof(double));
    
            var taxesParameter = taxes.HasValue ?
                new ObjectParameter("Taxes", taxes) :
                new ObjectParameter("Taxes", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteIndEncParameter = cpteIndEnc != null ?
                new ObjectParameter("CpteIndEnc", cpteIndEnc) :
                new ObjectParameter("CpteIndEnc", typeof(string));
    
            var cpteIndEscpteChqParameter = cpteIndEscpteChq != null ?
                new ObjectParameter("CpteIndEscpteChq", cpteIndEscpteChq) :
                new ObjectParameter("CpteIndEscpteChq", typeof(string));
    
            var cpteIndEscpteEffetParameter = cpteIndEscpteEffet != null ?
                new ObjectParameter("CpteIndEscpteEffet", cpteIndEscpteEffet) :
                new ObjectParameter("CpteIndEscpteEffet", typeof(string));
    
            var cpteIndEncEffEscpParameter = cpteIndEncEffEscp != null ?
                new ObjectParameter("CpteIndEncEffEscp", cpteIndEncEffEscp) :
                new ObjectParameter("CpteIndEncEffEscp", typeof(string));
    
            var cpteIndImpEscpteParameter = cpteIndImpEscpte != null ?
                new ObjectParameter("CpteIndImpEscpte", cpteIndImpEscpte) :
                new ObjectParameter("CpteIndImpEscpte", typeof(string));
    
            var dateCalculParameter = dateCalcul.HasValue ?
                new ObjectParameter("DateCalcul", dateCalcul) :
                new ObjectParameter("DateCalcul", typeof(System.DateTime));
    
            var zoneCalculParameter = zoneCalcul != null ?
                new ObjectParameter("ZoneCalcul", zoneCalcul) :
                new ObjectParameter("ZoneCalcul", typeof(string));
    
            var sitAnterieurValeurParameter = sitAnterieurValeur != null ?
                new ObjectParameter("SitAnterieurValeur", sitAnterieurValeur) :
                new ObjectParameter("SitAnterieurValeur", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var libLiaisonCorrespParameter = libLiaisonCorresp != null ?
                new ObjectParameter("LibLiaisonCorresp", libLiaisonCorresp) :
                new ObjectParameter("LibLiaisonCorresp", typeof(string));
    
            var codeCorrBnkParameter = codeCorrBnk != null ?
                new ObjectParameter("CodeCorrBnk", codeCorrBnk) :
                new ObjectParameter("CodeCorrBnk", typeof(string));
    
            var libCorrBnkParameter = libCorrBnk != null ?
                new ObjectParameter("LibCorrBnk", libCorrBnk) :
                new ObjectParameter("LibCorrBnk", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var pDLParameter = pDL.HasValue ?
                new ObjectParameter("PDL", pDL) :
                new ObjectParameter("PDL", typeof(double));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var tracerParameter = tracer != null ?
                new ObjectParameter("Tracer", tracer) :
                new ObjectParameter("Tracer", typeof(string));
    
            var unpaidcheckpenaltyParameter = unpaidcheckpenalty.HasValue ?
                new ObjectParameter("Unpaidcheckpenalty", unpaidcheckpenalty) :
                new ObjectParameter("Unpaidcheckpenalty", typeof(double));
    
            var ourUnPaidChargeParameter = ourUnPaidCharge.HasValue ?
                new ObjectParameter("OurUnPaidCharge", ourUnPaidCharge) :
                new ObjectParameter("OurUnPaidCharge", typeof(double));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var colTypeParameter = colType != null ?
                new ObjectParameter("ColType", colType) :
                new ObjectParameter("ColType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PorteFeuille_Insert_Result>("PorteFeuille_Insert", agenceParameter, wClientParameter, denominationParameter, cpteJumelleCCParameter, chequeEffetParameter, encEscpteParameter, dateDepotParameter, dateEcheanceParameter, tireurParameter, domiciliationParameter, referenceParameter, refInterneParameter, coursDeviseParameter, montantParameter, mtEncaisseParameter, fraisCorrespParameter, fraisChargeBenefTirParameter, tauxEscpteParameter, nbreJoursParameter, mtInteretParameter, codeReescompteParameter, situationValeurParameter, liaisonCorrespParameter, codeLiaisonCorrespParameter, cpteLiaisonCorrespParameter, commissionParameter, taxesParameter, descriptionParameter, cpteIndEncParameter, cpteIndEscpteChqParameter, cpteIndEscpteEffetParameter, cpteIndEncEffEscpParameter, cpteIndImpEscpteParameter, dateCalculParameter, zoneCalculParameter, sitAnterieurValeurParameter, dateCreationParameter, libLiaisonCorrespParameter, codeCorrBnkParameter, libCorrBnkParameter, employeParameter, libEmployeParameter, pDLParameter, libAgenceParameter, tracerParameter, unpaidcheckpenaltyParameter, ourUnPaidChargeParameter, txnNoParameter, colTypeParameter, msg, lect, languageParameter, cobacIDParameter);
        }
    
        public virtual ObjectResult<PorteFeuille_Unpaid_Result> PorteFeuille_Unpaid(string agence, string wClient, string denomination, string cpteJumelleCC, string chequeEffet, string encEscpte, string refInterne, Nullable<double> montant, string situationValeur, string liaisonCorresp, string codeLiaisonCorresp, string description, string cpteIndEnc, string codeCorrBnk, string employe, string libEmploye, string libAgence, Nullable<double> unpaidcheckpenalty, Nullable<double> ourUnPaidCharge, string txnNo, string colType, Nullable<decimal> wserie, ObjectParameter msg, ObjectParameter lect, string language, string cobacID)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var wClientParameter = wClient != null ?
                new ObjectParameter("wClient", wClient) :
                new ObjectParameter("wClient", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var chequeEffetParameter = chequeEffet != null ?
                new ObjectParameter("ChequeEffet", chequeEffet) :
                new ObjectParameter("ChequeEffet", typeof(string));
    
            var encEscpteParameter = encEscpte != null ?
                new ObjectParameter("EncEscpte", encEscpte) :
                new ObjectParameter("EncEscpte", typeof(string));
    
            var refInterneParameter = refInterne != null ?
                new ObjectParameter("RefInterne", refInterne) :
                new ObjectParameter("RefInterne", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var situationValeurParameter = situationValeur != null ?
                new ObjectParameter("SituationValeur", situationValeur) :
                new ObjectParameter("SituationValeur", typeof(string));
    
            var liaisonCorrespParameter = liaisonCorresp != null ?
                new ObjectParameter("LiaisonCorresp", liaisonCorresp) :
                new ObjectParameter("LiaisonCorresp", typeof(string));
    
            var codeLiaisonCorrespParameter = codeLiaisonCorresp != null ?
                new ObjectParameter("CodeLiaisonCorresp", codeLiaisonCorresp) :
                new ObjectParameter("CodeLiaisonCorresp", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteIndEncParameter = cpteIndEnc != null ?
                new ObjectParameter("CpteIndEnc", cpteIndEnc) :
                new ObjectParameter("CpteIndEnc", typeof(string));
    
            var codeCorrBnkParameter = codeCorrBnk != null ?
                new ObjectParameter("CodeCorrBnk", codeCorrBnk) :
                new ObjectParameter("CodeCorrBnk", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var unpaidcheckpenaltyParameter = unpaidcheckpenalty.HasValue ?
                new ObjectParameter("Unpaidcheckpenalty", unpaidcheckpenalty) :
                new ObjectParameter("Unpaidcheckpenalty", typeof(double));
    
            var ourUnPaidChargeParameter = ourUnPaidCharge.HasValue ?
                new ObjectParameter("OurUnPaidCharge", ourUnPaidCharge) :
                new ObjectParameter("OurUnPaidCharge", typeof(double));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var colTypeParameter = colType != null ?
                new ObjectParameter("ColType", colType) :
                new ObjectParameter("ColType", typeof(string));
    
            var wserieParameter = wserie.HasValue ?
                new ObjectParameter("wserie", wserie) :
                new ObjectParameter("wserie", typeof(decimal));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PorteFeuille_Unpaid_Result>("PorteFeuille_Unpaid", agenceParameter, wClientParameter, denominationParameter, cpteJumelleCCParameter, chequeEffetParameter, encEscpteParameter, refInterneParameter, montantParameter, situationValeurParameter, liaisonCorrespParameter, codeLiaisonCorrespParameter, descriptionParameter, cpteIndEncParameter, codeCorrBnkParameter, employeParameter, libEmployeParameter, libAgenceParameter, unpaidcheckpenaltyParameter, ourUnPaidChargeParameter, txnNoParameter, colTypeParameter, wserieParameter, msg, lect, languageParameter, cobacIDParameter);
        }
    
        public virtual int PorteFeuilleEnvoi(string agence, string wClient, string denomination, string cpteJumelleCC, string chequeEffet, string encEscpte, string refInterne, Nullable<double> montant, string situationValeur, string liaisonCorresp, string codeLiaisonCorresp, string description, string cpteIndEnc, string codeCorrBnk, string employe, string libEmploye, string libAgence, string txnNo, string colType, Nullable<decimal> wserie, ObjectParameter msg, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var wClientParameter = wClient != null ?
                new ObjectParameter("wClient", wClient) :
                new ObjectParameter("wClient", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var chequeEffetParameter = chequeEffet != null ?
                new ObjectParameter("ChequeEffet", chequeEffet) :
                new ObjectParameter("ChequeEffet", typeof(string));
    
            var encEscpteParameter = encEscpte != null ?
                new ObjectParameter("EncEscpte", encEscpte) :
                new ObjectParameter("EncEscpte", typeof(string));
    
            var refInterneParameter = refInterne != null ?
                new ObjectParameter("RefInterne", refInterne) :
                new ObjectParameter("RefInterne", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var situationValeurParameter = situationValeur != null ?
                new ObjectParameter("SituationValeur", situationValeur) :
                new ObjectParameter("SituationValeur", typeof(string));
    
            var liaisonCorrespParameter = liaisonCorresp != null ?
                new ObjectParameter("LiaisonCorresp", liaisonCorresp) :
                new ObjectParameter("LiaisonCorresp", typeof(string));
    
            var codeLiaisonCorrespParameter = codeLiaisonCorresp != null ?
                new ObjectParameter("CodeLiaisonCorresp", codeLiaisonCorresp) :
                new ObjectParameter("CodeLiaisonCorresp", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteIndEncParameter = cpteIndEnc != null ?
                new ObjectParameter("CpteIndEnc", cpteIndEnc) :
                new ObjectParameter("CpteIndEnc", typeof(string));
    
            var codeCorrBnkParameter = codeCorrBnk != null ?
                new ObjectParameter("CodeCorrBnk", codeCorrBnk) :
                new ObjectParameter("CodeCorrBnk", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var colTypeParameter = colType != null ?
                new ObjectParameter("ColType", colType) :
                new ObjectParameter("ColType", typeof(string));
    
            var wserieParameter = wserie.HasValue ?
                new ObjectParameter("wserie", wserie) :
                new ObjectParameter("wserie", typeof(decimal));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PorteFeuilleEnvoi", agenceParameter, wClientParameter, denominationParameter, cpteJumelleCCParameter, chequeEffetParameter, encEscpteParameter, refInterneParameter, montantParameter, situationValeurParameter, liaisonCorrespParameter, codeLiaisonCorrespParameter, descriptionParameter, cpteIndEncParameter, codeCorrBnkParameter, employeParameter, libEmployeParameter, libAgenceParameter, txnNoParameter, colTypeParameter, wserieParameter, msg, lect, languageParameter);
        }
    
        public virtual ObjectResult<PorteFeuillePayement_Result> PorteFeuillePayement(string agence, string wClient, string denomination, string cpteJumelleCC, string chequeEffet, string encEscpte, string refInterne, Nullable<double> montant, Nullable<double> fraisCorresp, string situationValeur, string liaisonCorresp, string codeLiaisonCorresp, Nullable<double> commission, string description, string cpteIndEnc, Nullable<System.DateTime> dateCptaResult, string codeCorrBnk, string employe, string libEmploye, Nullable<double> pDL, string libAgence, string txnNo, string colType, Nullable<decimal> wserie, ObjectParameter msg, ObjectParameter lect, string language, string cobacID)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var wClientParameter = wClient != null ?
                new ObjectParameter("wClient", wClient) :
                new ObjectParameter("wClient", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var chequeEffetParameter = chequeEffet != null ?
                new ObjectParameter("ChequeEffet", chequeEffet) :
                new ObjectParameter("ChequeEffet", typeof(string));
    
            var encEscpteParameter = encEscpte != null ?
                new ObjectParameter("EncEscpte", encEscpte) :
                new ObjectParameter("EncEscpte", typeof(string));
    
            var refInterneParameter = refInterne != null ?
                new ObjectParameter("RefInterne", refInterne) :
                new ObjectParameter("RefInterne", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var fraisCorrespParameter = fraisCorresp.HasValue ?
                new ObjectParameter("FraisCorresp", fraisCorresp) :
                new ObjectParameter("FraisCorresp", typeof(double));
    
            var situationValeurParameter = situationValeur != null ?
                new ObjectParameter("SituationValeur", situationValeur) :
                new ObjectParameter("SituationValeur", typeof(string));
    
            var liaisonCorrespParameter = liaisonCorresp != null ?
                new ObjectParameter("LiaisonCorresp", liaisonCorresp) :
                new ObjectParameter("LiaisonCorresp", typeof(string));
    
            var codeLiaisonCorrespParameter = codeLiaisonCorresp != null ?
                new ObjectParameter("CodeLiaisonCorresp", codeLiaisonCorresp) :
                new ObjectParameter("CodeLiaisonCorresp", typeof(string));
    
            var commissionParameter = commission.HasValue ?
                new ObjectParameter("Commission", commission) :
                new ObjectParameter("Commission", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var cpteIndEncParameter = cpteIndEnc != null ?
                new ObjectParameter("CpteIndEnc", cpteIndEnc) :
                new ObjectParameter("CpteIndEnc", typeof(string));
    
            var dateCptaResultParameter = dateCptaResult.HasValue ?
                new ObjectParameter("DateCptaResult", dateCptaResult) :
                new ObjectParameter("DateCptaResult", typeof(System.DateTime));
    
            var codeCorrBnkParameter = codeCorrBnk != null ?
                new ObjectParameter("CodeCorrBnk", codeCorrBnk) :
                new ObjectParameter("CodeCorrBnk", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var pDLParameter = pDL.HasValue ?
                new ObjectParameter("PDL", pDL) :
                new ObjectParameter("PDL", typeof(double));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var colTypeParameter = colType != null ?
                new ObjectParameter("ColType", colType) :
                new ObjectParameter("ColType", typeof(string));
    
            var wserieParameter = wserie.HasValue ?
                new ObjectParameter("wserie", wserie) :
                new ObjectParameter("wserie", typeof(decimal));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PorteFeuillePayement_Result>("PorteFeuillePayement", agenceParameter, wClientParameter, denominationParameter, cpteJumelleCCParameter, chequeEffetParameter, encEscpteParameter, refInterneParameter, montantParameter, fraisCorrespParameter, situationValeurParameter, liaisonCorrespParameter, codeLiaisonCorrespParameter, commissionParameter, descriptionParameter, cpteIndEncParameter, dateCptaResultParameter, codeCorrBnkParameter, employeParameter, libEmployeParameter, pDLParameter, libAgenceParameter, txnNoParameter, colTypeParameter, wserieParameter, msg, lect, languageParameter, cobacIDParameter);
        }
    
        public virtual ObjectResult<Post_Credit_BL_Result> Post_Credit_BL(string agence, string client, string denomination, string cpteJumelle, Nullable<short> catCpte, string lettreCle, string cpteJumelleCredit, Nullable<double> montant, Nullable<double> tauxInt, Nullable<double> txTVA, Nullable<double> tauxGlobal, Nullable<System.DateTime> dateContrat, string numeroContrat, Nullable<System.DateTime> dateDemande, Nullable<System.DateTime> dateAccord, Nullable<short> duree, Nullable<short> dureeDiffere, string typeCalPerDiff, string typeRemb, Nullable<double> rembMensuel, Nullable<double> totalARembCapital, Nullable<double> totalARembInt, Nullable<double> totalARembTVA, Nullable<System.DateTime> dateDebutRemb, Nullable<System.DateTime> dateExpiration, Nullable<System.DateTime> dateCptaCredit, Nullable<System.DateTime> dateCptaDernRemb, string statut, string refGarantie, string libAgence, string libCatCpte, string employe, string libEmploye, string periodicite, Nullable<double> vFDiff, Nullable<double> rembPerDiff, string description, Nullable<double> fraisDossier, Nullable<double> pDL, string activiteeco, string txnNo, string loanAttributes, Nullable<double> emergencyLoan, Nullable<double> insure, Nullable<double> loanstudyfee, Nullable<double> retention, string subCpte, string devise, string libDevise, string gestionnaire, string libGestionnaire, Nullable<int> exoTVACHG, ObjectParameter lect, ObjectParameter msg, string computerName, string purposeCode, string purposeTypeDescription, string language, string ltype, string numOldLoan, Nullable<double> oldCapital, Nullable<double> oldInt, Nullable<double> totOldInt)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var lettreCleParameter = lettreCle != null ?
                new ObjectParameter("LettreCle", lettreCle) :
                new ObjectParameter("LettreCle", typeof(string));
    
            var cpteJumelleCreditParameter = cpteJumelleCredit != null ?
                new ObjectParameter("CpteJumelleCredit", cpteJumelleCredit) :
                new ObjectParameter("CpteJumelleCredit", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var tauxIntParameter = tauxInt.HasValue ?
                new ObjectParameter("TauxInt", tauxInt) :
                new ObjectParameter("TauxInt", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var tauxGlobalParameter = tauxGlobal.HasValue ?
                new ObjectParameter("TauxGlobal", tauxGlobal) :
                new ObjectParameter("TauxGlobal", typeof(double));
    
            var dateContratParameter = dateContrat.HasValue ?
                new ObjectParameter("DateContrat", dateContrat) :
                new ObjectParameter("DateContrat", typeof(System.DateTime));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var dateDemandeParameter = dateDemande.HasValue ?
                new ObjectParameter("DateDemande", dateDemande) :
                new ObjectParameter("DateDemande", typeof(System.DateTime));
    
            var dateAccordParameter = dateAccord.HasValue ?
                new ObjectParameter("DateAccord", dateAccord) :
                new ObjectParameter("DateAccord", typeof(System.DateTime));
    
            var dureeParameter = duree.HasValue ?
                new ObjectParameter("Duree", duree) :
                new ObjectParameter("Duree", typeof(short));
    
            var dureeDiffereParameter = dureeDiffere.HasValue ?
                new ObjectParameter("DureeDiffere", dureeDiffere) :
                new ObjectParameter("DureeDiffere", typeof(short));
    
            var typeCalPerDiffParameter = typeCalPerDiff != null ?
                new ObjectParameter("TypeCalPerDiff", typeCalPerDiff) :
                new ObjectParameter("TypeCalPerDiff", typeof(string));
    
            var typeRembParameter = typeRemb != null ?
                new ObjectParameter("TypeRemb", typeRemb) :
                new ObjectParameter("TypeRemb", typeof(string));
    
            var rembMensuelParameter = rembMensuel.HasValue ?
                new ObjectParameter("RembMensuel", rembMensuel) :
                new ObjectParameter("RembMensuel", typeof(double));
    
            var totalARembCapitalParameter = totalARembCapital.HasValue ?
                new ObjectParameter("TotalARembCapital", totalARembCapital) :
                new ObjectParameter("TotalARembCapital", typeof(double));
    
            var totalARembIntParameter = totalARembInt.HasValue ?
                new ObjectParameter("TotalARembInt", totalARembInt) :
                new ObjectParameter("TotalARembInt", typeof(double));
    
            var totalARembTVAParameter = totalARembTVA.HasValue ?
                new ObjectParameter("TotalARembTVA", totalARembTVA) :
                new ObjectParameter("TotalARembTVA", typeof(double));
    
            var dateDebutRembParameter = dateDebutRemb.HasValue ?
                new ObjectParameter("DateDebutRemb", dateDebutRemb) :
                new ObjectParameter("DateDebutRemb", typeof(System.DateTime));
    
            var dateExpirationParameter = dateExpiration.HasValue ?
                new ObjectParameter("DateExpiration", dateExpiration) :
                new ObjectParameter("DateExpiration", typeof(System.DateTime));
    
            var dateCptaCreditParameter = dateCptaCredit.HasValue ?
                new ObjectParameter("DateCptaCredit", dateCptaCredit) :
                new ObjectParameter("DateCptaCredit", typeof(System.DateTime));
    
            var dateCptaDernRembParameter = dateCptaDernRemb.HasValue ?
                new ObjectParameter("DateCptaDernRemb", dateCptaDernRemb) :
                new ObjectParameter("DateCptaDernRemb", typeof(System.DateTime));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var refGarantieParameter = refGarantie != null ?
                new ObjectParameter("RefGarantie", refGarantie) :
                new ObjectParameter("RefGarantie", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libCatCpteParameter = libCatCpte != null ?
                new ObjectParameter("LibCatCpte", libCatCpte) :
                new ObjectParameter("LibCatCpte", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var periodiciteParameter = periodicite != null ?
                new ObjectParameter("Periodicite", periodicite) :
                new ObjectParameter("Periodicite", typeof(string));
    
            var vFDiffParameter = vFDiff.HasValue ?
                new ObjectParameter("VFDiff", vFDiff) :
                new ObjectParameter("VFDiff", typeof(double));
    
            var rembPerDiffParameter = rembPerDiff.HasValue ?
                new ObjectParameter("RembPerDiff", rembPerDiff) :
                new ObjectParameter("RembPerDiff", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var fraisDossierParameter = fraisDossier.HasValue ?
                new ObjectParameter("FraisDossier", fraisDossier) :
                new ObjectParameter("FraisDossier", typeof(double));
    
            var pDLParameter = pDL.HasValue ?
                new ObjectParameter("PDL", pDL) :
                new ObjectParameter("PDL", typeof(double));
    
            var activiteecoParameter = activiteeco != null ?
                new ObjectParameter("Activiteeco", activiteeco) :
                new ObjectParameter("Activiteeco", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var loanAttributesParameter = loanAttributes != null ?
                new ObjectParameter("LoanAttributes", loanAttributes) :
                new ObjectParameter("LoanAttributes", typeof(string));
    
            var emergencyLoanParameter = emergencyLoan.HasValue ?
                new ObjectParameter("EmergencyLoan", emergencyLoan) :
                new ObjectParameter("EmergencyLoan", typeof(double));
    
            var insureParameter = insure.HasValue ?
                new ObjectParameter("Insure", insure) :
                new ObjectParameter("Insure", typeof(double));
    
            var loanstudyfeeParameter = loanstudyfee.HasValue ?
                new ObjectParameter("Loanstudyfee", loanstudyfee) :
                new ObjectParameter("Loanstudyfee", typeof(double));
    
            var retentionParameter = retention.HasValue ?
                new ObjectParameter("Retention", retention) :
                new ObjectParameter("Retention", typeof(double));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var gestionnaireParameter = gestionnaire != null ?
                new ObjectParameter("Gestionnaire", gestionnaire) :
                new ObjectParameter("Gestionnaire", typeof(string));
    
            var libGestionnaireParameter = libGestionnaire != null ?
                new ObjectParameter("LibGestionnaire", libGestionnaire) :
                new ObjectParameter("LibGestionnaire", typeof(string));
    
            var exoTVACHGParameter = exoTVACHG.HasValue ?
                new ObjectParameter("ExoTVACHG", exoTVACHG) :
                new ObjectParameter("ExoTVACHG", typeof(int));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var purposeCodeParameter = purposeCode != null ?
                new ObjectParameter("PurposeCode", purposeCode) :
                new ObjectParameter("PurposeCode", typeof(string));
    
            var purposeTypeDescriptionParameter = purposeTypeDescription != null ?
                new ObjectParameter("PurposeTypeDescription", purposeTypeDescription) :
                new ObjectParameter("PurposeTypeDescription", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var ltypeParameter = ltype != null ?
                new ObjectParameter("Ltype", ltype) :
                new ObjectParameter("Ltype", typeof(string));
    
            var numOldLoanParameter = numOldLoan != null ?
                new ObjectParameter("NumOldLoan", numOldLoan) :
                new ObjectParameter("NumOldLoan", typeof(string));
    
            var oldCapitalParameter = oldCapital.HasValue ?
                new ObjectParameter("OldCapital", oldCapital) :
                new ObjectParameter("OldCapital", typeof(double));
    
            var oldIntParameter = oldInt.HasValue ?
                new ObjectParameter("OldInt", oldInt) :
                new ObjectParameter("OldInt", typeof(double));
    
            var totOldIntParameter = totOldInt.HasValue ?
                new ObjectParameter("TotOldInt", totOldInt) :
                new ObjectParameter("TotOldInt", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Post_Credit_BL_Result>("Post_Credit_BL", agenceParameter, clientParameter, denominationParameter, cpteJumelleParameter, catCpteParameter, lettreCleParameter, cpteJumelleCreditParameter, montantParameter, tauxIntParameter, txTVAParameter, tauxGlobalParameter, dateContratParameter, numeroContratParameter, dateDemandeParameter, dateAccordParameter, dureeParameter, dureeDiffereParameter, typeCalPerDiffParameter, typeRembParameter, rembMensuelParameter, totalARembCapitalParameter, totalARembIntParameter, totalARembTVAParameter, dateDebutRembParameter, dateExpirationParameter, dateCptaCreditParameter, dateCptaDernRembParameter, statutParameter, refGarantieParameter, libAgenceParameter, libCatCpteParameter, employeParameter, libEmployeParameter, periodiciteParameter, vFDiffParameter, rembPerDiffParameter, descriptionParameter, fraisDossierParameter, pDLParameter, activiteecoParameter, txnNoParameter, loanAttributesParameter, emergencyLoanParameter, insureParameter, loanstudyfeeParameter, retentionParameter, subCpteParameter, deviseParameter, libDeviseParameter, gestionnaireParameter, libGestionnaireParameter, exoTVACHGParameter, lect, msg, computerNameParameter, purposeCodeParameter, purposeTypeDescriptionParameter, languageParameter, ltypeParameter, numOldLoanParameter, oldCapitalParameter, oldIntParameter, totOldIntParameter);
        }
    
        public virtual int PostLoan_Delete(string agence, string numeroContrat, string employe, string libEmploye, string computername, string rqcomments, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var rqcommentsParameter = rqcomments != null ?
                new ObjectParameter("rqcomments", rqcomments) :
                new ObjectParameter("rqcomments", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PostLoan_Delete", agenceParameter, numeroContratParameter, employeParameter, libEmployeParameter, computernameParameter, rqcommentsParameter, lect, languageParameter);
        }
    
        public virtual int PostLoan_Insert(string agence, string libAgence, string cpteJumelle, string denomination, string numeroContrat, Nullable<System.DateTime> dateContrat, Nullable<double> amount, Nullable<short> duree, string periodicite, string matricule, string libEmploye, string computername, string rqcomments, string loanProvenance, string purposeCode, string purposeTypeDescription, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var dateContratParameter = dateContrat.HasValue ?
                new ObjectParameter("DateContrat", dateContrat) :
                new ObjectParameter("DateContrat", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var dureeParameter = duree.HasValue ?
                new ObjectParameter("Duree", duree) :
                new ObjectParameter("Duree", typeof(short));
    
            var periodiciteParameter = periodicite != null ?
                new ObjectParameter("Periodicite", periodicite) :
                new ObjectParameter("Periodicite", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var rqcommentsParameter = rqcomments != null ?
                new ObjectParameter("rqcomments", rqcomments) :
                new ObjectParameter("rqcomments", typeof(string));
    
            var loanProvenanceParameter = loanProvenance != null ?
                new ObjectParameter("LoanProvenance", loanProvenance) :
                new ObjectParameter("LoanProvenance", typeof(string));
    
            var purposeCodeParameter = purposeCode != null ?
                new ObjectParameter("PurposeCode", purposeCode) :
                new ObjectParameter("PurposeCode", typeof(string));
    
            var purposeTypeDescriptionParameter = purposeTypeDescription != null ?
                new ObjectParameter("PurposeTypeDescription", purposeTypeDescription) :
                new ObjectParameter("PurposeTypeDescription", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PostLoan_Insert", agenceParameter, libAgenceParameter, cpteJumelleParameter, denominationParameter, numeroContratParameter, dateContratParameter, amountParameter, dureeParameter, periodiciteParameter, matriculeParameter, libEmployeParameter, computernameParameter, rqcommentsParameter, loanProvenanceParameter, purposeCodeParameter, purposeTypeDescriptionParameter, lect, languageParameter);
        }
    
        public virtual int PostLoan_Reject(string agence, string wClient, string libAgence, string cpteJumelleMaster, string cpteJumelle, string denomination, string numeroContrat, Nullable<System.DateTime> dateContrat, Nullable<double> amount, Nullable<short> duree, string periodicite, string matricule, string libEmploye, string computername, string status, string prefixtxnno, string devise, string libDevise, ObjectParameter lect, ObjectParameter msg, string language, string cobacID)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var wClientParameter = wClient != null ?
                new ObjectParameter("wClient", wClient) :
                new ObjectParameter("wClient", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var cpteJumelleMasterParameter = cpteJumelleMaster != null ?
                new ObjectParameter("CpteJumelleMaster", cpteJumelleMaster) :
                new ObjectParameter("CpteJumelleMaster", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var dateContratParameter = dateContrat.HasValue ?
                new ObjectParameter("DateContrat", dateContrat) :
                new ObjectParameter("DateContrat", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var dureeParameter = duree.HasValue ?
                new ObjectParameter("Duree", duree) :
                new ObjectParameter("Duree", typeof(short));
    
            var periodiciteParameter = periodicite != null ?
                new ObjectParameter("Periodicite", periodicite) :
                new ObjectParameter("Periodicite", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PostLoan_Reject", agenceParameter, wClientParameter, libAgenceParameter, cpteJumelleMasterParameter, cpteJumelleParameter, denominationParameter, numeroContratParameter, dateContratParameter, amountParameter, dureeParameter, periodiciteParameter, matriculeParameter, libEmployeParameter, computernameParameter, statusParameter, prefixtxnnoParameter, deviseParameter, libDeviseParameter, lect, msg, languageParameter, cobacIDParameter);
        }
    
        public virtual int PostLoan_Sending(string agence, string libAgence, string cpteJumelle, string denomination, string numeroContrat, Nullable<System.DateTime> dateContrat, Nullable<decimal> amount, Nullable<short> duree, string periodicite, string matricule, string libEmploye, string computername, string vlcomments, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var dateContratParameter = dateContrat.HasValue ?
                new ObjectParameter("DateContrat", dateContrat) :
                new ObjectParameter("DateContrat", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var dureeParameter = duree.HasValue ?
                new ObjectParameter("Duree", duree) :
                new ObjectParameter("Duree", typeof(short));
    
            var periodiciteParameter = periodicite != null ?
                new ObjectParameter("Periodicite", periodicite) :
                new ObjectParameter("Periodicite", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var vlcommentsParameter = vlcomments != null ?
                new ObjectParameter("vlcomments", vlcomments) :
                new ObjectParameter("vlcomments", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PostLoan_Sending", agenceParameter, libAgenceParameter, cpteJumelleParameter, denominationParameter, numeroContratParameter, dateContratParameter, amountParameter, dureeParameter, periodiciteParameter, matriculeParameter, libEmployeParameter, computernameParameter, vlcommentsParameter, lect, languageParameter);
        }
    
        public virtual int PostLoan_Update(string agence, string libAgence, string cpteJumelle, string denomination, string numeroContrat, Nullable<System.DateTime> dateContrat, Nullable<double> amount, Nullable<short> duree, string periodicite, string matricule, string libEmploye, string computername, string rqcomments, string loanProvenance, string purposeCode, string purposeTypeDescription, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var dateContratParameter = dateContrat.HasValue ?
                new ObjectParameter("DateContrat", dateContrat) :
                new ObjectParameter("DateContrat", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var dureeParameter = duree.HasValue ?
                new ObjectParameter("Duree", duree) :
                new ObjectParameter("Duree", typeof(short));
    
            var periodiciteParameter = periodicite != null ?
                new ObjectParameter("Periodicite", periodicite) :
                new ObjectParameter("Periodicite", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var rqcommentsParameter = rqcomments != null ?
                new ObjectParameter("rqcomments", rqcomments) :
                new ObjectParameter("rqcomments", typeof(string));
    
            var loanProvenanceParameter = loanProvenance != null ?
                new ObjectParameter("LoanProvenance", loanProvenance) :
                new ObjectParameter("LoanProvenance", typeof(string));
    
            var purposeCodeParameter = purposeCode != null ?
                new ObjectParameter("PurposeCode", purposeCode) :
                new ObjectParameter("PurposeCode", typeof(string));
    
            var purposeTypeDescriptionParameter = purposeTypeDescription != null ?
                new ObjectParameter("PurposeTypeDescription", purposeTypeDescription) :
                new ObjectParameter("PurposeTypeDescription", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PostLoan_Update", agenceParameter, libAgenceParameter, cpteJumelleParameter, denominationParameter, numeroContratParameter, dateContratParameter, amountParameter, dureeParameter, periodiciteParameter, matriculeParameter, libEmployeParameter, computernameParameter, rqcommentsParameter, loanProvenanceParameter, purposeCodeParameter, purposeTypeDescriptionParameter, lect, languageParameter);
        }
    
        public virtual int PostLoan_ValReject(string agence, string numeroContrat, string employe, string libEmploye, string computername, string vlcomments, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var vlcommentsParameter = vlcomments != null ?
                new ObjectParameter("vlcomments", vlcomments) :
                new ObjectParameter("vlcomments", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PostLoan_ValReject", agenceParameter, numeroContratParameter, employeParameter, libEmployeParameter, computernameParameter, vlcommentsParameter, lect, languageParameter);
        }
    
        public virtual int PreProcLending(string agence, string libAgence, string devise, string libDevise, string employe, string libEmploye, Nullable<int> folio, string journal, string libJournal, ObjectParameter lect, ObjectParameter msg, string computerName, string language, string cobacID)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var libJournalParameter = libJournal != null ?
                new ObjectParameter("LibJournal", libJournal) :
                new ObjectParameter("LibJournal", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PreProcLending", agenceParameter, libAgenceParameter, deviseParameter, libDeviseParameter, employeParameter, libEmployeParameter, folioParameter, journalParameter, libJournalParameter, lect, msg, computerNameParameter, languageParameter, cobacIDParameter);
        }
    
        public virtual int PREPROCVIRSPONSPER(string wAgence, string wTypevirper, string wemploye, string wLibEmploye, string wdevise, string libDevise, string wTxnCode, string wJournal, string libJournal, Nullable<int> forcage, string codeLibelle, string libLibelle, string libTrCode, string cpteCltParametre, string virOption, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("wAgence", wAgence) :
                new ObjectParameter("wAgence", typeof(string));
    
            var wTypevirperParameter = wTypevirper != null ?
                new ObjectParameter("wTypevirper", wTypevirper) :
                new ObjectParameter("wTypevirper", typeof(string));
    
            var wemployeParameter = wemploye != null ?
                new ObjectParameter("wemploye", wemploye) :
                new ObjectParameter("wemploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var wdeviseParameter = wdevise != null ?
                new ObjectParameter("wdevise", wdevise) :
                new ObjectParameter("wdevise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var wTxnCodeParameter = wTxnCode != null ?
                new ObjectParameter("wTxnCode", wTxnCode) :
                new ObjectParameter("wTxnCode", typeof(string));
    
            var wJournalParameter = wJournal != null ?
                new ObjectParameter("WJournal", wJournal) :
                new ObjectParameter("WJournal", typeof(string));
    
            var libJournalParameter = libJournal != null ?
                new ObjectParameter("LibJournal", libJournal) :
                new ObjectParameter("LibJournal", typeof(string));
    
            var forcageParameter = forcage.HasValue ?
                new ObjectParameter("Forcage", forcage) :
                new ObjectParameter("Forcage", typeof(int));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var libLibelleParameter = libLibelle != null ?
                new ObjectParameter("LibLibelle", libLibelle) :
                new ObjectParameter("LibLibelle", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var cpteCltParametreParameter = cpteCltParametre != null ?
                new ObjectParameter("CpteCltParametre", cpteCltParametre) :
                new ObjectParameter("CpteCltParametre", typeof(string));
    
            var virOptionParameter = virOption != null ?
                new ObjectParameter("VirOption", virOption) :
                new ObjectParameter("VirOption", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PREPROCVIRSPONSPER", wAgenceParameter, wTypevirperParameter, wemployeParameter, wLibEmployeParameter, wdeviseParameter, libDeviseParameter, wTxnCodeParameter, wJournalParameter, libJournalParameter, forcageParameter, codeLibelleParameter, libLibelleParameter, libTrCodeParameter, cpteCltParametreParameter, virOptionParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int PrivLabels_Delete(Nullable<int> agence, string privCode, string computerName, Nullable<short> employe, string nomEmploye, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var agenceParameter = agence.HasValue ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(int));
    
            var privCodeParameter = privCode != null ?
                new ObjectParameter("PrivCode", privCode) :
                new ObjectParameter("PrivCode", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(short));
    
            var nomEmployeParameter = nomEmploye != null ?
                new ObjectParameter("NomEmploye", nomEmploye) :
                new ObjectParameter("NomEmploye", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PrivLabels_Delete", agenceParameter, privCodeParameter, computerNameParameter, employeParameter, nomEmployeParameter, lect, msg, languageParameter);
        }
    
        public virtual int PrivLabels_Insert(Nullable<int> agence, string privCode, string privName, Nullable<System.DateTime> dateCreation, Nullable<short> employe, string nomEmploye, string englishDescription, string computerName, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var agenceParameter = agence.HasValue ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(int));
    
            var privCodeParameter = privCode != null ?
                new ObjectParameter("PrivCode", privCode) :
                new ObjectParameter("PrivCode", typeof(string));
    
            var privNameParameter = privName != null ?
                new ObjectParameter("PrivName", privName) :
                new ObjectParameter("PrivName", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(short));
    
            var nomEmployeParameter = nomEmploye != null ?
                new ObjectParameter("NomEmploye", nomEmploye) :
                new ObjectParameter("NomEmploye", typeof(string));
    
            var englishDescriptionParameter = englishDescription != null ?
                new ObjectParameter("EnglishDescription", englishDescription) :
                new ObjectParameter("EnglishDescription", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PrivLabels_Insert", agenceParameter, privCodeParameter, privNameParameter, dateCreationParameter, employeParameter, nomEmployeParameter, englishDescriptionParameter, computerNameParameter, lect, msg, languageParameter);
        }
    
        public virtual int PrivLabels_Update(Nullable<int> agence, string privCode, string privName, Nullable<short> employe, string nomEmploye, string englishDescription, string computerName, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var agenceParameter = agence.HasValue ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(int));
    
            var privCodeParameter = privCode != null ?
                new ObjectParameter("PrivCode", privCode) :
                new ObjectParameter("PrivCode", typeof(string));
    
            var privNameParameter = privName != null ?
                new ObjectParameter("PrivName", privName) :
                new ObjectParameter("PrivName", typeof(string));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(short));
    
            var nomEmployeParameter = nomEmploye != null ?
                new ObjectParameter("NomEmploye", nomEmploye) :
                new ObjectParameter("NomEmploye", typeof(string));
    
            var englishDescriptionParameter = englishDescription != null ?
                new ObjectParameter("EnglishDescription", englishDescription) :
                new ObjectParameter("EnglishDescription", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PrivLabels_Update", agenceParameter, privCodeParameter, privNameParameter, employeParameter, nomEmployeParameter, englishDescriptionParameter, computerNameParameter, lect, msg, languageParameter);
        }
    
        public virtual ObjectResult<ProcessBatchSalTransEmp_Result> ProcessBatchSalTransEmp(Nullable<int> wagence, string wLibAgence, Nullable<int> wEmploye, string wLibEmploye, string devise, string libDevise, Nullable<System.DateTime> dateSalaire, string salType, string collectCharges, string wCodeLibelle, string wLibLibelle, string refop, string wLibTrCode, string trCode, string wDescription, string wCompanyNameC, Nullable<int> wFolio, string journal, string libJournal, string wTxnNo, string mavar, ObjectParameter msg, ObjectParameter lect, string computerName, string language)
        {
            var wagenceParameter = wagence.HasValue ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(int));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye.HasValue ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(int));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var dateSalaireParameter = dateSalaire.HasValue ?
                new ObjectParameter("DateSalaire", dateSalaire) :
                new ObjectParameter("DateSalaire", typeof(System.DateTime));
    
            var salTypeParameter = salType != null ?
                new ObjectParameter("SalType", salType) :
                new ObjectParameter("SalType", typeof(string));
    
            var collectChargesParameter = collectCharges != null ?
                new ObjectParameter("CollectCharges", collectCharges) :
                new ObjectParameter("CollectCharges", typeof(string));
    
            var wCodeLibelleParameter = wCodeLibelle != null ?
                new ObjectParameter("WCodeLibelle", wCodeLibelle) :
                new ObjectParameter("WCodeLibelle", typeof(string));
    
            var wLibLibelleParameter = wLibLibelle != null ?
                new ObjectParameter("wLibLibelle", wLibLibelle) :
                new ObjectParameter("wLibLibelle", typeof(string));
    
            var refopParameter = refop != null ?
                new ObjectParameter("Refop", refop) :
                new ObjectParameter("Refop", typeof(string));
    
            var wLibTrCodeParameter = wLibTrCode != null ?
                new ObjectParameter("wLibTrCode", wLibTrCode) :
                new ObjectParameter("wLibTrCode", typeof(string));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var wDescriptionParameter = wDescription != null ?
                new ObjectParameter("WDescription", wDescription) :
                new ObjectParameter("WDescription", typeof(string));
    
            var wCompanyNameCParameter = wCompanyNameC != null ?
                new ObjectParameter("WCompanyNameC", wCompanyNameC) :
                new ObjectParameter("WCompanyNameC", typeof(string));
    
            var wFolioParameter = wFolio.HasValue ?
                new ObjectParameter("wFolio", wFolio) :
                new ObjectParameter("wFolio", typeof(int));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var libJournalParameter = libJournal != null ?
                new ObjectParameter("LibJournal", libJournal) :
                new ObjectParameter("LibJournal", typeof(string));
    
            var wTxnNoParameter = wTxnNo != null ?
                new ObjectParameter("WTxnNo", wTxnNo) :
                new ObjectParameter("WTxnNo", typeof(string));
    
            var mavarParameter = mavar != null ?
                new ObjectParameter("mavar", mavar) :
                new ObjectParameter("mavar", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessBatchSalTransEmp_Result>("ProcessBatchSalTransEmp", wagenceParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, deviseParameter, libDeviseParameter, dateSalaireParameter, salTypeParameter, collectChargesParameter, wCodeLibelleParameter, wLibLibelleParameter, refopParameter, wLibTrCodeParameter, trCodeParameter, wDescriptionParameter, wCompanyNameCParameter, wFolioParameter, journalParameter, libJournalParameter, wTxnNoParameter, mavarParameter, msg, lect, computerNameParameter, languageParameter);
        }
    
        public virtual int ProcessBonCaisseIntMen(string wagence, string wLibAgence, string wEmploye, string wLibEmploye, ObjectParameter msg, ObjectParameter lect, string language)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessBonCaisseIntMen", wagenceParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, msg, lect, languageParameter);
        }
    
        public virtual ObjectResult<ProcessBonCaissePymtEchu_Result> ProcessBonCaissePymtEchu(string wagence, string wLibAgence, string wEmploye, string wLibEmploye, ObjectParameter msg, ObjectParameter lect, string language)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessBonCaissePymtEchu_Result>("ProcessBonCaissePymtEchu", wagenceParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, msg, lect, languageParameter);
        }
    
        public virtual int ProcessDataImport(string ctlBal, string agence, string libAgence, string glAccount, string type, string glKey, string glLibAcct, string employe, string libEmploye, string devise, string description, string libDevise, ObjectParameter errMsg, ObjectParameter lect, string language)
        {
            var ctlBalParameter = ctlBal != null ?
                new ObjectParameter("CtlBal", ctlBal) :
                new ObjectParameter("CtlBal", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var glAccountParameter = glAccount != null ?
                new ObjectParameter("GlAccount", glAccount) :
                new ObjectParameter("GlAccount", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var glKeyParameter = glKey != null ?
                new ObjectParameter("GlKey", glKey) :
                new ObjectParameter("GlKey", typeof(string));
    
            var glLibAcctParameter = glLibAcct != null ?
                new ObjectParameter("GlLibAcct", glLibAcct) :
                new ObjectParameter("GlLibAcct", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessDataImport", ctlBalParameter, agenceParameter, libAgenceParameter, glAccountParameter, typeParameter, glKeyParameter, glLibAcctParameter, employeParameter, libEmployeParameter, deviseParameter, descriptionParameter, libDeviseParameter, errMsg, lect, languageParameter);
        }
    
        public virtual int ProcessDataImportSTO(string agence, string agenceGlAccount, string companyname, string glAccount, string glAccountPay, string glAccountLnPay, string glAccountIntPay, string glKey, string glLibAcct, string employe, string libEmploye, string devise, string description, string libDevise, ObjectParameter errMsg, ObjectParameter lect, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var agenceGlAccountParameter = agenceGlAccount != null ?
                new ObjectParameter("AgenceGlAccount", agenceGlAccount) :
                new ObjectParameter("AgenceGlAccount", typeof(string));
    
            var companynameParameter = companyname != null ?
                new ObjectParameter("companyname", companyname) :
                new ObjectParameter("companyname", typeof(string));
    
            var glAccountParameter = glAccount != null ?
                new ObjectParameter("GlAccount", glAccount) :
                new ObjectParameter("GlAccount", typeof(string));
    
            var glAccountPayParameter = glAccountPay != null ?
                new ObjectParameter("GlAccountPay", glAccountPay) :
                new ObjectParameter("GlAccountPay", typeof(string));
    
            var glAccountLnPayParameter = glAccountLnPay != null ?
                new ObjectParameter("GlAccountLnPay", glAccountLnPay) :
                new ObjectParameter("GlAccountLnPay", typeof(string));
    
            var glAccountIntPayParameter = glAccountIntPay != null ?
                new ObjectParameter("GlAccountIntPay", glAccountIntPay) :
                new ObjectParameter("GlAccountIntPay", typeof(string));
    
            var glKeyParameter = glKey != null ?
                new ObjectParameter("GlKey", glKey) :
                new ObjectParameter("GlKey", typeof(string));
    
            var glLibAcctParameter = glLibAcct != null ?
                new ObjectParameter("GlLibAcct", glLibAcct) :
                new ObjectParameter("GlLibAcct", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessDataImportSTO", agenceParameter, agenceGlAccountParameter, companynameParameter, glAccountParameter, glAccountPayParameter, glAccountLnPayParameter, glAccountIntPayParameter, glKeyParameter, glLibAcctParameter, employeParameter, libEmployeParameter, deviseParameter, descriptionParameter, libDeviseParameter, errMsg, lect, computerNameParameter, languageParameter);
        }
    
        public virtual int ProcessDTIntMen(string wagence, string wLibAgence, string wEmploye, string wLibEmploye, ObjectParameter msg, ObjectParameter lect, string language)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessDTIntMen", wagenceParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, msg, lect, languageParameter);
        }
    
        public virtual ObjectResult<ProcessDTPymtAnticipation_ST_Result> ProcessDTPymtAnticipation_ST(string wagence, string wLibAgence, string wEmploye, string wLibEmploye, ObjectParameter msg, string numeroContrat, ObjectParameter lect, string language)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessDTPymtAnticipation_ST_Result>("ProcessDTPymtAnticipation_ST", wagenceParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, msg, numeroContratParameter, lect, languageParameter);
        }
    
        public virtual ObjectResult<ProcessDTPymtEchu_Result> ProcessDTPymtEchu(string wagence, string wLibAgence, string wEmploye, string wLibEmploye, ObjectParameter msg, ObjectParameter lect, string language)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessDTPymtEchu_Result>("ProcessDTPymtEchu", wagenceParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, msg, lect, languageParameter);
        }
    
        public virtual int ProcessManualCrInterest(string libAgence, string glAccount, string glKey, string glLibAcct, string employe, string libEmploye, string devise, string libDevise, ObjectParameter errMsg, ObjectParameter lect, string language)
        {
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var glAccountParameter = glAccount != null ?
                new ObjectParameter("GlAccount", glAccount) :
                new ObjectParameter("GlAccount", typeof(string));
    
            var glKeyParameter = glKey != null ?
                new ObjectParameter("GlKey", glKey) :
                new ObjectParameter("GlKey", typeof(string));
    
            var glLibAcctParameter = glLibAcct != null ?
                new ObjectParameter("GlLibAcct", glLibAcct) :
                new ObjectParameter("GlLibAcct", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessManualCrInterest", libAgenceParameter, glAccountParameter, glKeyParameter, glLibAcctParameter, employeParameter, libEmployeParameter, deviseParameter, libDeviseParameter, errMsg, lect, languageParameter);
        }
    
        public virtual int ProcessManualSTO(string agence, string libAgence, string companyname, string employe, string libEmploye, string devise, string description, string libDevise, ObjectParameter errMsg, ObjectParameter lect, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var companynameParameter = companyname != null ?
                new ObjectParameter("companyname", companyname) :
                new ObjectParameter("companyname", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessManualSTO", agenceParameter, libAgenceParameter, companynameParameter, employeParameter, libEmployeParameter, deviseParameter, descriptionParameter, libDeviseParameter, errMsg, lect, computerNameParameter, languageParameter);
        }
    
        public virtual int ProcessPayrollAcct(Nullable<int> wagence, string wLibAgence, Nullable<int> wEmploye, string wLibEmploye, string devise, string libDevise, Nullable<System.DateTime> dateSalaire, string wCodeLibelle, string wLibLibelle, string refop, Nullable<int> wFolio, string journal, string libJournal, string wTxnNo, ObjectParameter msg, ObjectParameter lect, string computerName, string language)
        {
            var wagenceParameter = wagence.HasValue ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(int));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye.HasValue ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(int));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var dateSalaireParameter = dateSalaire.HasValue ?
                new ObjectParameter("DateSalaire", dateSalaire) :
                new ObjectParameter("DateSalaire", typeof(System.DateTime));
    
            var wCodeLibelleParameter = wCodeLibelle != null ?
                new ObjectParameter("WCodeLibelle", wCodeLibelle) :
                new ObjectParameter("WCodeLibelle", typeof(string));
    
            var wLibLibelleParameter = wLibLibelle != null ?
                new ObjectParameter("wLibLibelle", wLibLibelle) :
                new ObjectParameter("wLibLibelle", typeof(string));
    
            var refopParameter = refop != null ?
                new ObjectParameter("Refop", refop) :
                new ObjectParameter("Refop", typeof(string));
    
            var wFolioParameter = wFolio.HasValue ?
                new ObjectParameter("wFolio", wFolio) :
                new ObjectParameter("wFolio", typeof(int));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var libJournalParameter = libJournal != null ?
                new ObjectParameter("LibJournal", libJournal) :
                new ObjectParameter("LibJournal", typeof(string));
    
            var wTxnNoParameter = wTxnNo != null ?
                new ObjectParameter("WTxnNo", wTxnNo) :
                new ObjectParameter("WTxnNo", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessPayrollAcct", wagenceParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, deviseParameter, libDeviseParameter, dateSalaireParameter, wCodeLibelleParameter, wLibLibelleParameter, refopParameter, wFolioParameter, journalParameter, libJournalParameter, wTxnNoParameter, msg, lect, computerNameParameter, languageParameter);
        }
    
        public virtual int PROCPRODUCTTNX(string wAgence, string wLibAgence, string svOperationType, string journal, string wdevise, string wLibDevise, string svCodeParaInt, string svCodeParaTrType, string journalInt, string sPCpteCol, string sPCleCol, string sPLibCpteCol, ObjectParameter lect, ObjectParameter msg, string computerName, string employe, string language)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("wAgence", wAgence) :
                new ObjectParameter("wAgence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var svOperationTypeParameter = svOperationType != null ?
                new ObjectParameter("SvOperationType", svOperationType) :
                new ObjectParameter("SvOperationType", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var wdeviseParameter = wdevise != null ?
                new ObjectParameter("wdevise", wdevise) :
                new ObjectParameter("wdevise", typeof(string));
    
            var wLibDeviseParameter = wLibDevise != null ?
                new ObjectParameter("WLibDevise", wLibDevise) :
                new ObjectParameter("WLibDevise", typeof(string));
    
            var svCodeParaIntParameter = svCodeParaInt != null ?
                new ObjectParameter("SvCodeParaInt", svCodeParaInt) :
                new ObjectParameter("SvCodeParaInt", typeof(string));
    
            var svCodeParaTrTypeParameter = svCodeParaTrType != null ?
                new ObjectParameter("SvCodeParaTrType", svCodeParaTrType) :
                new ObjectParameter("SvCodeParaTrType", typeof(string));
    
            var journalIntParameter = journalInt != null ?
                new ObjectParameter("JournalInt", journalInt) :
                new ObjectParameter("JournalInt", typeof(string));
    
            var sPCpteColParameter = sPCpteCol != null ?
                new ObjectParameter("SPCpteCol", sPCpteCol) :
                new ObjectParameter("SPCpteCol", typeof(string));
    
            var sPCleColParameter = sPCleCol != null ?
                new ObjectParameter("SPCleCol", sPCleCol) :
                new ObjectParameter("SPCleCol", typeof(string));
    
            var sPLibCpteColParameter = sPLibCpteCol != null ?
                new ObjectParameter("SPLibCpteCol", sPLibCpteCol) :
                new ObjectParameter("SPLibCpteCol", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROCPRODUCTTNX", wAgenceParameter, wLibAgenceParameter, svOperationTypeParameter, journalParameter, wdeviseParameter, wLibDeviseParameter, svCodeParaIntParameter, svCodeParaTrTypeParameter, journalIntParameter, sPCpteColParameter, sPCleColParameter, sPLibCpteColParameter, lect, msg, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int PROCRETSMSIBR(Nullable<int> wAgence, string wLibAgence, string journal, string libJournal, string wdevise, string wLibDevise, Nullable<int> wEmploye, string wLibEmploye, Nullable<System.DateTime> serverDate, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var wAgenceParameter = wAgence.HasValue ?
                new ObjectParameter("wAgence", wAgence) :
                new ObjectParameter("wAgence", typeof(int));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var libJournalParameter = libJournal != null ?
                new ObjectParameter("LibJournal", libJournal) :
                new ObjectParameter("LibJournal", typeof(string));
    
            var wdeviseParameter = wdevise != null ?
                new ObjectParameter("wdevise", wdevise) :
                new ObjectParameter("wdevise", typeof(string));
    
            var wLibDeviseParameter = wLibDevise != null ?
                new ObjectParameter("WLibDevise", wLibDevise) :
                new ObjectParameter("WLibDevise", typeof(string));
    
            var wEmployeParameter = wEmploye.HasValue ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(int));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROCRETSMSIBR", wAgenceParameter, wLibAgenceParameter, journalParameter, libJournalParameter, wdeviseParameter, wLibDeviseParameter, wEmployeParameter, wLibEmployeParameter, serverDateParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<Product_Delete_Result> Product_Delete(string agence, Nullable<short> productCode, string employe, string libEmploye, string computerName, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var productCodeParameter = productCode.HasValue ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(short));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product_Delete_Result>("Product_Delete", agenceParameter, productCodeParameter, employeParameter, libEmployeParameter, computerNameParameter, lect, languageParameter);
        }
    
        public virtual ObjectResult<Product_Filter_Result> Product_Filter(Nullable<short> intFilterMode, Nullable<short> productCode, ObjectParameter countfield)
        {
            var intFilterModeParameter = intFilterMode.HasValue ?
                new ObjectParameter("IntFilterMode", intFilterMode) :
                new ObjectParameter("IntFilterMode", typeof(short));
    
            var productCodeParameter = productCode.HasValue ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product_Filter_Result>("Product_Filter", intFilterModeParameter, productCodeParameter, countfield);
        }
    
        public virtual ObjectResult<Product_Insert_Result> Product_Insert(string agence, Nullable<short> productCode, string libProduct, string productType, string loanType, string calint, string visdep, string vispersocheck, string visibCredit, string caldatevaltype, string blockdatetype, string decouvert, string opdiver, string visRet, string viscracc, string abonementsms, string dbintpostmeth, Nullable<System.DateTime> dateCreation, string employe, string libEmploye, Nullable<System.DateTime> dateTransfert, string computerName, string acceptdbbal, string applyStopInt, string directGLPost, string applyDormantStatus, string applyStopPayment, string validateTransactions, string applyReservedInterest, string abonnementEbanking, Nullable<int> duration, string ordinaryWithdrawChg, string saturdayWithdrawChg, string tPartyWithdrawChg, string counterChequeCharge, string chequeCharges, string depositCharge, string fraisExceptionnel, string exceedNoTrns, string exceedMaxAmount, Nullable<double> maxNumTrnsPerMonth, Nullable<double> maxAmntTrnsPerMonth, Nullable<double> tvaRate, string loanTransit, string memberProduct, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var productCodeParameter = productCode.HasValue ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(short));
    
            var libProductParameter = libProduct != null ?
                new ObjectParameter("LibProduct", libProduct) :
                new ObjectParameter("LibProduct", typeof(string));
    
            var productTypeParameter = productType != null ?
                new ObjectParameter("ProductType", productType) :
                new ObjectParameter("ProductType", typeof(string));
    
            var loanTypeParameter = loanType != null ?
                new ObjectParameter("LoanType", loanType) :
                new ObjectParameter("LoanType", typeof(string));
    
            var calintParameter = calint != null ?
                new ObjectParameter("calint", calint) :
                new ObjectParameter("calint", typeof(string));
    
            var visdepParameter = visdep != null ?
                new ObjectParameter("visdep", visdep) :
                new ObjectParameter("visdep", typeof(string));
    
            var vispersocheckParameter = vispersocheck != null ?
                new ObjectParameter("vispersocheck", vispersocheck) :
                new ObjectParameter("vispersocheck", typeof(string));
    
            var visibCreditParameter = visibCredit != null ?
                new ObjectParameter("visibCredit", visibCredit) :
                new ObjectParameter("visibCredit", typeof(string));
    
            var caldatevaltypeParameter = caldatevaltype != null ?
                new ObjectParameter("caldatevaltype", caldatevaltype) :
                new ObjectParameter("caldatevaltype", typeof(string));
    
            var blockdatetypeParameter = blockdatetype != null ?
                new ObjectParameter("Blockdatetype", blockdatetype) :
                new ObjectParameter("Blockdatetype", typeof(string));
    
            var decouvertParameter = decouvert != null ?
                new ObjectParameter("decouvert", decouvert) :
                new ObjectParameter("decouvert", typeof(string));
    
            var opdiverParameter = opdiver != null ?
                new ObjectParameter("opdiver", opdiver) :
                new ObjectParameter("opdiver", typeof(string));
    
            var visRetParameter = visRet != null ?
                new ObjectParameter("VisRet", visRet) :
                new ObjectParameter("VisRet", typeof(string));
    
            var viscraccParameter = viscracc != null ?
                new ObjectParameter("viscracc", viscracc) :
                new ObjectParameter("viscracc", typeof(string));
    
            var abonementsmsParameter = abonementsms != null ?
                new ObjectParameter("abonementsms", abonementsms) :
                new ObjectParameter("abonementsms", typeof(string));
    
            var dbintpostmethParameter = dbintpostmeth != null ?
                new ObjectParameter("dbintpostmeth", dbintpostmeth) :
                new ObjectParameter("dbintpostmeth", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var acceptdbbalParameter = acceptdbbal != null ?
                new ObjectParameter("Acceptdbbal", acceptdbbal) :
                new ObjectParameter("Acceptdbbal", typeof(string));
    
            var applyStopIntParameter = applyStopInt != null ?
                new ObjectParameter("ApplyStopInt", applyStopInt) :
                new ObjectParameter("ApplyStopInt", typeof(string));
    
            var directGLPostParameter = directGLPost != null ?
                new ObjectParameter("DirectGLPost", directGLPost) :
                new ObjectParameter("DirectGLPost", typeof(string));
    
            var applyDormantStatusParameter = applyDormantStatus != null ?
                new ObjectParameter("ApplyDormantStatus", applyDormantStatus) :
                new ObjectParameter("ApplyDormantStatus", typeof(string));
    
            var applyStopPaymentParameter = applyStopPayment != null ?
                new ObjectParameter("ApplyStopPayment", applyStopPayment) :
                new ObjectParameter("ApplyStopPayment", typeof(string));
    
            var validateTransactionsParameter = validateTransactions != null ?
                new ObjectParameter("ValidateTransactions", validateTransactions) :
                new ObjectParameter("ValidateTransactions", typeof(string));
    
            var applyReservedInterestParameter = applyReservedInterest != null ?
                new ObjectParameter("ApplyReservedInterest", applyReservedInterest) :
                new ObjectParameter("ApplyReservedInterest", typeof(string));
    
            var abonnementEbankingParameter = abonnementEbanking != null ?
                new ObjectParameter("AbonnementEbanking", abonnementEbanking) :
                new ObjectParameter("AbonnementEbanking", typeof(string));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(int));
    
            var ordinaryWithdrawChgParameter = ordinaryWithdrawChg != null ?
                new ObjectParameter("OrdinaryWithdrawChg", ordinaryWithdrawChg) :
                new ObjectParameter("OrdinaryWithdrawChg", typeof(string));
    
            var saturdayWithdrawChgParameter = saturdayWithdrawChg != null ?
                new ObjectParameter("SaturdayWithdrawChg", saturdayWithdrawChg) :
                new ObjectParameter("SaturdayWithdrawChg", typeof(string));
    
            var tPartyWithdrawChgParameter = tPartyWithdrawChg != null ?
                new ObjectParameter("TPartyWithdrawChg", tPartyWithdrawChg) :
                new ObjectParameter("TPartyWithdrawChg", typeof(string));
    
            var counterChequeChargeParameter = counterChequeCharge != null ?
                new ObjectParameter("CounterChequeCharge", counterChequeCharge) :
                new ObjectParameter("CounterChequeCharge", typeof(string));
    
            var chequeChargesParameter = chequeCharges != null ?
                new ObjectParameter("ChequeCharges", chequeCharges) :
                new ObjectParameter("ChequeCharges", typeof(string));
    
            var depositChargeParameter = depositCharge != null ?
                new ObjectParameter("DepositCharge", depositCharge) :
                new ObjectParameter("DepositCharge", typeof(string));
    
            var fraisExceptionnelParameter = fraisExceptionnel != null ?
                new ObjectParameter("FraisExceptionnel", fraisExceptionnel) :
                new ObjectParameter("FraisExceptionnel", typeof(string));
    
            var exceedNoTrnsParameter = exceedNoTrns != null ?
                new ObjectParameter("ExceedNoTrns", exceedNoTrns) :
                new ObjectParameter("ExceedNoTrns", typeof(string));
    
            var exceedMaxAmountParameter = exceedMaxAmount != null ?
                new ObjectParameter("ExceedMaxAmount", exceedMaxAmount) :
                new ObjectParameter("ExceedMaxAmount", typeof(string));
    
            var maxNumTrnsPerMonthParameter = maxNumTrnsPerMonth.HasValue ?
                new ObjectParameter("MaxNumTrnsPerMonth", maxNumTrnsPerMonth) :
                new ObjectParameter("MaxNumTrnsPerMonth", typeof(double));
    
            var maxAmntTrnsPerMonthParameter = maxAmntTrnsPerMonth.HasValue ?
                new ObjectParameter("MaxAmntTrnsPerMonth", maxAmntTrnsPerMonth) :
                new ObjectParameter("MaxAmntTrnsPerMonth", typeof(double));
    
            var tvaRateParameter = tvaRate.HasValue ?
                new ObjectParameter("TvaRate", tvaRate) :
                new ObjectParameter("TvaRate", typeof(double));
    
            var loanTransitParameter = loanTransit != null ?
                new ObjectParameter("LoanTransit", loanTransit) :
                new ObjectParameter("LoanTransit", typeof(string));
    
            var memberProductParameter = memberProduct != null ?
                new ObjectParameter("MemberProduct", memberProduct) :
                new ObjectParameter("MemberProduct", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product_Insert_Result>("Product_Insert", agenceParameter, productCodeParameter, libProductParameter, productTypeParameter, loanTypeParameter, calintParameter, visdepParameter, vispersocheckParameter, visibCreditParameter, caldatevaltypeParameter, blockdatetypeParameter, decouvertParameter, opdiverParameter, visRetParameter, viscraccParameter, abonementsmsParameter, dbintpostmethParameter, dateCreationParameter, employeParameter, libEmployeParameter, dateTransfertParameter, computerNameParameter, acceptdbbalParameter, applyStopIntParameter, directGLPostParameter, applyDormantStatusParameter, applyStopPaymentParameter, validateTransactionsParameter, applyReservedInterestParameter, abonnementEbankingParameter, durationParameter, ordinaryWithdrawChgParameter, saturdayWithdrawChgParameter, tPartyWithdrawChgParameter, counterChequeChargeParameter, chequeChargesParameter, depositChargeParameter, fraisExceptionnelParameter, exceedNoTrnsParameter, exceedMaxAmountParameter, maxNumTrnsPerMonthParameter, maxAmntTrnsPerMonthParameter, tvaRateParameter, loanTransitParameter, memberProductParameter, lect, languageParameter);
        }
    
        public virtual ObjectResult<Product_Update_Result> Product_Update(string agence, Nullable<short> productCode, string libProduct, string productType, string loanType, string calint, string visdep, string vispersocheck, string visibCredit, string caldatevaltype, string blockdatetype, string decouvert, string opdiver, string visRet, string viscracc, string abonementsms, string dbintpostmeth, Nullable<System.DateTime> dateCreation, string employe, string libEmploye, Nullable<System.DateTime> dateTransfert, string computerName, string acceptdbbal, string applyStopInt, string directGLPost, string applyDormantStatus, string applyStopPayment, string validateTransactions, string applyReservedInterest, string abonnementEbanking, Nullable<int> duration, string ordinaryWithdrawChg, string saturdayWithdrawChg, string tPartyWithdrawChg, string counterChequeCharge, string chequeCharges, string depositCharge, string fraisExceptionnel, string exceedNoTrns, string exceedMaxAmount, Nullable<double> maxNumTrnsPerMonth, Nullable<double> maxAmntTrnsPerMonth, Nullable<double> tvaRate, string loanTransit, string memberProduct, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var productCodeParameter = productCode.HasValue ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(short));
    
            var libProductParameter = libProduct != null ?
                new ObjectParameter("LibProduct", libProduct) :
                new ObjectParameter("LibProduct", typeof(string));
    
            var productTypeParameter = productType != null ?
                new ObjectParameter("ProductType", productType) :
                new ObjectParameter("ProductType", typeof(string));
    
            var loanTypeParameter = loanType != null ?
                new ObjectParameter("LoanType", loanType) :
                new ObjectParameter("LoanType", typeof(string));
    
            var calintParameter = calint != null ?
                new ObjectParameter("calint", calint) :
                new ObjectParameter("calint", typeof(string));
    
            var visdepParameter = visdep != null ?
                new ObjectParameter("visdep", visdep) :
                new ObjectParameter("visdep", typeof(string));
    
            var vispersocheckParameter = vispersocheck != null ?
                new ObjectParameter("vispersocheck", vispersocheck) :
                new ObjectParameter("vispersocheck", typeof(string));
    
            var visibCreditParameter = visibCredit != null ?
                new ObjectParameter("visibCredit", visibCredit) :
                new ObjectParameter("visibCredit", typeof(string));
    
            var caldatevaltypeParameter = caldatevaltype != null ?
                new ObjectParameter("caldatevaltype", caldatevaltype) :
                new ObjectParameter("caldatevaltype", typeof(string));
    
            var blockdatetypeParameter = blockdatetype != null ?
                new ObjectParameter("Blockdatetype", blockdatetype) :
                new ObjectParameter("Blockdatetype", typeof(string));
    
            var decouvertParameter = decouvert != null ?
                new ObjectParameter("decouvert", decouvert) :
                new ObjectParameter("decouvert", typeof(string));
    
            var opdiverParameter = opdiver != null ?
                new ObjectParameter("opdiver", opdiver) :
                new ObjectParameter("opdiver", typeof(string));
    
            var visRetParameter = visRet != null ?
                new ObjectParameter("VisRet", visRet) :
                new ObjectParameter("VisRet", typeof(string));
    
            var viscraccParameter = viscracc != null ?
                new ObjectParameter("viscracc", viscracc) :
                new ObjectParameter("viscracc", typeof(string));
    
            var abonementsmsParameter = abonementsms != null ?
                new ObjectParameter("abonementsms", abonementsms) :
                new ObjectParameter("abonementsms", typeof(string));
    
            var dbintpostmethParameter = dbintpostmeth != null ?
                new ObjectParameter("dbintpostmeth", dbintpostmeth) :
                new ObjectParameter("dbintpostmeth", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var acceptdbbalParameter = acceptdbbal != null ?
                new ObjectParameter("Acceptdbbal", acceptdbbal) :
                new ObjectParameter("Acceptdbbal", typeof(string));
    
            var applyStopIntParameter = applyStopInt != null ?
                new ObjectParameter("ApplyStopInt", applyStopInt) :
                new ObjectParameter("ApplyStopInt", typeof(string));
    
            var directGLPostParameter = directGLPost != null ?
                new ObjectParameter("DirectGLPost", directGLPost) :
                new ObjectParameter("DirectGLPost", typeof(string));
    
            var applyDormantStatusParameter = applyDormantStatus != null ?
                new ObjectParameter("ApplyDormantStatus", applyDormantStatus) :
                new ObjectParameter("ApplyDormantStatus", typeof(string));
    
            var applyStopPaymentParameter = applyStopPayment != null ?
                new ObjectParameter("ApplyStopPayment", applyStopPayment) :
                new ObjectParameter("ApplyStopPayment", typeof(string));
    
            var validateTransactionsParameter = validateTransactions != null ?
                new ObjectParameter("ValidateTransactions", validateTransactions) :
                new ObjectParameter("ValidateTransactions", typeof(string));
    
            var applyReservedInterestParameter = applyReservedInterest != null ?
                new ObjectParameter("ApplyReservedInterest", applyReservedInterest) :
                new ObjectParameter("ApplyReservedInterest", typeof(string));
    
            var abonnementEbankingParameter = abonnementEbanking != null ?
                new ObjectParameter("AbonnementEbanking", abonnementEbanking) :
                new ObjectParameter("AbonnementEbanking", typeof(string));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(int));
    
            var ordinaryWithdrawChgParameter = ordinaryWithdrawChg != null ?
                new ObjectParameter("OrdinaryWithdrawChg", ordinaryWithdrawChg) :
                new ObjectParameter("OrdinaryWithdrawChg", typeof(string));
    
            var saturdayWithdrawChgParameter = saturdayWithdrawChg != null ?
                new ObjectParameter("SaturdayWithdrawChg", saturdayWithdrawChg) :
                new ObjectParameter("SaturdayWithdrawChg", typeof(string));
    
            var tPartyWithdrawChgParameter = tPartyWithdrawChg != null ?
                new ObjectParameter("TPartyWithdrawChg", tPartyWithdrawChg) :
                new ObjectParameter("TPartyWithdrawChg", typeof(string));
    
            var counterChequeChargeParameter = counterChequeCharge != null ?
                new ObjectParameter("CounterChequeCharge", counterChequeCharge) :
                new ObjectParameter("CounterChequeCharge", typeof(string));
    
            var chequeChargesParameter = chequeCharges != null ?
                new ObjectParameter("ChequeCharges", chequeCharges) :
                new ObjectParameter("ChequeCharges", typeof(string));
    
            var depositChargeParameter = depositCharge != null ?
                new ObjectParameter("DepositCharge", depositCharge) :
                new ObjectParameter("DepositCharge", typeof(string));
    
            var fraisExceptionnelParameter = fraisExceptionnel != null ?
                new ObjectParameter("FraisExceptionnel", fraisExceptionnel) :
                new ObjectParameter("FraisExceptionnel", typeof(string));
    
            var exceedNoTrnsParameter = exceedNoTrns != null ?
                new ObjectParameter("ExceedNoTrns", exceedNoTrns) :
                new ObjectParameter("ExceedNoTrns", typeof(string));
    
            var exceedMaxAmountParameter = exceedMaxAmount != null ?
                new ObjectParameter("ExceedMaxAmount", exceedMaxAmount) :
                new ObjectParameter("ExceedMaxAmount", typeof(string));
    
            var maxNumTrnsPerMonthParameter = maxNumTrnsPerMonth.HasValue ?
                new ObjectParameter("MaxNumTrnsPerMonth", maxNumTrnsPerMonth) :
                new ObjectParameter("MaxNumTrnsPerMonth", typeof(double));
    
            var maxAmntTrnsPerMonthParameter = maxAmntTrnsPerMonth.HasValue ?
                new ObjectParameter("MaxAmntTrnsPerMonth", maxAmntTrnsPerMonth) :
                new ObjectParameter("MaxAmntTrnsPerMonth", typeof(double));
    
            var tvaRateParameter = tvaRate.HasValue ?
                new ObjectParameter("TvaRate", tvaRate) :
                new ObjectParameter("TvaRate", typeof(double));
    
            var loanTransitParameter = loanTransit != null ?
                new ObjectParameter("LoanTransit", loanTransit) :
                new ObjectParameter("LoanTransit", typeof(string));
    
            var memberProductParameter = memberProduct != null ?
                new ObjectParameter("MemberProduct", memberProduct) :
                new ObjectParameter("MemberProduct", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product_Update_Result>("Product_Update", agenceParameter, productCodeParameter, libProductParameter, productTypeParameter, loanTypeParameter, calintParameter, visdepParameter, vispersocheckParameter, visibCreditParameter, caldatevaltypeParameter, blockdatetypeParameter, decouvertParameter, opdiverParameter, visRetParameter, viscraccParameter, abonementsmsParameter, dbintpostmethParameter, dateCreationParameter, employeParameter, libEmployeParameter, dateTransfertParameter, computerNameParameter, acceptdbbalParameter, applyStopIntParameter, directGLPostParameter, applyDormantStatusParameter, applyStopPaymentParameter, validateTransactionsParameter, applyReservedInterestParameter, abonnementEbankingParameter, durationParameter, ordinaryWithdrawChgParameter, saturdayWithdrawChgParameter, tPartyWithdrawChgParameter, counterChequeChargeParameter, chequeChargesParameter, depositChargeParameter, fraisExceptionnelParameter, exceedNoTrnsParameter, exceedMaxAmountParameter, maxNumTrnsPerMonthParameter, maxAmntTrnsPerMonthParameter, tvaRateParameter, loanTransitParameter, memberProductParameter, lect, languageParameter);
        }
    
        public virtual ObjectResult<ProductAttribute_Delete_Result> ProductAttribute_Delete(string agence, Nullable<int> productCode, string catClient, string employe, string libEmploye, string computerName, string customerType, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var productCodeParameter = productCode.HasValue ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(int));
    
            var catClientParameter = catClient != null ?
                new ObjectParameter("CatClient", catClient) :
                new ObjectParameter("CatClient", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var customerTypeParameter = customerType != null ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductAttribute_Delete_Result>("ProductAttribute_Delete", agenceParameter, productCodeParameter, catClientParameter, employeParameter, libEmployeParameter, computerNameParameter, customerTypeParameter, lect, languageParameter);
        }
    
        public virtual ObjectResult<ProductAttribute_Filter_Result> ProductAttribute_Filter(Nullable<short> intFilterMode, Nullable<short> productCode, string catClient, string customerType, ObjectParameter countfield)
        {
            var intFilterModeParameter = intFilterMode.HasValue ?
                new ObjectParameter("IntFilterMode", intFilterMode) :
                new ObjectParameter("IntFilterMode", typeof(short));
    
            var productCodeParameter = productCode.HasValue ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(short));
    
            var catClientParameter = catClient != null ?
                new ObjectParameter("CatClient", catClient) :
                new ObjectParameter("CatClient", typeof(string));
    
            var customerTypeParameter = customerType != null ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductAttribute_Filter_Result>("ProductAttribute_Filter", intFilterModeParameter, productCodeParameter, catClientParameter, customerTypeParameter, countfield);
        }
    
        public virtual ObjectResult<ProductAttribute_Insert_Result> ProductAttribute_Insert(string agence, Nullable<int> productCode, string catClient, string customerType, string libProduct, string libCatClient, string cpteColClt, string cleColClt, string libCpteColClt, string cpteAttente, string cleCpteAttente, string libCpteAttente, string cpteImpaye, string cleCpteImpaye, string libCpteImpaye, string cpteContentieux, string cleCpteContentieux, string libCpteContentieux, Nullable<double> sMinBal, string debitInterestMethod, Nullable<System.DateTime> dateTransfert, Nullable<System.DateTime> dateCreation, string employe, string libEmploye, string computerName, string prodAttrib, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var productCodeParameter = productCode.HasValue ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(int));
    
            var catClientParameter = catClient != null ?
                new ObjectParameter("CatClient", catClient) :
                new ObjectParameter("CatClient", typeof(string));
    
            var customerTypeParameter = customerType != null ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(string));
    
            var libProductParameter = libProduct != null ?
                new ObjectParameter("LibProduct", libProduct) :
                new ObjectParameter("LibProduct", typeof(string));
    
            var libCatClientParameter = libCatClient != null ?
                new ObjectParameter("LibCatClient", libCatClient) :
                new ObjectParameter("LibCatClient", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var cpteAttenteParameter = cpteAttente != null ?
                new ObjectParameter("CpteAttente", cpteAttente) :
                new ObjectParameter("CpteAttente", typeof(string));
    
            var cleCpteAttenteParameter = cleCpteAttente != null ?
                new ObjectParameter("CleCpteAttente", cleCpteAttente) :
                new ObjectParameter("CleCpteAttente", typeof(string));
    
            var libCpteAttenteParameter = libCpteAttente != null ?
                new ObjectParameter("LibCpteAttente", libCpteAttente) :
                new ObjectParameter("LibCpteAttente", typeof(string));
    
            var cpteImpayeParameter = cpteImpaye != null ?
                new ObjectParameter("CpteImpaye", cpteImpaye) :
                new ObjectParameter("CpteImpaye", typeof(string));
    
            var cleCpteImpayeParameter = cleCpteImpaye != null ?
                new ObjectParameter("CleCpteImpaye", cleCpteImpaye) :
                new ObjectParameter("CleCpteImpaye", typeof(string));
    
            var libCpteImpayeParameter = libCpteImpaye != null ?
                new ObjectParameter("LibCpteImpaye", libCpteImpaye) :
                new ObjectParameter("LibCpteImpaye", typeof(string));
    
            var cpteContentieuxParameter = cpteContentieux != null ?
                new ObjectParameter("CpteContentieux", cpteContentieux) :
                new ObjectParameter("CpteContentieux", typeof(string));
    
            var cleCpteContentieuxParameter = cleCpteContentieux != null ?
                new ObjectParameter("CleCpteContentieux", cleCpteContentieux) :
                new ObjectParameter("CleCpteContentieux", typeof(string));
    
            var libCpteContentieuxParameter = libCpteContentieux != null ?
                new ObjectParameter("LibCpteContentieux", libCpteContentieux) :
                new ObjectParameter("LibCpteContentieux", typeof(string));
    
            var sMinBalParameter = sMinBal.HasValue ?
                new ObjectParameter("SMinBal", sMinBal) :
                new ObjectParameter("SMinBal", typeof(double));
    
            var debitInterestMethodParameter = debitInterestMethod != null ?
                new ObjectParameter("DebitInterestMethod", debitInterestMethod) :
                new ObjectParameter("DebitInterestMethod", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var prodAttribParameter = prodAttrib != null ?
                new ObjectParameter("ProdAttrib", prodAttrib) :
                new ObjectParameter("ProdAttrib", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductAttribute_Insert_Result>("ProductAttribute_Insert", agenceParameter, productCodeParameter, catClientParameter, customerTypeParameter, libProductParameter, libCatClientParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, cpteAttenteParameter, cleCpteAttenteParameter, libCpteAttenteParameter, cpteImpayeParameter, cleCpteImpayeParameter, libCpteImpayeParameter, cpteContentieuxParameter, cleCpteContentieuxParameter, libCpteContentieuxParameter, sMinBalParameter, debitInterestMethodParameter, dateTransfertParameter, dateCreationParameter, employeParameter, libEmployeParameter, computerNameParameter, prodAttribParameter, lect, languageParameter);
        }
    
        public virtual ObjectResult<ProductAttribute_Update_Result> ProductAttribute_Update(string agence, Nullable<int> productCode, string catClient, string customerType, string libProduct, string libCatClient, string cpteColClt, string cleColClt, string libCpteColClt, string cpteAttente, string cleCpteAttente, string libCpteAttente, string cpteImpaye, string cleCpteImpaye, string libCpteImpaye, string cpteContentieux, string cleCpteContentieux, string libCpteContentieux, Nullable<double> sMinBal, string debitInterestMethod, Nullable<System.DateTime> dateTransfert, Nullable<System.DateTime> dateCreation, string employe, string libEmploye, string computerName, string prodAttrib, ObjectParameter lect, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var productCodeParameter = productCode.HasValue ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(int));
    
            var catClientParameter = catClient != null ?
                new ObjectParameter("CatClient", catClient) :
                new ObjectParameter("CatClient", typeof(string));
    
            var customerTypeParameter = customerType != null ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(string));
    
            var libProductParameter = libProduct != null ?
                new ObjectParameter("LibProduct", libProduct) :
                new ObjectParameter("LibProduct", typeof(string));
    
            var libCatClientParameter = libCatClient != null ?
                new ObjectParameter("LibCatClient", libCatClient) :
                new ObjectParameter("LibCatClient", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var cpteAttenteParameter = cpteAttente != null ?
                new ObjectParameter("CpteAttente", cpteAttente) :
                new ObjectParameter("CpteAttente", typeof(string));
    
            var cleCpteAttenteParameter = cleCpteAttente != null ?
                new ObjectParameter("CleCpteAttente", cleCpteAttente) :
                new ObjectParameter("CleCpteAttente", typeof(string));
    
            var libCpteAttenteParameter = libCpteAttente != null ?
                new ObjectParameter("LibCpteAttente", libCpteAttente) :
                new ObjectParameter("LibCpteAttente", typeof(string));
    
            var cpteImpayeParameter = cpteImpaye != null ?
                new ObjectParameter("CpteImpaye", cpteImpaye) :
                new ObjectParameter("CpteImpaye", typeof(string));
    
            var cleCpteImpayeParameter = cleCpteImpaye != null ?
                new ObjectParameter("CleCpteImpaye", cleCpteImpaye) :
                new ObjectParameter("CleCpteImpaye", typeof(string));
    
            var libCpteImpayeParameter = libCpteImpaye != null ?
                new ObjectParameter("LibCpteImpaye", libCpteImpaye) :
                new ObjectParameter("LibCpteImpaye", typeof(string));
    
            var cpteContentieuxParameter = cpteContentieux != null ?
                new ObjectParameter("CpteContentieux", cpteContentieux) :
                new ObjectParameter("CpteContentieux", typeof(string));
    
            var cleCpteContentieuxParameter = cleCpteContentieux != null ?
                new ObjectParameter("CleCpteContentieux", cleCpteContentieux) :
                new ObjectParameter("CleCpteContentieux", typeof(string));
    
            var libCpteContentieuxParameter = libCpteContentieux != null ?
                new ObjectParameter("LibCpteContentieux", libCpteContentieux) :
                new ObjectParameter("LibCpteContentieux", typeof(string));
    
            var sMinBalParameter = sMinBal.HasValue ?
                new ObjectParameter("SMinBal", sMinBal) :
                new ObjectParameter("SMinBal", typeof(double));
    
            var debitInterestMethodParameter = debitInterestMethod != null ?
                new ObjectParameter("DebitInterestMethod", debitInterestMethod) :
                new ObjectParameter("DebitInterestMethod", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var prodAttribParameter = prodAttrib != null ?
                new ObjectParameter("ProdAttrib", prodAttrib) :
                new ObjectParameter("ProdAttrib", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductAttribute_Update_Result>("ProductAttribute_Update", agenceParameter, productCodeParameter, catClientParameter, customerTypeParameter, libProductParameter, libCatClientParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, cpteAttenteParameter, cleCpteAttenteParameter, libCpteAttenteParameter, cpteImpayeParameter, cleCpteImpayeParameter, libCpteImpayeParameter, cpteContentieuxParameter, cleCpteContentieuxParameter, libCpteContentieuxParameter, sMinBalParameter, debitInterestMethodParameter, dateTransfertParameter, dateCreationParameter, employeParameter, libEmployeParameter, computerNameParameter, prodAttribParameter, lect, languageParameter);
        }
    
        public virtual int ProductCyberCash_Insert(Nullable<short> agence, string caisse, Nullable<double> amount, string reference, string typeVir, string optnType, Nullable<System.DateTime> dateOperation, string description, string nomCaissier, string libCaisse, string libAgence, string cpteGL, string cleCpte, string libCpteGL, Nullable<System.DateTime> dateCreation, string codeMaj, Nullable<short> employe, string libEmploye, string prefixtxnno, Nullable<System.DateTime> dateTransfert, Nullable<double> comAmount, string codeMajcom, Nullable<double> tvaamount, string cpteCaisse, string cleCpteCaisse, string libCpteCaisse, string sendName, string receivName, Nullable<int> agenceRecep, string codePays, string libellePays, Nullable<double> payAmount1, Nullable<double> comAmt1, Nullable<double> tvaAmt1, string sender_Phone, string senderSMS, string recep_Phone_Number, string additional_Message, string recipient_ID, string validId, string securityquestion, string securityAnswer, string sMS_Lang, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, string zOPTN, string svTypeVir, string devise, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var agenceParameter = agence.HasValue ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(short));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var typeVirParameter = typeVir != null ?
                new ObjectParameter("TypeVir", typeVir) :
                new ObjectParameter("TypeVir", typeof(string));
    
            var optnTypeParameter = optnType != null ?
                new ObjectParameter("OptnType", optnType) :
                new ObjectParameter("OptnType", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var nomCaissierParameter = nomCaissier != null ?
                new ObjectParameter("NomCaissier", nomCaissier) :
                new ObjectParameter("NomCaissier", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var libCpteGLParameter = libCpteGL != null ?
                new ObjectParameter("LibCpteGL", libCpteGL) :
                new ObjectParameter("LibCpteGL", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(short));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var comAmountParameter = comAmount.HasValue ?
                new ObjectParameter("comAmount", comAmount) :
                new ObjectParameter("comAmount", typeof(double));
    
            var codeMajcomParameter = codeMajcom != null ?
                new ObjectParameter("CodeMajcom", codeMajcom) :
                new ObjectParameter("CodeMajcom", typeof(string));
    
            var tvaamountParameter = tvaamount.HasValue ?
                new ObjectParameter("tvaamount", tvaamount) :
                new ObjectParameter("tvaamount", typeof(double));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var sendNameParameter = sendName != null ?
                new ObjectParameter("SendName", sendName) :
                new ObjectParameter("SendName", typeof(string));
    
            var receivNameParameter = receivName != null ?
                new ObjectParameter("ReceivName", receivName) :
                new ObjectParameter("ReceivName", typeof(string));
    
            var agenceRecepParameter = agenceRecep.HasValue ?
                new ObjectParameter("AgenceRecep", agenceRecep) :
                new ObjectParameter("AgenceRecep", typeof(int));
    
            var codePaysParameter = codePays != null ?
                new ObjectParameter("CodePays", codePays) :
                new ObjectParameter("CodePays", typeof(string));
    
            var libellePaysParameter = libellePays != null ?
                new ObjectParameter("LibellePays", libellePays) :
                new ObjectParameter("LibellePays", typeof(string));
    
            var payAmount1Parameter = payAmount1.HasValue ?
                new ObjectParameter("PayAmount1", payAmount1) :
                new ObjectParameter("PayAmount1", typeof(double));
    
            var comAmt1Parameter = comAmt1.HasValue ?
                new ObjectParameter("ComAmt1", comAmt1) :
                new ObjectParameter("ComAmt1", typeof(double));
    
            var tvaAmt1Parameter = tvaAmt1.HasValue ?
                new ObjectParameter("TvaAmt1", tvaAmt1) :
                new ObjectParameter("TvaAmt1", typeof(double));
    
            var sender_PhoneParameter = sender_Phone != null ?
                new ObjectParameter("Sender_Phone", sender_Phone) :
                new ObjectParameter("Sender_Phone", typeof(string));
    
            var senderSMSParameter = senderSMS != null ?
                new ObjectParameter("SenderSMS", senderSMS) :
                new ObjectParameter("SenderSMS", typeof(string));
    
            var recep_Phone_NumberParameter = recep_Phone_Number != null ?
                new ObjectParameter("Recep_Phone_Number", recep_Phone_Number) :
                new ObjectParameter("Recep_Phone_Number", typeof(string));
    
            var additional_MessageParameter = additional_Message != null ?
                new ObjectParameter("Additional_Message", additional_Message) :
                new ObjectParameter("Additional_Message", typeof(string));
    
            var recipient_IDParameter = recipient_ID != null ?
                new ObjectParameter("Recipient_ID", recipient_ID) :
                new ObjectParameter("Recipient_ID", typeof(string));
    
            var validIdParameter = validId != null ?
                new ObjectParameter("ValidId", validId) :
                new ObjectParameter("ValidId", typeof(string));
    
            var securityquestionParameter = securityquestion != null ?
                new ObjectParameter("securityquestion", securityquestion) :
                new ObjectParameter("securityquestion", typeof(string));
    
            var securityAnswerParameter = securityAnswer != null ?
                new ObjectParameter("SecurityAnswer", securityAnswer) :
                new ObjectParameter("SecurityAnswer", typeof(string));
    
            var sMS_LangParameter = sMS_Lang != null ?
                new ObjectParameter("SMS_Lang", sMS_Lang) :
                new ObjectParameter("SMS_Lang", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var zOPTNParameter = zOPTN != null ?
                new ObjectParameter("ZOPTN", zOPTN) :
                new ObjectParameter("ZOPTN", typeof(string));
    
            var svTypeVirParameter = svTypeVir != null ?
                new ObjectParameter("SvTypeVir", svTypeVir) :
                new ObjectParameter("SvTypeVir", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductCyberCash_Insert", agenceParameter, caisseParameter, amountParameter, referenceParameter, typeVirParameter, optnTypeParameter, dateOperationParameter, descriptionParameter, nomCaissierParameter, libCaisseParameter, libAgenceParameter, cpteGLParameter, cleCpteParameter, libCpteGLParameter, dateCreationParameter, codeMajParameter, employeParameter, libEmployeParameter, prefixtxnnoParameter, dateTransfertParameter, comAmountParameter, codeMajcomParameter, tvaamountParameter, cpteCaisseParameter, cleCpteCaisseParameter, libCpteCaisseParameter, sendNameParameter, receivNameParameter, agenceRecepParameter, codePaysParameter, libellePaysParameter, payAmount1Parameter, comAmt1Parameter, tvaAmt1Parameter, sender_PhoneParameter, senderSMSParameter, recep_Phone_NumberParameter, additional_MessageParameter, recipient_IDParameter, validIdParameter, securityquestionParameter, securityAnswerParameter, sMS_LangParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, zOPTNParameter, svTypeVirParameter, deviseParameter, lect, msg, languageParameter);
        }
    
        public virtual int ProductTxns_Insert(Nullable<short> agence, string caisse, Nullable<double> amount, string reference, string typeVir, string optnType, Nullable<System.DateTime> dateOperation, string description, string nomCaissier, string libCaisse, string libAgence, string cpteGL, string cleCpte, string libCpteGL, Nullable<System.DateTime> dateCreation, string codeMaj, Nullable<short> employe, string libEmploye, string txnNo, Nullable<System.DateTime> dateTransfert, Nullable<double> comAmount, string codeMajcom, Nullable<double> tvaamount, string cpteCaisse, string cleCpteCaisse, string libCpteCaisse, string sendName, string receivName, Nullable<int> agenceRecep, ObjectParameter lect, string codePays, string libellePays, Nullable<double> payAmount1, Nullable<double> comAmt1, Nullable<double> tvaAmt1, string computerName, string language)
        {
            var agenceParameter = agence.HasValue ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(short));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var typeVirParameter = typeVir != null ?
                new ObjectParameter("TypeVir", typeVir) :
                new ObjectParameter("TypeVir", typeof(string));
    
            var optnTypeParameter = optnType != null ?
                new ObjectParameter("OptnType", optnType) :
                new ObjectParameter("OptnType", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var nomCaissierParameter = nomCaissier != null ?
                new ObjectParameter("NomCaissier", nomCaissier) :
                new ObjectParameter("NomCaissier", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var libCpteGLParameter = libCpteGL != null ?
                new ObjectParameter("LibCpteGL", libCpteGL) :
                new ObjectParameter("LibCpteGL", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(short));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var comAmountParameter = comAmount.HasValue ?
                new ObjectParameter("comAmount", comAmount) :
                new ObjectParameter("comAmount", typeof(double));
    
            var codeMajcomParameter = codeMajcom != null ?
                new ObjectParameter("CodeMajcom", codeMajcom) :
                new ObjectParameter("CodeMajcom", typeof(string));
    
            var tvaamountParameter = tvaamount.HasValue ?
                new ObjectParameter("tvaamount", tvaamount) :
                new ObjectParameter("tvaamount", typeof(double));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var sendNameParameter = sendName != null ?
                new ObjectParameter("SendName", sendName) :
                new ObjectParameter("SendName", typeof(string));
    
            var receivNameParameter = receivName != null ?
                new ObjectParameter("ReceivName", receivName) :
                new ObjectParameter("ReceivName", typeof(string));
    
            var agenceRecepParameter = agenceRecep.HasValue ?
                new ObjectParameter("AgenceRecep", agenceRecep) :
                new ObjectParameter("AgenceRecep", typeof(int));
    
            var codePaysParameter = codePays != null ?
                new ObjectParameter("CodePays", codePays) :
                new ObjectParameter("CodePays", typeof(string));
    
            var libellePaysParameter = libellePays != null ?
                new ObjectParameter("LibellePays", libellePays) :
                new ObjectParameter("LibellePays", typeof(string));
    
            var payAmount1Parameter = payAmount1.HasValue ?
                new ObjectParameter("PayAmount1", payAmount1) :
                new ObjectParameter("PayAmount1", typeof(double));
    
            var comAmt1Parameter = comAmt1.HasValue ?
                new ObjectParameter("ComAmt1", comAmt1) :
                new ObjectParameter("ComAmt1", typeof(double));
    
            var tvaAmt1Parameter = tvaAmt1.HasValue ?
                new ObjectParameter("TvaAmt1", tvaAmt1) :
                new ObjectParameter("TvaAmt1", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductTxns_Insert", agenceParameter, caisseParameter, amountParameter, referenceParameter, typeVirParameter, optnTypeParameter, dateOperationParameter, descriptionParameter, nomCaissierParameter, libCaisseParameter, libAgenceParameter, cpteGLParameter, cleCpteParameter, libCpteGLParameter, dateCreationParameter, codeMajParameter, employeParameter, libEmployeParameter, txnNoParameter, dateTransfertParameter, comAmountParameter, codeMajcomParameter, tvaamountParameter, cpteCaisseParameter, cleCpteCaisseParameter, libCpteCaisseParameter, sendNameParameter, receivNameParameter, agenceRecepParameter, lect, codePaysParameter, libellePaysParameter, payAmount1Parameter, comAmt1Parameter, tvaAmt1Parameter, computerNameParameter, languageParameter);
        }
    
        public virtual int ProductTxns_Insert_New(string agence, string caisse, Nullable<double> amount, string reference, string typeVir, string optnType, Nullable<System.DateTime> dateOperation, string description, string nomCaissier, string libCaisse, string libAgence, string cpteGL, string cleCpte, string libCpteGL, Nullable<System.DateTime> dateCreation, string codeMaj, string employe, string libEmploye, string prefixtxnno, Nullable<System.DateTime> dateTransfert, Nullable<double> comAmount, string codeMajcom, Nullable<double> tvaamount, string cpteCaisse, string cleCpteCaisse, string libCpteCaisse, string sendName, string receivName, string agenceRecep, string codePays, string libellePays, Nullable<double> payAmount1, Nullable<double> comAmt1, Nullable<double> tvaAmt1, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, string zOPTN, string svTypeVir, string devise, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var typeVirParameter = typeVir != null ?
                new ObjectParameter("TypeVir", typeVir) :
                new ObjectParameter("TypeVir", typeof(string));
    
            var optnTypeParameter = optnType != null ?
                new ObjectParameter("OptnType", optnType) :
                new ObjectParameter("OptnType", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var nomCaissierParameter = nomCaissier != null ?
                new ObjectParameter("NomCaissier", nomCaissier) :
                new ObjectParameter("NomCaissier", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var libCpteGLParameter = libCpteGL != null ?
                new ObjectParameter("LibCpteGL", libCpteGL) :
                new ObjectParameter("LibCpteGL", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var comAmountParameter = comAmount.HasValue ?
                new ObjectParameter("comAmount", comAmount) :
                new ObjectParameter("comAmount", typeof(double));
    
            var codeMajcomParameter = codeMajcom != null ?
                new ObjectParameter("CodeMajcom", codeMajcom) :
                new ObjectParameter("CodeMajcom", typeof(string));
    
            var tvaamountParameter = tvaamount.HasValue ?
                new ObjectParameter("tvaamount", tvaamount) :
                new ObjectParameter("tvaamount", typeof(double));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var sendNameParameter = sendName != null ?
                new ObjectParameter("SendName", sendName) :
                new ObjectParameter("SendName", typeof(string));
    
            var receivNameParameter = receivName != null ?
                new ObjectParameter("ReceivName", receivName) :
                new ObjectParameter("ReceivName", typeof(string));
    
            var agenceRecepParameter = agenceRecep != null ?
                new ObjectParameter("AgenceRecep", agenceRecep) :
                new ObjectParameter("AgenceRecep", typeof(string));
    
            var codePaysParameter = codePays != null ?
                new ObjectParameter("CodePays", codePays) :
                new ObjectParameter("CodePays", typeof(string));
    
            var libellePaysParameter = libellePays != null ?
                new ObjectParameter("LibellePays", libellePays) :
                new ObjectParameter("LibellePays", typeof(string));
    
            var payAmount1Parameter = payAmount1.HasValue ?
                new ObjectParameter("PayAmount1", payAmount1) :
                new ObjectParameter("PayAmount1", typeof(double));
    
            var comAmt1Parameter = comAmt1.HasValue ?
                new ObjectParameter("ComAmt1", comAmt1) :
                new ObjectParameter("ComAmt1", typeof(double));
    
            var tvaAmt1Parameter = tvaAmt1.HasValue ?
                new ObjectParameter("TvaAmt1", tvaAmt1) :
                new ObjectParameter("TvaAmt1", typeof(double));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var zOPTNParameter = zOPTN != null ?
                new ObjectParameter("ZOPTN", zOPTN) :
                new ObjectParameter("ZOPTN", typeof(string));
    
            var svTypeVirParameter = svTypeVir != null ?
                new ObjectParameter("SvTypeVir", svTypeVir) :
                new ObjectParameter("SvTypeVir", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductTxns_Insert_New", agenceParameter, caisseParameter, amountParameter, referenceParameter, typeVirParameter, optnTypeParameter, dateOperationParameter, descriptionParameter, nomCaissierParameter, libCaisseParameter, libAgenceParameter, cpteGLParameter, cleCpteParameter, libCpteGLParameter, dateCreationParameter, codeMajParameter, employeParameter, libEmployeParameter, prefixtxnnoParameter, dateTransfertParameter, comAmountParameter, codeMajcomParameter, tvaamountParameter, cpteCaisseParameter, cleCpteCaisseParameter, libCpteCaisseParameter, sendNameParameter, receivNameParameter, agenceRecepParameter, codePaysParameter, libellePaysParameter, payAmount1Parameter, comAmt1Parameter, tvaAmt1Parameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, zOPTNParameter, svTypeVirParameter, deviseParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int Profitability(string pi_InAgence, string pc_LibAgence, string pi_InMatricule, Nullable<System.DateTime> pd_InDateDebut, Nullable<System.DateTime> pd_InDateFin, string pc_InCpteJumelle, string pc_ProfitType, ObjectParameter pi_OutErreur, ObjectParameter msg, string computerName, string language)
        {
            var pi_InAgenceParameter = pi_InAgence != null ?
                new ObjectParameter("pi_InAgence", pi_InAgence) :
                new ObjectParameter("pi_InAgence", typeof(string));
    
            var pc_LibAgenceParameter = pc_LibAgence != null ?
                new ObjectParameter("pc_LibAgence", pc_LibAgence) :
                new ObjectParameter("pc_LibAgence", typeof(string));
    
            var pi_InMatriculeParameter = pi_InMatricule != null ?
                new ObjectParameter("pi_InMatricule", pi_InMatricule) :
                new ObjectParameter("pi_InMatricule", typeof(string));
    
            var pd_InDateDebutParameter = pd_InDateDebut.HasValue ?
                new ObjectParameter("pd_InDateDebut", pd_InDateDebut) :
                new ObjectParameter("pd_InDateDebut", typeof(System.DateTime));
    
            var pd_InDateFinParameter = pd_InDateFin.HasValue ?
                new ObjectParameter("pd_InDateFin", pd_InDateFin) :
                new ObjectParameter("pd_InDateFin", typeof(System.DateTime));
    
            var pc_InCpteJumelleParameter = pc_InCpteJumelle != null ?
                new ObjectParameter("pc_InCpteJumelle", pc_InCpteJumelle) :
                new ObjectParameter("pc_InCpteJumelle", typeof(string));
    
            var pc_ProfitTypeParameter = pc_ProfitType != null ?
                new ObjectParameter("pc_ProfitType", pc_ProfitType) :
                new ObjectParameter("pc_ProfitType", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Profitability", pi_InAgenceParameter, pc_LibAgenceParameter, pi_InMatriculeParameter, pd_InDateDebutParameter, pd_InDateFinParameter, pc_InCpteJumelleParameter, pc_ProfitTypeParameter, pi_OutErreur, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int Profitability_Sum_ByClt(string pi_InAgence, string pc_LibAgence, string pi_InMatricule, Nullable<System.DateTime> pd_InDateDebut, Nullable<System.DateTime> pd_InDateFin, string pc_InCpteJumelle, string pc_ProfitType, ObjectParameter pi_OutErreur, ObjectParameter msg, string computerName, string language)
        {
            var pi_InAgenceParameter = pi_InAgence != null ?
                new ObjectParameter("pi_InAgence", pi_InAgence) :
                new ObjectParameter("pi_InAgence", typeof(string));
    
            var pc_LibAgenceParameter = pc_LibAgence != null ?
                new ObjectParameter("pc_LibAgence", pc_LibAgence) :
                new ObjectParameter("pc_LibAgence", typeof(string));
    
            var pi_InMatriculeParameter = pi_InMatricule != null ?
                new ObjectParameter("pi_InMatricule", pi_InMatricule) :
                new ObjectParameter("pi_InMatricule", typeof(string));
    
            var pd_InDateDebutParameter = pd_InDateDebut.HasValue ?
                new ObjectParameter("pd_InDateDebut", pd_InDateDebut) :
                new ObjectParameter("pd_InDateDebut", typeof(System.DateTime));
    
            var pd_InDateFinParameter = pd_InDateFin.HasValue ?
                new ObjectParameter("pd_InDateFin", pd_InDateFin) :
                new ObjectParameter("pd_InDateFin", typeof(System.DateTime));
    
            var pc_InCpteJumelleParameter = pc_InCpteJumelle != null ?
                new ObjectParameter("pc_InCpteJumelle", pc_InCpteJumelle) :
                new ObjectParameter("pc_InCpteJumelle", typeof(string));
    
            var pc_ProfitTypeParameter = pc_ProfitType != null ?
                new ObjectParameter("pc_ProfitType", pc_ProfitType) :
                new ObjectParameter("pc_ProfitType", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Profitability_Sum_ByClt", pi_InAgenceParameter, pc_LibAgenceParameter, pi_InMatriculeParameter, pd_InDateDebutParameter, pd_InDateFinParameter, pc_InCpteJumelleParameter, pc_ProfitTypeParameter, pi_OutErreur, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int Profitability_Sum_ByProfType(string pi_InAgence, string pc_LibAgence, string pi_InMatricule, Nullable<System.DateTime> pd_InDateDebut, Nullable<System.DateTime> pd_InDateFin, string pc_InCpteJumelle, string pc_ProfitType, ObjectParameter pi_OutErreur, ObjectParameter msg, string computerName, string language)
        {
            var pi_InAgenceParameter = pi_InAgence != null ?
                new ObjectParameter("pi_InAgence", pi_InAgence) :
                new ObjectParameter("pi_InAgence", typeof(string));
    
            var pc_LibAgenceParameter = pc_LibAgence != null ?
                new ObjectParameter("pc_LibAgence", pc_LibAgence) :
                new ObjectParameter("pc_LibAgence", typeof(string));
    
            var pi_InMatriculeParameter = pi_InMatricule != null ?
                new ObjectParameter("pi_InMatricule", pi_InMatricule) :
                new ObjectParameter("pi_InMatricule", typeof(string));
    
            var pd_InDateDebutParameter = pd_InDateDebut.HasValue ?
                new ObjectParameter("pd_InDateDebut", pd_InDateDebut) :
                new ObjectParameter("pd_InDateDebut", typeof(System.DateTime));
    
            var pd_InDateFinParameter = pd_InDateFin.HasValue ?
                new ObjectParameter("pd_InDateFin", pd_InDateFin) :
                new ObjectParameter("pd_InDateFin", typeof(System.DateTime));
    
            var pc_InCpteJumelleParameter = pc_InCpteJumelle != null ?
                new ObjectParameter("pc_InCpteJumelle", pc_InCpteJumelle) :
                new ObjectParameter("pc_InCpteJumelle", typeof(string));
    
            var pc_ProfitTypeParameter = pc_ProfitType != null ?
                new ObjectParameter("pc_ProfitType", pc_ProfitType) :
                new ObjectParameter("pc_ProfitType", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Profitability_Sum_ByProfType", pi_InAgenceParameter, pc_LibAgenceParameter, pi_InMatriculeParameter, pd_InDateDebutParameter, pd_InDateFinParameter, pc_InCpteJumelleParameter, pc_ProfitTypeParameter, pi_OutErreur, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int PROFITABILITYGROUP_Insert(string pROFGROUPNAME, string pROFITYPE, string pROFDESCGROUP, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var pROFGROUPNAMEParameter = pROFGROUPNAME != null ?
                new ObjectParameter("PROFGROUPNAME", pROFGROUPNAME) :
                new ObjectParameter("PROFGROUPNAME", typeof(string));
    
            var pROFITYPEParameter = pROFITYPE != null ?
                new ObjectParameter("PROFITYPE", pROFITYPE) :
                new ObjectParameter("PROFITYPE", typeof(string));
    
            var pROFDESCGROUPParameter = pROFDESCGROUP != null ?
                new ObjectParameter("PROFDESCGROUP", pROFDESCGROUP) :
                new ObjectParameter("PROFDESCGROUP", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROFITABILITYGROUP_Insert", pROFGROUPNAMEParameter, pROFITYPEParameter, pROFDESCGROUPParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int PROFITABILITYTYPE_Delete(string pROFITABILITYNAME, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var pROFITABILITYNAMEParameter = pROFITABILITYNAME != null ?
                new ObjectParameter("PROFITABILITYNAME", pROFITABILITYNAME) :
                new ObjectParameter("PROFITABILITYNAME", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROFITABILITYTYPE_Delete", pROFITABILITYNAMEParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int PROFITABILITYTYPE_Insert(string pROFITABILITYNAME, string pROFGROUPNAME, string pROFITYPE, string pROFITDESCRIPTION, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var pROFITABILITYNAMEParameter = pROFITABILITYNAME != null ?
                new ObjectParameter("PROFITABILITYNAME", pROFITABILITYNAME) :
                new ObjectParameter("PROFITABILITYNAME", typeof(string));
    
            var pROFGROUPNAMEParameter = pROFGROUPNAME != null ?
                new ObjectParameter("PROFGROUPNAME", pROFGROUPNAME) :
                new ObjectParameter("PROFGROUPNAME", typeof(string));
    
            var pROFITYPEParameter = pROFITYPE != null ?
                new ObjectParameter("PROFITYPE", pROFITYPE) :
                new ObjectParameter("PROFITYPE", typeof(string));
    
            var pROFITDESCRIPTIONParameter = pROFITDESCRIPTION != null ?
                new ObjectParameter("PROFITDESCRIPTION", pROFITDESCRIPTION) :
                new ObjectParameter("PROFITDESCRIPTION", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROFITABILITYTYPE_Insert", pROFITABILITYNAMEParameter, pROFGROUPNAMEParameter, pROFITYPEParameter, pROFITDESCRIPTIONParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int PROFITABILITYTYPE_Update(string pROFITABILITYNAME, string pROFGROUPNAME, string pROFITYPE, string pROFITDESCRIPTION, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var pROFITABILITYNAMEParameter = pROFITABILITYNAME != null ?
                new ObjectParameter("PROFITABILITYNAME", pROFITABILITYNAME) :
                new ObjectParameter("PROFITABILITYNAME", typeof(string));
    
            var pROFGROUPNAMEParameter = pROFGROUPNAME != null ?
                new ObjectParameter("PROFGROUPNAME", pROFGROUPNAME) :
                new ObjectParameter("PROFGROUPNAME", typeof(string));
    
            var pROFITYPEParameter = pROFITYPE != null ?
                new ObjectParameter("PROFITYPE", pROFITYPE) :
                new ObjectParameter("PROFITYPE", typeof(string));
    
            var pROFITDESCRIPTIONParameter = pROFITDESCRIPTION != null ?
                new ObjectParameter("PROFITDESCRIPTION", pROFITDESCRIPTION) :
                new ObjectParameter("PROFITDESCRIPTION", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROFITABILITYTYPE_Update", pROFITABILITYNAMEParameter, pROFGROUPNAMEParameter, pROFITYPEParameter, pROFITDESCRIPTIONParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int PS_ACCTTOACCTCASH(string agence, string vCpteCol, string vCleCol, string vLibCpteCol, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string codeLibelle, string refOperation, string employe, string libEmploye, Nullable<double> txIntDb, Nullable<double> txIntCr, string codeTaux, Nullable<System.DateTime> dateCalEI, string libAgence, Nullable<System.DateTime> dateCreation, string trCode, string description, string prefixtxnno, Nullable<System.DateTime> dateTransfert, string caisse, string cpteCaisse, string cleCpteCaisse, string codeMaj, string libCaisse, string libDevise, string libCpteCaisse, Nullable<double> oDFormFee, Nullable<double> fraisExceptionel, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, ObjectParameter msg, string computerName, string language, string cobacID, string currentBr, string libCurrentBr)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var vCpteColParameter = vCpteCol != null ?
                new ObjectParameter("VCpteCol", vCpteCol) :
                new ObjectParameter("VCpteCol", typeof(string));
    
            var vCleColParameter = vCleCol != null ?
                new ObjectParameter("VCleCol", vCleCol) :
                new ObjectParameter("VCleCol", typeof(string));
    
            var vLibCpteColParameter = vLibCpteCol != null ?
                new ObjectParameter("VLibCpteCol", vLibCpteCol) :
                new ObjectParameter("VLibCpteCol", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var txIntDbParameter = txIntDb.HasValue ?
                new ObjectParameter("TxIntDb", txIntDb) :
                new ObjectParameter("TxIntDb", typeof(double));
    
            var txIntCrParameter = txIntCr.HasValue ?
                new ObjectParameter("TxIntCr", txIntCr) :
                new ObjectParameter("TxIntCr", typeof(double));
    
            var codeTauxParameter = codeTaux != null ?
                new ObjectParameter("CodeTaux", codeTaux) :
                new ObjectParameter("CodeTaux", typeof(string));
    
            var dateCalEIParameter = dateCalEI.HasValue ?
                new ObjectParameter("DateCalEI", dateCalEI) :
                new ObjectParameter("DateCalEI", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var oDFormFeeParameter = oDFormFee.HasValue ?
                new ObjectParameter("ODFormFee", oDFormFee) :
                new ObjectParameter("ODFormFee", typeof(double));
    
            var fraisExceptionelParameter = fraisExceptionel.HasValue ?
                new ObjectParameter("FraisExceptionel", fraisExceptionel) :
                new ObjectParameter("FraisExceptionel", typeof(double));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            var currentBrParameter = currentBr != null ?
                new ObjectParameter("CurrentBr", currentBr) :
                new ObjectParameter("CurrentBr", typeof(string));
    
            var libCurrentBrParameter = libCurrentBr != null ?
                new ObjectParameter("LibCurrentBr", libCurrentBr) :
                new ObjectParameter("LibCurrentBr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PS_ACCTTOACCTCASH", agenceParameter, vCpteColParameter, vCleColParameter, vLibCpteColParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, codeLibelleParameter, refOperationParameter, employeParameter, libEmployeParameter, txIntDbParameter, txIntCrParameter, codeTauxParameter, dateCalEIParameter, libAgenceParameter, dateCreationParameter, trCodeParameter, descriptionParameter, prefixtxnnoParameter, dateTransfertParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, codeMajParameter, libCaisseParameter, libDeviseParameter, libCpteCaisseParameter, oDFormFeeParameter, fraisExceptionelParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, msg, computerNameParameter, languageParameter, cobacIDParameter, currentBrParameter, libCurrentBrParameter);
        }
    
        public virtual int Ps_Generate_Member_Part(string devise, string mois, string lIBELLE, string oPYEAR, Nullable<int> allAccts, string cpteDebut, string cpteFin, Nullable<System.DateTime> serverDate, string wTxnCode, ObjectParameter lect, ObjectParameter msg, string computerName, string employe, string agence, string language, Nullable<double> estRate)
        {
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var moisParameter = mois != null ?
                new ObjectParameter("Mois", mois) :
                new ObjectParameter("Mois", typeof(string));
    
            var lIBELLEParameter = lIBELLE != null ?
                new ObjectParameter("LIBELLE", lIBELLE) :
                new ObjectParameter("LIBELLE", typeof(string));
    
            var oPYEARParameter = oPYEAR != null ?
                new ObjectParameter("OPYEAR", oPYEAR) :
                new ObjectParameter("OPYEAR", typeof(string));
    
            var allAcctsParameter = allAccts.HasValue ?
                new ObjectParameter("AllAccts", allAccts) :
                new ObjectParameter("AllAccts", typeof(int));
    
            var cpteDebutParameter = cpteDebut != null ?
                new ObjectParameter("CpteDebut", cpteDebut) :
                new ObjectParameter("CpteDebut", typeof(string));
    
            var cpteFinParameter = cpteFin != null ?
                new ObjectParameter("CpteFin", cpteFin) :
                new ObjectParameter("CpteFin", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var wTxnCodeParameter = wTxnCode != null ?
                new ObjectParameter("wTxnCode", wTxnCode) :
                new ObjectParameter("wTxnCode", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var estRateParameter = estRate.HasValue ?
                new ObjectParameter("EstRate", estRate) :
                new ObjectParameter("EstRate", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Ps_Generate_Member_Part", deviseParameter, moisParameter, lIBELLEParameter, oPYEARParameter, allAcctsParameter, cpteDebutParameter, cpteFinParameter, serverDateParameter, wTxnCodeParameter, lect, msg, computerNameParameter, employeParameter, agenceParameter, languageParameter, estRateParameter);
        }
    
        public virtual int PS_GET_NUMERO_CHARGE(string pc_InCode_cour, string pc_InIdTable, string pc_InTable, Nullable<int> pc_Inlongueur, string pc_TYPEOP, ObjectParameter pc_OutNumero, ObjectParameter pi_OutErreur, string language)
        {
            var pc_InCode_courParameter = pc_InCode_cour != null ?
                new ObjectParameter("pc_InCode_cour", pc_InCode_cour) :
                new ObjectParameter("pc_InCode_cour", typeof(string));
    
            var pc_InIdTableParameter = pc_InIdTable != null ?
                new ObjectParameter("pc_InIdTable", pc_InIdTable) :
                new ObjectParameter("pc_InIdTable", typeof(string));
    
            var pc_InTableParameter = pc_InTable != null ?
                new ObjectParameter("pc_InTable", pc_InTable) :
                new ObjectParameter("pc_InTable", typeof(string));
    
            var pc_InlongueurParameter = pc_Inlongueur.HasValue ?
                new ObjectParameter("pc_Inlongueur", pc_Inlongueur) :
                new ObjectParameter("pc_Inlongueur", typeof(int));
    
            var pc_TYPEOPParameter = pc_TYPEOP != null ?
                new ObjectParameter("Pc_TYPEOP", pc_TYPEOP) :
                new ObjectParameter("Pc_TYPEOP", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PS_GET_NUMERO_CHARGE", pc_InCode_courParameter, pc_InIdTableParameter, pc_InTableParameter, pc_InlongueurParameter, pc_TYPEOPParameter, pc_OutNumero, pi_OutErreur, languageParameter);
        }
    
        public virtual int PS_LOGIN_USER(string pc_InLOGIN, string pc_InORDINATEUR, string pc_Language, ObjectParameter pc_OutSERVERDATE, ObjectParameter pc_OutSERVERBACKDATE, ObjectParameter pc_OutSERVEROPEN, ObjectParameter pc_OutBACKOPEN, ObjectParameter pc_OutBACKDATEWK, ObjectParameter pc_OutMSG, ObjectParameter pc_OutPWD, ObjectParameter aGENCE, ObjectParameter nOM, ObjectParameter sECURITYLEVEL, ObjectParameter pRIVILEGE, ObjectParameter mAXAMOUNT, ObjectParameter cODECAISSE, ObjectParameter eMPACCESS, ObjectParameter pc_OutLECT)
        {
            var pc_InLOGINParameter = pc_InLOGIN != null ?
                new ObjectParameter("pc_InLOGIN", pc_InLOGIN) :
                new ObjectParameter("pc_InLOGIN", typeof(string));
    
            var pc_InORDINATEURParameter = pc_InORDINATEUR != null ?
                new ObjectParameter("pc_InORDINATEUR", pc_InORDINATEUR) :
                new ObjectParameter("pc_InORDINATEUR", typeof(string));
    
            var pc_LanguageParameter = pc_Language != null ?
                new ObjectParameter("pc_Language", pc_Language) :
                new ObjectParameter("pc_Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PS_LOGIN_USER", pc_InLOGINParameter, pc_InORDINATEURParameter, pc_LanguageParameter, pc_OutSERVERDATE, pc_OutSERVERBACKDATE, pc_OutSERVEROPEN, pc_OutBACKOPEN, pc_OutBACKDATEWK, pc_OutMSG, pc_OutPWD, aGENCE, nOM, sECURITYLEVEL, pRIVILEGE, mAXAMOUNT, cODECAISSE, eMPACCESS, pc_OutLECT);
        }
    
        public virtual int Ps_NewMontlyPartMember(string v_Agence, string v_LibAgence, string client, Nullable<int> catCpte, string denomination, string v_CpteJumelle, string mOIS, string lIBELLE, string oPYEAR, string devise, ObjectParameter lecture, ObjectParameter messageError, string language, string employe, Nullable<System.DateTime> sERVERDATE, string wTxnCode, Nullable<double> estRate)
        {
            var v_AgenceParameter = v_Agence != null ?
                new ObjectParameter("V_Agence", v_Agence) :
                new ObjectParameter("V_Agence", typeof(string));
    
            var v_LibAgenceParameter = v_LibAgence != null ?
                new ObjectParameter("V_LibAgence", v_LibAgence) :
                new ObjectParameter("V_LibAgence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(int));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var v_CpteJumelleParameter = v_CpteJumelle != null ?
                new ObjectParameter("V_CpteJumelle", v_CpteJumelle) :
                new ObjectParameter("V_CpteJumelle", typeof(string));
    
            var mOISParameter = mOIS != null ?
                new ObjectParameter("MOIS", mOIS) :
                new ObjectParameter("MOIS", typeof(string));
    
            var lIBELLEParameter = lIBELLE != null ?
                new ObjectParameter("LIBELLE", lIBELLE) :
                new ObjectParameter("LIBELLE", typeof(string));
    
            var oPYEARParameter = oPYEAR != null ?
                new ObjectParameter("OPYEAR", oPYEAR) :
                new ObjectParameter("OPYEAR", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var sERVERDATEParameter = sERVERDATE.HasValue ?
                new ObjectParameter("SERVERDATE", sERVERDATE) :
                new ObjectParameter("SERVERDATE", typeof(System.DateTime));
    
            var wTxnCodeParameter = wTxnCode != null ?
                new ObjectParameter("wTxnCode", wTxnCode) :
                new ObjectParameter("wTxnCode", typeof(string));
    
            var estRateParameter = estRate.HasValue ?
                new ObjectParameter("EstRate", estRate) :
                new ObjectParameter("EstRate", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Ps_NewMontlyPartMember", v_AgenceParameter, v_LibAgenceParameter, clientParameter, catCpteParameter, denominationParameter, v_CpteJumelleParameter, mOISParameter, lIBELLEParameter, oPYEARParameter, deviseParameter, lecture, messageError, languageParameter, employeParameter, sERVERDATEParameter, wTxnCodeParameter, estRateParameter);
        }
    
        public virtual ObjectResult<PS_OPEN_SERVER_Result> PS_OPEN_SERVER(string pc_InLOGIN, string pc_InORDINATEUR, string pc_InAGENCE, Nullable<System.DateTime> pc_InSERVERDATE, string pc_InALLBR, string pc_InBACKDATE, string pc_Language, ObjectParameter pc_OutMSG, ObjectParameter pc_OutLECT)
        {
            var pc_InLOGINParameter = pc_InLOGIN != null ?
                new ObjectParameter("pc_InLOGIN", pc_InLOGIN) :
                new ObjectParameter("pc_InLOGIN", typeof(string));
    
            var pc_InORDINATEURParameter = pc_InORDINATEUR != null ?
                new ObjectParameter("pc_InORDINATEUR", pc_InORDINATEUR) :
                new ObjectParameter("pc_InORDINATEUR", typeof(string));
    
            var pc_InAGENCEParameter = pc_InAGENCE != null ?
                new ObjectParameter("pc_InAGENCE", pc_InAGENCE) :
                new ObjectParameter("pc_InAGENCE", typeof(string));
    
            var pc_InSERVERDATEParameter = pc_InSERVERDATE.HasValue ?
                new ObjectParameter("pc_InSERVERDATE", pc_InSERVERDATE) :
                new ObjectParameter("pc_InSERVERDATE", typeof(System.DateTime));
    
            var pc_InALLBRParameter = pc_InALLBR != null ?
                new ObjectParameter("pc_InALLBR", pc_InALLBR) :
                new ObjectParameter("pc_InALLBR", typeof(string));
    
            var pc_InBACKDATEParameter = pc_InBACKDATE != null ?
                new ObjectParameter("pc_InBACKDATE", pc_InBACKDATE) :
                new ObjectParameter("pc_InBACKDATE", typeof(string));
    
            var pc_LanguageParameter = pc_Language != null ?
                new ObjectParameter("pc_Language", pc_Language) :
                new ObjectParameter("pc_Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PS_OPEN_SERVER_Result>("PS_OPEN_SERVER", pc_InLOGINParameter, pc_InORDINATEURParameter, pc_InAGENCEParameter, pc_InSERVERDATEParameter, pc_InALLBRParameter, pc_InBACKDATEParameter, pc_LanguageParameter, pc_OutMSG, pc_OutLECT);
        }
    
        public virtual ObjectResult<string> PS_PERMANENTTRF(string wEmploye, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PS_PERMANENTTRF", wEmployeParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<string> PS_PRODUCTTRF(string journal, string description, string wEmploye, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PS_PRODUCTTRF", journalParameter, descriptionParameter, wEmployeParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int PS_RETURN_RESULTAT(string centralBr, string wDevise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string etat, string employe, string language, ObjectParameter mntResultDebut, ObjectParameter mntResultFin, ObjectParameter msg, ObjectParameter lect)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var etatParameter = etat != null ?
                new ObjectParameter("Etat", etat) :
                new ObjectParameter("Etat", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PS_RETURN_RESULTAT", centralBrParameter, wDeviseParameter, dateDebutParameter, dateFinParameter, etatParameter, employeParameter, languageParameter, mntResultDebut, mntResultFin, msg, lect);
        }
    
        public virtual int PS_RUNPROVISIONINTMEMBER(string devise, string mOIS, string libelleMois, string oPYEAR, string wEmploye, string wAgence, Nullable<double> montant, ObjectParameter lect, ObjectParameter errMsg, string computerName, string language)
        {
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var mOISParameter = mOIS != null ?
                new ObjectParameter("MOIS", mOIS) :
                new ObjectParameter("MOIS", typeof(string));
    
            var libelleMoisParameter = libelleMois != null ?
                new ObjectParameter("libelleMois", libelleMois) :
                new ObjectParameter("libelleMois", typeof(string));
    
            var oPYEARParameter = oPYEAR != null ?
                new ObjectParameter("OPYEAR", oPYEAR) :
                new ObjectParameter("OPYEAR", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("wAgence", wAgence) :
                new ObjectParameter("wAgence", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PS_RUNPROVISIONINTMEMBER", deviseParameter, mOISParameter, libelleMoisParameter, oPYEARParameter, wEmployeParameter, wAgenceParameter, montantParameter, lect, errMsg, computerNameParameter, languageParameter);
        }
    
        public virtual int Ps_SummaryEOYMemberTable(string devise, Nullable<System.DateTime> wDateOp, Nullable<double> tauxInt, string txnNo, string wEmploye, string computerName, string language, ObjectParameter lect, ObjectParameter errMsg)
        {
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var wDateOpParameter = wDateOp.HasValue ?
                new ObjectParameter("WDateOp", wDateOp) :
                new ObjectParameter("WDateOp", typeof(System.DateTime));
    
            var tauxIntParameter = tauxInt.HasValue ?
                new ObjectParameter("TauxInt", tauxInt) :
                new ObjectParameter("TauxInt", typeof(double));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Ps_SummaryEOYMemberTable", deviseParameter, wDateOpParameter, tauxIntParameter, txnNoParameter, wEmployeParameter, computerNameParameter, languageParameter, lect, errMsg);
        }
    
        public virtual int PSSENDSMS(Nullable<int> type, string all, ObjectParameter lect, Nullable<System.DateTime> serverdate, string wEmploye, string computerName, ObjectParameter msg, string language)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var allParameter = all != null ?
                new ObjectParameter("All", all) :
                new ObjectParameter("All", typeof(string));
    
            var serverdateParameter = serverdate.HasValue ?
                new ObjectParameter("serverdate", serverdate) :
                new ObjectParameter("serverdate", typeof(System.DateTime));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSSENDSMS", typeParameter, allParameter, lect, serverdateParameter, wEmployeParameter, computerNameParameter, msg, languageParameter);
        }
    
        public virtual int Qualite_Delete(string agence, string qualite, string computerName, string employe, string nomEmploye, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var qualiteParameter = qualite != null ?
                new ObjectParameter("Qualite", qualite) :
                new ObjectParameter("Qualite", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var nomEmployeParameter = nomEmploye != null ?
                new ObjectParameter("NomEmploye", nomEmploye) :
                new ObjectParameter("NomEmploye", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Qualite_Delete", agenceParameter, qualiteParameter, computerNameParameter, employeParameter, nomEmployeParameter, lect, msg, languageParameter);
        }
    
        public virtual int Qualite_Insert(string agence, string qualite, string libQualite, string libQualiteEn, string computerName, string employe, string nomEmploye, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var qualiteParameter = qualite != null ?
                new ObjectParameter("Qualite", qualite) :
                new ObjectParameter("Qualite", typeof(string));
    
            var libQualiteParameter = libQualite != null ?
                new ObjectParameter("LibQualite", libQualite) :
                new ObjectParameter("LibQualite", typeof(string));
    
            var libQualiteEnParameter = libQualiteEn != null ?
                new ObjectParameter("LibQualiteEn", libQualiteEn) :
                new ObjectParameter("LibQualiteEn", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var nomEmployeParameter = nomEmploye != null ?
                new ObjectParameter("NomEmploye", nomEmploye) :
                new ObjectParameter("NomEmploye", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Qualite_Insert", agenceParameter, qualiteParameter, libQualiteParameter, libQualiteEnParameter, computerNameParameter, employeParameter, nomEmployeParameter, lect, msg, languageParameter);
        }
    
        public virtual int Qualite_Update(string agence, string qualite, string libQualite, string libQualiteEn, string computerName, string employe, string nomEmploye, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var qualiteParameter = qualite != null ?
                new ObjectParameter("Qualite", qualite) :
                new ObjectParameter("Qualite", typeof(string));
    
            var libQualiteParameter = libQualite != null ?
                new ObjectParameter("LibQualite", libQualite) :
                new ObjectParameter("LibQualite", typeof(string));
    
            var libQualiteEnParameter = libQualiteEn != null ?
                new ObjectParameter("LibQualiteEn", libQualiteEn) :
                new ObjectParameter("LibQualiteEn", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var nomEmployeParameter = nomEmploye != null ?
                new ObjectParameter("NomEmploye", nomEmploye) :
                new ObjectParameter("NomEmploye", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Qualite_Update", agenceParameter, qualiteParameter, libQualiteParameter, libQualiteEnParameter, computerNameParameter, employeParameter, nomEmployeParameter, lect, msg, languageParameter);
        }
    
        public virtual ObjectResult<Receptiontrf_Result> Receptiontrf(string wAgence, string wLibAgence, string wAgenceDes, string wLibAgenceDest, string cpteJumelleEm, string wDenomination, string cpteJumelleRe, string wDenominationRe, string wDevise, string libDevise, string wEmploye, string wLibEmploye, string wtxnno, Nullable<System.DateTime> dateVal, string opType, Nullable<double> montant, Nullable<double> txTVA, Nullable<double> commission, string refOp, string wDescription, string cpteColCoresp, string cleColCoresp, string libCpteColCoresp, string libLibelle, string libTrCode, string wtrCode, string cashTrCode, string senderName, string receiverName, string postSendType, string postReceiType, string statusOperation, Nullable<System.DateTime> serverDate, Nullable<int> espion, string optionSend, string langue, string telephone, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("WAgence", wAgence) :
                new ObjectParameter("WAgence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("WLibAgence", wLibAgence) :
                new ObjectParameter("WLibAgence", typeof(string));
    
            var wAgenceDesParameter = wAgenceDes != null ?
                new ObjectParameter("WAgenceDes", wAgenceDes) :
                new ObjectParameter("WAgenceDes", typeof(string));
    
            var wLibAgenceDestParameter = wLibAgenceDest != null ?
                new ObjectParameter("WLibAgenceDest", wLibAgenceDest) :
                new ObjectParameter("WLibAgenceDest", typeof(string));
    
            var cpteJumelleEmParameter = cpteJumelleEm != null ?
                new ObjectParameter("CpteJumelleEm", cpteJumelleEm) :
                new ObjectParameter("CpteJumelleEm", typeof(string));
    
            var wDenominationParameter = wDenomination != null ?
                new ObjectParameter("wDenomination", wDenomination) :
                new ObjectParameter("wDenomination", typeof(string));
    
            var cpteJumelleReParameter = cpteJumelleRe != null ?
                new ObjectParameter("CpteJumelleRe", cpteJumelleRe) :
                new ObjectParameter("CpteJumelleRe", typeof(string));
    
            var wDenominationReParameter = wDenominationRe != null ?
                new ObjectParameter("wDenominationRe", wDenominationRe) :
                new ObjectParameter("wDenominationRe", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("WEmploye", wEmploye) :
                new ObjectParameter("WEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("WLibEmploye", wLibEmploye) :
                new ObjectParameter("WLibEmploye", typeof(string));
    
            var wtxnnoParameter = wtxnno != null ?
                new ObjectParameter("wtxnno", wtxnno) :
                new ObjectParameter("wtxnno", typeof(string));
    
            var dateValParameter = dateVal.HasValue ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(System.DateTime));
    
            var opTypeParameter = opType != null ?
                new ObjectParameter("OpType", opType) :
                new ObjectParameter("OpType", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var commissionParameter = commission.HasValue ?
                new ObjectParameter("Commission", commission) :
                new ObjectParameter("Commission", typeof(double));
    
            var refOpParameter = refOp != null ?
                new ObjectParameter("RefOp", refOp) :
                new ObjectParameter("RefOp", typeof(string));
    
            var wDescriptionParameter = wDescription != null ?
                new ObjectParameter("wDescription", wDescription) :
                new ObjectParameter("wDescription", typeof(string));
    
            var cpteColCorespParameter = cpteColCoresp != null ?
                new ObjectParameter("CpteColCoresp", cpteColCoresp) :
                new ObjectParameter("CpteColCoresp", typeof(string));
    
            var cleColCorespParameter = cleColCoresp != null ?
                new ObjectParameter("CleColCoresp", cleColCoresp) :
                new ObjectParameter("CleColCoresp", typeof(string));
    
            var libCpteColCorespParameter = libCpteColCoresp != null ?
                new ObjectParameter("LibCpteColCoresp", libCpteColCoresp) :
                new ObjectParameter("LibCpteColCoresp", typeof(string));
    
            var libLibelleParameter = libLibelle != null ?
                new ObjectParameter("LibLibelle", libLibelle) :
                new ObjectParameter("LibLibelle", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var wtrCodeParameter = wtrCode != null ?
                new ObjectParameter("WtrCode", wtrCode) :
                new ObjectParameter("WtrCode", typeof(string));
    
            var cashTrCodeParameter = cashTrCode != null ?
                new ObjectParameter("CashTrCode", cashTrCode) :
                new ObjectParameter("CashTrCode", typeof(string));
    
            var senderNameParameter = senderName != null ?
                new ObjectParameter("SenderName", senderName) :
                new ObjectParameter("SenderName", typeof(string));
    
            var receiverNameParameter = receiverName != null ?
                new ObjectParameter("ReceiverName", receiverName) :
                new ObjectParameter("ReceiverName", typeof(string));
    
            var postSendTypeParameter = postSendType != null ?
                new ObjectParameter("PostSendType", postSendType) :
                new ObjectParameter("PostSendType", typeof(string));
    
            var postReceiTypeParameter = postReceiType != null ?
                new ObjectParameter("PostReceiType", postReceiType) :
                new ObjectParameter("PostReceiType", typeof(string));
    
            var statusOperationParameter = statusOperation != null ?
                new ObjectParameter("StatusOperation", statusOperation) :
                new ObjectParameter("StatusOperation", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var espionParameter = espion.HasValue ?
                new ObjectParameter("espion", espion) :
                new ObjectParameter("espion", typeof(int));
    
            var optionSendParameter = optionSend != null ?
                new ObjectParameter("OptionSend", optionSend) :
                new ObjectParameter("OptionSend", typeof(string));
    
            var langueParameter = langue != null ?
                new ObjectParameter("Langue", langue) :
                new ObjectParameter("Langue", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Receptiontrf_Result>("Receptiontrf", wAgenceParameter, wLibAgenceParameter, wAgenceDesParameter, wLibAgenceDestParameter, cpteJumelleEmParameter, wDenominationParameter, cpteJumelleReParameter, wDenominationReParameter, wDeviseParameter, libDeviseParameter, wEmployeParameter, wLibEmployeParameter, wtxnnoParameter, dateValParameter, opTypeParameter, montantParameter, txTVAParameter, commissionParameter, refOpParameter, wDescriptionParameter, cpteColCorespParameter, cleColCorespParameter, libCpteColCorespParameter, libLibelleParameter, libTrCodeParameter, wtrCodeParameter, cashTrCodeParameter, senderNameParameter, receiverNameParameter, postSendTypeParameter, postReceiTypeParameter, statusOperationParameter, serverDateParameter, espionParameter, optionSendParameter, langueParameter, telephoneParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int ReceptiontrfperTrf(string wAgence, string wLibAgence, string wAgenceDes, string wLibAgenceDest, string cpteJumelleEm, string wDenomination, string cpteJumelleRe, string wDenominationRe, string wDevise, string libDevise, string wEmploye, string wLibEmploye, string wtxnno, Nullable<System.DateTime> dateVal, string opType, Nullable<double> montant, Nullable<double> txTVA, Nullable<double> commission, string refOp, string wDescription, string cpteColCoresp, string cleColCoresp, string libCpteColCoresp, string libLibelle, string libTrCode, string wtrCode, string cashTrCode, string senderName, string receiverName, string postSendType, string postReceiType, string statusOperation, Nullable<System.DateTime> serverDate, Nullable<int> espion, string optionSend, string langue, string telephone, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("WAgence", wAgence) :
                new ObjectParameter("WAgence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("WLibAgence", wLibAgence) :
                new ObjectParameter("WLibAgence", typeof(string));
    
            var wAgenceDesParameter = wAgenceDes != null ?
                new ObjectParameter("WAgenceDes", wAgenceDes) :
                new ObjectParameter("WAgenceDes", typeof(string));
    
            var wLibAgenceDestParameter = wLibAgenceDest != null ?
                new ObjectParameter("WLibAgenceDest", wLibAgenceDest) :
                new ObjectParameter("WLibAgenceDest", typeof(string));
    
            var cpteJumelleEmParameter = cpteJumelleEm != null ?
                new ObjectParameter("CpteJumelleEm", cpteJumelleEm) :
                new ObjectParameter("CpteJumelleEm", typeof(string));
    
            var wDenominationParameter = wDenomination != null ?
                new ObjectParameter("wDenomination", wDenomination) :
                new ObjectParameter("wDenomination", typeof(string));
    
            var cpteJumelleReParameter = cpteJumelleRe != null ?
                new ObjectParameter("CpteJumelleRe", cpteJumelleRe) :
                new ObjectParameter("CpteJumelleRe", typeof(string));
    
            var wDenominationReParameter = wDenominationRe != null ?
                new ObjectParameter("wDenominationRe", wDenominationRe) :
                new ObjectParameter("wDenominationRe", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("WEmploye", wEmploye) :
                new ObjectParameter("WEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("WLibEmploye", wLibEmploye) :
                new ObjectParameter("WLibEmploye", typeof(string));
    
            var wtxnnoParameter = wtxnno != null ?
                new ObjectParameter("wtxnno", wtxnno) :
                new ObjectParameter("wtxnno", typeof(string));
    
            var dateValParameter = dateVal.HasValue ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(System.DateTime));
    
            var opTypeParameter = opType != null ?
                new ObjectParameter("OpType", opType) :
                new ObjectParameter("OpType", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var txTVAParameter = txTVA.HasValue ?
                new ObjectParameter("TxTVA", txTVA) :
                new ObjectParameter("TxTVA", typeof(double));
    
            var commissionParameter = commission.HasValue ?
                new ObjectParameter("Commission", commission) :
                new ObjectParameter("Commission", typeof(double));
    
            var refOpParameter = refOp != null ?
                new ObjectParameter("RefOp", refOp) :
                new ObjectParameter("RefOp", typeof(string));
    
            var wDescriptionParameter = wDescription != null ?
                new ObjectParameter("wDescription", wDescription) :
                new ObjectParameter("wDescription", typeof(string));
    
            var cpteColCorespParameter = cpteColCoresp != null ?
                new ObjectParameter("CpteColCoresp", cpteColCoresp) :
                new ObjectParameter("CpteColCoresp", typeof(string));
    
            var cleColCorespParameter = cleColCoresp != null ?
                new ObjectParameter("CleColCoresp", cleColCoresp) :
                new ObjectParameter("CleColCoresp", typeof(string));
    
            var libCpteColCorespParameter = libCpteColCoresp != null ?
                new ObjectParameter("LibCpteColCoresp", libCpteColCoresp) :
                new ObjectParameter("LibCpteColCoresp", typeof(string));
    
            var libLibelleParameter = libLibelle != null ?
                new ObjectParameter("LibLibelle", libLibelle) :
                new ObjectParameter("LibLibelle", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var wtrCodeParameter = wtrCode != null ?
                new ObjectParameter("WtrCode", wtrCode) :
                new ObjectParameter("WtrCode", typeof(string));
    
            var cashTrCodeParameter = cashTrCode != null ?
                new ObjectParameter("CashTrCode", cashTrCode) :
                new ObjectParameter("CashTrCode", typeof(string));
    
            var senderNameParameter = senderName != null ?
                new ObjectParameter("SenderName", senderName) :
                new ObjectParameter("SenderName", typeof(string));
    
            var receiverNameParameter = receiverName != null ?
                new ObjectParameter("ReceiverName", receiverName) :
                new ObjectParameter("ReceiverName", typeof(string));
    
            var postSendTypeParameter = postSendType != null ?
                new ObjectParameter("PostSendType", postSendType) :
                new ObjectParameter("PostSendType", typeof(string));
    
            var postReceiTypeParameter = postReceiType != null ?
                new ObjectParameter("PostReceiType", postReceiType) :
                new ObjectParameter("PostReceiType", typeof(string));
    
            var statusOperationParameter = statusOperation != null ?
                new ObjectParameter("StatusOperation", statusOperation) :
                new ObjectParameter("StatusOperation", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var espionParameter = espion.HasValue ?
                new ObjectParameter("espion", espion) :
                new ObjectParameter("espion", typeof(int));
    
            var optionSendParameter = optionSend != null ?
                new ObjectParameter("OptionSend", optionSend) :
                new ObjectParameter("OptionSend", typeof(string));
    
            var langueParameter = langue != null ?
                new ObjectParameter("Langue", langue) :
                new ObjectParameter("Langue", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReceptiontrfperTrf", wAgenceParameter, wLibAgenceParameter, wAgenceDesParameter, wLibAgenceDestParameter, cpteJumelleEmParameter, wDenominationParameter, cpteJumelleReParameter, wDenominationReParameter, wDeviseParameter, libDeviseParameter, wEmployeParameter, wLibEmployeParameter, wtxnnoParameter, dateValParameter, opTypeParameter, montantParameter, txTVAParameter, commissionParameter, refOpParameter, wDescriptionParameter, cpteColCorespParameter, cleColCorespParameter, libCpteColCorespParameter, libLibelleParameter, libTrCodeParameter, wtrCodeParameter, cashTrCodeParameter, senderNameParameter, receiverNameParameter, postSendTypeParameter, postReceiTypeParameter, statusOperationParameter, serverDateParameter, espionParameter, optionSendParameter, langueParameter, telephoneParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<RecoveContentieux_Result> RecoveContentieux(string wagence, string wLibAgence, string wEmploye, string wLibEmploye, string devise, string libDevise, ObjectParameter lecture, ObjectParameter msg, string computerName, string language, Nullable<double> capitalRec, Nullable<double> interestRec, Nullable<double> vatRec, string v_NumeroContrat, Nullable<decimal> v_Serie)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var capitalRecParameter = capitalRec.HasValue ?
                new ObjectParameter("CapitalRec", capitalRec) :
                new ObjectParameter("CapitalRec", typeof(double));
    
            var interestRecParameter = interestRec.HasValue ?
                new ObjectParameter("InterestRec", interestRec) :
                new ObjectParameter("InterestRec", typeof(double));
    
            var vatRecParameter = vatRec.HasValue ?
                new ObjectParameter("VatRec", vatRec) :
                new ObjectParameter("VatRec", typeof(double));
    
            var v_NumeroContratParameter = v_NumeroContrat != null ?
                new ObjectParameter("V_NumeroContrat", v_NumeroContrat) :
                new ObjectParameter("V_NumeroContrat", typeof(string));
    
            var v_SerieParameter = v_Serie.HasValue ?
                new ObjectParameter("V_Serie", v_Serie) :
                new ObjectParameter("V_Serie", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RecoveContentieux_Result>("RecoveContentieux", wagenceParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, deviseParameter, libDeviseParameter, lecture, msg, computerNameParameter, languageParameter, capitalRecParameter, interestRecParameter, vatRecParameter, v_NumeroContratParameter, v_SerieParameter);
        }
    
        public virtual ObjectResult<RecoveImpaye_Result> RecoveImpaye(string wagence, string wLibAgence, string wEmploye, string wLibEmploye, Nullable<double> capitalRec, Nullable<double> interestRec, Nullable<double> vatRec, string devise, string libDevise, ObjectParameter lecture, ObjectParameter msg, string computername, string language, string v_NumeroContrat, Nullable<decimal> v_Serie)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var capitalRecParameter = capitalRec.HasValue ?
                new ObjectParameter("CapitalRec", capitalRec) :
                new ObjectParameter("CapitalRec", typeof(double));
    
            var interestRecParameter = interestRec.HasValue ?
                new ObjectParameter("InterestRec", interestRec) :
                new ObjectParameter("InterestRec", typeof(double));
    
            var vatRecParameter = vatRec.HasValue ?
                new ObjectParameter("VatRec", vatRec) :
                new ObjectParameter("VatRec", typeof(double));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var v_NumeroContratParameter = v_NumeroContrat != null ?
                new ObjectParameter("V_NumeroContrat", v_NumeroContrat) :
                new ObjectParameter("V_NumeroContrat", typeof(string));
    
            var v_SerieParameter = v_Serie.HasValue ?
                new ObjectParameter("V_Serie", v_Serie) :
                new ObjectParameter("V_Serie", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RecoveImpaye_Result>("RecoveImpaye", wagenceParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, capitalRecParameter, interestRecParameter, vatRecParameter, deviseParameter, libDeviseParameter, lecture, msg, computernameParameter, languageParameter, v_NumeroContratParameter, v_SerieParameter);
        }
    
        public virtual ObjectResult<RecoveWriteOff_Result> RecoveWriteOff(string wagence, string wLibAgence, string wEmploye, string wLibEmploye, string devise, string libDevise, ObjectParameter lecture, ObjectParameter msg, string computerName, string language, Nullable<double> capitalRec, Nullable<double> interestRec, Nullable<double> vatRec, string v_NumeroContrat, Nullable<decimal> v_Serie, Nullable<int> statut)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var capitalRecParameter = capitalRec.HasValue ?
                new ObjectParameter("CapitalRec", capitalRec) :
                new ObjectParameter("CapitalRec", typeof(double));
    
            var interestRecParameter = interestRec.HasValue ?
                new ObjectParameter("InterestRec", interestRec) :
                new ObjectParameter("InterestRec", typeof(double));
    
            var vatRecParameter = vatRec.HasValue ?
                new ObjectParameter("VatRec", vatRec) :
                new ObjectParameter("VatRec", typeof(double));
    
            var v_NumeroContratParameter = v_NumeroContrat != null ?
                new ObjectParameter("V_NumeroContrat", v_NumeroContrat) :
                new ObjectParameter("V_NumeroContrat", typeof(string));
    
            var v_SerieParameter = v_Serie.HasValue ?
                new ObjectParameter("V_Serie", v_Serie) :
                new ObjectParameter("V_Serie", typeof(decimal));
    
            var statutParameter = statut.HasValue ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RecoveWriteOff_Result>("RecoveWriteOff", wagenceParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, deviseParameter, libDeviseParameter, lecture, msg, computerNameParameter, languageParameter, capitalRecParameter, interestRecParameter, vatRecParameter, v_NumeroContratParameter, v_SerieParameter, statutParameter);
        }
    
        public virtual ObjectResult<RecoveWriteOffContentieux_Result> RecoveWriteOffContentieux(string wagence, string wLibAgence, string wEmploye, string wLibEmploye, string devise, string libDevise, ObjectParameter lecture, ObjectParameter msg, string computerName, string language, Nullable<double> capitalRec, Nullable<double> interestRec, Nullable<double> vatRec, string v_NumeroContrat, Nullable<decimal> v_Serie)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var capitalRecParameter = capitalRec.HasValue ?
                new ObjectParameter("CapitalRec", capitalRec) :
                new ObjectParameter("CapitalRec", typeof(double));
    
            var interestRecParameter = interestRec.HasValue ?
                new ObjectParameter("InterestRec", interestRec) :
                new ObjectParameter("InterestRec", typeof(double));
    
            var vatRecParameter = vatRec.HasValue ?
                new ObjectParameter("VatRec", vatRec) :
                new ObjectParameter("VatRec", typeof(double));
    
            var v_NumeroContratParameter = v_NumeroContrat != null ?
                new ObjectParameter("V_NumeroContrat", v_NumeroContrat) :
                new ObjectParameter("V_NumeroContrat", typeof(string));
    
            var v_SerieParameter = v_Serie.HasValue ?
                new ObjectParameter("V_Serie", v_Serie) :
                new ObjectParameter("V_Serie", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RecoveWriteOffContentieux_Result>("RecoveWriteOffContentieux", wagenceParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, deviseParameter, libDeviseParameter, lecture, msg, computerNameParameter, languageParameter, capitalRecParameter, interestRecParameter, vatRecParameter, v_NumeroContratParameter, v_SerieParameter);
        }
    
        public virtual ObjectResult<RecoveWriteoffImpaye_Result> RecoveWriteoffImpaye(string wagence, string wLibAgence, string wEmploye, string wLibEmploye, Nullable<double> capitalRec, Nullable<double> interestRec, Nullable<double> vatRec, string devise, string libDevise, ObjectParameter lecture, ObjectParameter msg, string computername, string language, string v_NumeroContrat, Nullable<decimal> v_Serie)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var capitalRecParameter = capitalRec.HasValue ?
                new ObjectParameter("CapitalRec", capitalRec) :
                new ObjectParameter("CapitalRec", typeof(double));
    
            var interestRecParameter = interestRec.HasValue ?
                new ObjectParameter("InterestRec", interestRec) :
                new ObjectParameter("InterestRec", typeof(double));
    
            var vatRecParameter = vatRec.HasValue ?
                new ObjectParameter("VatRec", vatRec) :
                new ObjectParameter("VatRec", typeof(double));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var v_NumeroContratParameter = v_NumeroContrat != null ?
                new ObjectParameter("V_NumeroContrat", v_NumeroContrat) :
                new ObjectParameter("V_NumeroContrat", typeof(string));
    
            var v_SerieParameter = v_Serie.HasValue ?
                new ObjectParameter("V_Serie", v_Serie) :
                new ObjectParameter("V_Serie", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RecoveWriteoffImpaye_Result>("RecoveWriteoffImpaye", wagenceParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, capitalRecParameter, interestRecParameter, vatRecParameter, deviseParameter, libDeviseParameter, lecture, msg, computernameParameter, languageParameter, v_NumeroContratParameter, v_SerieParameter);
        }
    
        public virtual int REF_TRANSACTION(string pc_CODEOP, ObjectParameter lect, ObjectParameter vC_REFERENCE, ObjectParameter errMsg, string language)
        {
            var pc_CODEOPParameter = pc_CODEOP != null ?
                new ObjectParameter("Pc_CODEOP", pc_CODEOP) :
                new ObjectParameter("Pc_CODEOP", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REF_TRANSACTION", pc_CODEOPParameter, lect, vC_REFERENCE, errMsg, languageParameter);
        }
    
        public virtual ObjectResult<RegBonCaisseCash_S_Trans_Result> RegBonCaisseCash_S_Trans(string agence, string libAgence, string devise, string libDevise, string svCpteJumelleCC, Nullable<double> svCapital, Nullable<double> svInteret, Nullable<double> svTprcm, string svNumeroContrat, string wemploye, string wlibemploye, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("libAgence", libAgence) :
                new ObjectParameter("libAgence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var svCpteJumelleCCParameter = svCpteJumelleCC != null ?
                new ObjectParameter("SvCpteJumelleCC", svCpteJumelleCC) :
                new ObjectParameter("SvCpteJumelleCC", typeof(string));
    
            var svCapitalParameter = svCapital.HasValue ?
                new ObjectParameter("SvCapital", svCapital) :
                new ObjectParameter("SvCapital", typeof(double));
    
            var svInteretParameter = svInteret.HasValue ?
                new ObjectParameter("SvInteret", svInteret) :
                new ObjectParameter("SvInteret", typeof(double));
    
            var svTprcmParameter = svTprcm.HasValue ?
                new ObjectParameter("SvTprcm", svTprcm) :
                new ObjectParameter("SvTprcm", typeof(double));
    
            var svNumeroContratParameter = svNumeroContrat != null ?
                new ObjectParameter("SvNumeroContrat", svNumeroContrat) :
                new ObjectParameter("SvNumeroContrat", typeof(string));
    
            var wemployeParameter = wemploye != null ?
                new ObjectParameter("wemploye", wemploye) :
                new ObjectParameter("wemploye", typeof(string));
    
            var wlibemployeParameter = wlibemploye != null ?
                new ObjectParameter("wlibemploye", wlibemploye) :
                new ObjectParameter("wlibemploye", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RegBonCaisseCash_S_Trans_Result>("RegBonCaisseCash_S_Trans", agenceParameter, libAgenceParameter, deviseParameter, libDeviseParameter, svCpteJumelleCCParameter, svCapitalParameter, svInteretParameter, svTprcmParameter, svNumeroContratParameter, wemployeParameter, wlibemployeParameter, lect, msg, languageParameter);
        }
    
        public virtual ObjectResult<RegDepotTermeCash_S_Trans_Result> RegDepotTermeCash_S_Trans(string agence, string libAgence, string devise, string libDevise, string svCpteJumelleCC, string svCpteDT, Nullable<double> svCapital, Nullable<double> svInteret, Nullable<double> svTprcm, Nullable<double> svPenalite, string svNumeroContrat, string wemploye, string wlibemploye, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("libAgence", libAgence) :
                new ObjectParameter("libAgence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var svCpteJumelleCCParameter = svCpteJumelleCC != null ?
                new ObjectParameter("SvCpteJumelleCC", svCpteJumelleCC) :
                new ObjectParameter("SvCpteJumelleCC", typeof(string));
    
            var svCpteDTParameter = svCpteDT != null ?
                new ObjectParameter("SvCpteDT", svCpteDT) :
                new ObjectParameter("SvCpteDT", typeof(string));
    
            var svCapitalParameter = svCapital.HasValue ?
                new ObjectParameter("SvCapital", svCapital) :
                new ObjectParameter("SvCapital", typeof(double));
    
            var svInteretParameter = svInteret.HasValue ?
                new ObjectParameter("SvInteret", svInteret) :
                new ObjectParameter("SvInteret", typeof(double));
    
            var svTprcmParameter = svTprcm.HasValue ?
                new ObjectParameter("SvTprcm", svTprcm) :
                new ObjectParameter("SvTprcm", typeof(double));
    
            var svPenaliteParameter = svPenalite.HasValue ?
                new ObjectParameter("SvPenalite", svPenalite) :
                new ObjectParameter("SvPenalite", typeof(double));
    
            var svNumeroContratParameter = svNumeroContrat != null ?
                new ObjectParameter("SvNumeroContrat", svNumeroContrat) :
                new ObjectParameter("SvNumeroContrat", typeof(string));
    
            var wemployeParameter = wemploye != null ?
                new ObjectParameter("wemploye", wemploye) :
                new ObjectParameter("wemploye", typeof(string));
    
            var wlibemployeParameter = wlibemploye != null ?
                new ObjectParameter("wlibemploye", wlibemploye) :
                new ObjectParameter("wlibemploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RegDepotTermeCash_S_Trans_Result>("RegDepotTermeCash_S_Trans", agenceParameter, libAgenceParameter, deviseParameter, libDeviseParameter, svCpteJumelleCCParameter, svCpteDTParameter, svCapitalParameter, svInteretParameter, svTprcmParameter, svPenaliteParameter, svNumeroContratParameter, wemployeParameter, wlibemployeParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int RembAnticipe_Insert(string agence, string client, string denomination, string cpteJumelleCC, string cpteJumelleCredit, Nullable<double> montant, Nullable<System.DateTime> dateOrdre, Nullable<double> rembCapital, Nullable<double> mtInteret, Nullable<double> mtTVA, string description, Nullable<System.DateTime> dateCreation, Nullable<System.DateTime> dateCpta, string libAgence, string txnNo, string numeroContrat, string matricule, string libEmploye, string computername, ObjectParameter lect, ObjectParameter msg, Nullable<double> antife, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var cpteJumelleCCParameter = cpteJumelleCC != null ?
                new ObjectParameter("CpteJumelleCC", cpteJumelleCC) :
                new ObjectParameter("CpteJumelleCC", typeof(string));
    
            var cpteJumelleCreditParameter = cpteJumelleCredit != null ?
                new ObjectParameter("CpteJumelleCredit", cpteJumelleCredit) :
                new ObjectParameter("CpteJumelleCredit", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var dateOrdreParameter = dateOrdre.HasValue ?
                new ObjectParameter("DateOrdre", dateOrdre) :
                new ObjectParameter("DateOrdre", typeof(System.DateTime));
    
            var rembCapitalParameter = rembCapital.HasValue ?
                new ObjectParameter("RembCapital", rembCapital) :
                new ObjectParameter("RembCapital", typeof(double));
    
            var mtInteretParameter = mtInteret.HasValue ?
                new ObjectParameter("MtInteret", mtInteret) :
                new ObjectParameter("MtInteret", typeof(double));
    
            var mtTVAParameter = mtTVA.HasValue ?
                new ObjectParameter("MtTVA", mtTVA) :
                new ObjectParameter("MtTVA", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var dateCptaParameter = dateCpta.HasValue ?
                new ObjectParameter("DateCpta", dateCpta) :
                new ObjectParameter("DateCpta", typeof(System.DateTime));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var antifeParameter = antife.HasValue ?
                new ObjectParameter("antife", antife) :
                new ObjectParameter("antife", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RembAnticipe_Insert", agenceParameter, clientParameter, denominationParameter, cpteJumelleCCParameter, cpteJumelleCreditParameter, montantParameter, dateOrdreParameter, rembCapitalParameter, mtInteretParameter, mtTVAParameter, descriptionParameter, dateCreationParameter, dateCptaParameter, libAgenceParameter, txnNoParameter, numeroContratParameter, matriculeParameter, libEmployeParameter, computernameParameter, lect, msg, antifeParameter, languageParameter);
        }
    
        public virtual ObjectResult<RemboursementAnticipe_Result> RemboursementAnticipe(string agence, string libAgence, string wCpteJumelleCC, string hCpteJumCredit, string numeroContrat, string denomination, Nullable<double> capitalAnticipation, Nullable<double> interetAnticipation, Nullable<double> tVAAnticipation, Nullable<System.DateTime> dateOrdre, Nullable<double> antifee, string devise, string libDevise, string matricule, string libEmploye, string computerName, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var wCpteJumelleCCParameter = wCpteJumelleCC != null ?
                new ObjectParameter("WCpteJumelleCC", wCpteJumelleCC) :
                new ObjectParameter("WCpteJumelleCC", typeof(string));
    
            var hCpteJumCreditParameter = hCpteJumCredit != null ?
                new ObjectParameter("HCpteJumCredit", hCpteJumCredit) :
                new ObjectParameter("HCpteJumCredit", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var capitalAnticipationParameter = capitalAnticipation.HasValue ?
                new ObjectParameter("CapitalAnticipation", capitalAnticipation) :
                new ObjectParameter("CapitalAnticipation", typeof(double));
    
            var interetAnticipationParameter = interetAnticipation.HasValue ?
                new ObjectParameter("InteretAnticipation", interetAnticipation) :
                new ObjectParameter("InteretAnticipation", typeof(double));
    
            var tVAAnticipationParameter = tVAAnticipation.HasValue ?
                new ObjectParameter("TVAAnticipation", tVAAnticipation) :
                new ObjectParameter("TVAAnticipation", typeof(double));
    
            var dateOrdreParameter = dateOrdre.HasValue ?
                new ObjectParameter("DateOrdre", dateOrdre) :
                new ObjectParameter("DateOrdre", typeof(System.DateTime));
    
            var antifeeParameter = antifee.HasValue ?
                new ObjectParameter("Antifee", antifee) :
                new ObjectParameter("Antifee", typeof(double));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RemboursementAnticipe_Result>("RemboursementAnticipe", agenceParameter, libAgenceParameter, wCpteJumelleCCParameter, hCpteJumCreditParameter, numeroContratParameter, denominationParameter, capitalAnticipationParameter, interetAnticipationParameter, tVAAnticipationParameter, dateOrdreParameter, antifeeParameter, deviseParameter, libDeviseParameter, matriculeParameter, libEmployeParameter, computerNameParameter, lect, msg, languageParameter);
        }
    
        public virtual ObjectResult<RemboursementAnticipePartielle_Result> RemboursementAnticipePartielle(string agence, string libAgence, string wCpteJumelleCC, string hCpteJumCredit, string numeroContrat, string denomination, Nullable<double> capitalAnticipation, Nullable<double> interetAnticipation, Nullable<double> tVAAnticipation, Nullable<double> tVAInterest, Nullable<System.DateTime> dateOrdre, Nullable<double> antifee, string devise, string libDevise, string matricule, string libEmploye, string computerName, string pay, Nullable<int> echeance, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var wCpteJumelleCCParameter = wCpteJumelleCC != null ?
                new ObjectParameter("WCpteJumelleCC", wCpteJumelleCC) :
                new ObjectParameter("WCpteJumelleCC", typeof(string));
    
            var hCpteJumCreditParameter = hCpteJumCredit != null ?
                new ObjectParameter("HCpteJumCredit", hCpteJumCredit) :
                new ObjectParameter("HCpteJumCredit", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var capitalAnticipationParameter = capitalAnticipation.HasValue ?
                new ObjectParameter("CapitalAnticipation", capitalAnticipation) :
                new ObjectParameter("CapitalAnticipation", typeof(double));
    
            var interetAnticipationParameter = interetAnticipation.HasValue ?
                new ObjectParameter("InteretAnticipation", interetAnticipation) :
                new ObjectParameter("InteretAnticipation", typeof(double));
    
            var tVAAnticipationParameter = tVAAnticipation.HasValue ?
                new ObjectParameter("TVAAnticipation", tVAAnticipation) :
                new ObjectParameter("TVAAnticipation", typeof(double));
    
            var tVAInterestParameter = tVAInterest.HasValue ?
                new ObjectParameter("TVAInterest", tVAInterest) :
                new ObjectParameter("TVAInterest", typeof(double));
    
            var dateOrdreParameter = dateOrdre.HasValue ?
                new ObjectParameter("DateOrdre", dateOrdre) :
                new ObjectParameter("DateOrdre", typeof(System.DateTime));
    
            var antifeeParameter = antifee.HasValue ?
                new ObjectParameter("Antifee", antifee) :
                new ObjectParameter("Antifee", typeof(double));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var payParameter = pay != null ?
                new ObjectParameter("pay", pay) :
                new ObjectParameter("pay", typeof(string));
    
            var echeanceParameter = echeance.HasValue ?
                new ObjectParameter("Echeance", echeance) :
                new ObjectParameter("Echeance", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RemboursementAnticipePartielle_Result>("RemboursementAnticipePartielle", agenceParameter, libAgenceParameter, wCpteJumelleCCParameter, hCpteJumCreditParameter, numeroContratParameter, denominationParameter, capitalAnticipationParameter, interetAnticipationParameter, tVAAnticipationParameter, tVAInterestParameter, dateOrdreParameter, antifeeParameter, deviseParameter, libDeviseParameter, matriculeParameter, libEmployeParameter, computerNameParameter, payParameter, echeanceParameter, lect, msg, languageParameter);
        }
    
        public virtual int REMOVE_MENU_EMPLOYE(string pI_Matricule, string pI_Employe, Nullable<int> pI_MENU, Nullable<int> pI_ALLMENU, string pC_MENUNAME, Nullable<int> pI_ACCESLEV, string pC_MENUDESC, string pC_MODULE, ObjectParameter lect, ObjectParameter errMsg, string computerName, string language)
        {
            var pI_MatriculeParameter = pI_Matricule != null ?
                new ObjectParameter("PI_Matricule", pI_Matricule) :
                new ObjectParameter("PI_Matricule", typeof(string));
    
            var pI_EmployeParameter = pI_Employe != null ?
                new ObjectParameter("PI_Employe", pI_Employe) :
                new ObjectParameter("PI_Employe", typeof(string));
    
            var pI_MENUParameter = pI_MENU.HasValue ?
                new ObjectParameter("PI_MENU", pI_MENU) :
                new ObjectParameter("PI_MENU", typeof(int));
    
            var pI_ALLMENUParameter = pI_ALLMENU.HasValue ?
                new ObjectParameter("PI_ALLMENU", pI_ALLMENU) :
                new ObjectParameter("PI_ALLMENU", typeof(int));
    
            var pC_MENUNAMEParameter = pC_MENUNAME != null ?
                new ObjectParameter("PC_MENUNAME", pC_MENUNAME) :
                new ObjectParameter("PC_MENUNAME", typeof(string));
    
            var pI_ACCESLEVParameter = pI_ACCESLEV.HasValue ?
                new ObjectParameter("PI_ACCESLEV", pI_ACCESLEV) :
                new ObjectParameter("PI_ACCESLEV", typeof(int));
    
            var pC_MENUDESCParameter = pC_MENUDESC != null ?
                new ObjectParameter("PC_MENUDESC", pC_MENUDESC) :
                new ObjectParameter("PC_MENUDESC", typeof(string));
    
            var pC_MODULEParameter = pC_MODULE != null ?
                new ObjectParameter("PC_MODULE", pC_MODULE) :
                new ObjectParameter("PC_MODULE", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REMOVE_MENU_EMPLOYE", pI_MatriculeParameter, pI_EmployeParameter, pI_MENUParameter, pI_ALLMENUParameter, pC_MENUNAMEParameter, pI_ACCESLEVParameter, pC_MENUDESCParameter, pC_MODULEParameter, lect, errMsg, computerNameParameter, languageParameter);
        }
    
        public virtual int REMOVE_PRIV_EMPLOYE(string pI_EmployeName, string pI_Employe, string pC_MENUNAME, string pC_MENUDESC, string pC_PRIVILEGE, string pC_APPLICATIONNAME, string pC_AGENCE, string computerName, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var pI_EmployeNameParameter = pI_EmployeName != null ?
                new ObjectParameter("PI_EmployeName", pI_EmployeName) :
                new ObjectParameter("PI_EmployeName", typeof(string));
    
            var pI_EmployeParameter = pI_Employe != null ?
                new ObjectParameter("PI_Employe", pI_Employe) :
                new ObjectParameter("PI_Employe", typeof(string));
    
            var pC_MENUNAMEParameter = pC_MENUNAME != null ?
                new ObjectParameter("PC_MENUNAME", pC_MENUNAME) :
                new ObjectParameter("PC_MENUNAME", typeof(string));
    
            var pC_MENUDESCParameter = pC_MENUDESC != null ?
                new ObjectParameter("PC_MENUDESC", pC_MENUDESC) :
                new ObjectParameter("PC_MENUDESC", typeof(string));
    
            var pC_PRIVILEGEParameter = pC_PRIVILEGE != null ?
                new ObjectParameter("PC_PRIVILEGE", pC_PRIVILEGE) :
                new ObjectParameter("PC_PRIVILEGE", typeof(string));
    
            var pC_APPLICATIONNAMEParameter = pC_APPLICATIONNAME != null ?
                new ObjectParameter("PC_APPLICATIONNAME", pC_APPLICATIONNAME) :
                new ObjectParameter("PC_APPLICATIONNAME", typeof(string));
    
            var pC_AGENCEParameter = pC_AGENCE != null ?
                new ObjectParameter("PC_AGENCE", pC_AGENCE) :
                new ObjectParameter("PC_AGENCE", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REMOVE_PRIV_EMPLOYE", pI_EmployeNameParameter, pI_EmployeParameter, pC_MENUNAMEParameter, pC_MENUDESCParameter, pC_PRIVILEGEParameter, pC_APPLICATIONNAMEParameter, pC_AGENCEParameter, computerNameParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int REMOVE_ROLE_EMPLOYE(string pI_Matricule, string pC_LIBEMP, string pI_Employe, string pC_LIBEMPLOYE, string pC_ROLENAME, string pC_ROLEDESC, string pC_AGENCE, ObjectParameter lect, ObjectParameter errMsg, string computerName, string language)
        {
            var pI_MatriculeParameter = pI_Matricule != null ?
                new ObjectParameter("PI_Matricule", pI_Matricule) :
                new ObjectParameter("PI_Matricule", typeof(string));
    
            var pC_LIBEMPParameter = pC_LIBEMP != null ?
                new ObjectParameter("PC_LIBEMP", pC_LIBEMP) :
                new ObjectParameter("PC_LIBEMP", typeof(string));
    
            var pI_EmployeParameter = pI_Employe != null ?
                new ObjectParameter("PI_Employe", pI_Employe) :
                new ObjectParameter("PI_Employe", typeof(string));
    
            var pC_LIBEMPLOYEParameter = pC_LIBEMPLOYE != null ?
                new ObjectParameter("PC_LIBEMPLOYE", pC_LIBEMPLOYE) :
                new ObjectParameter("PC_LIBEMPLOYE", typeof(string));
    
            var pC_ROLENAMEParameter = pC_ROLENAME != null ?
                new ObjectParameter("PC_ROLENAME", pC_ROLENAME) :
                new ObjectParameter("PC_ROLENAME", typeof(string));
    
            var pC_ROLEDESCParameter = pC_ROLEDESC != null ?
                new ObjectParameter("PC_ROLEDESC", pC_ROLEDESC) :
                new ObjectParameter("PC_ROLEDESC", typeof(string));
    
            var pC_AGENCEParameter = pC_AGENCE != null ?
                new ObjectParameter("PC_AGENCE", pC_AGENCE) :
                new ObjectParameter("PC_AGENCE", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REMOVE_ROLE_EMPLOYE", pI_MatriculeParameter, pC_LIBEMPParameter, pI_EmployeParameter, pC_LIBEMPLOYEParameter, pC_ROLENAMEParameter, pC_ROLEDESCParameter, pC_AGENCEParameter, lect, errMsg, computerNameParameter, languageParameter);
        }
    
        public virtual int ReserveFunds(string agence, string libAgence, string wEmploye, string wLibEmploye, string devise, string libDevise, Nullable<System.DateTime> wDateOp, string typeOp, string descriptionOp, ObjectParameter lect, ObjectParameter errMsg, ObjectParameter cpteJumResFunds, ObjectParameter cpteColResFun, ObjectParameter cleColResFun, ObjectParameter libCpteColResFun, string computerName, string language, string cobacID)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var wDateOpParameter = wDateOp.HasValue ?
                new ObjectParameter("WDateOp", wDateOp) :
                new ObjectParameter("WDateOp", typeof(System.DateTime));
    
            var typeOpParameter = typeOp != null ?
                new ObjectParameter("TypeOp", typeOp) :
                new ObjectParameter("TypeOp", typeof(string));
    
            var descriptionOpParameter = descriptionOp != null ?
                new ObjectParameter("DescriptionOp", descriptionOp) :
                new ObjectParameter("DescriptionOp", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReserveFunds", agenceParameter, libAgenceParameter, wEmployeParameter, wLibEmployeParameter, deviseParameter, libDeviseParameter, wDateOpParameter, typeOpParameter, descriptionOpParameter, lect, errMsg, cpteJumResFunds, cpteColResFun, cleColResFun, libCpteColResFun, computerNameParameter, languageParameter, cobacIDParameter);
        }
    
        public virtual ObjectResult<ReserveInterest_Result> ReserveInterest(string agence, string libAgence, string wClient, string cpteJumelle, string denomination, string wEmploye, string wLibEmploye, string txnno, string devise, string libDevise, Nullable<double> montant, Nullable<System.DateTime> wDateOp, string codeBilling, Nullable<System.DateTime> dateIntDebut, Nullable<System.DateTime> dateIntFin, string descriptionOp, ObjectParameter lect, ObjectParameter errMsg, Nullable<double> svTVAMois, string cpteJumPrinc, string language, string cobacID)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var wClientParameter = wClient != null ?
                new ObjectParameter("wClient", wClient) :
                new ObjectParameter("wClient", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var wDateOpParameter = wDateOp.HasValue ?
                new ObjectParameter("WDateOp", wDateOp) :
                new ObjectParameter("WDateOp", typeof(System.DateTime));
    
            var codeBillingParameter = codeBilling != null ?
                new ObjectParameter("CodeBilling", codeBilling) :
                new ObjectParameter("CodeBilling", typeof(string));
    
            var dateIntDebutParameter = dateIntDebut.HasValue ?
                new ObjectParameter("DateIntDebut", dateIntDebut) :
                new ObjectParameter("DateIntDebut", typeof(System.DateTime));
    
            var dateIntFinParameter = dateIntFin.HasValue ?
                new ObjectParameter("DateIntFin", dateIntFin) :
                new ObjectParameter("DateIntFin", typeof(System.DateTime));
    
            var descriptionOpParameter = descriptionOp != null ?
                new ObjectParameter("DescriptionOp", descriptionOp) :
                new ObjectParameter("DescriptionOp", typeof(string));
    
            var svTVAMoisParameter = svTVAMois.HasValue ?
                new ObjectParameter("SvTVAMois", svTVAMois) :
                new ObjectParameter("SvTVAMois", typeof(double));
    
            var cpteJumPrincParameter = cpteJumPrinc != null ?
                new ObjectParameter("CpteJumPrinc", cpteJumPrinc) :
                new ObjectParameter("CpteJumPrinc", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReserveInterest_Result>("ReserveInterest", agenceParameter, libAgenceParameter, wClientParameter, cpteJumelleParameter, denominationParameter, wEmployeParameter, wLibEmployeParameter, txnnoParameter, deviseParameter, libDeviseParameter, montantParameter, wDateOpParameter, codeBillingParameter, dateIntDebutParameter, dateIntFinParameter, descriptionOpParameter, lect, errMsg, svTVAMoisParameter, cpteJumPrincParameter, languageParameter, cobacIDParameter);
        }
    
        public virtual int RetAmountBillingOption(Nullable<System.DateTime> pd_ServerDate, string pc_PrincipAccount, string pc_SlaveAccount, string pc_TypeOp, string pc_CodeOp, Nullable<double> svMontant, string svParaTx, ObjectParameter lect, ObjectParameter errMsg, ObjectParameter retAmount, string language)
        {
            var pd_ServerDateParameter = pd_ServerDate.HasValue ?
                new ObjectParameter("Pd_ServerDate", pd_ServerDate) :
                new ObjectParameter("Pd_ServerDate", typeof(System.DateTime));
    
            var pc_PrincipAccountParameter = pc_PrincipAccount != null ?
                new ObjectParameter("Pc_PrincipAccount", pc_PrincipAccount) :
                new ObjectParameter("Pc_PrincipAccount", typeof(string));
    
            var pc_SlaveAccountParameter = pc_SlaveAccount != null ?
                new ObjectParameter("Pc_SlaveAccount", pc_SlaveAccount) :
                new ObjectParameter("Pc_SlaveAccount", typeof(string));
    
            var pc_TypeOpParameter = pc_TypeOp != null ?
                new ObjectParameter("Pc_TypeOp", pc_TypeOp) :
                new ObjectParameter("Pc_TypeOp", typeof(string));
    
            var pc_CodeOpParameter = pc_CodeOp != null ?
                new ObjectParameter("Pc_CodeOp", pc_CodeOp) :
                new ObjectParameter("Pc_CodeOp", typeof(string));
    
            var svMontantParameter = svMontant.HasValue ?
                new ObjectParameter("SvMontant", svMontant) :
                new ObjectParameter("SvMontant", typeof(double));
    
            var svParaTxParameter = svParaTx != null ?
                new ObjectParameter("SvParaTx", svParaTx) :
                new ObjectParameter("SvParaTx", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RetAmountBillingOption", pd_ServerDateParameter, pc_PrincipAccountParameter, pc_SlaveAccountParameter, pc_TypeOpParameter, pc_CodeOpParameter, svMontantParameter, svParaTxParameter, lect, errMsg, retAmount, languageParameter);
        }
    
        public virtual int RetAmountPFBillingOption(Nullable<System.DateTime> pd_ServerDate, string pc_PrincipAccount, string pc_TRCODE, string pc_TypeOp, string pc_CodeOp, Nullable<double> svMontant, string svParaTx, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var pd_ServerDateParameter = pd_ServerDate.HasValue ?
                new ObjectParameter("Pd_ServerDate", pd_ServerDate) :
                new ObjectParameter("Pd_ServerDate", typeof(System.DateTime));
    
            var pc_PrincipAccountParameter = pc_PrincipAccount != null ?
                new ObjectParameter("Pc_PrincipAccount", pc_PrincipAccount) :
                new ObjectParameter("Pc_PrincipAccount", typeof(string));
    
            var pc_TRCODEParameter = pc_TRCODE != null ?
                new ObjectParameter("Pc_TRCODE", pc_TRCODE) :
                new ObjectParameter("Pc_TRCODE", typeof(string));
    
            var pc_TypeOpParameter = pc_TypeOp != null ?
                new ObjectParameter("Pc_TypeOp", pc_TypeOp) :
                new ObjectParameter("Pc_TypeOp", typeof(string));
    
            var pc_CodeOpParameter = pc_CodeOp != null ?
                new ObjectParameter("Pc_CodeOp", pc_CodeOp) :
                new ObjectParameter("Pc_CodeOp", typeof(string));
    
            var svMontantParameter = svMontant.HasValue ?
                new ObjectParameter("SvMontant", svMontant) :
                new ObjectParameter("SvMontant", typeof(double));
    
            var svParaTxParameter = svParaTx != null ?
                new ObjectParameter("SvParaTx", svParaTx) :
                new ObjectParameter("SvParaTx", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RetAmountPFBillingOption", pd_ServerDateParameter, pc_PrincipAccountParameter, pc_TRCODEParameter, pc_TypeOpParameter, pc_CodeOpParameter, svMontantParameter, svParaTxParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int RetAmountTrBillingOption(Nullable<System.DateTime> pd_ServerDate, string pc_PrincipAccount, string pc_TRCODE, string pc_TypeOp, string pc_CodeOp, Nullable<double> svMontant, string svParaTx, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var pd_ServerDateParameter = pd_ServerDate.HasValue ?
                new ObjectParameter("Pd_ServerDate", pd_ServerDate) :
                new ObjectParameter("Pd_ServerDate", typeof(System.DateTime));
    
            var pc_PrincipAccountParameter = pc_PrincipAccount != null ?
                new ObjectParameter("Pc_PrincipAccount", pc_PrincipAccount) :
                new ObjectParameter("Pc_PrincipAccount", typeof(string));
    
            var pc_TRCODEParameter = pc_TRCODE != null ?
                new ObjectParameter("Pc_TRCODE", pc_TRCODE) :
                new ObjectParameter("Pc_TRCODE", typeof(string));
    
            var pc_TypeOpParameter = pc_TypeOp != null ?
                new ObjectParameter("Pc_TypeOp", pc_TypeOp) :
                new ObjectParameter("Pc_TypeOp", typeof(string));
    
            var pc_CodeOpParameter = pc_CodeOp != null ?
                new ObjectParameter("Pc_CodeOp", pc_CodeOp) :
                new ObjectParameter("Pc_CodeOp", typeof(string));
    
            var svMontantParameter = svMontant.HasValue ?
                new ObjectParameter("SvMontant", svMontant) :
                new ObjectParameter("SvMontant", typeof(double));
    
            var svParaTxParameter = svParaTx != null ?
                new ObjectParameter("SvParaTx", svParaTx) :
                new ObjectParameter("SvParaTx", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RetAmountTrBillingOption", pd_ServerDateParameter, pc_PrincipAccountParameter, pc_TRCODEParameter, pc_TypeOpParameter, pc_CodeOpParameter, svMontantParameter, svParaTxParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int RETURN_CUM_SOLDE_37_BACK_ACCOUNT_DB_CR(string centralBr, string wDevise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string wCpteGl, string employe, string language, ObjectParameter mntSoldeDebutDB, ObjectParameter mntSoldeDebutCR, ObjectParameter mntSoldeFinDB, ObjectParameter mntSoldeFinCR, ObjectParameter msg, ObjectParameter lect)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var wCpteGlParameter = wCpteGl != null ?
                new ObjectParameter("wCpteGl", wCpteGl) :
                new ObjectParameter("wCpteGl", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RETURN_CUM_SOLDE_37_BACK_ACCOUNT_DB_CR", centralBrParameter, wDeviseParameter, dateDebutParameter, dateFinParameter, wCpteGlParameter, employeParameter, languageParameter, mntSoldeDebutDB, mntSoldeDebutCR, mntSoldeFinDB, mntSoldeFinCR, msg, lect);
        }
    
        public virtual int RETURN_CUM_SOLDE_GEN_BACK_ACCOUNT(string centralBr, string wDevise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string wCpteGl, string employe, string language, ObjectParameter mntSoldeDebut, ObjectParameter mntSoldeFin, ObjectParameter msg, ObjectParameter lect)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var wCpteGlParameter = wCpteGl != null ?
                new ObjectParameter("wCpteGl", wCpteGl) :
                new ObjectParameter("wCpteGl", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RETURN_CUM_SOLDE_GEN_BACK_ACCOUNT", centralBrParameter, wDeviseParameter, dateDebutParameter, dateFinParameter, wCpteGlParameter, employeParameter, languageParameter, mntSoldeDebut, mntSoldeFin, msg, lect);
        }
    
        public virtual int RETURN_CUM_SOLDE_GEN_BACK_ACCOUNT_DB_CR(string centralBr, string wDevise, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string wCpteGl, string employe, string language, ObjectParameter mntSoldeDebutDB, ObjectParameter mntSoldeDebutCR, ObjectParameter mntSoldeFinDB, ObjectParameter mntSoldeFinCR, ObjectParameter msg, ObjectParameter lect)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var wCpteGlParameter = wCpteGl != null ?
                new ObjectParameter("wCpteGl", wCpteGl) :
                new ObjectParameter("wCpteGl", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RETURN_CUM_SOLDE_GEN_BACK_ACCOUNT_DB_CR", centralBrParameter, wDeviseParameter, dateDebutParameter, dateFinParameter, wCpteGlParameter, employeParameter, languageParameter, mntSoldeDebutDB, mntSoldeDebutCR, mntSoldeFinDB, mntSoldeFinCR, msg, lect);
        }
    
        public virtual int ReturnAcctProduct(string pi_CpteClient, string optionS, ObjectParameter cptAgence, ObjectParameter wLetCle, ObjectParameter wSub, ObjectParameter wClient, ObjectParameter wProductCode, ObjectParameter vc_AttributClt, ObjectParameter cpteGl, ObjectParameter cleGl, ObjectParameter libCptGl, ObjectParameter lect, ObjectParameter errMsg, ObjectParameter attribClient, ObjectParameter typeclient, string language)
        {
            var pi_CpteClientParameter = pi_CpteClient != null ?
                new ObjectParameter("Pi_CpteClient", pi_CpteClient) :
                new ObjectParameter("Pi_CpteClient", typeof(string));
    
            var optionSParameter = optionS != null ?
                new ObjectParameter("OptionS", optionS) :
                new ObjectParameter("OptionS", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnAcctProduct", pi_CpteClientParameter, optionSParameter, cptAgence, wLetCle, wSub, wClient, wProductCode, vc_AttributClt, cpteGl, cleGl, libCptGl, lect, errMsg, attribClient, typeclient, languageParameter);
        }
    
        public virtual int ReturnAuthorisationInfoVal(string matricule, ObjectParameter lect, ObjectParameter msg, string language, ObjectParameter v_OverdraftAcctAuthLimit, ObjectParameter v_HighestCreditAmnt, ObjectParameter v_DbAcctAuthMaxAmnt, ObjectParameter v_MaxLending, ObjectParameter v_SigningAmount, ObjectParameter v_LOCMaxAmnt)
        {
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnAuthorisationInfoVal", matriculeParameter, lect, msg, languageParameter, v_OverdraftAcctAuthLimit, v_HighestCreditAmnt, v_DbAcctAuthMaxAmnt, v_MaxLending, v_SigningAmount, v_LOCMaxAmnt);
        }
    
        public virtual int ReturnEncoursCusto(string centralBr, string wDevise, string wCpteGl, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string wCodeGroupe, string wLibelleGroupe, string wCodeDetail, string wLibelleDetail, string wEtat, string wlibelleetat, ObjectParameter msg, ObjectParameter lect, string language, string employe)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var wCpteGlParameter = wCpteGl != null ?
                new ObjectParameter("wCpteGl", wCpteGl) :
                new ObjectParameter("wCpteGl", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var wCodeGroupeParameter = wCodeGroupe != null ?
                new ObjectParameter("wCodeGroupe", wCodeGroupe) :
                new ObjectParameter("wCodeGroupe", typeof(string));
    
            var wLibelleGroupeParameter = wLibelleGroupe != null ?
                new ObjectParameter("wLibelleGroupe", wLibelleGroupe) :
                new ObjectParameter("wLibelleGroupe", typeof(string));
    
            var wCodeDetailParameter = wCodeDetail != null ?
                new ObjectParameter("wCodeDetail", wCodeDetail) :
                new ObjectParameter("wCodeDetail", typeof(string));
    
            var wLibelleDetailParameter = wLibelleDetail != null ?
                new ObjectParameter("wLibelleDetail", wLibelleDetail) :
                new ObjectParameter("wLibelleDetail", typeof(string));
    
            var wEtatParameter = wEtat != null ?
                new ObjectParameter("wEtat", wEtat) :
                new ObjectParameter("wEtat", typeof(string));
    
            var wlibelleetatParameter = wlibelleetat != null ?
                new ObjectParameter("wlibelleetat", wlibelleetat) :
                new ObjectParameter("wlibelleetat", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnEncoursCusto", centralBrParameter, wDeviseParameter, wCpteGlParameter, dateDebutParameter, dateFinParameter, wCodeGroupeParameter, wLibelleGroupeParameter, wCodeDetailParameter, wLibelleDetailParameter, wEtatParameter, wlibelleetatParameter, msg, lect, languageParameter, employeParameter);
        }
    
        public virtual int ReturnEncoursCustoCpteCltHist(Nullable<int> centralBr, string centralLibBr, string wDevise, string wCpteGl, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string wCodeGroupe, string wLibelleGroupe, string wCodeDetail, string wLibelleDetail, string wEtat, string wlibelleetat, ObjectParameter msg, ObjectParameter lect, string language)
        {
            var centralBrParameter = centralBr.HasValue ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(int));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var wCpteGlParameter = wCpteGl != null ?
                new ObjectParameter("wCpteGl", wCpteGl) :
                new ObjectParameter("wCpteGl", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var wCodeGroupeParameter = wCodeGroupe != null ?
                new ObjectParameter("wCodeGroupe", wCodeGroupe) :
                new ObjectParameter("wCodeGroupe", typeof(string));
    
            var wLibelleGroupeParameter = wLibelleGroupe != null ?
                new ObjectParameter("wLibelleGroupe", wLibelleGroupe) :
                new ObjectParameter("wLibelleGroupe", typeof(string));
    
            var wCodeDetailParameter = wCodeDetail != null ?
                new ObjectParameter("wCodeDetail", wCodeDetail) :
                new ObjectParameter("wCodeDetail", typeof(string));
    
            var wLibelleDetailParameter = wLibelleDetail != null ?
                new ObjectParameter("wLibelleDetail", wLibelleDetail) :
                new ObjectParameter("wLibelleDetail", typeof(string));
    
            var wEtatParameter = wEtat != null ?
                new ObjectParameter("wEtat", wEtat) :
                new ObjectParameter("wEtat", typeof(string));
    
            var wlibelleetatParameter = wlibelleetat != null ?
                new ObjectParameter("wlibelleetat", wlibelleetat) :
                new ObjectParameter("wlibelleetat", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnEncoursCustoCpteCltHist", centralBrParameter, centralLibBrParameter, wDeviseParameter, wCpteGlParameter, dateDebutParameter, dateFinParameter, wCodeGroupeParameter, wLibelleGroupeParameter, wCodeDetailParameter, wLibelleDetailParameter, wEtatParameter, wlibelleetatParameter, msg, lect, languageParameter);
        }
    
        public virtual int ReturnEncoursCustoEngapp(string centralBr, string wDevise, string wCpteGl, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string wCodeGroupe, string wLibelleGroupe, string wCodeDetail, string wLibelleDetail, string wEtat, string wlibelleetat, ObjectParameter msg, ObjectParameter lect, string language, string employe)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var wCpteGlParameter = wCpteGl != null ?
                new ObjectParameter("wCpteGl", wCpteGl) :
                new ObjectParameter("wCpteGl", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var wCodeGroupeParameter = wCodeGroupe != null ?
                new ObjectParameter("wCodeGroupe", wCodeGroupe) :
                new ObjectParameter("wCodeGroupe", typeof(string));
    
            var wLibelleGroupeParameter = wLibelleGroupe != null ?
                new ObjectParameter("wLibelleGroupe", wLibelleGroupe) :
                new ObjectParameter("wLibelleGroupe", typeof(string));
    
            var wCodeDetailParameter = wCodeDetail != null ?
                new ObjectParameter("wCodeDetail", wCodeDetail) :
                new ObjectParameter("wCodeDetail", typeof(string));
    
            var wLibelleDetailParameter = wLibelleDetail != null ?
                new ObjectParameter("wLibelleDetail", wLibelleDetail) :
                new ObjectParameter("wLibelleDetail", typeof(string));
    
            var wEtatParameter = wEtat != null ?
                new ObjectParameter("wEtat", wEtat) :
                new ObjectParameter("wEtat", typeof(string));
    
            var wlibelleetatParameter = wlibelleetat != null ?
                new ObjectParameter("wlibelleetat", wlibelleetat) :
                new ObjectParameter("wlibelleetat", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnEncoursCustoEngapp", centralBrParameter, wDeviseParameter, wCpteGlParameter, dateDebutParameter, dateFinParameter, wCodeGroupeParameter, wLibelleGroupeParameter, wCodeDetailParameter, wLibelleDetailParameter, wEtatParameter, wlibelleetatParameter, msg, lect, languageParameter, employeParameter);
        }
    
        public virtual int ReturnEncoursCustoOther(string centralBr, string wDevise, string wCpteGl, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string wCodeGroupe, string wLibelleGroupe, string wCodeDetail, string wLibelleDetail, string wEtat, string wlibelleetat, ObjectParameter msg, ObjectParameter lect, string language, string employe)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var wCpteGlParameter = wCpteGl != null ?
                new ObjectParameter("wCpteGl", wCpteGl) :
                new ObjectParameter("wCpteGl", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var wCodeGroupeParameter = wCodeGroupe != null ?
                new ObjectParameter("wCodeGroupe", wCodeGroupe) :
                new ObjectParameter("wCodeGroupe", typeof(string));
    
            var wLibelleGroupeParameter = wLibelleGroupe != null ?
                new ObjectParameter("wLibelleGroupe", wLibelleGroupe) :
                new ObjectParameter("wLibelleGroupe", typeof(string));
    
            var wCodeDetailParameter = wCodeDetail != null ?
                new ObjectParameter("wCodeDetail", wCodeDetail) :
                new ObjectParameter("wCodeDetail", typeof(string));
    
            var wLibelleDetailParameter = wLibelleDetail != null ?
                new ObjectParameter("wLibelleDetail", wLibelleDetail) :
                new ObjectParameter("wLibelleDetail", typeof(string));
    
            var wEtatParameter = wEtat != null ?
                new ObjectParameter("wEtat", wEtat) :
                new ObjectParameter("wEtat", typeof(string));
    
            var wlibelleetatParameter = wlibelleetat != null ?
                new ObjectParameter("wlibelleetat", wlibelleetat) :
                new ObjectParameter("wlibelleetat", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnEncoursCustoOther", centralBrParameter, wDeviseParameter, wCpteGlParameter, dateDebutParameter, dateFinParameter, wCodeGroupeParameter, wLibelleGroupeParameter, wCodeDetailParameter, wLibelleDetailParameter, wEtatParameter, wlibelleetatParameter, msg, lect, languageParameter, employeParameter);
        }
    
        public virtual int ReturnGaranteeAcc(string pi_CpteClient, Nullable<int> wProductCode, ObjectParameter cpteDb, ObjectParameter cleCpteDb, ObjectParameter libCpteDb, ObjectParameter cpteCr, ObjectParameter cleCpteCr, ObjectParameter libCpteCr, ObjectParameter lect, ObjectParameter errMsg, string attribClient, string typeclient, string typeGarantee, string language)
        {
            var pi_CpteClientParameter = pi_CpteClient != null ?
                new ObjectParameter("Pi_CpteClient", pi_CpteClient) :
                new ObjectParameter("Pi_CpteClient", typeof(string));
    
            var wProductCodeParameter = wProductCode.HasValue ?
                new ObjectParameter("wProductCode", wProductCode) :
                new ObjectParameter("wProductCode", typeof(int));
    
            var attribClientParameter = attribClient != null ?
                new ObjectParameter("AttribClient", attribClient) :
                new ObjectParameter("AttribClient", typeof(string));
    
            var typeclientParameter = typeclient != null ?
                new ObjectParameter("Typeclient", typeclient) :
                new ObjectParameter("Typeclient", typeof(string));
    
            var typeGaranteeParameter = typeGarantee != null ?
                new ObjectParameter("TypeGarantee", typeGarantee) :
                new ObjectParameter("TypeGarantee", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnGaranteeAcc", pi_CpteClientParameter, wProductCodeParameter, cpteDb, cleCpteDb, libCpteDb, cpteCr, cleCpteCr, libCpteCr, lect, errMsg, attribClientParameter, typeclientParameter, typeGaranteeParameter, languageParameter);
        }
    
        public virtual int ReturnProvisionAcc(string pi_CpteClient, Nullable<int> wProductCode, ObjectParameter cpteDb, ObjectParameter cleCpteDb, ObjectParameter libCpteDb, ObjectParameter cpteCr, ObjectParameter cleCpteCr, ObjectParameter libCpteCr, ObjectParameter lect, ObjectParameter errMsg, string attribClient, string typeclient, string language, ObjectParameter cpteInc, ObjectParameter cleCpteInc, ObjectParameter libCpteInc)
        {
            var pi_CpteClientParameter = pi_CpteClient != null ?
                new ObjectParameter("Pi_CpteClient", pi_CpteClient) :
                new ObjectParameter("Pi_CpteClient", typeof(string));
    
            var wProductCodeParameter = wProductCode.HasValue ?
                new ObjectParameter("wProductCode", wProductCode) :
                new ObjectParameter("wProductCode", typeof(int));
    
            var attribClientParameter = attribClient != null ?
                new ObjectParameter("AttribClient", attribClient) :
                new ObjectParameter("AttribClient", typeof(string));
    
            var typeclientParameter = typeclient != null ?
                new ObjectParameter("Typeclient", typeclient) :
                new ObjectParameter("Typeclient", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnProvisionAcc", pi_CpteClientParameter, wProductCodeParameter, cpteDb, cleCpteDb, libCpteDb, cpteCr, cleCpteCr, libCpteCr, lect, errMsg, attribClientParameter, typeclientParameter, languageParameter, cpteInc, cleCpteInc, libCpteInc);
        }
    
        public virtual ObjectResult<ReturnReservIntAcc_Result> ReturnReservIntAcc(string agence, string libAgence, string wClient, string cpteJumelle, string denomination, string wEmploye, string wLibEmploye, string devise, string libDevise, ObjectParameter lect, ObjectParameter errMsg, ObjectParameter cpteJumAgioRes, ObjectParameter cpteColAgio, ObjectParameter cleColAgio, ObjectParameter libCpteColAgio, string language, string cobacID)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var wClientParameter = wClient != null ?
                new ObjectParameter("wClient", wClient) :
                new ObjectParameter("wClient", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReturnReservIntAcc_Result>("ReturnReservIntAcc", agenceParameter, libAgenceParameter, wClientParameter, cpteJumelleParameter, denominationParameter, wEmployeParameter, wLibEmployeParameter, deviseParameter, libDeviseParameter, lect, errMsg, cpteJumAgioRes, cpteColAgio, cleColAgio, libCpteColAgio, languageParameter, cobacIDParameter);
        }
    
        public virtual int ReturnSoldeAcct37Glhist(Nullable<int> centralBr, string centralLibBr, string wDevise, string wCpteGl, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, ObjectParameter returnAmountDebutDb, ObjectParameter returnAmountFinDb, ObjectParameter returnAmountDebutCr, ObjectParameter returnAmountFinCr, ObjectParameter msg, ObjectParameter lect, string language)
        {
            var centralBrParameter = centralBr.HasValue ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(int));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var wCpteGlParameter = wCpteGl != null ?
                new ObjectParameter("wCpteGl", wCpteGl) :
                new ObjectParameter("wCpteGl", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnSoldeAcct37Glhist", centralBrParameter, centralLibBrParameter, wDeviseParameter, wCpteGlParameter, dateDebutParameter, dateFinParameter, returnAmountDebutDb, returnAmountFinDb, returnAmountDebutCr, returnAmountFinCr, msg, lect, languageParameter);
        }
    
        public virtual int ReturnSoldeAcctGlhist(Nullable<int> centralBr, string centralLibBr, string wDevise, string wCpteGl, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, ObjectParameter returnAmountDebutDb, ObjectParameter returnAmountFinDb, ObjectParameter returnAmountDebutCr, ObjectParameter returnAmountFinCr, ObjectParameter msg, ObjectParameter lect, string language)
        {
            var centralBrParameter = centralBr.HasValue ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(int));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var wCpteGlParameter = wCpteGl != null ?
                new ObjectParameter("wCpteGl", wCpteGl) :
                new ObjectParameter("wCpteGl", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnSoldeAcctGlhist", centralBrParameter, centralLibBrParameter, wDeviseParameter, wCpteGlParameter, dateDebutParameter, dateFinParameter, returnAmountDebutDb, returnAmountFinDb, returnAmountDebutCr, returnAmountFinCr, msg, lect, languageParameter);
        }
    
        public virtual int ReturnValueForAcct(Nullable<System.DateTime> pd_ServerDate, Nullable<int> pc_Produit, string pc_CatClient, string pc_TypeOp, ObjectParameter lect, ObjectParameter errMsg, Nullable<int> pc_SlaveProductCode, string pc_CodeOp, string typeclient, string language)
        {
            var pd_ServerDateParameter = pd_ServerDate.HasValue ?
                new ObjectParameter("Pd_ServerDate", pd_ServerDate) :
                new ObjectParameter("Pd_ServerDate", typeof(System.DateTime));
    
            var pc_ProduitParameter = pc_Produit.HasValue ?
                new ObjectParameter("Pc_Produit", pc_Produit) :
                new ObjectParameter("Pc_Produit", typeof(int));
    
            var pc_CatClientParameter = pc_CatClient != null ?
                new ObjectParameter("Pc_CatClient", pc_CatClient) :
                new ObjectParameter("Pc_CatClient", typeof(string));
    
            var pc_TypeOpParameter = pc_TypeOp != null ?
                new ObjectParameter("Pc_TypeOp", pc_TypeOp) :
                new ObjectParameter("Pc_TypeOp", typeof(string));
    
            var pc_SlaveProductCodeParameter = pc_SlaveProductCode.HasValue ?
                new ObjectParameter("Pc_SlaveProductCode", pc_SlaveProductCode) :
                new ObjectParameter("Pc_SlaveProductCode", typeof(int));
    
            var pc_CodeOpParameter = pc_CodeOp != null ?
                new ObjectParameter("Pc_CodeOp", pc_CodeOp) :
                new ObjectParameter("Pc_CodeOp", typeof(string));
    
            var typeclientParameter = typeclient != null ?
                new ObjectParameter("Typeclient", typeclient) :
                new ObjectParameter("Typeclient", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnValueForAcct", pd_ServerDateParameter, pc_ProduitParameter, pc_CatClientParameter, pc_TypeOpParameter, lect, errMsg, pc_SlaveProductCodeParameter, pc_CodeOpParameter, typeclientParameter, languageParameter);
        }
    
        public virtual int ReturnValueForAcctTrBilling(Nullable<System.DateTime> pd_ServerDate, Nullable<int> pc_Produit, string pc_CatClient, string pc_TypeOp, ObjectParameter lect, ObjectParameter errMsg, string pc_TRCODE, string pc_CodeOp, string typeclient, string language)
        {
            var pd_ServerDateParameter = pd_ServerDate.HasValue ?
                new ObjectParameter("Pd_ServerDate", pd_ServerDate) :
                new ObjectParameter("Pd_ServerDate", typeof(System.DateTime));
    
            var pc_ProduitParameter = pc_Produit.HasValue ?
                new ObjectParameter("Pc_Produit", pc_Produit) :
                new ObjectParameter("Pc_Produit", typeof(int));
    
            var pc_CatClientParameter = pc_CatClient != null ?
                new ObjectParameter("Pc_CatClient", pc_CatClient) :
                new ObjectParameter("Pc_CatClient", typeof(string));
    
            var pc_TypeOpParameter = pc_TypeOp != null ?
                new ObjectParameter("Pc_TypeOp", pc_TypeOp) :
                new ObjectParameter("Pc_TypeOp", typeof(string));
    
            var pc_TRCODEParameter = pc_TRCODE != null ?
                new ObjectParameter("Pc_TRCODE", pc_TRCODE) :
                new ObjectParameter("Pc_TRCODE", typeof(string));
    
            var pc_CodeOpParameter = pc_CodeOp != null ?
                new ObjectParameter("Pc_CodeOp", pc_CodeOp) :
                new ObjectParameter("Pc_CodeOp", typeof(string));
    
            var typeclientParameter = typeclient != null ?
                new ObjectParameter("Typeclient", typeclient) :
                new ObjectParameter("Typeclient", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnValueForAcctTrBilling", pd_ServerDateParameter, pc_ProduitParameter, pc_CatClientParameter, pc_TypeOpParameter, lect, errMsg, pc_TRCODEParameter, pc_CodeOpParameter, typeclientParameter, languageParameter);
        }
    
        public virtual int ReturnValueWithAccount(Nullable<System.DateTime> pd_ServerDate, string pc_PrincipAccount, string pc_SlaveAccount, string pc_TypeOp, ObjectParameter lect, ObjectParameter errMsg, string pc_CodeOp, ObjectParameter typeclient, string language)
        {
            var pd_ServerDateParameter = pd_ServerDate.HasValue ?
                new ObjectParameter("Pd_ServerDate", pd_ServerDate) :
                new ObjectParameter("Pd_ServerDate", typeof(System.DateTime));
    
            var pc_PrincipAccountParameter = pc_PrincipAccount != null ?
                new ObjectParameter("Pc_PrincipAccount", pc_PrincipAccount) :
                new ObjectParameter("Pc_PrincipAccount", typeof(string));
    
            var pc_SlaveAccountParameter = pc_SlaveAccount != null ?
                new ObjectParameter("Pc_SlaveAccount", pc_SlaveAccount) :
                new ObjectParameter("Pc_SlaveAccount", typeof(string));
    
            var pc_TypeOpParameter = pc_TypeOp != null ?
                new ObjectParameter("Pc_TypeOp", pc_TypeOp) :
                new ObjectParameter("Pc_TypeOp", typeof(string));
    
            var pc_CodeOpParameter = pc_CodeOp != null ?
                new ObjectParameter("Pc_CodeOp", pc_CodeOp) :
                new ObjectParameter("Pc_CodeOp", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnValueWithAccount", pd_ServerDateParameter, pc_PrincipAccountParameter, pc_SlaveAccountParameter, pc_TypeOpParameter, lect, errMsg, pc_CodeOpParameter, typeclient, languageParameter);
        }
    
        public virtual int ReturnValueWithAccountTrBilling(Nullable<System.DateTime> pd_ServerDate, string pc_PrincipAccount, string pc_TRCODE, string pc_TypeOp, ObjectParameter lect, ObjectParameter errMsg, string pc_CodeOp, ObjectParameter typeclient, string language)
        {
            var pd_ServerDateParameter = pd_ServerDate.HasValue ?
                new ObjectParameter("Pd_ServerDate", pd_ServerDate) :
                new ObjectParameter("Pd_ServerDate", typeof(System.DateTime));
    
            var pc_PrincipAccountParameter = pc_PrincipAccount != null ?
                new ObjectParameter("Pc_PrincipAccount", pc_PrincipAccount) :
                new ObjectParameter("Pc_PrincipAccount", typeof(string));
    
            var pc_TRCODEParameter = pc_TRCODE != null ?
                new ObjectParameter("Pc_TRCODE", pc_TRCODE) :
                new ObjectParameter("Pc_TRCODE", typeof(string));
    
            var pc_TypeOpParameter = pc_TypeOp != null ?
                new ObjectParameter("Pc_TypeOp", pc_TypeOp) :
                new ObjectParameter("Pc_TypeOp", typeof(string));
    
            var pc_CodeOpParameter = pc_CodeOp != null ?
                new ObjectParameter("Pc_CodeOp", pc_CodeOp) :
                new ObjectParameter("Pc_CodeOp", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReturnValueWithAccountTrBilling", pd_ServerDateParameter, pc_PrincipAccountParameter, pc_TRCODEParameter, pc_TypeOpParameter, lect, errMsg, pc_CodeOpParameter, typeclient, languageParameter);
        }
    
        public virtual int SauvegardeDataBase(string database, string cheminSave, string mETHODBACKUP, ObjectParameter lect, ObjectParameter msg, Nullable<System.DateTime> serverDate, string computerName, string employe, string language)
        {
            var databaseParameter = database != null ?
                new ObjectParameter("Database", database) :
                new ObjectParameter("Database", typeof(string));
    
            var cheminSaveParameter = cheminSave != null ?
                new ObjectParameter("CheminSave", cheminSave) :
                new ObjectParameter("CheminSave", typeof(string));
    
            var mETHODBACKUPParameter = mETHODBACKUP != null ?
                new ObjectParameter("METHODBACKUP", mETHODBACKUP) :
                new ObjectParameter("METHODBACKUP", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SauvegardeDataBase", databaseParameter, cheminSaveParameter, mETHODBACKUPParameter, lect, msg, serverDateParameter, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int SaveLog(string user, string machine, string action, string message, string pSName)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var machineParameter = machine != null ?
                new ObjectParameter("Machine", machine) :
                new ObjectParameter("Machine", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var pSNameParameter = pSName != null ?
                new ObjectParameter("PSName", pSName) :
                new ObjectParameter("PSName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveLog", userParameter, machineParameter, actionParameter, messageParameter, pSNameParameter);
        }
    
        public virtual int SimulRembAnticipate(string agence, string libAgence, string devise, string libDevise, string employe, string libEmploye, string antiType, string numeroContrat, ObjectParameter lect, ObjectParameter msg, ObjectParameter svIntMois, ObjectParameter svTVAMois, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var antiTypeParameter = antiType != null ?
                new ObjectParameter("AntiType", antiType) :
                new ObjectParameter("AntiType", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SimulRembAnticipate", agenceParameter, libAgenceParameter, deviseParameter, libDeviseParameter, employeParameter, libEmployeParameter, antiTypeParameter, numeroContratParameter, lect, msg, svIntMois, svTVAMois, computerNameParameter, languageParameter);
        }
    
        public virtual int SMS_Subscription(Nullable<int> pi_InAgence, Nullable<System.DateTime> pd_InDateDebut, Nullable<System.DateTime> pd_InDateFin, string pc_InCpteJumelle, string pc_Type, ObjectParameter pi_OutErreur, ObjectParameter msg)
        {
            var pi_InAgenceParameter = pi_InAgence.HasValue ?
                new ObjectParameter("pi_InAgence", pi_InAgence) :
                new ObjectParameter("pi_InAgence", typeof(int));
    
            var pd_InDateDebutParameter = pd_InDateDebut.HasValue ?
                new ObjectParameter("pd_InDateDebut", pd_InDateDebut) :
                new ObjectParameter("pd_InDateDebut", typeof(System.DateTime));
    
            var pd_InDateFinParameter = pd_InDateFin.HasValue ?
                new ObjectParameter("pd_InDateFin", pd_InDateFin) :
                new ObjectParameter("pd_InDateFin", typeof(System.DateTime));
    
            var pc_InCpteJumelleParameter = pc_InCpteJumelle != null ?
                new ObjectParameter("pc_InCpteJumelle", pc_InCpteJumelle) :
                new ObjectParameter("pc_InCpteJumelle", typeof(string));
    
            var pc_TypeParameter = pc_Type != null ?
                new ObjectParameter("pc_Type", pc_Type) :
                new ObjectParameter("pc_Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SMS_Subscription", pi_InAgenceParameter, pd_InDateDebutParameter, pd_InDateFinParameter, pc_InCpteJumelleParameter, pc_TypeParameter, pi_OutErreur, msg);
        }
    
        public virtual int SP_ACCOUNTINGEODWEST(string wEmploye, string sERVERDATE, string cboptntype, string computerName, Nullable<System.DateTime> dATEDEBUT, Nullable<System.DateTime> dATEFIN, ObjectParameter lecture, ObjectParameter msg, string language)
        {
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var sERVERDATEParameter = sERVERDATE != null ?
                new ObjectParameter("SERVERDATE", sERVERDATE) :
                new ObjectParameter("SERVERDATE", typeof(string));
    
            var cboptntypeParameter = cboptntype != null ?
                new ObjectParameter("Cboptntype", cboptntype) :
                new ObjectParameter("Cboptntype", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var dATEDEBUTParameter = dATEDEBUT.HasValue ?
                new ObjectParameter("DATEDEBUT", dATEDEBUT) :
                new ObjectParameter("DATEDEBUT", typeof(System.DateTime));
    
            var dATEFINParameter = dATEFIN.HasValue ?
                new ObjectParameter("DATEFIN", dATEFIN) :
                new ObjectParameter("DATEFIN", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ACCOUNTINGEODWEST", wEmployeParameter, sERVERDATEParameter, cboptntypeParameter, computerNameParameter, dATEDEBUTParameter, dATEFINParameter, lecture, msg, languageParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int SP_ArchivageClt(string svagence, string devise, Nullable<System.DateTime> dateFin, ObjectParameter lect, ObjectParameter msg, string computerName, string employe, string libEmploye, string language)
        {
            var svagenceParameter = svagence != null ?
                new ObjectParameter("Svagence", svagence) :
                new ObjectParameter("Svagence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ArchivageClt", svagenceParameter, deviseParameter, dateFinParameter, lect, msg, computerNameParameter, employeParameter, libEmployeParameter, languageParameter);
        }
    
        public virtual int SP_ArchivageGL(string wAgence, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string devise, string employe, string computerName, string language, ObjectParameter lect, ObjectParameter msg)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("wAgence", wAgence) :
                new ObjectParameter("wAgence", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ArchivageGL", wAgenceParameter, dateDebutParameter, dateFinParameter, deviseParameter, employeParameter, computerNameParameter, languageParameter, lect, msg);
        }
    
        public virtual int Sp_ArchiveData(string wAgence, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, string devise, string employe, string computerName, string libEmploye, string language, ObjectParameter lect, ObjectParameter msg)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("wAgence", wAgence) :
                new ObjectParameter("wAgence", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_ArchiveData", wAgenceParameter, dateDebutParameter, dateFinParameter, deviseParameter, employeParameter, computerNameParameter, libEmployeParameter, languageParameter, lect, msg);
        }
    
        public virtual int SP_BalanceClt(string svagence, string devise, string cpteGl, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, Nullable<System.DateTime> serverdate, ObjectParameter lect, ObjectParameter msg, string computerName, string employe, string language)
        {
            var svagenceParameter = svagence != null ?
                new ObjectParameter("Svagence", svagence) :
                new ObjectParameter("Svagence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var cpteGlParameter = cpteGl != null ?
                new ObjectParameter("CpteGl", cpteGl) :
                new ObjectParameter("CpteGl", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var serverdateParameter = serverdate.HasValue ?
                new ObjectParameter("Serverdate", serverdate) :
                new ObjectParameter("Serverdate", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_BalanceClt", svagenceParameter, deviseParameter, cpteGlParameter, dateDebutParameter, dateFinParameter, serverdateParameter, lect, msg, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int SP_BalanceCltPerBrCpteCltHist(string svagence, string devise, string cpteGl, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, Nullable<System.DateTime> serverdate, ObjectParameter lect, ObjectParameter msg, string computerName, string employe, string language)
        {
            var svagenceParameter = svagence != null ?
                new ObjectParameter("Svagence", svagence) :
                new ObjectParameter("Svagence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var cpteGlParameter = cpteGl != null ?
                new ObjectParameter("CpteGl", cpteGl) :
                new ObjectParameter("CpteGl", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var serverdateParameter = serverdate.HasValue ?
                new ObjectParameter("Serverdate", serverdate) :
                new ObjectParameter("Serverdate", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_BalanceCltPerBrCpteCltHist", svagenceParameter, deviseParameter, cpteGlParameter, dateDebutParameter, dateFinParameter, serverdateParameter, lect, msg, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual ObjectResult<Sp_BudgetTransaction_Result> Sp_BudgetTransaction(string agence, string libAgence, Nullable<decimal> bTrnCode, string codecentre, Nullable<double> debitAmount, string authorisedby, string budgetID, Nullable<System.DateTime> trnDate, Nullable<double> creditAmount, Nullable<System.DateTime> dateCpta, string employe, string libEmploye, Nullable<int> fiscalid, string description, Nullable<double> taxAmount, Nullable<double> actualExpense, string cptejumelle, string denomination, string reference, string statutModif, string wPostType, string devise, string libDevise, string txnno, string cpteBug, string cleBud, string libCpteBud, Nullable<double> olddebitamount, ObjectParameter lect, ObjectParameter msg, string computerName, string language, string typeBudget)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var bTrnCodeParameter = bTrnCode.HasValue ?
                new ObjectParameter("BTrnCode", bTrnCode) :
                new ObjectParameter("BTrnCode", typeof(decimal));
    
            var codecentreParameter = codecentre != null ?
                new ObjectParameter("Codecentre", codecentre) :
                new ObjectParameter("Codecentre", typeof(string));
    
            var debitAmountParameter = debitAmount.HasValue ?
                new ObjectParameter("DebitAmount", debitAmount) :
                new ObjectParameter("DebitAmount", typeof(double));
    
            var authorisedbyParameter = authorisedby != null ?
                new ObjectParameter("Authorisedby", authorisedby) :
                new ObjectParameter("Authorisedby", typeof(string));
    
            var budgetIDParameter = budgetID != null ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(string));
    
            var trnDateParameter = trnDate.HasValue ?
                new ObjectParameter("TrnDate", trnDate) :
                new ObjectParameter("TrnDate", typeof(System.DateTime));
    
            var creditAmountParameter = creditAmount.HasValue ?
                new ObjectParameter("CreditAmount", creditAmount) :
                new ObjectParameter("CreditAmount", typeof(double));
    
            var dateCptaParameter = dateCpta.HasValue ?
                new ObjectParameter("DateCpta", dateCpta) :
                new ObjectParameter("DateCpta", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("employe", employe) :
                new ObjectParameter("employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var fiscalidParameter = fiscalid.HasValue ?
                new ObjectParameter("fiscalid", fiscalid) :
                new ObjectParameter("fiscalid", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(double));
    
            var actualExpenseParameter = actualExpense.HasValue ?
                new ObjectParameter("ActualExpense", actualExpense) :
                new ObjectParameter("ActualExpense", typeof(double));
    
            var cptejumelleParameter = cptejumelle != null ?
                new ObjectParameter("cptejumelle", cptejumelle) :
                new ObjectParameter("cptejumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("denomination", denomination) :
                new ObjectParameter("denomination", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("reference", reference) :
                new ObjectParameter("reference", typeof(string));
    
            var statutModifParameter = statutModif != null ?
                new ObjectParameter("StatutModif", statutModif) :
                new ObjectParameter("StatutModif", typeof(string));
    
            var wPostTypeParameter = wPostType != null ?
                new ObjectParameter("wPostType", wPostType) :
                new ObjectParameter("wPostType", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var cpteBugParameter = cpteBug != null ?
                new ObjectParameter("CpteBug", cpteBug) :
                new ObjectParameter("CpteBug", typeof(string));
    
            var cleBudParameter = cleBud != null ?
                new ObjectParameter("CleBud", cleBud) :
                new ObjectParameter("CleBud", typeof(string));
    
            var libCpteBudParameter = libCpteBud != null ?
                new ObjectParameter("LibCpteBud", libCpteBud) :
                new ObjectParameter("LibCpteBud", typeof(string));
    
            var olddebitamountParameter = olddebitamount.HasValue ?
                new ObjectParameter("olddebitamount", olddebitamount) :
                new ObjectParameter("olddebitamount", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var typeBudgetParameter = typeBudget != null ?
                new ObjectParameter("TypeBudget", typeBudget) :
                new ObjectParameter("TypeBudget", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_BudgetTransaction_Result>("Sp_BudgetTransaction", agenceParameter, libAgenceParameter, bTrnCodeParameter, codecentreParameter, debitAmountParameter, authorisedbyParameter, budgetIDParameter, trnDateParameter, creditAmountParameter, dateCptaParameter, employeParameter, libEmployeParameter, fiscalidParameter, descriptionParameter, taxAmountParameter, actualExpenseParameter, cptejumelleParameter, denominationParameter, referenceParameter, statutModifParameter, wPostTypeParameter, deviseParameter, libDeviseParameter, txnnoParameter, cpteBugParameter, cleBudParameter, libCpteBudParameter, olddebitamountParameter, lect, msg, computerNameParameter, languageParameter, typeBudgetParameter);
        }
    
        public virtual ObjectResult<Sp_CashComptaNCBonCaisse_Result> Sp_CashComptaNCBonCaisse(string agence, string cpteJumelle, string svCpteBC, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> woptnamount, string refOperation, string employe, string libEmploye, string libAgence, string description, string libDevise, string caisse, string cpteCaisse, string cleCpteCaisse, string libCaisse, string libCpteCaisse, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var svCpteBCParameter = svCpteBC != null ?
                new ObjectParameter("SvCpteBC", svCpteBC) :
                new ObjectParameter("SvCpteBC", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var woptnamountParameter = woptnamount.HasValue ?
                new ObjectParameter("woptnamount", woptnamount) :
                new ObjectParameter("woptnamount", typeof(double));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CashComptaNCBonCaisse_Result>("Sp_CashComptaNCBonCaisse", agenceParameter, cpteJumelleParameter, svCpteBCParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, woptnamountParameter, refOperationParameter, employeParameter, libEmployeParameter, libAgenceParameter, descriptionParameter, libDeviseParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, libCaisseParameter, libCpteCaisseParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual ObjectResult<Sp_CashComptaNCBonCaissePymt_Result> Sp_CashComptaNCBonCaissePymt(string agence, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> mntInteret, Nullable<double> mntCapital, Nullable<double> mntTprcm, string refOperation, string employe, string libEmploye, string libAgence, string description, string libDevise, string caisse, string cpteCaisse, string cleCpteCaisse, string libCaisse, string libCpteCaisse, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, ObjectParameter msg, string computerName, string language, Nullable<int> limitCashier)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var mntInteretParameter = mntInteret.HasValue ?
                new ObjectParameter("MntInteret", mntInteret) :
                new ObjectParameter("MntInteret", typeof(double));
    
            var mntCapitalParameter = mntCapital.HasValue ?
                new ObjectParameter("MntCapital", mntCapital) :
                new ObjectParameter("MntCapital", typeof(double));
    
            var mntTprcmParameter = mntTprcm.HasValue ?
                new ObjectParameter("MntTprcm", mntTprcm) :
                new ObjectParameter("MntTprcm", typeof(double));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var limitCashierParameter = limitCashier.HasValue ?
                new ObjectParameter("LimitCashier", limitCashier) :
                new ObjectParameter("LimitCashier", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CashComptaNCBonCaissePymt_Result>("Sp_CashComptaNCBonCaissePymt", agenceParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, mntInteretParameter, mntCapitalParameter, mntTprcmParameter, refOperationParameter, employeParameter, libEmployeParameter, libAgenceParameter, descriptionParameter, libDeviseParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, libCaisseParameter, libCpteCaisseParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, msg, computerNameParameter, languageParameter, limitCashierParameter);
        }
    
        public virtual ObjectResult<Sp_CashComptaNCDepotTermePymt_Result> Sp_CashComptaNCDepotTermePymt(string agence, string cpteJumelle, string svCpteDT, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> mntInteret, Nullable<double> mntCapital, Nullable<double> mntTprcm, Nullable<double> mntPenalite, string refOperation, string employe, string libEmploye, string libAgence, string description, string libDevise, string caisse, string cpteCaisse, string cleCpteCaisse, string libCaisse, string libCpteCaisse, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, ObjectParameter msg, string computerName, string language, Nullable<int> limitCashier)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var svCpteDTParameter = svCpteDT != null ?
                new ObjectParameter("SvCpteDT", svCpteDT) :
                new ObjectParameter("SvCpteDT", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var mntInteretParameter = mntInteret.HasValue ?
                new ObjectParameter("MntInteret", mntInteret) :
                new ObjectParameter("MntInteret", typeof(double));
    
            var mntCapitalParameter = mntCapital.HasValue ?
                new ObjectParameter("MntCapital", mntCapital) :
                new ObjectParameter("MntCapital", typeof(double));
    
            var mntTprcmParameter = mntTprcm.HasValue ?
                new ObjectParameter("MntTprcm", mntTprcm) :
                new ObjectParameter("MntTprcm", typeof(double));
    
            var mntPenaliteParameter = mntPenalite.HasValue ?
                new ObjectParameter("MntPenalite", mntPenalite) :
                new ObjectParameter("MntPenalite", typeof(double));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var limitCashierParameter = limitCashier.HasValue ?
                new ObjectParameter("LimitCashier", limitCashier) :
                new ObjectParameter("LimitCashier", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CashComptaNCDepotTermePymt_Result>("Sp_CashComptaNCDepotTermePymt", agenceParameter, cpteJumelleParameter, svCpteDTParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, mntInteretParameter, mntCapitalParameter, mntTprcmParameter, mntPenaliteParameter, refOperationParameter, employeParameter, libEmployeParameter, libAgenceParameter, descriptionParameter, libDeviseParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, libCaisseParameter, libCpteCaisseParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, msg, computerNameParameter, languageParameter, limitCashierParameter);
        }
    
        public virtual ObjectResult<Sp_CashComptaNCTermDep_Result> Sp_CashComptaNCTermDep(string agence, string cpteJumelle, string svCpteDT, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> woptnamount, string refOperation, string employe, string libEmploye, string libAgence, string description, string libDevise, string caisse, string cpteCaisse, string cleCpteCaisse, string libCaisse, string libCpteCaisse, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var svCpteDTParameter = svCpteDT != null ?
                new ObjectParameter("SvCpteDT", svCpteDT) :
                new ObjectParameter("SvCpteDT", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var woptnamountParameter = woptnamount.HasValue ?
                new ObjectParameter("woptnamount", woptnamount) :
                new ObjectParameter("woptnamount", typeof(double));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CashComptaNCTermDep_Result>("Sp_CashComptaNCTermDep", agenceParameter, cpteJumelleParameter, svCpteDTParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, woptnamountParameter, refOperationParameter, employeParameter, libEmployeParameter, libAgenceParameter, descriptionParameter, libDeviseParameter, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, libCaisseParameter, libCpteCaisseParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int Sp_EcrirePiece(string agence, string devise, string journal, Nullable<int> folio, string codeLibelle, string libelle, string refEcrit, Nullable<System.DateTime> dateValeur, string txnNo, string compte, string budgetID, Nullable<int> fiscalid, Nullable<double> montant, Nullable<System.DateTime> dateOperation, string description, string refOperation, string statutModif, string wEmploye, string wNomEmploye, Nullable<System.DateTime> serverDate, Nullable<decimal> ligne, string compteCr, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("Libelle", libelle) :
                new ObjectParameter("Libelle", typeof(string));
    
            var refEcritParameter = refEcrit != null ?
                new ObjectParameter("RefEcrit", refEcrit) :
                new ObjectParameter("RefEcrit", typeof(string));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var compteParameter = compte != null ?
                new ObjectParameter("Compte", compte) :
                new ObjectParameter("Compte", typeof(string));
    
            var budgetIDParameter = budgetID != null ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(string));
    
            var fiscalidParameter = fiscalid.HasValue ?
                new ObjectParameter("fiscalid", fiscalid) :
                new ObjectParameter("fiscalid", typeof(int));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var statutModifParameter = statutModif != null ?
                new ObjectParameter("StatutModif", statutModif) :
                new ObjectParameter("StatutModif", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wNomEmployeParameter = wNomEmploye != null ?
                new ObjectParameter("wNomEmploye", wNomEmploye) :
                new ObjectParameter("wNomEmploye", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var ligneParameter = ligne.HasValue ?
                new ObjectParameter("ligne", ligne) :
                new ObjectParameter("ligne", typeof(decimal));
    
            var compteCrParameter = compteCr != null ?
                new ObjectParameter("CompteCr", compteCr) :
                new ObjectParameter("CompteCr", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_EcrirePiece", agenceParameter, deviseParameter, journalParameter, folioParameter, codeLibelleParameter, libelleParameter, refEcritParameter, dateValeurParameter, txnNoParameter, compteParameter, budgetIDParameter, fiscalidParameter, montantParameter, dateOperationParameter, descriptionParameter, refOperationParameter, statutModifParameter, wEmployeParameter, wNomEmployeParameter, serverDateParameter, ligneParameter, compteCrParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int Sp_EcrirePieceB(string agence, string devise, string journal, Nullable<int> folio, string codeLibelle, string libelle, string refEcrit, Nullable<System.DateTime> dateValeur, string txnNo, string compte, string budgetID, Nullable<int> fiscalid, Nullable<double> debit, Nullable<double> credit, Nullable<System.DateTime> dateOperation, string description, string refOperation, string statutModif, string wEmploye, string wNomEmploye, Nullable<System.DateTime> serverDate, Nullable<decimal> ligne, string cpteInterBr, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var codeLibelleParameter = codeLibelle != null ?
                new ObjectParameter("CodeLibelle", codeLibelle) :
                new ObjectParameter("CodeLibelle", typeof(string));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("Libelle", libelle) :
                new ObjectParameter("Libelle", typeof(string));
    
            var refEcritParameter = refEcrit != null ?
                new ObjectParameter("RefEcrit", refEcrit) :
                new ObjectParameter("RefEcrit", typeof(string));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var compteParameter = compte != null ?
                new ObjectParameter("Compte", compte) :
                new ObjectParameter("Compte", typeof(string));
    
            var budgetIDParameter = budgetID != null ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(string));
    
            var fiscalidParameter = fiscalid.HasValue ?
                new ObjectParameter("fiscalid", fiscalid) :
                new ObjectParameter("fiscalid", typeof(int));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var statutModifParameter = statutModif != null ?
                new ObjectParameter("StatutModif", statutModif) :
                new ObjectParameter("StatutModif", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wNomEmployeParameter = wNomEmploye != null ?
                new ObjectParameter("wNomEmploye", wNomEmploye) :
                new ObjectParameter("wNomEmploye", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var ligneParameter = ligne.HasValue ?
                new ObjectParameter("ligne", ligne) :
                new ObjectParameter("ligne", typeof(decimal));
    
            var cpteInterBrParameter = cpteInterBr != null ?
                new ObjectParameter("CpteInterBr", cpteInterBr) :
                new ObjectParameter("CpteInterBr", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_EcrirePieceB", agenceParameter, deviseParameter, journalParameter, folioParameter, codeLibelleParameter, libelleParameter, refEcritParameter, dateValeurParameter, txnNoParameter, compteParameter, budgetIDParameter, fiscalidParameter, debitParameter, creditParameter, dateOperationParameter, descriptionParameter, refOperationParameter, statutModifParameter, wEmployeParameter, wNomEmployeParameter, serverDateParameter, ligneParameter, cpteInterBrParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int Sp_FonPropNet(string centralBr, string centralLibBr, string wDevise, string fetat, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, Nullable<double> provisionAConstituer, ObjectParameter msg, ObjectParameter lect, string computerName, string employe, string language)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var fetatParameter = fetat != null ?
                new ObjectParameter("Fetat", fetat) :
                new ObjectParameter("Fetat", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var provisionAConstituerParameter = provisionAConstituer.HasValue ?
                new ObjectParameter("ProvisionAConstituer", provisionAConstituer) :
                new ObjectParameter("ProvisionAConstituer", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_FonPropNet", centralBrParameter, centralLibBrParameter, wDeviseParameter, fetatParameter, dateDebutParameter, dateFinParameter, provisionAConstituerParameter, msg, lect, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int Sp_FonPropNetGlhist(Nullable<int> centralBr, string centralLibBr, string wDevise, string fetat, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, Nullable<double> provisionAConstituer, ObjectParameter msg, ObjectParameter lect, string computerName, Nullable<int> employe, string language)
        {
            var centralBrParameter = centralBr.HasValue ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(int));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var fetatParameter = fetat != null ?
                new ObjectParameter("Fetat", fetat) :
                new ObjectParameter("Fetat", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var provisionAConstituerParameter = provisionAConstituer.HasValue ?
                new ObjectParameter("ProvisionAConstituer", provisionAConstituer) :
                new ObjectParameter("ProvisionAConstituer", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_FonPropNetGlhist", centralBrParameter, centralLibBrParameter, wDeviseParameter, fetatParameter, dateDebutParameter, dateFinParameter, provisionAConstituerParameter, msg, lect, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int Sp_General_CoefLiquid(string centralBr, string centralLibBr, string wDevise, string fetat, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, Nullable<double> provisionAConstituer, ObjectParameter msg, ObjectParameter lect, string computerName, string employe, string language)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var fetatParameter = fetat != null ?
                new ObjectParameter("Fetat", fetat) :
                new ObjectParameter("Fetat", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var provisionAConstituerParameter = provisionAConstituer.HasValue ?
                new ObjectParameter("ProvisionAConstituer", provisionAConstituer) :
                new ObjectParameter("ProvisionAConstituer", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_General_CoefLiquid", centralBrParameter, centralLibBrParameter, wDeviseParameter, fetatParameter, dateDebutParameter, dateFinParameter, provisionAConstituerParameter, msg, lect, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int Sp_General_CoefLiquidGlhist(Nullable<int> centralBr, string centralLibBr, string wDevise, string fetat, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, Nullable<double> provisionAConstituer, ObjectParameter msg, ObjectParameter lect, string computerName, Nullable<int> employe, string language)
        {
            var centralBrParameter = centralBr.HasValue ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(int));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var fetatParameter = fetat != null ?
                new ObjectParameter("Fetat", fetat) :
                new ObjectParameter("Fetat", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var provisionAConstituerParameter = provisionAConstituer.HasValue ?
                new ObjectParameter("ProvisionAConstituer", provisionAConstituer) :
                new ObjectParameter("ProvisionAConstituer", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_General_CoefLiquidGlhist", centralBrParameter, centralLibBrParameter, wDeviseParameter, fetatParameter, dateDebutParameter, dateFinParameter, provisionAConstituerParameter, msg, lect, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int Sp_General_Prud_Ration(string centralBr, string centralLibBr, string wDevise, string fetat, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, Nullable<double> provisionAConstituer, ObjectParameter msg, ObjectParameter lect, string computerName, string employe, string language)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var fetatParameter = fetat != null ?
                new ObjectParameter("Fetat", fetat) :
                new ObjectParameter("Fetat", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var provisionAConstituerParameter = provisionAConstituer.HasValue ?
                new ObjectParameter("ProvisionAConstituer", provisionAConstituer) :
                new ObjectParameter("ProvisionAConstituer", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_General_Prud_Ration", centralBrParameter, centralLibBrParameter, wDeviseParameter, fetatParameter, dateDebutParameter, dateFinParameter, provisionAConstituerParameter, msg, lect, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int Sp_General_Prud_RationGlhist(Nullable<int> centralBr, string centralLibBr, string wDevise, string fetat, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, Nullable<double> provisionAConstituer, ObjectParameter msg, ObjectParameter lect, string computerName, Nullable<int> employe, string language)
        {
            var centralBrParameter = centralBr.HasValue ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(int));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var fetatParameter = fetat != null ?
                new ObjectParameter("Fetat", fetat) :
                new ObjectParameter("Fetat", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var provisionAConstituerParameter = provisionAConstituer.HasValue ?
                new ObjectParameter("ProvisionAConstituer", provisionAConstituer) :
                new ObjectParameter("ProvisionAConstituer", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_General_Prud_RationGlhist", centralBrParameter, centralLibBrParameter, wDeviseParameter, fetatParameter, dateDebutParameter, dateFinParameter, provisionAConstituerParameter, msg, lect, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_Liquidity_Dec(string wAgence, string pi_InMatricule, Nullable<System.DateTime> pd_InDateDebut, Nullable<System.DateTime> pd_InDateFin, string pc_InEtat, ObjectParameter pi_OutErreur, ObjectParameter msg, string computerName, string language)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("WAgence", wAgence) :
                new ObjectParameter("WAgence", typeof(string));
    
            var pi_InMatriculeParameter = pi_InMatricule != null ?
                new ObjectParameter("pi_InMatricule", pi_InMatricule) :
                new ObjectParameter("pi_InMatricule", typeof(string));
    
            var pd_InDateDebutParameter = pd_InDateDebut.HasValue ?
                new ObjectParameter("pd_InDateDebut", pd_InDateDebut) :
                new ObjectParameter("pd_InDateDebut", typeof(System.DateTime));
    
            var pd_InDateFinParameter = pd_InDateFin.HasValue ?
                new ObjectParameter("pd_InDateFin", pd_InDateFin) :
                new ObjectParameter("pd_InDateFin", typeof(System.DateTime));
    
            var pc_InEtatParameter = pc_InEtat != null ?
                new ObjectParameter("pc_InEtat", pc_InEtat) :
                new ObjectParameter("pc_InEtat", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Liquidity_Dec", wAgenceParameter, pi_InMatriculeParameter, pd_InDateDebutParameter, pd_InDateFinParameter, pc_InEtatParameter, pi_OutErreur, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int SP_ProdStat_Summary(Nullable<int> pi_InAgence, string pc_LibAgence, Nullable<int> pi_InMatricule, Nullable<System.DateTime> pd_InDateDebut, Nullable<System.DateTime> pd_InDateFin, string pc_InCpteJumelle, ObjectParameter pi_OutErreur, ObjectParameter msg, Nullable<int> employe, string computerName, string language)
        {
            var pi_InAgenceParameter = pi_InAgence.HasValue ?
                new ObjectParameter("pi_InAgence", pi_InAgence) :
                new ObjectParameter("pi_InAgence", typeof(int));
    
            var pc_LibAgenceParameter = pc_LibAgence != null ?
                new ObjectParameter("pc_LibAgence", pc_LibAgence) :
                new ObjectParameter("pc_LibAgence", typeof(string));
    
            var pi_InMatriculeParameter = pi_InMatricule.HasValue ?
                new ObjectParameter("pi_InMatricule", pi_InMatricule) :
                new ObjectParameter("pi_InMatricule", typeof(int));
    
            var pd_InDateDebutParameter = pd_InDateDebut.HasValue ?
                new ObjectParameter("pd_InDateDebut", pd_InDateDebut) :
                new ObjectParameter("pd_InDateDebut", typeof(System.DateTime));
    
            var pd_InDateFinParameter = pd_InDateFin.HasValue ?
                new ObjectParameter("pd_InDateFin", pd_InDateFin) :
                new ObjectParameter("pd_InDateFin", typeof(System.DateTime));
    
            var pc_InCpteJumelleParameter = pc_InCpteJumelle != null ?
                new ObjectParameter("pc_InCpteJumelle", pc_InCpteJumelle) :
                new ObjectParameter("pc_InCpteJumelle", typeof(string));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(int));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ProdStat_Summary", pi_InAgenceParameter, pc_LibAgenceParameter, pi_InMatriculeParameter, pd_InDateDebutParameter, pd_InDateFinParameter, pc_InCpteJumelleParameter, pi_OutErreur, msg, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int Sp_Ratio_Norme(string centralBr, string centralLibBr, string wDevise, string fetat, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, Nullable<double> provisionAConstituer, ObjectParameter msg, ObjectParameter lect, string computerName, string employe, string language)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var fetatParameter = fetat != null ?
                new ObjectParameter("Fetat", fetat) :
                new ObjectParameter("Fetat", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var provisionAConstituerParameter = provisionAConstituer.HasValue ?
                new ObjectParameter("ProvisionAConstituer", provisionAConstituer) :
                new ObjectParameter("ProvisionAConstituer", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Ratio_Norme", centralBrParameter, centralLibBrParameter, wDeviseParameter, fetatParameter, dateDebutParameter, dateFinParameter, provisionAConstituerParameter, msg, lect, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int Sp_Ratio_Norme_Engapp(string centralBr, string centralLibBr, string wDevise, string fetat, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, Nullable<double> provisionAConstituer, ObjectParameter msg, ObjectParameter lect, string computerName, string employe, string language)
        {
            var centralBrParameter = centralBr != null ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(string));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var fetatParameter = fetat != null ?
                new ObjectParameter("Fetat", fetat) :
                new ObjectParameter("Fetat", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var provisionAConstituerParameter = provisionAConstituer.HasValue ?
                new ObjectParameter("ProvisionAConstituer", provisionAConstituer) :
                new ObjectParameter("ProvisionAConstituer", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Ratio_Norme_Engapp", centralBrParameter, centralLibBrParameter, wDeviseParameter, fetatParameter, dateDebutParameter, dateFinParameter, provisionAConstituerParameter, msg, lect, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int Sp_Ratio_NormeGlhist(Nullable<int> centralBr, string centralLibBr, string wDevise, string fetat, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, Nullable<double> provisionAConstituer, ObjectParameter msg, ObjectParameter lect, string computerName, Nullable<int> employe, string language)
        {
            var centralBrParameter = centralBr.HasValue ?
                new ObjectParameter("CentralBr", centralBr) :
                new ObjectParameter("CentralBr", typeof(int));
    
            var centralLibBrParameter = centralLibBr != null ?
                new ObjectParameter("CentralLibBr", centralLibBr) :
                new ObjectParameter("CentralLibBr", typeof(string));
    
            var wDeviseParameter = wDevise != null ?
                new ObjectParameter("wDevise", wDevise) :
                new ObjectParameter("wDevise", typeof(string));
    
            var fetatParameter = fetat != null ?
                new ObjectParameter("Fetat", fetat) :
                new ObjectParameter("Fetat", typeof(string));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var provisionAConstituerParameter = provisionAConstituer.HasValue ?
                new ObjectParameter("ProvisionAConstituer", provisionAConstituer) :
                new ObjectParameter("ProvisionAConstituer", typeof(double));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Ratio_NormeGlhist", centralBrParameter, centralLibBrParameter, wDeviseParameter, fetatParameter, dateDebutParameter, dateFinParameter, provisionAConstituerParameter, msg, lect, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int Sp_tabBudgetTransaction_Insert(string agence, string codecentre, Nullable<double> debitAmount, string authorisedby, string budgetID, Nullable<System.DateTime> trnDate, Nullable<double> creditAmount, Nullable<System.DateTime> dateCpta, string employe, string libEmploye, Nullable<int> fiscalid, string description, Nullable<double> taxAmount, Nullable<double> actualExpense, string cptejumelle, string denomination, string reference, string statutModif, ObjectParameter lect, ObjectParameter msg, string language, string typeBudget)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var codecentreParameter = codecentre != null ?
                new ObjectParameter("Codecentre", codecentre) :
                new ObjectParameter("Codecentre", typeof(string));
    
            var debitAmountParameter = debitAmount.HasValue ?
                new ObjectParameter("DebitAmount", debitAmount) :
                new ObjectParameter("DebitAmount", typeof(double));
    
            var authorisedbyParameter = authorisedby != null ?
                new ObjectParameter("Authorisedby", authorisedby) :
                new ObjectParameter("Authorisedby", typeof(string));
    
            var budgetIDParameter = budgetID != null ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(string));
    
            var trnDateParameter = trnDate.HasValue ?
                new ObjectParameter("TrnDate", trnDate) :
                new ObjectParameter("TrnDate", typeof(System.DateTime));
    
            var creditAmountParameter = creditAmount.HasValue ?
                new ObjectParameter("CreditAmount", creditAmount) :
                new ObjectParameter("CreditAmount", typeof(double));
    
            var dateCptaParameter = dateCpta.HasValue ?
                new ObjectParameter("DateCpta", dateCpta) :
                new ObjectParameter("DateCpta", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("employe", employe) :
                new ObjectParameter("employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var fiscalidParameter = fiscalid.HasValue ?
                new ObjectParameter("fiscalid", fiscalid) :
                new ObjectParameter("fiscalid", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(double));
    
            var actualExpenseParameter = actualExpense.HasValue ?
                new ObjectParameter("ActualExpense", actualExpense) :
                new ObjectParameter("ActualExpense", typeof(double));
    
            var cptejumelleParameter = cptejumelle != null ?
                new ObjectParameter("cptejumelle", cptejumelle) :
                new ObjectParameter("cptejumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("denomination", denomination) :
                new ObjectParameter("denomination", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("reference", reference) :
                new ObjectParameter("reference", typeof(string));
    
            var statutModifParameter = statutModif != null ?
                new ObjectParameter("StatutModif", statutModif) :
                new ObjectParameter("StatutModif", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var typeBudgetParameter = typeBudget != null ?
                new ObjectParameter("TypeBudget", typeBudget) :
                new ObjectParameter("TypeBudget", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_tabBudgetTransaction_Insert", agenceParameter, codecentreParameter, debitAmountParameter, authorisedbyParameter, budgetIDParameter, trnDateParameter, creditAmountParameter, dateCptaParameter, employeParameter, libEmployeParameter, fiscalidParameter, descriptionParameter, taxAmountParameter, actualExpenseParameter, cptejumelleParameter, denominationParameter, referenceParameter, statutModifParameter, lect, msg, languageParameter, typeBudgetParameter);
        }
    
        public virtual int Sp_tabBudgetTransaction_Update(string agence, Nullable<decimal> bTrnCode, string codecentre, Nullable<double> debitAmount, string authorisedby, string budgetID, Nullable<System.DateTime> trnDate, Nullable<double> creditAmount, Nullable<System.DateTime> dateCpta, string employe, string libEmploye, Nullable<int> fiscalid, string description, Nullable<double> taxAmount, Nullable<double> actualExpense, string cptejumelle, string denomination, string reference, string statutModif, ObjectParameter lect, ObjectParameter msg, string language, string typeBudget)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var bTrnCodeParameter = bTrnCode.HasValue ?
                new ObjectParameter("BTrnCode", bTrnCode) :
                new ObjectParameter("BTrnCode", typeof(decimal));
    
            var codecentreParameter = codecentre != null ?
                new ObjectParameter("Codecentre", codecentre) :
                new ObjectParameter("Codecentre", typeof(string));
    
            var debitAmountParameter = debitAmount.HasValue ?
                new ObjectParameter("DebitAmount", debitAmount) :
                new ObjectParameter("DebitAmount", typeof(double));
    
            var authorisedbyParameter = authorisedby != null ?
                new ObjectParameter("Authorisedby", authorisedby) :
                new ObjectParameter("Authorisedby", typeof(string));
    
            var budgetIDParameter = budgetID != null ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(string));
    
            var trnDateParameter = trnDate.HasValue ?
                new ObjectParameter("TrnDate", trnDate) :
                new ObjectParameter("TrnDate", typeof(System.DateTime));
    
            var creditAmountParameter = creditAmount.HasValue ?
                new ObjectParameter("CreditAmount", creditAmount) :
                new ObjectParameter("CreditAmount", typeof(double));
    
            var dateCptaParameter = dateCpta.HasValue ?
                new ObjectParameter("DateCpta", dateCpta) :
                new ObjectParameter("DateCpta", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("employe", employe) :
                new ObjectParameter("employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var fiscalidParameter = fiscalid.HasValue ?
                new ObjectParameter("fiscalid", fiscalid) :
                new ObjectParameter("fiscalid", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(double));
    
            var actualExpenseParameter = actualExpense.HasValue ?
                new ObjectParameter("ActualExpense", actualExpense) :
                new ObjectParameter("ActualExpense", typeof(double));
    
            var cptejumelleParameter = cptejumelle != null ?
                new ObjectParameter("cptejumelle", cptejumelle) :
                new ObjectParameter("cptejumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("denomination", denomination) :
                new ObjectParameter("denomination", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("reference", reference) :
                new ObjectParameter("reference", typeof(string));
    
            var statutModifParameter = statutModif != null ?
                new ObjectParameter("StatutModif", statutModif) :
                new ObjectParameter("StatutModif", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var typeBudgetParameter = typeBudget != null ?
                new ObjectParameter("TypeBudget", typeBudget) :
                new ObjectParameter("TypeBudget", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_tabBudgetTransaction_Update", agenceParameter, bTrnCodeParameter, codecentreParameter, debitAmountParameter, authorisedbyParameter, budgetIDParameter, trnDateParameter, creditAmountParameter, dateCptaParameter, employeParameter, libEmployeParameter, fiscalidParameter, descriptionParameter, taxAmountParameter, actualExpenseParameter, cptejumelleParameter, denominationParameter, referenceParameter, statutModifParameter, lect, msg, languageParameter, typeBudgetParameter);
        }
    
        public virtual int Sp_TrfPieceBEcritCptable(string devise, Nullable<System.DateTime> serverDate, string journal, string wEmploye, ObjectParameter lect, ObjectParameter msg, string computerName, string v_TxnNo, string language)
        {
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var v_TxnNoParameter = v_TxnNo != null ?
                new ObjectParameter("V_TxnNo", v_TxnNo) :
                new ObjectParameter("V_TxnNo", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_TrfPieceBEcritCptable", deviseParameter, serverDateParameter, journalParameter, wEmployeParameter, lect, msg, computerNameParameter, v_TxnNoParameter, languageParameter);
        }
    
        public virtual int Sp_TrfPieceEcritCptable(string devise, Nullable<System.DateTime> serverDate, string journal, string wEmploye, ObjectParameter lect, ObjectParameter msg, string computerName, string v_TxnNo, string language)
        {
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var v_TxnNoParameter = v_TxnNo != null ?
                new ObjectParameter("V_TxnNo", v_TxnNo) :
                new ObjectParameter("V_TxnNo", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_TrfPieceEcritCptable", deviseParameter, serverDateParameter, journalParameter, wEmployeParameter, lect, msg, computerNameParameter, v_TxnNoParameter, languageParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int StandingOrder_Delete(string agence, string cpteClient, string companyName, ObjectParameter lect, ObjectParameter msg, string employe, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var cpteClientParameter = cpteClient != null ?
                new ObjectParameter("CpteClient", cpteClient) :
                new ObjectParameter("CpteClient", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StandingOrder_Delete", agenceParameter, cpteClientParameter, companyNameParameter, lect, msg, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int StandingOrder_Insert(string agence, string cpteClient, string denomination, Nullable<double> amount, Nullable<short> correspondentCode, string correspondent, string correspondentAcct, string accountKey, string statut, Nullable<System.DateTime> dateDemarrage, Nullable<System.DateTime> dateRenovellement, string dateCreation, Nullable<System.DateTime> datemodif, string reference, string libAgence, string employe, string libEmploye, string typeVir, string libLiaison, string liaison, string companyName, string matriSalaire, string institutionType, string txnNo, Nullable<System.DateTime> datederniervir, string libcptegl, string cptegl, string clecpte, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var cpteClientParameter = cpteClient != null ?
                new ObjectParameter("CpteClient", cpteClient) :
                new ObjectParameter("CpteClient", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var correspondentCodeParameter = correspondentCode.HasValue ?
                new ObjectParameter("CorrespondentCode", correspondentCode) :
                new ObjectParameter("CorrespondentCode", typeof(short));
    
            var correspondentParameter = correspondent != null ?
                new ObjectParameter("Correspondent", correspondent) :
                new ObjectParameter("Correspondent", typeof(string));
    
            var correspondentAcctParameter = correspondentAcct != null ?
                new ObjectParameter("CorrespondentAcct", correspondentAcct) :
                new ObjectParameter("CorrespondentAcct", typeof(string));
    
            var accountKeyParameter = accountKey != null ?
                new ObjectParameter("AccountKey", accountKey) :
                new ObjectParameter("AccountKey", typeof(string));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var dateDemarrageParameter = dateDemarrage.HasValue ?
                new ObjectParameter("DateDemarrage", dateDemarrage) :
                new ObjectParameter("DateDemarrage", typeof(System.DateTime));
    
            var dateRenovellementParameter = dateRenovellement.HasValue ?
                new ObjectParameter("DateRenovellement", dateRenovellement) :
                new ObjectParameter("DateRenovellement", typeof(System.DateTime));
    
            var dateCreationParameter = dateCreation != null ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(string));
    
            var datemodifParameter = datemodif.HasValue ?
                new ObjectParameter("datemodif", datemodif) :
                new ObjectParameter("datemodif", typeof(System.DateTime));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var typeVirParameter = typeVir != null ?
                new ObjectParameter("TypeVir", typeVir) :
                new ObjectParameter("TypeVir", typeof(string));
    
            var libLiaisonParameter = libLiaison != null ?
                new ObjectParameter("LibLiaison", libLiaison) :
                new ObjectParameter("LibLiaison", typeof(string));
    
            var liaisonParameter = liaison != null ?
                new ObjectParameter("Liaison", liaison) :
                new ObjectParameter("Liaison", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var matriSalaireParameter = matriSalaire != null ?
                new ObjectParameter("MatriSalaire", matriSalaire) :
                new ObjectParameter("MatriSalaire", typeof(string));
    
            var institutionTypeParameter = institutionType != null ?
                new ObjectParameter("InstitutionType", institutionType) :
                new ObjectParameter("InstitutionType", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var datederniervirParameter = datederniervir.HasValue ?
                new ObjectParameter("datederniervir", datederniervir) :
                new ObjectParameter("datederniervir", typeof(System.DateTime));
    
            var libcpteglParameter = libcptegl != null ?
                new ObjectParameter("libcptegl", libcptegl) :
                new ObjectParameter("libcptegl", typeof(string));
    
            var cpteglParameter = cptegl != null ?
                new ObjectParameter("cptegl", cptegl) :
                new ObjectParameter("cptegl", typeof(string));
    
            var clecpteParameter = clecpte != null ?
                new ObjectParameter("clecpte", clecpte) :
                new ObjectParameter("clecpte", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StandingOrder_Insert", agenceParameter, cpteClientParameter, denominationParameter, amountParameter, correspondentCodeParameter, correspondentParameter, correspondentAcctParameter, accountKeyParameter, statutParameter, dateDemarrageParameter, dateRenovellementParameter, dateCreationParameter, datemodifParameter, referenceParameter, libAgenceParameter, employeParameter, libEmployeParameter, typeVirParameter, libLiaisonParameter, liaisonParameter, companyNameParameter, matriSalaireParameter, institutionTypeParameter, txnNoParameter, datederniervirParameter, libcpteglParameter, cpteglParameter, clecpteParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int StandingOrder_Insert_Migration(Nullable<short> agence, string cpteClient, string denomination, Nullable<double> amount, Nullable<short> correspondentCode, string correspondent, string correspondentAcct, string accountKey, string statut, Nullable<System.DateTime> dateDemarrage, Nullable<System.DateTime> dateRenovellement, string dateCreation, Nullable<System.DateTime> datemodif, string reference, string libAgence, Nullable<short> employe, string libEmploye, string typeVir, string libLiaison, string liaison, string companyName, string matriSalaire, string institutionType, string txnNo, Nullable<System.DateTime> datederniervir, string libcptegl, string cptegl, string clecpte, ObjectParameter lect, ObjectParameter msg, string computerName, Nullable<decimal> series)
        {
            var agenceParameter = agence.HasValue ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(short));
    
            var cpteClientParameter = cpteClient != null ?
                new ObjectParameter("CpteClient", cpteClient) :
                new ObjectParameter("CpteClient", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var correspondentCodeParameter = correspondentCode.HasValue ?
                new ObjectParameter("CorrespondentCode", correspondentCode) :
                new ObjectParameter("CorrespondentCode", typeof(short));
    
            var correspondentParameter = correspondent != null ?
                new ObjectParameter("Correspondent", correspondent) :
                new ObjectParameter("Correspondent", typeof(string));
    
            var correspondentAcctParameter = correspondentAcct != null ?
                new ObjectParameter("CorrespondentAcct", correspondentAcct) :
                new ObjectParameter("CorrespondentAcct", typeof(string));
    
            var accountKeyParameter = accountKey != null ?
                new ObjectParameter("AccountKey", accountKey) :
                new ObjectParameter("AccountKey", typeof(string));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var dateDemarrageParameter = dateDemarrage.HasValue ?
                new ObjectParameter("DateDemarrage", dateDemarrage) :
                new ObjectParameter("DateDemarrage", typeof(System.DateTime));
    
            var dateRenovellementParameter = dateRenovellement.HasValue ?
                new ObjectParameter("DateRenovellement", dateRenovellement) :
                new ObjectParameter("DateRenovellement", typeof(System.DateTime));
    
            var dateCreationParameter = dateCreation != null ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(string));
    
            var datemodifParameter = datemodif.HasValue ?
                new ObjectParameter("datemodif", datemodif) :
                new ObjectParameter("datemodif", typeof(System.DateTime));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(short));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var typeVirParameter = typeVir != null ?
                new ObjectParameter("TypeVir", typeVir) :
                new ObjectParameter("TypeVir", typeof(string));
    
            var libLiaisonParameter = libLiaison != null ?
                new ObjectParameter("LibLiaison", libLiaison) :
                new ObjectParameter("LibLiaison", typeof(string));
    
            var liaisonParameter = liaison != null ?
                new ObjectParameter("Liaison", liaison) :
                new ObjectParameter("Liaison", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var matriSalaireParameter = matriSalaire != null ?
                new ObjectParameter("MatriSalaire", matriSalaire) :
                new ObjectParameter("MatriSalaire", typeof(string));
    
            var institutionTypeParameter = institutionType != null ?
                new ObjectParameter("InstitutionType", institutionType) :
                new ObjectParameter("InstitutionType", typeof(string));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var datederniervirParameter = datederniervir.HasValue ?
                new ObjectParameter("datederniervir", datederniervir) :
                new ObjectParameter("datederniervir", typeof(System.DateTime));
    
            var libcpteglParameter = libcptegl != null ?
                new ObjectParameter("libcptegl", libcptegl) :
                new ObjectParameter("libcptegl", typeof(string));
    
            var cpteglParameter = cptegl != null ?
                new ObjectParameter("cptegl", cptegl) :
                new ObjectParameter("cptegl", typeof(string));
    
            var clecpteParameter = clecpte != null ?
                new ObjectParameter("clecpte", clecpte) :
                new ObjectParameter("clecpte", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var seriesParameter = series.HasValue ?
                new ObjectParameter("Series", series) :
                new ObjectParameter("Series", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StandingOrder_Insert_Migration", agenceParameter, cpteClientParameter, denominationParameter, amountParameter, correspondentCodeParameter, correspondentParameter, correspondentAcctParameter, accountKeyParameter, statutParameter, dateDemarrageParameter, dateRenovellementParameter, dateCreationParameter, datemodifParameter, referenceParameter, libAgenceParameter, employeParameter, libEmployeParameter, typeVirParameter, libLiaisonParameter, liaisonParameter, companyNameParameter, matriSalaireParameter, institutionTypeParameter, txnNoParameter, datederniervirParameter, libcpteglParameter, cpteglParameter, clecpteParameter, lect, msg, computerNameParameter, seriesParameter);
        }
    
        public virtual int StandingOrder_Update(string agence, string cpteClient, string denomination, Nullable<double> amount, Nullable<short> correspondentCode, string correspondent, string correspondentAcct, string accountKey, string statut, Nullable<System.DateTime> dateDemarrage, Nullable<System.DateTime> dateRenovellement, string dateCreation, Nullable<System.DateTime> datemodif, string reference, string libAgence, string employe, string libEmploye, string typeVir, string libLiaison, string liaison, string companyName, string matriSalaire, string institutionType, string libcptegl, string cptegl, string clecpte, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var cpteClientParameter = cpteClient != null ?
                new ObjectParameter("CpteClient", cpteClient) :
                new ObjectParameter("CpteClient", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var correspondentCodeParameter = correspondentCode.HasValue ?
                new ObjectParameter("CorrespondentCode", correspondentCode) :
                new ObjectParameter("CorrespondentCode", typeof(short));
    
            var correspondentParameter = correspondent != null ?
                new ObjectParameter("Correspondent", correspondent) :
                new ObjectParameter("Correspondent", typeof(string));
    
            var correspondentAcctParameter = correspondentAcct != null ?
                new ObjectParameter("CorrespondentAcct", correspondentAcct) :
                new ObjectParameter("CorrespondentAcct", typeof(string));
    
            var accountKeyParameter = accountKey != null ?
                new ObjectParameter("AccountKey", accountKey) :
                new ObjectParameter("AccountKey", typeof(string));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var dateDemarrageParameter = dateDemarrage.HasValue ?
                new ObjectParameter("DateDemarrage", dateDemarrage) :
                new ObjectParameter("DateDemarrage", typeof(System.DateTime));
    
            var dateRenovellementParameter = dateRenovellement.HasValue ?
                new ObjectParameter("DateRenovellement", dateRenovellement) :
                new ObjectParameter("DateRenovellement", typeof(System.DateTime));
    
            var dateCreationParameter = dateCreation != null ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(string));
    
            var datemodifParameter = datemodif.HasValue ?
                new ObjectParameter("datemodif", datemodif) :
                new ObjectParameter("datemodif", typeof(System.DateTime));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var typeVirParameter = typeVir != null ?
                new ObjectParameter("TypeVir", typeVir) :
                new ObjectParameter("TypeVir", typeof(string));
    
            var libLiaisonParameter = libLiaison != null ?
                new ObjectParameter("LibLiaison", libLiaison) :
                new ObjectParameter("LibLiaison", typeof(string));
    
            var liaisonParameter = liaison != null ?
                new ObjectParameter("Liaison", liaison) :
                new ObjectParameter("Liaison", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var matriSalaireParameter = matriSalaire != null ?
                new ObjectParameter("MatriSalaire", matriSalaire) :
                new ObjectParameter("MatriSalaire", typeof(string));
    
            var institutionTypeParameter = institutionType != null ?
                new ObjectParameter("InstitutionType", institutionType) :
                new ObjectParameter("InstitutionType", typeof(string));
    
            var libcpteglParameter = libcptegl != null ?
                new ObjectParameter("libcptegl", libcptegl) :
                new ObjectParameter("libcptegl", typeof(string));
    
            var cpteglParameter = cptegl != null ?
                new ObjectParameter("cptegl", cptegl) :
                new ObjectParameter("cptegl", typeof(string));
    
            var clecpteParameter = clecpte != null ?
                new ObjectParameter("clecpte", clecpte) :
                new ObjectParameter("clecpte", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StandingOrder_Update", agenceParameter, cpteClientParameter, denominationParameter, amountParameter, correspondentCodeParameter, correspondentParameter, correspondentAcctParameter, accountKeyParameter, statutParameter, dateDemarrageParameter, dateRenovellementParameter, dateCreationParameter, datemodifParameter, referenceParameter, libAgenceParameter, employeParameter, libEmployeParameter, typeVirParameter, libLiaisonParameter, liaisonParameter, companyNameParameter, matriSalaireParameter, institutionTypeParameter, libcpteglParameter, cpteglParameter, clecpteParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int tabBudgetAllocated_Delete(string budgetID, string agence, string codeCentre, string fiscalID, string typeBudget, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var budgetIDParameter = budgetID != null ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var codeCentreParameter = codeCentre != null ?
                new ObjectParameter("CodeCentre", codeCentre) :
                new ObjectParameter("CodeCentre", typeof(string));
    
            var fiscalIDParameter = fiscalID != null ?
                new ObjectParameter("FiscalID", fiscalID) :
                new ObjectParameter("FiscalID", typeof(string));
    
            var typeBudgetParameter = typeBudget != null ?
                new ObjectParameter("TypeBudget", typeBudget) :
                new ObjectParameter("TypeBudget", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tabBudgetAllocated_Delete", budgetIDParameter, agenceParameter, codeCentreParameter, fiscalIDParameter, typeBudgetParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int tabBudgetAllocated_Insert(string budgetID, string agence, string directorateID, string codeCentre, Nullable<double> allocatedAmount, Nullable<double> spendAmount, Nullable<double> leftAmount, Nullable<int> fiscalID, string typeBudget, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var budgetIDParameter = budgetID != null ?
                new ObjectParameter("BudgetID", budgetID) :
                new ObjectParameter("BudgetID", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var directorateIDParameter = directorateID != null ?
                new ObjectParameter("DirectorateID", directorateID) :
                new ObjectParameter("DirectorateID", typeof(string));
    
            var codeCentreParameter = codeCentre != null ?
                new ObjectParameter("CodeCentre", codeCentre) :
                new ObjectParameter("CodeCentre", typeof(string));
    
            var allocatedAmountParameter = allocatedAmount.HasValue ?
                new ObjectParameter("AllocatedAmount", allocatedAmount) :
                new ObjectParameter("AllocatedAmount", typeof(double));
    
            var spendAmountParameter = spendAmount.HasValue ?
                new ObjectParameter("SpendAmount", spendAmount) :
                new ObjectParameter("SpendAmount", typeof(double));
    
            var leftAmountParameter = leftAmount.HasValue ?
                new ObjectParameter("LeftAmount", leftAmount) :
                new ObjectParameter("LeftAmount", typeof(double));
    
            var fiscalIDParameter = fiscalID.HasValue ?
                new ObjectParameter("FiscalID", fiscalID) :
                new ObjectParameter("FiscalID", typeof(int));
    
            var typeBudgetParameter = typeBudget != null ?
                new ObjectParameter("TypeBudget", typeBudget) :
                new ObjectParameter("TypeBudget", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tabBudgetAllocated_Insert", budgetIDParameter, agenceParameter, directorateIDParameter, codeCentreParameter, allocatedAmountParameter, spendAmountParameter, leftAmountParameter, fiscalIDParameter, typeBudgetParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int TabConfigReportCobac_Delete(string etat, string codePoste, string groupcode, string cpteGl, ObjectParameter lect, ObjectParameter msg, Nullable<int> employe, string computerName, string language)
        {
            var etatParameter = etat != null ?
                new ObjectParameter("Etat", etat) :
                new ObjectParameter("Etat", typeof(string));
    
            var codePosteParameter = codePoste != null ?
                new ObjectParameter("CodePoste", codePoste) :
                new ObjectParameter("CodePoste", typeof(string));
    
            var groupcodeParameter = groupcode != null ?
                new ObjectParameter("groupcode", groupcode) :
                new ObjectParameter("groupcode", typeof(string));
    
            var cpteGlParameter = cpteGl != null ?
                new ObjectParameter("CpteGl", cpteGl) :
                new ObjectParameter("CpteGl", typeof(string));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(int));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TabConfigReportCobac_Delete", etatParameter, codePosteParameter, groupcodeParameter, cpteGlParameter, lect, msg, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int TabConfigReportCobac_Insert(string reportHeader, string etat, string libelleEtat, string codePoste, string libPoste, string groupcode, string groupcodename, string catGroup, string cpteGl, string typeCpte, string sensInfo, string glPosit, string lignecode, string grouping, string custAcct, string netEquity, string commentOne, string commentTwo, Nullable<int> ponderation, ObjectParameter lect, ObjectParameter msg, Nullable<int> employe, string computerName, string language, Nullable<int> resultAcct)
        {
            var reportHeaderParameter = reportHeader != null ?
                new ObjectParameter("ReportHeader", reportHeader) :
                new ObjectParameter("ReportHeader", typeof(string));
    
            var etatParameter = etat != null ?
                new ObjectParameter("Etat", etat) :
                new ObjectParameter("Etat", typeof(string));
    
            var libelleEtatParameter = libelleEtat != null ?
                new ObjectParameter("LibelleEtat", libelleEtat) :
                new ObjectParameter("LibelleEtat", typeof(string));
    
            var codePosteParameter = codePoste != null ?
                new ObjectParameter("CodePoste", codePoste) :
                new ObjectParameter("CodePoste", typeof(string));
    
            var libPosteParameter = libPoste != null ?
                new ObjectParameter("LibPoste", libPoste) :
                new ObjectParameter("LibPoste", typeof(string));
    
            var groupcodeParameter = groupcode != null ?
                new ObjectParameter("groupcode", groupcode) :
                new ObjectParameter("groupcode", typeof(string));
    
            var groupcodenameParameter = groupcodename != null ?
                new ObjectParameter("groupcodename", groupcodename) :
                new ObjectParameter("groupcodename", typeof(string));
    
            var catGroupParameter = catGroup != null ?
                new ObjectParameter("CatGroup", catGroup) :
                new ObjectParameter("CatGroup", typeof(string));
    
            var cpteGlParameter = cpteGl != null ?
                new ObjectParameter("CpteGl", cpteGl) :
                new ObjectParameter("CpteGl", typeof(string));
    
            var typeCpteParameter = typeCpte != null ?
                new ObjectParameter("TypeCpte", typeCpte) :
                new ObjectParameter("TypeCpte", typeof(string));
    
            var sensInfoParameter = sensInfo != null ?
                new ObjectParameter("SensInfo", sensInfo) :
                new ObjectParameter("SensInfo", typeof(string));
    
            var glPositParameter = glPosit != null ?
                new ObjectParameter("GlPosit", glPosit) :
                new ObjectParameter("GlPosit", typeof(string));
    
            var lignecodeParameter = lignecode != null ?
                new ObjectParameter("lignecode", lignecode) :
                new ObjectParameter("lignecode", typeof(string));
    
            var groupingParameter = grouping != null ?
                new ObjectParameter("grouping", grouping) :
                new ObjectParameter("grouping", typeof(string));
    
            var custAcctParameter = custAcct != null ?
                new ObjectParameter("CustAcct", custAcct) :
                new ObjectParameter("CustAcct", typeof(string));
    
            var netEquityParameter = netEquity != null ?
                new ObjectParameter("NetEquity", netEquity) :
                new ObjectParameter("NetEquity", typeof(string));
    
            var commentOneParameter = commentOne != null ?
                new ObjectParameter("CommentOne", commentOne) :
                new ObjectParameter("CommentOne", typeof(string));
    
            var commentTwoParameter = commentTwo != null ?
                new ObjectParameter("CommentTwo", commentTwo) :
                new ObjectParameter("CommentTwo", typeof(string));
    
            var ponderationParameter = ponderation.HasValue ?
                new ObjectParameter("Ponderation", ponderation) :
                new ObjectParameter("Ponderation", typeof(int));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(int));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var resultAcctParameter = resultAcct.HasValue ?
                new ObjectParameter("ResultAcct", resultAcct) :
                new ObjectParameter("ResultAcct", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TabConfigReportCobac_Insert", reportHeaderParameter, etatParameter, libelleEtatParameter, codePosteParameter, libPosteParameter, groupcodeParameter, groupcodenameParameter, catGroupParameter, cpteGlParameter, typeCpteParameter, sensInfoParameter, glPositParameter, lignecodeParameter, groupingParameter, custAcctParameter, netEquityParameter, commentOneParameter, commentTwoParameter, ponderationParameter, lect, msg, employeParameter, computerNameParameter, languageParameter, resultAcctParameter);
        }
    
        public virtual int TabConfigReportCobac_Update(string reportHeader, string etat, string libelleEtat, string codePoste, string libPoste, string groupcode, string groupcodename, string catGroup, string cpteGl, string typeCpte, string sensInfo, string glPosit, string lignecode, string grouping, string custAcct, string netEquity, string newCpteGl, string commentOne, string commentTwo, Nullable<int> ponderation, ObjectParameter lect, ObjectParameter msg, string employe, string computerName, string language, Nullable<int> resultAcct)
        {
            var reportHeaderParameter = reportHeader != null ?
                new ObjectParameter("ReportHeader", reportHeader) :
                new ObjectParameter("ReportHeader", typeof(string));
    
            var etatParameter = etat != null ?
                new ObjectParameter("Etat", etat) :
                new ObjectParameter("Etat", typeof(string));
    
            var libelleEtatParameter = libelleEtat != null ?
                new ObjectParameter("LibelleEtat", libelleEtat) :
                new ObjectParameter("LibelleEtat", typeof(string));
    
            var codePosteParameter = codePoste != null ?
                new ObjectParameter("CodePoste", codePoste) :
                new ObjectParameter("CodePoste", typeof(string));
    
            var libPosteParameter = libPoste != null ?
                new ObjectParameter("LibPoste", libPoste) :
                new ObjectParameter("LibPoste", typeof(string));
    
            var groupcodeParameter = groupcode != null ?
                new ObjectParameter("groupcode", groupcode) :
                new ObjectParameter("groupcode", typeof(string));
    
            var groupcodenameParameter = groupcodename != null ?
                new ObjectParameter("groupcodename", groupcodename) :
                new ObjectParameter("groupcodename", typeof(string));
    
            var catGroupParameter = catGroup != null ?
                new ObjectParameter("CatGroup", catGroup) :
                new ObjectParameter("CatGroup", typeof(string));
    
            var cpteGlParameter = cpteGl != null ?
                new ObjectParameter("CpteGl", cpteGl) :
                new ObjectParameter("CpteGl", typeof(string));
    
            var typeCpteParameter = typeCpte != null ?
                new ObjectParameter("TypeCpte", typeCpte) :
                new ObjectParameter("TypeCpte", typeof(string));
    
            var sensInfoParameter = sensInfo != null ?
                new ObjectParameter("SensInfo", sensInfo) :
                new ObjectParameter("SensInfo", typeof(string));
    
            var glPositParameter = glPosit != null ?
                new ObjectParameter("GlPosit", glPosit) :
                new ObjectParameter("GlPosit", typeof(string));
    
            var lignecodeParameter = lignecode != null ?
                new ObjectParameter("lignecode", lignecode) :
                new ObjectParameter("lignecode", typeof(string));
    
            var groupingParameter = grouping != null ?
                new ObjectParameter("grouping", grouping) :
                new ObjectParameter("grouping", typeof(string));
    
            var custAcctParameter = custAcct != null ?
                new ObjectParameter("CustAcct", custAcct) :
                new ObjectParameter("CustAcct", typeof(string));
    
            var netEquityParameter = netEquity != null ?
                new ObjectParameter("NetEquity", netEquity) :
                new ObjectParameter("NetEquity", typeof(string));
    
            var newCpteGlParameter = newCpteGl != null ?
                new ObjectParameter("NewCpteGl", newCpteGl) :
                new ObjectParameter("NewCpteGl", typeof(string));
    
            var commentOneParameter = commentOne != null ?
                new ObjectParameter("CommentOne", commentOne) :
                new ObjectParameter("CommentOne", typeof(string));
    
            var commentTwoParameter = commentTwo != null ?
                new ObjectParameter("CommentTwo", commentTwo) :
                new ObjectParameter("CommentTwo", typeof(string));
    
            var ponderationParameter = ponderation.HasValue ?
                new ObjectParameter("Ponderation", ponderation) :
                new ObjectParameter("Ponderation", typeof(int));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var resultAcctParameter = resultAcct.HasValue ?
                new ObjectParameter("ResultAcct", resultAcct) :
                new ObjectParameter("ResultAcct", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TabConfigReportCobac_Update", reportHeaderParameter, etatParameter, libelleEtatParameter, codePosteParameter, libPosteParameter, groupcodeParameter, groupcodenameParameter, catGroupParameter, cpteGlParameter, typeCpteParameter, sensInfoParameter, glPositParameter, lignecodeParameter, groupingParameter, custAcctParameter, netEquityParameter, newCpteGlParameter, commentOneParameter, commentTwoParameter, ponderationParameter, lect, msg, employeParameter, computerNameParameter, languageParameter, resultAcctParameter);
        }
    
        public virtual int tabCostCentre_Delete(string codeCentre, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var codeCentreParameter = codeCentre != null ?
                new ObjectParameter("CodeCentre", codeCentre) :
                new ObjectParameter("CodeCentre", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tabCostCentre_Delete", codeCentreParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int tabCostCentre_Insert(string codeCentre, string cpteGL, string controlBudget, string centreName, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var codeCentreParameter = codeCentre != null ?
                new ObjectParameter("CodeCentre", codeCentre) :
                new ObjectParameter("CodeCentre", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var controlBudgetParameter = controlBudget != null ?
                new ObjectParameter("ControlBudget", controlBudget) :
                new ObjectParameter("ControlBudget", typeof(string));
    
            var centreNameParameter = centreName != null ?
                new ObjectParameter("CentreName", centreName) :
                new ObjectParameter("CentreName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tabCostCentre_Insert", codeCentreParameter, cpteGLParameter, controlBudgetParameter, centreNameParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int tabCostCentre_Update(string codeCentre, string cpteGL, string controlBudget, string centreName, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var codeCentreParameter = codeCentre != null ?
                new ObjectParameter("CodeCentre", codeCentre) :
                new ObjectParameter("CodeCentre", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var controlBudgetParameter = controlBudget != null ?
                new ObjectParameter("ControlBudget", controlBudget) :
                new ObjectParameter("ControlBudget", typeof(string));
    
            var centreNameParameter = centreName != null ?
                new ObjectParameter("CentreName", centreName) :
                new ObjectParameter("CentreName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tabCostCentre_Update", codeCentreParameter, cpteGLParameter, controlBudgetParameter, centreNameParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int tabDirectorate_Delete(string directorateCode, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var directorateCodeParameter = directorateCode != null ?
                new ObjectParameter("DirectorateCode", directorateCode) :
                new ObjectParameter("DirectorateCode", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tabDirectorate_Delete", directorateCodeParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int tabDirectorate_Insert(string directorateCode, string directorateHead, string contactNumber, string directorateName, string remarks, Nullable<int> fiscalID, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var directorateCodeParameter = directorateCode != null ?
                new ObjectParameter("DirectorateCode", directorateCode) :
                new ObjectParameter("DirectorateCode", typeof(string));
    
            var directorateHeadParameter = directorateHead != null ?
                new ObjectParameter("DirectorateHead", directorateHead) :
                new ObjectParameter("DirectorateHead", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var directorateNameParameter = directorateName != null ?
                new ObjectParameter("DirectorateName", directorateName) :
                new ObjectParameter("DirectorateName", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var fiscalIDParameter = fiscalID.HasValue ?
                new ObjectParameter("FiscalID", fiscalID) :
                new ObjectParameter("FiscalID", typeof(int));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tabDirectorate_Insert", directorateCodeParameter, directorateHeadParameter, contactNumberParameter, directorateNameParameter, remarksParameter, fiscalIDParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int tabDirectorate_Update(string directorateCode, string directorateHead, string contactNumber, string directorateName, string remarks, Nullable<int> fiscalID, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var directorateCodeParameter = directorateCode != null ?
                new ObjectParameter("DirectorateCode", directorateCode) :
                new ObjectParameter("DirectorateCode", typeof(string));
    
            var directorateHeadParameter = directorateHead != null ?
                new ObjectParameter("DirectorateHead", directorateHead) :
                new ObjectParameter("DirectorateHead", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var directorateNameParameter = directorateName != null ?
                new ObjectParameter("DirectorateName", directorateName) :
                new ObjectParameter("DirectorateName", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var fiscalIDParameter = fiscalID.HasValue ?
                new ObjectParameter("FiscalID", fiscalID) :
                new ObjectParameter("FiscalID", typeof(int));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tabDirectorate_Update", directorateCodeParameter, directorateHeadParameter, contactNumberParameter, directorateNameParameter, remarksParameter, fiscalIDParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int tabFiscalMaster_Delete(Nullable<int> fiscalID, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var fiscalIDParameter = fiscalID.HasValue ?
                new ObjectParameter("FiscalID", fiscalID) :
                new ObjectParameter("FiscalID", typeof(int));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tabFiscalMaster_Delete", fiscalIDParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int tabFiscalMaster_Insert(Nullable<int> fiscalID, Nullable<System.DateTime> startingFrom, Nullable<System.DateTime> endFrom, string description, string budGetID, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var fiscalIDParameter = fiscalID.HasValue ?
                new ObjectParameter("FiscalID", fiscalID) :
                new ObjectParameter("FiscalID", typeof(int));
    
            var startingFromParameter = startingFrom.HasValue ?
                new ObjectParameter("StartingFrom", startingFrom) :
                new ObjectParameter("StartingFrom", typeof(System.DateTime));
    
            var endFromParameter = endFrom.HasValue ?
                new ObjectParameter("EndFrom", endFrom) :
                new ObjectParameter("EndFrom", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var budGetIDParameter = budGetID != null ?
                new ObjectParameter("BudGetID", budGetID) :
                new ObjectParameter("BudGetID", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tabFiscalMaster_Insert", fiscalIDParameter, startingFromParameter, endFromParameter, descriptionParameter, budGetIDParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int tabFiscalMaster_Update(Nullable<int> fiscalID, Nullable<System.DateTime> startingFrom, Nullable<System.DateTime> endFrom, string description, string budGetID, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var fiscalIDParameter = fiscalID.HasValue ?
                new ObjectParameter("FiscalID", fiscalID) :
                new ObjectParameter("FiscalID", typeof(int));
    
            var startingFromParameter = startingFrom.HasValue ?
                new ObjectParameter("StartingFrom", startingFrom) :
                new ObjectParameter("StartingFrom", typeof(System.DateTime));
    
            var endFromParameter = endFrom.HasValue ?
                new ObjectParameter("EndFrom", endFrom) :
                new ObjectParameter("EndFrom", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var budGetIDParameter = budGetID != null ?
                new ObjectParameter("BudGetID", budGetID) :
                new ObjectParameter("BudGetID", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tabFiscalMaster_Update", fiscalIDParameter, startingFromParameter, endFromParameter, descriptionParameter, budGetIDParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int TableauAmmortisement(string agence, string refTransaction, string numero, string designation, Nullable<double> montantInitial, Nullable<double> tauxAmortissement, string periodiciteAmort, string periodiciteAcct, Nullable<System.DateTime> dateInitCalcul, string cpteImmob, string cpteAmortissement, string cpteDepreciation, ObjectParameter lect, ObjectParameter msg, string language, string computerName, string employe)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var refTransactionParameter = refTransaction != null ?
                new ObjectParameter("RefTransaction", refTransaction) :
                new ObjectParameter("RefTransaction", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("Numero", numero) :
                new ObjectParameter("Numero", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var montantInitialParameter = montantInitial.HasValue ?
                new ObjectParameter("MontantInitial", montantInitial) :
                new ObjectParameter("MontantInitial", typeof(double));
    
            var tauxAmortissementParameter = tauxAmortissement.HasValue ?
                new ObjectParameter("TauxAmortissement", tauxAmortissement) :
                new ObjectParameter("TauxAmortissement", typeof(double));
    
            var periodiciteAmortParameter = periodiciteAmort != null ?
                new ObjectParameter("PeriodiciteAmort", periodiciteAmort) :
                new ObjectParameter("PeriodiciteAmort", typeof(string));
    
            var periodiciteAcctParameter = periodiciteAcct != null ?
                new ObjectParameter("PeriodiciteAcct", periodiciteAcct) :
                new ObjectParameter("PeriodiciteAcct", typeof(string));
    
            var dateInitCalculParameter = dateInitCalcul.HasValue ?
                new ObjectParameter("DateInitCalcul", dateInitCalcul) :
                new ObjectParameter("DateInitCalcul", typeof(System.DateTime));
    
            var cpteImmobParameter = cpteImmob != null ?
                new ObjectParameter("CpteImmob", cpteImmob) :
                new ObjectParameter("CpteImmob", typeof(string));
    
            var cpteAmortissementParameter = cpteAmortissement != null ?
                new ObjectParameter("CpteAmortissement", cpteAmortissement) :
                new ObjectParameter("CpteAmortissement", typeof(string));
    
            var cpteDepreciationParameter = cpteDepreciation != null ?
                new ObjectParameter("CpteDepreciation", cpteDepreciation) :
                new ObjectParameter("CpteDepreciation", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TableauAmmortisement", agenceParameter, refTransactionParameter, numeroParameter, designationParameter, montantInitialParameter, tauxAmortissementParameter, periodiciteAmortParameter, periodiciteAcctParameter, dateInitCalculParameter, cpteImmobParameter, cpteAmortissementParameter, cpteDepreciationParameter, lect, msg, languageParameter, computerNameParameter, employeParameter);
        }
    
        public virtual int TableauAmortLitige(string numeroContrat, Nullable<double> capitalDep, Nullable<double> capitalRD, Nullable<double> wAnnuite, Nullable<double> wTauxInt, Nullable<double> wTxTVA, Nullable<System.DateTime> wDateDebutremb, Nullable<int> wDureeNette, string wPeriodicite, Nullable<int> wInterval, Nullable<int> echeance, string typeRemb, string employe, ObjectParameter lect, ObjectParameter msg, ObjectParameter totAnnuite, ObjectParameter totInt, ObjectParameter totTva, ObjectParameter totCap, string monEspion, Nullable<System.DateTime> dateAcc, Nullable<double> tauxAnn, string language, Nullable<int> dureeDiffere)
        {
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var capitalDepParameter = capitalDep.HasValue ?
                new ObjectParameter("CapitalDep", capitalDep) :
                new ObjectParameter("CapitalDep", typeof(double));
    
            var capitalRDParameter = capitalRD.HasValue ?
                new ObjectParameter("CapitalRD", capitalRD) :
                new ObjectParameter("CapitalRD", typeof(double));
    
            var wAnnuiteParameter = wAnnuite.HasValue ?
                new ObjectParameter("WAnnuite", wAnnuite) :
                new ObjectParameter("WAnnuite", typeof(double));
    
            var wTauxIntParameter = wTauxInt.HasValue ?
                new ObjectParameter("WTauxInt", wTauxInt) :
                new ObjectParameter("WTauxInt", typeof(double));
    
            var wTxTVAParameter = wTxTVA.HasValue ?
                new ObjectParameter("WTxTVA", wTxTVA) :
                new ObjectParameter("WTxTVA", typeof(double));
    
            var wDateDebutrembParameter = wDateDebutremb.HasValue ?
                new ObjectParameter("WDateDebutremb", wDateDebutremb) :
                new ObjectParameter("WDateDebutremb", typeof(System.DateTime));
    
            var wDureeNetteParameter = wDureeNette.HasValue ?
                new ObjectParameter("WDureeNette", wDureeNette) :
                new ObjectParameter("WDureeNette", typeof(int));
    
            var wPeriodiciteParameter = wPeriodicite != null ?
                new ObjectParameter("WPeriodicite", wPeriodicite) :
                new ObjectParameter("WPeriodicite", typeof(string));
    
            var wIntervalParameter = wInterval.HasValue ?
                new ObjectParameter("WInterval", wInterval) :
                new ObjectParameter("WInterval", typeof(int));
    
            var echeanceParameter = echeance.HasValue ?
                new ObjectParameter("Echeance", echeance) :
                new ObjectParameter("Echeance", typeof(int));
    
            var typeRembParameter = typeRemb != null ?
                new ObjectParameter("TypeRemb", typeRemb) :
                new ObjectParameter("TypeRemb", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var monEspionParameter = monEspion != null ?
                new ObjectParameter("MonEspion", monEspion) :
                new ObjectParameter("MonEspion", typeof(string));
    
            var dateAccParameter = dateAcc.HasValue ?
                new ObjectParameter("DateAcc", dateAcc) :
                new ObjectParameter("DateAcc", typeof(System.DateTime));
    
            var tauxAnnParameter = tauxAnn.HasValue ?
                new ObjectParameter("TauxAnn", tauxAnn) :
                new ObjectParameter("TauxAnn", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var dureeDiffereParameter = dureeDiffere.HasValue ?
                new ObjectParameter("DureeDiffere", dureeDiffere) :
                new ObjectParameter("DureeDiffere", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TableauAmortLitige", numeroContratParameter, capitalDepParameter, capitalRDParameter, wAnnuiteParameter, wTauxIntParameter, wTxTVAParameter, wDateDebutrembParameter, wDureeNetteParameter, wPeriodiciteParameter, wIntervalParameter, echeanceParameter, typeRembParameter, employeParameter, lect, msg, totAnnuite, totInt, totTva, totCap, monEspionParameter, dateAccParameter, tauxAnnParameter, languageParameter, dureeDiffereParameter);
        }
    
        public virtual int TabSalComp_Insert(string matriSalaire, string nomFonctionnaire, string prenomFonctionnaire, string dateSalaire, string typePaiement, Nullable<double> montSalaire, string institution, string opt1, string cptejumelle, string companyName, string inStandingOrder, Nullable<int> mavar, ObjectParameter lect, string language)
        {
            var matriSalaireParameter = matriSalaire != null ?
                new ObjectParameter("MatriSalaire", matriSalaire) :
                new ObjectParameter("MatriSalaire", typeof(string));
    
            var nomFonctionnaireParameter = nomFonctionnaire != null ?
                new ObjectParameter("NomFonctionnaire", nomFonctionnaire) :
                new ObjectParameter("NomFonctionnaire", typeof(string));
    
            var prenomFonctionnaireParameter = prenomFonctionnaire != null ?
                new ObjectParameter("PrenomFonctionnaire", prenomFonctionnaire) :
                new ObjectParameter("PrenomFonctionnaire", typeof(string));
    
            var dateSalaireParameter = dateSalaire != null ?
                new ObjectParameter("DateSalaire", dateSalaire) :
                new ObjectParameter("DateSalaire", typeof(string));
    
            var typePaiementParameter = typePaiement != null ?
                new ObjectParameter("TypePaiement", typePaiement) :
                new ObjectParameter("TypePaiement", typeof(string));
    
            var montSalaireParameter = montSalaire.HasValue ?
                new ObjectParameter("MontSalaire", montSalaire) :
                new ObjectParameter("MontSalaire", typeof(double));
    
            var institutionParameter = institution != null ?
                new ObjectParameter("Institution", institution) :
                new ObjectParameter("Institution", typeof(string));
    
            var opt1Parameter = opt1 != null ?
                new ObjectParameter("Opt1", opt1) :
                new ObjectParameter("Opt1", typeof(string));
    
            var cptejumelleParameter = cptejumelle != null ?
                new ObjectParameter("Cptejumelle", cptejumelle) :
                new ObjectParameter("Cptejumelle", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var inStandingOrderParameter = inStandingOrder != null ?
                new ObjectParameter("InStandingOrder", inStandingOrder) :
                new ObjectParameter("InStandingOrder", typeof(string));
    
            var mavarParameter = mavar.HasValue ?
                new ObjectParameter("mavar", mavar) :
                new ObjectParameter("mavar", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TabSalComp_Insert", matriSalaireParameter, nomFonctionnaireParameter, prenomFonctionnaireParameter, dateSalaireParameter, typePaiementParameter, montSalaireParameter, institutionParameter, opt1Parameter, cptejumelleParameter, companyNameParameter, inStandingOrderParameter, mavarParameter, lect, languageParameter);
        }
    
        public virtual int tabSigningAuthority_Delete(string authorityID, ObjectParameter lect, ObjectParameter errMsg)
        {
            var authorityIDParameter = authorityID != null ?
                new ObjectParameter("AuthorityID", authorityID) :
                new ObjectParameter("AuthorityID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tabSigningAuthority_Delete", authorityIDParameter, lect, errMsg);
        }
    
        public virtual int tabSigningAuthority_Insert(string authorityID, string libAuthority, Nullable<double> signingAmount, string status, Nullable<double> crAcctWithAuthAmnt, Nullable<double> dbAcctAuthMaxAmnt, Nullable<double> highestCreditAmnt, Nullable<double> overdraftAcctAuthLimit, Nullable<double> lOCMaxAmnt, ObjectParameter lect, ObjectParameter errMsg)
        {
            var authorityIDParameter = authorityID != null ?
                new ObjectParameter("AuthorityID", authorityID) :
                new ObjectParameter("AuthorityID", typeof(string));
    
            var libAuthorityParameter = libAuthority != null ?
                new ObjectParameter("libAuthority", libAuthority) :
                new ObjectParameter("libAuthority", typeof(string));
    
            var signingAmountParameter = signingAmount.HasValue ?
                new ObjectParameter("SigningAmount", signingAmount) :
                new ObjectParameter("SigningAmount", typeof(double));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var crAcctWithAuthAmntParameter = crAcctWithAuthAmnt.HasValue ?
                new ObjectParameter("CrAcctWithAuthAmnt", crAcctWithAuthAmnt) :
                new ObjectParameter("CrAcctWithAuthAmnt", typeof(double));
    
            var dbAcctAuthMaxAmntParameter = dbAcctAuthMaxAmnt.HasValue ?
                new ObjectParameter("DbAcctAuthMaxAmnt", dbAcctAuthMaxAmnt) :
                new ObjectParameter("DbAcctAuthMaxAmnt", typeof(double));
    
            var highestCreditAmntParameter = highestCreditAmnt.HasValue ?
                new ObjectParameter("HighestCreditAmnt", highestCreditAmnt) :
                new ObjectParameter("HighestCreditAmnt", typeof(double));
    
            var overdraftAcctAuthLimitParameter = overdraftAcctAuthLimit.HasValue ?
                new ObjectParameter("OverdraftAcctAuthLimit", overdraftAcctAuthLimit) :
                new ObjectParameter("OverdraftAcctAuthLimit", typeof(double));
    
            var lOCMaxAmntParameter = lOCMaxAmnt.HasValue ?
                new ObjectParameter("LOCMaxAmnt", lOCMaxAmnt) :
                new ObjectParameter("LOCMaxAmnt", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tabSigningAuthority_Insert", authorityIDParameter, libAuthorityParameter, signingAmountParameter, statusParameter, crAcctWithAuthAmntParameter, dbAcctAuthMaxAmntParameter, highestCreditAmntParameter, overdraftAcctAuthLimitParameter, lOCMaxAmntParameter, lect, errMsg);
        }
    
        public virtual int tabSigningAuthority_Update(string authorityID, string libAuthority, Nullable<double> signingAmount, string status, Nullable<double> crAcctWithAuthAmnt, Nullable<double> dbAcctAuthMaxAmnt, Nullable<double> highestCreditAmnt, Nullable<double> overdraftAcctAuthLimit, Nullable<double> lOCMaxAmnt, ObjectParameter lect, ObjectParameter errMsg)
        {
            var authorityIDParameter = authorityID != null ?
                new ObjectParameter("AuthorityID", authorityID) :
                new ObjectParameter("AuthorityID", typeof(string));
    
            var libAuthorityParameter = libAuthority != null ?
                new ObjectParameter("libAuthority", libAuthority) :
                new ObjectParameter("libAuthority", typeof(string));
    
            var signingAmountParameter = signingAmount.HasValue ?
                new ObjectParameter("SigningAmount", signingAmount) :
                new ObjectParameter("SigningAmount", typeof(double));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var crAcctWithAuthAmntParameter = crAcctWithAuthAmnt.HasValue ?
                new ObjectParameter("CrAcctWithAuthAmnt", crAcctWithAuthAmnt) :
                new ObjectParameter("CrAcctWithAuthAmnt", typeof(double));
    
            var dbAcctAuthMaxAmntParameter = dbAcctAuthMaxAmnt.HasValue ?
                new ObjectParameter("DbAcctAuthMaxAmnt", dbAcctAuthMaxAmnt) :
                new ObjectParameter("DbAcctAuthMaxAmnt", typeof(double));
    
            var highestCreditAmntParameter = highestCreditAmnt.HasValue ?
                new ObjectParameter("HighestCreditAmnt", highestCreditAmnt) :
                new ObjectParameter("HighestCreditAmnt", typeof(double));
    
            var overdraftAcctAuthLimitParameter = overdraftAcctAuthLimit.HasValue ?
                new ObjectParameter("OverdraftAcctAuthLimit", overdraftAcctAuthLimit) :
                new ObjectParameter("OverdraftAcctAuthLimit", typeof(double));
    
            var lOCMaxAmntParameter = lOCMaxAmnt.HasValue ?
                new ObjectParameter("LOCMaxAmnt", lOCMaxAmnt) :
                new ObjectParameter("LOCMaxAmnt", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tabSigningAuthority_Update", authorityIDParameter, libAuthorityParameter, signingAmountParameter, statusParameter, crAcctWithAuthAmntParameter, dbAcctAuthMaxAmntParameter, highestCreditAmntParameter, overdraftAcctAuthLimitParameter, lOCMaxAmntParameter, lect, errMsg);
        }
    
        public virtual ObjectResult<TellerLoanRepayment_Result> TellerLoanRepayment(string wagence, Nullable<double> totint, string wLibAgence, string wEmploye, string wLibEmploye, Nullable<double> capitalRec, Nullable<double> interestRec, Nullable<double> vatRec, Nullable<double> recPena, string devise, string libDevise, ObjectParameter lecture, ObjectParameter msg, string caisse, string cpteCaisse, string cleCpteCaisse, string codeMaj, string libCaisse, string libCpteCaisse, string currentBr, string libCurrentBr, string description, string denomination, string svTxnNo, string computername, string language, string v_NumeroContrat)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var totintParameter = totint.HasValue ?
                new ObjectParameter("totint", totint) :
                new ObjectParameter("totint", typeof(double));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var capitalRecParameter = capitalRec.HasValue ?
                new ObjectParameter("CapitalRec", capitalRec) :
                new ObjectParameter("CapitalRec", typeof(double));
    
            var interestRecParameter = interestRec.HasValue ?
                new ObjectParameter("InterestRec", interestRec) :
                new ObjectParameter("InterestRec", typeof(double));
    
            var vatRecParameter = vatRec.HasValue ?
                new ObjectParameter("VatRec", vatRec) :
                new ObjectParameter("VatRec", typeof(double));
    
            var recPenaParameter = recPena.HasValue ?
                new ObjectParameter("RecPena", recPena) :
                new ObjectParameter("RecPena", typeof(double));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var currentBrParameter = currentBr != null ?
                new ObjectParameter("CurrentBr", currentBr) :
                new ObjectParameter("CurrentBr", typeof(string));
    
            var libCurrentBrParameter = libCurrentBr != null ?
                new ObjectParameter("LibCurrentBr", libCurrentBr) :
                new ObjectParameter("LibCurrentBr", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var svTxnNoParameter = svTxnNo != null ?
                new ObjectParameter("SvTxnNo", svTxnNo) :
                new ObjectParameter("SvTxnNo", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var v_NumeroContratParameter = v_NumeroContrat != null ?
                new ObjectParameter("V_NumeroContrat", v_NumeroContrat) :
                new ObjectParameter("V_NumeroContrat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TellerLoanRepayment_Result>("TellerLoanRepayment", wagenceParameter, totintParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, capitalRecParameter, interestRecParameter, vatRecParameter, recPenaParameter, deviseParameter, libDeviseParameter, lecture, msg, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, codeMajParameter, libCaisseParameter, libCpteCaisseParameter, currentBrParameter, libCurrentBrParameter, descriptionParameter, denominationParameter, svTxnNoParameter, computernameParameter, languageParameter, v_NumeroContratParameter);
        }
    
        public virtual int TellerLoanRepaymentnew(string wagence, Nullable<double> totint, string wLibAgence, string wEmploye, string wLibEmploye, Nullable<double> capitalRec, Nullable<double> interestRec, Nullable<double> vatRec, Nullable<double> recPena, string devise, string libDevise, ObjectParameter lecture, ObjectParameter msg, string caisse, string cpteCaisse, string cleCpteCaisse, string codeMaj, string libCaisse, string libCpteCaisse, string currentBr, string libCurrentBr, string description, string denomination, string svTxnNo, string computername, string language, string v_NumeroContrat, string doneBy)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var totintParameter = totint.HasValue ?
                new ObjectParameter("totint", totint) :
                new ObjectParameter("totint", typeof(double));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var capitalRecParameter = capitalRec.HasValue ?
                new ObjectParameter("CapitalRec", capitalRec) :
                new ObjectParameter("CapitalRec", typeof(double));
    
            var interestRecParameter = interestRec.HasValue ?
                new ObjectParameter("InterestRec", interestRec) :
                new ObjectParameter("InterestRec", typeof(double));
    
            var vatRecParameter = vatRec.HasValue ?
                new ObjectParameter("VatRec", vatRec) :
                new ObjectParameter("VatRec", typeof(double));
    
            var recPenaParameter = recPena.HasValue ?
                new ObjectParameter("RecPena", recPena) :
                new ObjectParameter("RecPena", typeof(double));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var currentBrParameter = currentBr != null ?
                new ObjectParameter("CurrentBr", currentBr) :
                new ObjectParameter("CurrentBr", typeof(string));
    
            var libCurrentBrParameter = libCurrentBr != null ?
                new ObjectParameter("LibCurrentBr", libCurrentBr) :
                new ObjectParameter("LibCurrentBr", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var svTxnNoParameter = svTxnNo != null ?
                new ObjectParameter("SvTxnNo", svTxnNo) :
                new ObjectParameter("SvTxnNo", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var v_NumeroContratParameter = v_NumeroContrat != null ?
                new ObjectParameter("V_NumeroContrat", v_NumeroContrat) :
                new ObjectParameter("V_NumeroContrat", typeof(string));
    
            var doneByParameter = doneBy != null ?
                new ObjectParameter("DoneBy", doneBy) :
                new ObjectParameter("DoneBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TellerLoanRepaymentnew", wagenceParameter, totintParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, capitalRecParameter, interestRecParameter, vatRecParameter, recPenaParameter, deviseParameter, libDeviseParameter, lecture, msg, caisseParameter, cpteCaisseParameter, cleCpteCaisseParameter, codeMajParameter, libCaisseParameter, libCpteCaisseParameter, currentBrParameter, libCurrentBrParameter, descriptionParameter, denominationParameter, svTxnNoParameter, computernameParameter, languageParameter, v_NumeroContratParameter, doneByParameter);
        }
    
        public virtual int TERMDEPOSITS(string wagence, string wLibAgence, string wEmploye, string wLibEmploye, ObjectParameter msg, ObjectParameter lect, string computerName, string language)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TERMDEPOSITS", wagenceParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, msg, lect, computerNameParameter, languageParameter);
        }
    
        public virtual int TraitComtabProv(string wagence, string wLibAgence, string wEmploye, string wLibEmploye, string type, string devise, string libDevise, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TraitComtabProv", wagenceParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, typeParameter, deviseParameter, libDeviseParameter, lect, msg, languageParameter);
        }
    
        public virtual int TraitContentieux(string wagence, string wLibAgence, string wEmploye, string wLibEmploye, string devise, string libDevise, ObjectParameter lecture, ObjectParameter msg, string computerName, string language, string cobacID)
        {
            var wagenceParameter = wagence != null ?
                new ObjectParameter("wagence", wagence) :
                new ObjectParameter("wagence", typeof(string));
    
            var wLibAgenceParameter = wLibAgence != null ?
                new ObjectParameter("wLibAgence", wLibAgence) :
                new ObjectParameter("wLibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TraitContentieux", wagenceParameter, wLibAgenceParameter, wEmployeParameter, wLibEmployeParameter, deviseParameter, libDeviseParameter, lecture, msg, computerNameParameter, languageParameter, cobacIDParameter);
        }
    
        public virtual int TRAITCREDIT(string agence, string client, string numeroContrat, Nullable<double> montantPaye, Nullable<double> montantInt, ObjectParameter lect, string wEmploye, string computerName, ObjectParameter msg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var montantPayeParameter = montantPaye.HasValue ?
                new ObjectParameter("MontantPaye", montantPaye) :
                new ObjectParameter("MontantPaye", typeof(double));
    
            var montantIntParameter = montantInt.HasValue ?
                new ObjectParameter("montantInt", montantInt) :
                new ObjectParameter("montantInt", typeof(double));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TRAITCREDIT", agenceParameter, clientParameter, numeroContratParameter, montantPayeParameter, montantIntParameter, lect, wEmployeParameter, computerNameParameter, msg, languageParameter);
        }
    
        public virtual int TRAITCREDITCOOP(string agence, string client, string numeroContrat, Nullable<double> montantPaye, Nullable<double> montantInt, ObjectParameter lect, string wEmploye, string computerName, ObjectParameter msg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var montantPayeParameter = montantPaye.HasValue ?
                new ObjectParameter("MontantPaye", montantPaye) :
                new ObjectParameter("MontantPaye", typeof(double));
    
            var montantIntParameter = montantInt.HasValue ?
                new ObjectParameter("montantInt", montantInt) :
                new ObjectParameter("montantInt", typeof(double));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TRAITCREDITCOOP", agenceParameter, clientParameter, numeroContratParameter, montantPayeParameter, montantIntParameter, lect, wEmployeParameter, computerNameParameter, msg, languageParameter);
        }
    
        public virtual int TRAITCREDITSTAT(string agence, string client, string numeroContrat, Nullable<double> montantPaye, Nullable<double> montantInt, ObjectParameter lect, string wEmploye, string computerName, Nullable<System.DateTime> datetraitement, ObjectParameter msg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var montantPayeParameter = montantPaye.HasValue ?
                new ObjectParameter("MontantPaye", montantPaye) :
                new ObjectParameter("MontantPaye", typeof(double));
    
            var montantIntParameter = montantInt.HasValue ?
                new ObjectParameter("montantInt", montantInt) :
                new ObjectParameter("montantInt", typeof(double));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var datetraitementParameter = datetraitement.HasValue ?
                new ObjectParameter("datetraitement", datetraitement) :
                new ObjectParameter("datetraitement", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TRAITCREDITSTAT", agenceParameter, clientParameter, numeroContratParameter, montantPayeParameter, montantIntParameter, lect, wEmployeParameter, computerNameParameter, datetraitementParameter, msg, languageParameter);
        }
    
        public virtual int TRAITCREDITSTORDER(string agence, string client, Nullable<double> montantPaye, Nullable<double> montantInt, ObjectParameter lect, string wEmploye, string computerName, ObjectParameter msg, string language, ObjectParameter numeroContrat, ObjectParameter totDelAmount, ObjectParameter totalDelayInt)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var montantPayeParameter = montantPaye.HasValue ?
                new ObjectParameter("MontantPaye", montantPaye) :
                new ObjectParameter("MontantPaye", typeof(double));
    
            var montantIntParameter = montantInt.HasValue ?
                new ObjectParameter("montantInt", montantInt) :
                new ObjectParameter("montantInt", typeof(double));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TRAITCREDITSTORDER", agenceParameter, clientParameter, montantPayeParameter, montantIntParameter, lect, wEmployeParameter, computerNameParameter, msg, languageParameter, numeroContrat, totDelAmount, totalDelayInt);
        }
    
        public virtual int TRAITCREDITSTORDERLN(string agence, string client, Nullable<double> montantPaye, Nullable<double> montantInt, ObjectParameter lect, string wEmploye, string computerName, ObjectParameter msg, string language, ObjectParameter numeroContrat, ObjectParameter totDelAmount, ObjectParameter totalDelayInt, Nullable<int> type)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var montantPayeParameter = montantPaye.HasValue ?
                new ObjectParameter("MontantPaye", montantPaye) :
                new ObjectParameter("MontantPaye", typeof(double));
    
            var montantIntParameter = montantInt.HasValue ?
                new ObjectParameter("montantInt", montantInt) :
                new ObjectParameter("montantInt", typeof(double));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TRAITCREDITSTORDERLN", agenceParameter, clientParameter, montantPayeParameter, montantIntParameter, lect, wEmployeParameter, computerNameParameter, msg, languageParameter, numeroContrat, totDelAmount, totalDelayInt, typeParameter);
        }
    
        public virtual int TRAITCREDITSTORDERLN2(string agence, string client, Nullable<double> montantPaye, Nullable<double> montantInt, ObjectParameter lect, string wEmploye, string computerName, ObjectParameter msg, string language, ObjectParameter numeroContrat, ObjectParameter totDelAmount, ObjectParameter totalDelayInt, Nullable<int> type, ObjectParameter typeR)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var montantPayeParameter = montantPaye.HasValue ?
                new ObjectParameter("MontantPaye", montantPaye) :
                new ObjectParameter("MontantPaye", typeof(double));
    
            var montantIntParameter = montantInt.HasValue ?
                new ObjectParameter("montantInt", montantInt) :
                new ObjectParameter("montantInt", typeof(double));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TRAITCREDITSTORDERLN2", agenceParameter, clientParameter, montantPayeParameter, montantIntParameter, lect, wEmployeParameter, computerNameParameter, msg, languageParameter, numeroContrat, totDelAmount, totalDelayInt, typeParameter, typeR);
        }
    
        public virtual int TRAITCREDITSTORDERLN3(string agence, string client, Nullable<double> montantPaye, Nullable<double> montantInt, ObjectParameter lect, string wEmploye, string computerName, ObjectParameter msg, string language, ObjectParameter numeroContrat, ObjectParameter totDelAmount, ObjectParameter totalDelayInt, Nullable<int> type)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var montantPayeParameter = montantPaye.HasValue ?
                new ObjectParameter("MontantPaye", montantPaye) :
                new ObjectParameter("MontantPaye", typeof(double));
    
            var montantIntParameter = montantInt.HasValue ?
                new ObjectParameter("montantInt", montantInt) :
                new ObjectParameter("montantInt", typeof(double));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TRAITCREDITSTORDERLN3", agenceParameter, clientParameter, montantPayeParameter, montantIntParameter, lect, wEmployeParameter, computerNameParameter, msg, languageParameter, numeroContrat, totDelAmount, totalDelayInt, typeParameter);
        }
    
        public virtual int TraitImpaye_S_Trans(string agence, string libAgence, string wEmploye, string wLibEmploye, string devise, string libDevise, ObjectParameter lecture, ObjectParameter msg, string language, string cobacID)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("agence", agence) :
                new ObjectParameter("agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wLibEmployeParameter = wLibEmploye != null ?
                new ObjectParameter("wLibEmploye", wLibEmploye) :
                new ObjectParameter("wLibEmploye", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var cobacIDParameter = cobacID != null ?
                new ObjectParameter("CobacID", cobacID) :
                new ObjectParameter("CobacID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TraitImpaye_S_Trans", agenceParameter, libAgenceParameter, wEmployeParameter, wLibEmployeParameter, deviseParameter, libDeviseParameter, lecture, msg, languageParameter, cobacIDParameter);
        }
    
        public virtual int TraitProvision(string agence, string employe, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TraitProvision", agenceParameter, employeParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int TraitProvisionCU(string agence, string client, string numeroContrat, Nullable<double> montantPaye, Nullable<double> montantInt, ObjectParameter lect, string wEmploye, string computerName, ObjectParameter msg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var montantPayeParameter = montantPaye.HasValue ?
                new ObjectParameter("MontantPaye", montantPaye) :
                new ObjectParameter("MontantPaye", typeof(double));
    
            var montantIntParameter = montantInt.HasValue ?
                new ObjectParameter("montantInt", montantInt) :
                new ObjectParameter("montantInt", typeof(double));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TraitProvisionCU", agenceParameter, clientParameter, numeroContratParameter, montantPayeParameter, montantIntParameter, lect, wEmployeParameter, computerNameParameter, msg, languageParameter);
        }
    
        public virtual int TRAITSMS(string agence, string client, string numeroContrat, Nullable<double> montantPaye, Nullable<double> montantInt, ObjectParameter lect, string wEmploye, string computerName, ObjectParameter msg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var montantPayeParameter = montantPaye.HasValue ?
                new ObjectParameter("MontantPaye", montantPaye) :
                new ObjectParameter("MontantPaye", typeof(double));
    
            var montantIntParameter = montantInt.HasValue ?
                new ObjectParameter("montantInt", montantInt) :
                new ObjectParameter("montantInt", typeof(double));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TRAITSMS", agenceParameter, clientParameter, numeroContratParameter, montantPayeParameter, montantIntParameter, lect, wEmployeParameter, computerNameParameter, msg, languageParameter);
        }
    
        public virtual int TraitWriteoff(string agence, string employe, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TraitWriteoff", agenceParameter, employeParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int TRAITWRITEOFFCREDIT(string agence, ObjectParameter lect, string wEmploye, string computerName, Nullable<System.DateTime> datetraitement, ObjectParameter msg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var datetraitementParameter = datetraitement.HasValue ?
                new ObjectParameter("datetraitement", datetraitement) :
                new ObjectParameter("datetraitement", typeof(System.DateTime));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TRAITWRITEOFFCREDIT", agenceParameter, lect, wEmployeParameter, computerNameParameter, datetraitementParameter, msg, languageParameter);
        }
    
        public virtual int TraitWriteoffCU(string agence, string client, string numeroContrat, Nullable<double> montantPaye, Nullable<double> montantInt, ObjectParameter lect, string employe, string computerName, ObjectParameter msg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var numeroContratParameter = numeroContrat != null ?
                new ObjectParameter("NumeroContrat", numeroContrat) :
                new ObjectParameter("NumeroContrat", typeof(string));
    
            var montantPayeParameter = montantPaye.HasValue ?
                new ObjectParameter("MontantPaye", montantPaye) :
                new ObjectParameter("MontantPaye", typeof(double));
    
            var montantIntParameter = montantInt.HasValue ?
                new ObjectParameter("montantInt", montantInt) :
                new ObjectParameter("montantInt", typeof(double));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TraitWriteoffCU", agenceParameter, clientParameter, numeroContratParameter, montantPayeParameter, montantIntParameter, lect, employeParameter, computerNameParameter, msg, languageParameter);
        }
    
        public virtual int Trancode_Delete(string trCode, string employe, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Trancode_Delete", trCodeParameter, employeParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int Trancode_Insert(string branchCode, string trCode, string codePara, string designation, Nullable<int> optncounter, string codeoperation, string libelleoperation, string sensImput, Nullable<System.DateTime> dateCreation, string employe, string lot, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(string));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var codeParaParameter = codePara != null ?
                new ObjectParameter("CodePara", codePara) :
                new ObjectParameter("CodePara", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var optncounterParameter = optncounter.HasValue ?
                new ObjectParameter("optncounter", optncounter) :
                new ObjectParameter("optncounter", typeof(int));
    
            var codeoperationParameter = codeoperation != null ?
                new ObjectParameter("codeoperation", codeoperation) :
                new ObjectParameter("codeoperation", typeof(string));
    
            var libelleoperationParameter = libelleoperation != null ?
                new ObjectParameter("libelleoperation", libelleoperation) :
                new ObjectParameter("libelleoperation", typeof(string));
    
            var sensImputParameter = sensImput != null ?
                new ObjectParameter("SensImput", sensImput) :
                new ObjectParameter("SensImput", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var lotParameter = lot != null ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Trancode_Insert", branchCodeParameter, trCodeParameter, codeParaParameter, designationParameter, optncounterParameter, codeoperationParameter, libelleoperationParameter, sensImputParameter, dateCreationParameter, employeParameter, lotParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int Trancode_Update(string branchCode, string trCode, string codePara, string designation, Nullable<int> optncounter, string codeoperation, string libelleoperation, string sensImput, Nullable<System.DateTime> dateCreation, string employe, string lot, ObjectParameter lect, ObjectParameter errMsg, string language, string computerName)
        {
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(string));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var codeParaParameter = codePara != null ?
                new ObjectParameter("CodePara", codePara) :
                new ObjectParameter("CodePara", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var optncounterParameter = optncounter.HasValue ?
                new ObjectParameter("optncounter", optncounter) :
                new ObjectParameter("optncounter", typeof(int));
    
            var codeoperationParameter = codeoperation != null ?
                new ObjectParameter("codeoperation", codeoperation) :
                new ObjectParameter("codeoperation", typeof(string));
    
            var libelleoperationParameter = libelleoperation != null ?
                new ObjectParameter("libelleoperation", libelleoperation) :
                new ObjectParameter("libelleoperation", typeof(string));
    
            var sensImputParameter = sensImput != null ?
                new ObjectParameter("SensImput", sensImput) :
                new ObjectParameter("SensImput", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var lotParameter = lot != null ?
                new ObjectParameter("lot", lot) :
                new ObjectParameter("lot", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Trancode_Update", branchCodeParameter, trCodeParameter, codeParaParameter, designationParameter, optncounterParameter, codeoperationParameter, libelleoperationParameter, sensImputParameter, dateCreationParameter, employeParameter, lotParameter, lect, errMsg, languageParameter, computerNameParameter);
        }
    
        public virtual int TransferSalCompBr(string dateSalaire, string companyName, ObjectParameter lect, ObjectParameter msg, string employe, string computerName, string treatmentType, string language)
        {
            var dateSalaireParameter = dateSalaire != null ?
                new ObjectParameter("DateSalaire", dateSalaire) :
                new ObjectParameter("DateSalaire", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var treatmentTypeParameter = treatmentType != null ?
                new ObjectParameter("TreatmentType", treatmentType) :
                new ObjectParameter("TreatmentType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransferSalCompBr", dateSalaireParameter, companyNameParameter, lect, msg, employeParameter, computerNameParameter, treatmentTypeParameter, languageParameter);
        }
    
        public virtual int TransferSalFonctionaire(string dateSalaire, string institution, string treatmentType, ObjectParameter lect, ObjectParameter msg, string employe, string computerName, string language)
        {
            var dateSalaireParameter = dateSalaire != null ?
                new ObjectParameter("DateSalaire", dateSalaire) :
                new ObjectParameter("DateSalaire", typeof(string));
    
            var institutionParameter = institution != null ?
                new ObjectParameter("Institution", institution) :
                new ObjectParameter("Institution", typeof(string));
    
            var treatmentTypeParameter = treatmentType != null ?
                new ObjectParameter("TreatmentType", treatmentType) :
                new ObjectParameter("TreatmentType", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransferSalFonctionaire", dateSalaireParameter, institutionParameter, treatmentTypeParameter, lect, msg, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int Trbillinglist_Delete(string agence, string pc_CODEOP, string pc_TRCODE, Nullable<int> pi_ProductCode, string pc_CatClient, string pc_TYPEOP, string matricule, string libEmploye, string computername, string pc_CustomerType, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var pc_CODEOPParameter = pc_CODEOP != null ?
                new ObjectParameter("Pc_CODEOP", pc_CODEOP) :
                new ObjectParameter("Pc_CODEOP", typeof(string));
    
            var pc_TRCODEParameter = pc_TRCODE != null ?
                new ObjectParameter("Pc_TRCODE", pc_TRCODE) :
                new ObjectParameter("Pc_TRCODE", typeof(string));
    
            var pi_ProductCodeParameter = pi_ProductCode.HasValue ?
                new ObjectParameter("Pi_ProductCode", pi_ProductCode) :
                new ObjectParameter("Pi_ProductCode", typeof(int));
    
            var pc_CatClientParameter = pc_CatClient != null ?
                new ObjectParameter("Pc_CatClient", pc_CatClient) :
                new ObjectParameter("Pc_CatClient", typeof(string));
    
            var pc_TYPEOPParameter = pc_TYPEOP != null ?
                new ObjectParameter("Pc_TYPEOP", pc_TYPEOP) :
                new ObjectParameter("Pc_TYPEOP", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var pc_CustomerTypeParameter = pc_CustomerType != null ?
                new ObjectParameter("Pc_CustomerType", pc_CustomerType) :
                new ObjectParameter("Pc_CustomerType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Trbillinglist_Delete", agenceParameter, pc_CODEOPParameter, pc_TRCODEParameter, pi_ProductCodeParameter, pc_CatClientParameter, pc_TYPEOPParameter, matriculeParameter, libEmployeParameter, computernameParameter, pc_CustomerTypeParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int Trbillinglist_Insert(string agence, string pc_CODEOP, string pc_JNLCODE, string pc_COMPTE, string pc_TRCODE, string pc_CatClient, Nullable<int> pi_ProductCode, string pc_TYPEOP, string pc_LIBELLEOP, Nullable<double> pf_AMOUNT, Nullable<double> pf_TAUX, string pb_APPLYVAT, string pc_FLAGAMTTAUXPLAGE, string pc_FLAGPRODATTRIB, string pc_MODEOP, string pc_SENSOP, string pc_PERIODICITE, string pc_LibJournal, string pc_LibCompte, string pc_LibTrCode, string pc_LibCatClient, string pc_LibProduct, string matricule, string libEmploye, string computername, string pc_PROFGROUPNAME, string pc_PROFITYPE, string pc_PROFITABILITYNAME, string pc_PROFITDESCRIPTION, string pc_CustomerType, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var pc_CODEOPParameter = pc_CODEOP != null ?
                new ObjectParameter("Pc_CODEOP", pc_CODEOP) :
                new ObjectParameter("Pc_CODEOP", typeof(string));
    
            var pc_JNLCODEParameter = pc_JNLCODE != null ?
                new ObjectParameter("Pc_JNLCODE", pc_JNLCODE) :
                new ObjectParameter("Pc_JNLCODE", typeof(string));
    
            var pc_COMPTEParameter = pc_COMPTE != null ?
                new ObjectParameter("Pc_COMPTE", pc_COMPTE) :
                new ObjectParameter("Pc_COMPTE", typeof(string));
    
            var pc_TRCODEParameter = pc_TRCODE != null ?
                new ObjectParameter("Pc_TRCODE", pc_TRCODE) :
                new ObjectParameter("Pc_TRCODE", typeof(string));
    
            var pc_CatClientParameter = pc_CatClient != null ?
                new ObjectParameter("Pc_CatClient", pc_CatClient) :
                new ObjectParameter("Pc_CatClient", typeof(string));
    
            var pi_ProductCodeParameter = pi_ProductCode.HasValue ?
                new ObjectParameter("Pi_ProductCode", pi_ProductCode) :
                new ObjectParameter("Pi_ProductCode", typeof(int));
    
            var pc_TYPEOPParameter = pc_TYPEOP != null ?
                new ObjectParameter("Pc_TYPEOP", pc_TYPEOP) :
                new ObjectParameter("Pc_TYPEOP", typeof(string));
    
            var pc_LIBELLEOPParameter = pc_LIBELLEOP != null ?
                new ObjectParameter("Pc_LIBELLEOP", pc_LIBELLEOP) :
                new ObjectParameter("Pc_LIBELLEOP", typeof(string));
    
            var pf_AMOUNTParameter = pf_AMOUNT.HasValue ?
                new ObjectParameter("Pf_AMOUNT", pf_AMOUNT) :
                new ObjectParameter("Pf_AMOUNT", typeof(double));
    
            var pf_TAUXParameter = pf_TAUX.HasValue ?
                new ObjectParameter("Pf_TAUX", pf_TAUX) :
                new ObjectParameter("Pf_TAUX", typeof(double));
    
            var pb_APPLYVATParameter = pb_APPLYVAT != null ?
                new ObjectParameter("Pb_APPLYVAT", pb_APPLYVAT) :
                new ObjectParameter("Pb_APPLYVAT", typeof(string));
    
            var pc_FLAGAMTTAUXPLAGEParameter = pc_FLAGAMTTAUXPLAGE != null ?
                new ObjectParameter("Pc_FLAGAMTTAUXPLAGE", pc_FLAGAMTTAUXPLAGE) :
                new ObjectParameter("Pc_FLAGAMTTAUXPLAGE", typeof(string));
    
            var pc_FLAGPRODATTRIBParameter = pc_FLAGPRODATTRIB != null ?
                new ObjectParameter("Pc_FLAGPRODATTRIB", pc_FLAGPRODATTRIB) :
                new ObjectParameter("Pc_FLAGPRODATTRIB", typeof(string));
    
            var pc_MODEOPParameter = pc_MODEOP != null ?
                new ObjectParameter("Pc_MODEOP", pc_MODEOP) :
                new ObjectParameter("Pc_MODEOP", typeof(string));
    
            var pc_SENSOPParameter = pc_SENSOP != null ?
                new ObjectParameter("Pc_SENSOP", pc_SENSOP) :
                new ObjectParameter("Pc_SENSOP", typeof(string));
    
            var pc_PERIODICITEParameter = pc_PERIODICITE != null ?
                new ObjectParameter("Pc_PERIODICITE", pc_PERIODICITE) :
                new ObjectParameter("Pc_PERIODICITE", typeof(string));
    
            var pc_LibJournalParameter = pc_LibJournal != null ?
                new ObjectParameter("Pc_LibJournal", pc_LibJournal) :
                new ObjectParameter("Pc_LibJournal", typeof(string));
    
            var pc_LibCompteParameter = pc_LibCompte != null ?
                new ObjectParameter("Pc_LibCompte", pc_LibCompte) :
                new ObjectParameter("Pc_LibCompte", typeof(string));
    
            var pc_LibTrCodeParameter = pc_LibTrCode != null ?
                new ObjectParameter("Pc_LibTrCode", pc_LibTrCode) :
                new ObjectParameter("Pc_LibTrCode", typeof(string));
    
            var pc_LibCatClientParameter = pc_LibCatClient != null ?
                new ObjectParameter("Pc_LibCatClient", pc_LibCatClient) :
                new ObjectParameter("Pc_LibCatClient", typeof(string));
    
            var pc_LibProductParameter = pc_LibProduct != null ?
                new ObjectParameter("Pc_LibProduct", pc_LibProduct) :
                new ObjectParameter("Pc_LibProduct", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var pc_PROFGROUPNAMEParameter = pc_PROFGROUPNAME != null ?
                new ObjectParameter("Pc_PROFGROUPNAME", pc_PROFGROUPNAME) :
                new ObjectParameter("Pc_PROFGROUPNAME", typeof(string));
    
            var pc_PROFITYPEParameter = pc_PROFITYPE != null ?
                new ObjectParameter("Pc_PROFITYPE", pc_PROFITYPE) :
                new ObjectParameter("Pc_PROFITYPE", typeof(string));
    
            var pc_PROFITABILITYNAMEParameter = pc_PROFITABILITYNAME != null ?
                new ObjectParameter("Pc_PROFITABILITYNAME", pc_PROFITABILITYNAME) :
                new ObjectParameter("Pc_PROFITABILITYNAME", typeof(string));
    
            var pc_PROFITDESCRIPTIONParameter = pc_PROFITDESCRIPTION != null ?
                new ObjectParameter("Pc_PROFITDESCRIPTION", pc_PROFITDESCRIPTION) :
                new ObjectParameter("Pc_PROFITDESCRIPTION", typeof(string));
    
            var pc_CustomerTypeParameter = pc_CustomerType != null ?
                new ObjectParameter("Pc_CustomerType", pc_CustomerType) :
                new ObjectParameter("Pc_CustomerType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Trbillinglist_Insert", agenceParameter, pc_CODEOPParameter, pc_JNLCODEParameter, pc_COMPTEParameter, pc_TRCODEParameter, pc_CatClientParameter, pi_ProductCodeParameter, pc_TYPEOPParameter, pc_LIBELLEOPParameter, pf_AMOUNTParameter, pf_TAUXParameter, pb_APPLYVATParameter, pc_FLAGAMTTAUXPLAGEParameter, pc_FLAGPRODATTRIBParameter, pc_MODEOPParameter, pc_SENSOPParameter, pc_PERIODICITEParameter, pc_LibJournalParameter, pc_LibCompteParameter, pc_LibTrCodeParameter, pc_LibCatClientParameter, pc_LibProductParameter, matriculeParameter, libEmployeParameter, computernameParameter, pc_PROFGROUPNAMEParameter, pc_PROFITYPEParameter, pc_PROFITABILITYNAMEParameter, pc_PROFITDESCRIPTIONParameter, pc_CustomerTypeParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int Trbillinglist_Update(string agence, string pc_CODEOP, string pc_JNLCODE, string pc_COMPTE, string pc_TRCODE, string pc_CatClient, Nullable<int> pi_ProductCode, string pc_TYPEOP, string pc_LIBELLEOP, Nullable<double> pf_AMOUNT, Nullable<double> pf_TAUX, string pb_APPLYVAT, string pc_FLAGAMTTAUXPLAGE, string pc_FLAGPRODATTRIB, string pc_MODEOP, string pc_SENSOP, string pc_PERIODICITE, string pc_LibJournal, string pc_LibCompte, string pc_LibTrCode, string pc_LibCatClient, string pc_LibProduct, string matricule, string libEmploye, string computername, string pc_PROFGROUPNAME, string pc_PROFITYPE, string pc_PROFITABILITYNAME, string pc_PROFITDESCRIPTION, string pc_CustomerType, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var pc_CODEOPParameter = pc_CODEOP != null ?
                new ObjectParameter("Pc_CODEOP", pc_CODEOP) :
                new ObjectParameter("Pc_CODEOP", typeof(string));
    
            var pc_JNLCODEParameter = pc_JNLCODE != null ?
                new ObjectParameter("Pc_JNLCODE", pc_JNLCODE) :
                new ObjectParameter("Pc_JNLCODE", typeof(string));
    
            var pc_COMPTEParameter = pc_COMPTE != null ?
                new ObjectParameter("Pc_COMPTE", pc_COMPTE) :
                new ObjectParameter("Pc_COMPTE", typeof(string));
    
            var pc_TRCODEParameter = pc_TRCODE != null ?
                new ObjectParameter("Pc_TRCODE", pc_TRCODE) :
                new ObjectParameter("Pc_TRCODE", typeof(string));
    
            var pc_CatClientParameter = pc_CatClient != null ?
                new ObjectParameter("Pc_CatClient", pc_CatClient) :
                new ObjectParameter("Pc_CatClient", typeof(string));
    
            var pi_ProductCodeParameter = pi_ProductCode.HasValue ?
                new ObjectParameter("Pi_ProductCode", pi_ProductCode) :
                new ObjectParameter("Pi_ProductCode", typeof(int));
    
            var pc_TYPEOPParameter = pc_TYPEOP != null ?
                new ObjectParameter("Pc_TYPEOP", pc_TYPEOP) :
                new ObjectParameter("Pc_TYPEOP", typeof(string));
    
            var pc_LIBELLEOPParameter = pc_LIBELLEOP != null ?
                new ObjectParameter("Pc_LIBELLEOP", pc_LIBELLEOP) :
                new ObjectParameter("Pc_LIBELLEOP", typeof(string));
    
            var pf_AMOUNTParameter = pf_AMOUNT.HasValue ?
                new ObjectParameter("Pf_AMOUNT", pf_AMOUNT) :
                new ObjectParameter("Pf_AMOUNT", typeof(double));
    
            var pf_TAUXParameter = pf_TAUX.HasValue ?
                new ObjectParameter("Pf_TAUX", pf_TAUX) :
                new ObjectParameter("Pf_TAUX", typeof(double));
    
            var pb_APPLYVATParameter = pb_APPLYVAT != null ?
                new ObjectParameter("Pb_APPLYVAT", pb_APPLYVAT) :
                new ObjectParameter("Pb_APPLYVAT", typeof(string));
    
            var pc_FLAGAMTTAUXPLAGEParameter = pc_FLAGAMTTAUXPLAGE != null ?
                new ObjectParameter("Pc_FLAGAMTTAUXPLAGE", pc_FLAGAMTTAUXPLAGE) :
                new ObjectParameter("Pc_FLAGAMTTAUXPLAGE", typeof(string));
    
            var pc_FLAGPRODATTRIBParameter = pc_FLAGPRODATTRIB != null ?
                new ObjectParameter("Pc_FLAGPRODATTRIB", pc_FLAGPRODATTRIB) :
                new ObjectParameter("Pc_FLAGPRODATTRIB", typeof(string));
    
            var pc_MODEOPParameter = pc_MODEOP != null ?
                new ObjectParameter("Pc_MODEOP", pc_MODEOP) :
                new ObjectParameter("Pc_MODEOP", typeof(string));
    
            var pc_SENSOPParameter = pc_SENSOP != null ?
                new ObjectParameter("Pc_SENSOP", pc_SENSOP) :
                new ObjectParameter("Pc_SENSOP", typeof(string));
    
            var pc_PERIODICITEParameter = pc_PERIODICITE != null ?
                new ObjectParameter("Pc_PERIODICITE", pc_PERIODICITE) :
                new ObjectParameter("Pc_PERIODICITE", typeof(string));
    
            var pc_LibJournalParameter = pc_LibJournal != null ?
                new ObjectParameter("Pc_LibJournal", pc_LibJournal) :
                new ObjectParameter("Pc_LibJournal", typeof(string));
    
            var pc_LibCompteParameter = pc_LibCompte != null ?
                new ObjectParameter("Pc_LibCompte", pc_LibCompte) :
                new ObjectParameter("Pc_LibCompte", typeof(string));
    
            var pc_LibTrCodeParameter = pc_LibTrCode != null ?
                new ObjectParameter("Pc_LibTrCode", pc_LibTrCode) :
                new ObjectParameter("Pc_LibTrCode", typeof(string));
    
            var pc_LibCatClientParameter = pc_LibCatClient != null ?
                new ObjectParameter("Pc_LibCatClient", pc_LibCatClient) :
                new ObjectParameter("Pc_LibCatClient", typeof(string));
    
            var pc_LibProductParameter = pc_LibProduct != null ?
                new ObjectParameter("Pc_LibProduct", pc_LibProduct) :
                new ObjectParameter("Pc_LibProduct", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var pc_PROFGROUPNAMEParameter = pc_PROFGROUPNAME != null ?
                new ObjectParameter("Pc_PROFGROUPNAME", pc_PROFGROUPNAME) :
                new ObjectParameter("Pc_PROFGROUPNAME", typeof(string));
    
            var pc_PROFITYPEParameter = pc_PROFITYPE != null ?
                new ObjectParameter("Pc_PROFITYPE", pc_PROFITYPE) :
                new ObjectParameter("Pc_PROFITYPE", typeof(string));
    
            var pc_PROFITABILITYNAMEParameter = pc_PROFITABILITYNAME != null ?
                new ObjectParameter("Pc_PROFITABILITYNAME", pc_PROFITABILITYNAME) :
                new ObjectParameter("Pc_PROFITABILITYNAME", typeof(string));
    
            var pc_PROFITDESCRIPTIONParameter = pc_PROFITDESCRIPTION != null ?
                new ObjectParameter("Pc_PROFITDESCRIPTION", pc_PROFITDESCRIPTION) :
                new ObjectParameter("Pc_PROFITDESCRIPTION", typeof(string));
    
            var pc_CustomerTypeParameter = pc_CustomerType != null ?
                new ObjectParameter("Pc_CustomerType", pc_CustomerType) :
                new ObjectParameter("Pc_CustomerType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Trbillinglist_Update", agenceParameter, pc_CODEOPParameter, pc_JNLCODEParameter, pc_COMPTEParameter, pc_TRCODEParameter, pc_CatClientParameter, pi_ProductCodeParameter, pc_TYPEOPParameter, pc_LIBELLEOPParameter, pf_AMOUNTParameter, pf_TAUXParameter, pb_APPLYVATParameter, pc_FLAGAMTTAUXPLAGEParameter, pc_FLAGPRODATTRIBParameter, pc_MODEOPParameter, pc_SENSOPParameter, pc_PERIODICITEParameter, pc_LibJournalParameter, pc_LibCompteParameter, pc_LibTrCodeParameter, pc_LibCatClientParameter, pc_LibProductParameter, matriculeParameter, libEmployeParameter, computernameParameter, pc_PROFGROUPNAMEParameter, pc_PROFITYPEParameter, pc_PROFITABILITYNAMEParameter, pc_PROFITDESCRIPTIONParameter, pc_CustomerTypeParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int TROUVE_MODULE(string pI_employe, string pC_MODULENAME, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var pI_employeParameter = pI_employe != null ?
                new ObjectParameter("PI_employe", pI_employe) :
                new ObjectParameter("PI_employe", typeof(string));
    
            var pC_MODULENAMEParameter = pC_MODULENAME != null ?
                new ObjectParameter("PC_MODULENAME", pC_MODULENAME) :
                new ObjectParameter("PC_MODULENAME", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TROUVE_MODULE", pI_employeParameter, pC_MODULENAMEParameter, lect, msg, languageParameter);
        }
    
        public virtual int UPDATE_FORCETRX(Nullable<decimal> pD_SERIES, string pC_EMPLOYE, string pC_LIBEMPLOYE, string pC_CPTEJUMELLE, string pC_LIBCPTEJUMELLE, string pC_AGENCE, Nullable<double> pF_MONTANT, string pC_REFERENCE, string pC_DESCRIPTION, string computerName, ObjectParameter lect, ObjectParameter errMsg, string language, string pC_OPTNS)
        {
            var pD_SERIESParameter = pD_SERIES.HasValue ?
                new ObjectParameter("PD_SERIES", pD_SERIES) :
                new ObjectParameter("PD_SERIES", typeof(decimal));
    
            var pC_EMPLOYEParameter = pC_EMPLOYE != null ?
                new ObjectParameter("PC_EMPLOYE", pC_EMPLOYE) :
                new ObjectParameter("PC_EMPLOYE", typeof(string));
    
            var pC_LIBEMPLOYEParameter = pC_LIBEMPLOYE != null ?
                new ObjectParameter("PC_LIBEMPLOYE", pC_LIBEMPLOYE) :
                new ObjectParameter("PC_LIBEMPLOYE", typeof(string));
    
            var pC_CPTEJUMELLEParameter = pC_CPTEJUMELLE != null ?
                new ObjectParameter("PC_CPTEJUMELLE", pC_CPTEJUMELLE) :
                new ObjectParameter("PC_CPTEJUMELLE", typeof(string));
    
            var pC_LIBCPTEJUMELLEParameter = pC_LIBCPTEJUMELLE != null ?
                new ObjectParameter("PC_LIBCPTEJUMELLE", pC_LIBCPTEJUMELLE) :
                new ObjectParameter("PC_LIBCPTEJUMELLE", typeof(string));
    
            var pC_AGENCEParameter = pC_AGENCE != null ?
                new ObjectParameter("PC_AGENCE", pC_AGENCE) :
                new ObjectParameter("PC_AGENCE", typeof(string));
    
            var pF_MONTANTParameter = pF_MONTANT.HasValue ?
                new ObjectParameter("PF_MONTANT", pF_MONTANT) :
                new ObjectParameter("PF_MONTANT", typeof(double));
    
            var pC_REFERENCEParameter = pC_REFERENCE != null ?
                new ObjectParameter("PC_REFERENCE", pC_REFERENCE) :
                new ObjectParameter("PC_REFERENCE", typeof(string));
    
            var pC_DESCRIPTIONParameter = pC_DESCRIPTION != null ?
                new ObjectParameter("PC_DESCRIPTION", pC_DESCRIPTION) :
                new ObjectParameter("PC_DESCRIPTION", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var pC_OPTNSParameter = pC_OPTNS != null ?
                new ObjectParameter("PC_OPTNS", pC_OPTNS) :
                new ObjectParameter("PC_OPTNS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATE_FORCETRX", pD_SERIESParameter, pC_EMPLOYEParameter, pC_LIBEMPLOYEParameter, pC_CPTEJUMELLEParameter, pC_LIBCPTEJUMELLEParameter, pC_AGENCEParameter, pF_MONTANTParameter, pC_REFERENCEParameter, pC_DESCRIPTIONParameter, computerNameParameter, lect, errMsg, languageParameter, pC_OPTNSParameter);
        }
    
        public virtual int UPDATE_PRIV_EMPLOYE(string pI_EmployeName, string pI_Employe, Nullable<bool> pB_ADD, Nullable<bool> pB_DEL, Nullable<bool> pB_UP, Nullable<bool> pB_LIST, Nullable<bool> pB_PRINT, string pC_MENUNAME, string pC_MENUDESC, string pC_MENURESRCE, string pC_PRIVILEGE, string pC_APPLICATIONNAME, string pC_LIBPRIV, string pC_AGENCE, string computerName, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var pI_EmployeNameParameter = pI_EmployeName != null ?
                new ObjectParameter("PI_EmployeName", pI_EmployeName) :
                new ObjectParameter("PI_EmployeName", typeof(string));
    
            var pI_EmployeParameter = pI_Employe != null ?
                new ObjectParameter("PI_Employe", pI_Employe) :
                new ObjectParameter("PI_Employe", typeof(string));
    
            var pB_ADDParameter = pB_ADD.HasValue ?
                new ObjectParameter("PB_ADD", pB_ADD) :
                new ObjectParameter("PB_ADD", typeof(bool));
    
            var pB_DELParameter = pB_DEL.HasValue ?
                new ObjectParameter("PB_DEL", pB_DEL) :
                new ObjectParameter("PB_DEL", typeof(bool));
    
            var pB_UPParameter = pB_UP.HasValue ?
                new ObjectParameter("PB_UP", pB_UP) :
                new ObjectParameter("PB_UP", typeof(bool));
    
            var pB_LISTParameter = pB_LIST.HasValue ?
                new ObjectParameter("PB_LIST", pB_LIST) :
                new ObjectParameter("PB_LIST", typeof(bool));
    
            var pB_PRINTParameter = pB_PRINT.HasValue ?
                new ObjectParameter("PB_PRINT", pB_PRINT) :
                new ObjectParameter("PB_PRINT", typeof(bool));
    
            var pC_MENUNAMEParameter = pC_MENUNAME != null ?
                new ObjectParameter("PC_MENUNAME", pC_MENUNAME) :
                new ObjectParameter("PC_MENUNAME", typeof(string));
    
            var pC_MENUDESCParameter = pC_MENUDESC != null ?
                new ObjectParameter("PC_MENUDESC", pC_MENUDESC) :
                new ObjectParameter("PC_MENUDESC", typeof(string));
    
            var pC_MENURESRCEParameter = pC_MENURESRCE != null ?
                new ObjectParameter("PC_MENURESRCE", pC_MENURESRCE) :
                new ObjectParameter("PC_MENURESRCE", typeof(string));
    
            var pC_PRIVILEGEParameter = pC_PRIVILEGE != null ?
                new ObjectParameter("PC_PRIVILEGE", pC_PRIVILEGE) :
                new ObjectParameter("PC_PRIVILEGE", typeof(string));
    
            var pC_APPLICATIONNAMEParameter = pC_APPLICATIONNAME != null ?
                new ObjectParameter("PC_APPLICATIONNAME", pC_APPLICATIONNAME) :
                new ObjectParameter("PC_APPLICATIONNAME", typeof(string));
    
            var pC_LIBPRIVParameter = pC_LIBPRIV != null ?
                new ObjectParameter("PC_LIBPRIV", pC_LIBPRIV) :
                new ObjectParameter("PC_LIBPRIV", typeof(string));
    
            var pC_AGENCEParameter = pC_AGENCE != null ?
                new ObjectParameter("PC_AGENCE", pC_AGENCE) :
                new ObjectParameter("PC_AGENCE", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATE_PRIV_EMPLOYE", pI_EmployeNameParameter, pI_EmployeParameter, pB_ADDParameter, pB_DELParameter, pB_UPParameter, pB_LISTParameter, pB_PRINTParameter, pC_MENUNAMEParameter, pC_MENUDESCParameter, pC_MENURESRCEParameter, pC_PRIVILEGEParameter, pC_APPLICATIONNAMEParameter, pC_LIBPRIVParameter, pC_AGENCEParameter, computerNameParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int UPDATE_STANDINDORDER(Nullable<decimal> pD_SERIES, string pC_EMPLOYE, string pC_LIBEMPLOYE, string pC_CPTEJUMELLE, string pC_LIBCPTEJUMELLE, string pC_AGENCE, Nullable<double> pF_MONTANT, string pC_REFERENCE, string pC_DESCRIPTION, string computerName, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var pD_SERIESParameter = pD_SERIES.HasValue ?
                new ObjectParameter("PD_SERIES", pD_SERIES) :
                new ObjectParameter("PD_SERIES", typeof(decimal));
    
            var pC_EMPLOYEParameter = pC_EMPLOYE != null ?
                new ObjectParameter("PC_EMPLOYE", pC_EMPLOYE) :
                new ObjectParameter("PC_EMPLOYE", typeof(string));
    
            var pC_LIBEMPLOYEParameter = pC_LIBEMPLOYE != null ?
                new ObjectParameter("PC_LIBEMPLOYE", pC_LIBEMPLOYE) :
                new ObjectParameter("PC_LIBEMPLOYE", typeof(string));
    
            var pC_CPTEJUMELLEParameter = pC_CPTEJUMELLE != null ?
                new ObjectParameter("PC_CPTEJUMELLE", pC_CPTEJUMELLE) :
                new ObjectParameter("PC_CPTEJUMELLE", typeof(string));
    
            var pC_LIBCPTEJUMELLEParameter = pC_LIBCPTEJUMELLE != null ?
                new ObjectParameter("PC_LIBCPTEJUMELLE", pC_LIBCPTEJUMELLE) :
                new ObjectParameter("PC_LIBCPTEJUMELLE", typeof(string));
    
            var pC_AGENCEParameter = pC_AGENCE != null ?
                new ObjectParameter("PC_AGENCE", pC_AGENCE) :
                new ObjectParameter("PC_AGENCE", typeof(string));
    
            var pF_MONTANTParameter = pF_MONTANT.HasValue ?
                new ObjectParameter("PF_MONTANT", pF_MONTANT) :
                new ObjectParameter("PF_MONTANT", typeof(double));
    
            var pC_REFERENCEParameter = pC_REFERENCE != null ?
                new ObjectParameter("PC_REFERENCE", pC_REFERENCE) :
                new ObjectParameter("PC_REFERENCE", typeof(string));
    
            var pC_DESCRIPTIONParameter = pC_DESCRIPTION != null ?
                new ObjectParameter("PC_DESCRIPTION", pC_DESCRIPTION) :
                new ObjectParameter("PC_DESCRIPTION", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATE_STANDINDORDER", pD_SERIESParameter, pC_EMPLOYEParameter, pC_LIBEMPLOYEParameter, pC_CPTEJUMELLEParameter, pC_LIBCPTEJUMELLEParameter, pC_AGENCEParameter, pF_MONTANTParameter, pC_REFERENCEParameter, pC_DESCRIPTIONParameter, computerNameParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int UpdateAmountCreditWithoutCont(string agence, string libAgence, string numerocontrat, ObjectParameter lect, ObjectParameter msg, string employe, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var numerocontratParameter = numerocontrat != null ?
                new ObjectParameter("Numerocontrat", numerocontrat) :
                new ObjectParameter("Numerocontrat", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAmountCreditWithoutCont", agenceParameter, libAgenceParameter, numerocontratParameter, lect, msg, employeParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int UpdateBudgetAllocatedLimits(string agence, string wCodeCentre, string wBudgetID, Nullable<int> fiscalid, Nullable<double> wPayAmount, Nullable<double> olddebitamount, ObjectParameter lect, ObjectParameter msg, string language, string typeBudget)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("agence", agence) :
                new ObjectParameter("agence", typeof(string));
    
            var wCodeCentreParameter = wCodeCentre != null ?
                new ObjectParameter("wCodeCentre", wCodeCentre) :
                new ObjectParameter("wCodeCentre", typeof(string));
    
            var wBudgetIDParameter = wBudgetID != null ?
                new ObjectParameter("wBudgetID", wBudgetID) :
                new ObjectParameter("wBudgetID", typeof(string));
    
            var fiscalidParameter = fiscalid.HasValue ?
                new ObjectParameter("fiscalid", fiscalid) :
                new ObjectParameter("fiscalid", typeof(int));
    
            var wPayAmountParameter = wPayAmount.HasValue ?
                new ObjectParameter("wPayAmount", wPayAmount) :
                new ObjectParameter("wPayAmount", typeof(double));
    
            var olddebitamountParameter = olddebitamount.HasValue ?
                new ObjectParameter("olddebitamount", olddebitamount) :
                new ObjectParameter("olddebitamount", typeof(double));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var typeBudgetParameter = typeBudget != null ?
                new ObjectParameter("TypeBudget", typeBudget) :
                new ObjectParameter("TypeBudget", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBudgetAllocatedLimits", agenceParameter, wCodeCentreParameter, wBudgetIDParameter, fiscalidParameter, wPayAmountParameter, olddebitamountParameter, lect, msg, languageParameter, typeBudgetParameter);
        }
    
        public virtual int UpdateCustoAcc(string wEmploye, string wNomemploye, ObjectParameter lect, ObjectParameter msg, string cpteClient, string computerName, string language)
        {
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var wNomemployeParameter = wNomemploye != null ?
                new ObjectParameter("wNomemploye", wNomemploye) :
                new ObjectParameter("wNomemploye", typeof(string));
    
            var cpteClientParameter = cpteClient != null ?
                new ObjectParameter("CpteClient", cpteClient) :
                new ObjectParameter("CpteClient", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustoAcc", wEmployeParameter, wNomemployeParameter, lect, msg, cpteClientParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int UpdateCustoAccMvmente(string svagence, string wEmploye, Nullable<System.DateTime> serverDate, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var svagenceParameter = svagence != null ?
                new ObjectParameter("Svagence", svagence) :
                new ObjectParameter("Svagence", typeof(string));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustoAccMvmente", svagenceParameter, wEmployeParameter, serverDateParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int UpdateCustomerCompanyFTC(string companyName, string agence, Nullable<double> operationCharge, string cpteJumelle, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var operationChargeParameter = operationCharge.HasValue ?
                new ObjectParameter("OperationCharge", operationCharge) :
                new ObjectParameter("OperationCharge", typeof(double));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustomerCompanyFTC", companyNameParameter, agenceParameter, operationChargeParameter, cpteJumelleParameter, lect, msg, languageParameter);
        }
    
        public virtual int UpdateGlAcc(Nullable<int> wEmploye, string wNomemploye, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var wEmployeParameter = wEmploye.HasValue ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(int));
    
            var wNomemployeParameter = wNomemploye != null ?
                new ObjectParameter("wNomemploye", wNomemploye) :
                new ObjectParameter("wNomemploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateGlAcc", wEmployeParameter, wNomemployeParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int ValidateAccount(string cptejumelle, Nullable<decimal> serie, Nullable<decimal> debit, Nullable<decimal> credit, Nullable<int> matricule, string validation, string authoriser, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var cptejumelleParameter = cptejumelle != null ?
                new ObjectParameter("Cptejumelle", cptejumelle) :
                new ObjectParameter("Cptejumelle", typeof(string));
    
            var serieParameter = serie.HasValue ?
                new ObjectParameter("Serie", serie) :
                new ObjectParameter("Serie", typeof(decimal));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(decimal));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(decimal));
    
            var matriculeParameter = matricule.HasValue ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(int));
    
            var validationParameter = validation != null ?
                new ObjectParameter("validation", validation) :
                new ObjectParameter("validation", typeof(string));
    
            var authoriserParameter = authoriser != null ?
                new ObjectParameter("Authoriser", authoriser) :
                new ObjectParameter("Authoriser", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ValidateAccount", cptejumelleParameter, serieParameter, debitParameter, creditParameter, matriculeParameter, validationParameter, authoriserParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int ValideECritureCpta(string wAgence, string journal, Nullable<System.DateTime> dateoperation, Nullable<System.DateTime> serverDate, string wEmploye, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var wAgenceParameter = wAgence != null ?
                new ObjectParameter("wAgence", wAgence) :
                new ObjectParameter("wAgence", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var dateoperationParameter = dateoperation.HasValue ?
                new ObjectParameter("dateoperation", dateoperation) :
                new ObjectParameter("dateoperation", typeof(System.DateTime));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var wEmployeParameter = wEmploye != null ?
                new ObjectParameter("wEmploye", wEmploye) :
                new ObjectParameter("wEmploye", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ValideECritureCpta", wAgenceParameter, journalParameter, dateoperationParameter, serverDateParameter, wEmployeParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int ValideGeneralLedger(string agence, string devise, string journal, Nullable<System.DateTime> serverDate, string employe, ObjectParameter lect, ObjectParameter msg, string computerName, string language, Nullable<int> eodparam)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var eodparamParameter = eodparam.HasValue ?
                new ObjectParameter("Eodparam", eodparam) :
                new ObjectParameter("Eodparam", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ValideGeneralLedger", agenceParameter, deviseParameter, journalParameter, serverDateParameter, employeParameter, lect, msg, computerNameParameter, languageParameter, eodparamParameter);
        }
    
        public virtual int ValideGeneralLedgernew(string agence, string devise, string journal, Nullable<System.DateTime> serverDate, string employe, ObjectParameter lect, ObjectParameter msg, string computerName, string language, Nullable<int> eodparam)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var journalParameter = journal != null ?
                new ObjectParameter("Journal", journal) :
                new ObjectParameter("Journal", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var eodparamParameter = eodparam.HasValue ?
                new ObjectParameter("Eodparam", eodparam) :
                new ObjectParameter("Eodparam", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ValideGeneralLedgernew", agenceParameter, deviseParameter, journalParameter, serverDateParameter, employeParameter, lect, msg, computerNameParameter, languageParameter, eodparamParameter);
        }
    
        public virtual ObjectResult<ValideOpdiversB_Result> ValideOpdiversB(string agence, string client, Nullable<short> catCpte, string subCpte, string letCle, string cpteJumelle, string denomination, string devise, Nullable<System.DateTime> dateOperation, Nullable<System.DateTime> dateValeur, Nullable<double> debit, Nullable<double> credit, string refOperation, string employe, string libEmploye, string libAgence, string libTrCode, Nullable<System.DateTime> dateCreation, string trCode, string description, string txnno, string codeMaj, string libDevise, string cpteColClt, string cleColClt, string libCpteColClt, string cpteColTr, string cleColTr, string libCpteColTr, Nullable<double> commis, string journal, string libjournal, string sensimput, string sensTrCode, string imputAg, Nullable<double> mtTVA, ObjectParameter lect, ObjectParameter msg, Nullable<short> espion, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var catCpteParameter = catCpte.HasValue ?
                new ObjectParameter("CatCpte", catCpte) :
                new ObjectParameter("CatCpte", typeof(short));
    
            var subCpteParameter = subCpte != null ?
                new ObjectParameter("SubCpte", subCpte) :
                new ObjectParameter("SubCpte", typeof(string));
    
            var letCleParameter = letCle != null ?
                new ObjectParameter("LetCle", letCle) :
                new ObjectParameter("LetCle", typeof(string));
    
            var cpteJumelleParameter = cpteJumelle != null ?
                new ObjectParameter("CpteJumelle", cpteJumelle) :
                new ObjectParameter("CpteJumelle", typeof(string));
    
            var denominationParameter = denomination != null ?
                new ObjectParameter("Denomination", denomination) :
                new ObjectParameter("Denomination", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var dateValeurParameter = dateValeur.HasValue ?
                new ObjectParameter("DateValeur", dateValeur) :
                new ObjectParameter("DateValeur", typeof(System.DateTime));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var refOperationParameter = refOperation != null ?
                new ObjectParameter("RefOperation", refOperation) :
                new ObjectParameter("RefOperation", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libTrCodeParameter = libTrCode != null ?
                new ObjectParameter("LibTrCode", libTrCode) :
                new ObjectParameter("LibTrCode", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var trCodeParameter = trCode != null ?
                new ObjectParameter("TrCode", trCode) :
                new ObjectParameter("TrCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var libDeviseParameter = libDevise != null ?
                new ObjectParameter("LibDevise", libDevise) :
                new ObjectParameter("LibDevise", typeof(string));
    
            var cpteColCltParameter = cpteColClt != null ?
                new ObjectParameter("CpteColClt", cpteColClt) :
                new ObjectParameter("CpteColClt", typeof(string));
    
            var cleColCltParameter = cleColClt != null ?
                new ObjectParameter("CleColClt", cleColClt) :
                new ObjectParameter("CleColClt", typeof(string));
    
            var libCpteColCltParameter = libCpteColClt != null ?
                new ObjectParameter("LibCpteColClt", libCpteColClt) :
                new ObjectParameter("LibCpteColClt", typeof(string));
    
            var cpteColTrParameter = cpteColTr != null ?
                new ObjectParameter("CpteColTr", cpteColTr) :
                new ObjectParameter("CpteColTr", typeof(string));
    
            var cleColTrParameter = cleColTr != null ?
                new ObjectParameter("CleColTr", cleColTr) :
                new ObjectParameter("CleColTr", typeof(string));
    
            var libCpteColTrParameter = libCpteColTr != null ?
                new ObjectParameter("LibCpteColTr", libCpteColTr) :
                new ObjectParameter("LibCpteColTr", typeof(string));
    
            var commisParameter = commis.HasValue ?
                new ObjectParameter("Commis", commis) :
                new ObjectParameter("Commis", typeof(double));
    
            var journalParameter = journal != null ?
                new ObjectParameter("journal", journal) :
                new ObjectParameter("journal", typeof(string));
    
            var libjournalParameter = libjournal != null ?
                new ObjectParameter("libjournal", libjournal) :
                new ObjectParameter("libjournal", typeof(string));
    
            var sensimputParameter = sensimput != null ?
                new ObjectParameter("Sensimput", sensimput) :
                new ObjectParameter("Sensimput", typeof(string));
    
            var sensTrCodeParameter = sensTrCode != null ?
                new ObjectParameter("SensTrCode", sensTrCode) :
                new ObjectParameter("SensTrCode", typeof(string));
    
            var imputAgParameter = imputAg != null ?
                new ObjectParameter("ImputAg", imputAg) :
                new ObjectParameter("ImputAg", typeof(string));
    
            var mtTVAParameter = mtTVA.HasValue ?
                new ObjectParameter("MtTVA", mtTVA) :
                new ObjectParameter("MtTVA", typeof(double));
    
            var espionParameter = espion.HasValue ?
                new ObjectParameter("espion", espion) :
                new ObjectParameter("espion", typeof(short));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValideOpdiversB_Result>("ValideOpdiversB", agenceParameter, clientParameter, catCpteParameter, subCpteParameter, letCleParameter, cpteJumelleParameter, denominationParameter, deviseParameter, dateOperationParameter, dateValeurParameter, debitParameter, creditParameter, refOperationParameter, employeParameter, libEmployeParameter, libAgenceParameter, libTrCodeParameter, dateCreationParameter, trCodeParameter, descriptionParameter, txnnoParameter, codeMajParameter, libDeviseParameter, cpteColCltParameter, cleColCltParameter, libCpteColCltParameter, cpteColTrParameter, cleColTrParameter, libCpteColTrParameter, commisParameter, journalParameter, libjournalParameter, sensimputParameter, sensTrCodeParameter, imputAgParameter, mtTVAParameter, lect, msg, espionParameter, computerNameParameter, languageParameter);
        }
    
        public virtual int VAULTCONFTRX(string agenceemet, string libAgenceemt, string agence, string caisse, string libAgence, Nullable<double> amount, string employe, string libEmploye, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, string zOPTN, string pF_CASHOPTN, string pC_REFOPTN, string devise, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceemetParameter = agenceemet != null ?
                new ObjectParameter("Agenceemet", agenceemet) :
                new ObjectParameter("Agenceemet", typeof(string));
    
            var libAgenceemtParameter = libAgenceemt != null ?
                new ObjectParameter("LibAgenceemt", libAgenceemt) :
                new ObjectParameter("LibAgenceemt", typeof(string));
    
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var zOPTNParameter = zOPTN != null ?
                new ObjectParameter("ZOPTN", zOPTN) :
                new ObjectParameter("ZOPTN", typeof(string));
    
            var pF_CASHOPTNParameter = pF_CASHOPTN != null ?
                new ObjectParameter("PF_CASHOPTN", pF_CASHOPTN) :
                new ObjectParameter("PF_CASHOPTN", typeof(string));
    
            var pC_REFOPTNParameter = pC_REFOPTN != null ?
                new ObjectParameter("PC_REFOPTN", pC_REFOPTN) :
                new ObjectParameter("PC_REFOPTN", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VAULTCONFTRX", agenceemetParameter, libAgenceemtParameter, agenceParameter, caisseParameter, libAgenceParameter, amountParameter, employeParameter, libEmployeParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, zOPTNParameter, pF_CASHOPTNParameter, pC_REFOPTNParameter, deviseParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int VaultTxns_Insert(string agence, string caisse, Nullable<double> amount, string reference, string typeVir, string optnType, Nullable<System.DateTime> dateOperation, string description, string nomCaissier, string libCaisse, string libAgence, string liaison, string libLiaison, Nullable<short> correspondent, string libCorrespondent, string cpteGL, string cleCpte, string libCpteGL, Nullable<System.DateTime> dateCreation, string codeMaj, string employe, string libEmploye, string prefixtxnno, Nullable<System.DateTime> dateTransfert, Nullable<double> comAmount, string codeMajcom, Nullable<double> tvaamount, string cpteCaisse, string cleCpteCaisse, string libCpteCaisse, string caisseDest, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, string zOPTN, string svTypeVir, string devise, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var typeVirParameter = typeVir != null ?
                new ObjectParameter("TypeVir", typeVir) :
                new ObjectParameter("TypeVir", typeof(string));
    
            var optnTypeParameter = optnType != null ?
                new ObjectParameter("OptnType", optnType) :
                new ObjectParameter("OptnType", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var nomCaissierParameter = nomCaissier != null ?
                new ObjectParameter("NomCaissier", nomCaissier) :
                new ObjectParameter("NomCaissier", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var liaisonParameter = liaison != null ?
                new ObjectParameter("Liaison", liaison) :
                new ObjectParameter("Liaison", typeof(string));
    
            var libLiaisonParameter = libLiaison != null ?
                new ObjectParameter("LibLiaison", libLiaison) :
                new ObjectParameter("LibLiaison", typeof(string));
    
            var correspondentParameter = correspondent.HasValue ?
                new ObjectParameter("Correspondent", correspondent) :
                new ObjectParameter("Correspondent", typeof(short));
    
            var libCorrespondentParameter = libCorrespondent != null ?
                new ObjectParameter("LibCorrespondent", libCorrespondent) :
                new ObjectParameter("LibCorrespondent", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var libCpteGLParameter = libCpteGL != null ?
                new ObjectParameter("LibCpteGL", libCpteGL) :
                new ObjectParameter("LibCpteGL", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var comAmountParameter = comAmount.HasValue ?
                new ObjectParameter("comAmount", comAmount) :
                new ObjectParameter("comAmount", typeof(double));
    
            var codeMajcomParameter = codeMajcom != null ?
                new ObjectParameter("CodeMajcom", codeMajcom) :
                new ObjectParameter("CodeMajcom", typeof(string));
    
            var tvaamountParameter = tvaamount.HasValue ?
                new ObjectParameter("tvaamount", tvaamount) :
                new ObjectParameter("tvaamount", typeof(double));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var caisseDestParameter = caisseDest != null ?
                new ObjectParameter("CaisseDest", caisseDest) :
                new ObjectParameter("CaisseDest", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var zOPTNParameter = zOPTN != null ?
                new ObjectParameter("ZOPTN", zOPTN) :
                new ObjectParameter("ZOPTN", typeof(string));
    
            var svTypeVirParameter = svTypeVir != null ?
                new ObjectParameter("SvTypeVir", svTypeVir) :
                new ObjectParameter("SvTypeVir", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VaultTxns_Insert", agenceParameter, caisseParameter, amountParameter, referenceParameter, typeVirParameter, optnTypeParameter, dateOperationParameter, descriptionParameter, nomCaissierParameter, libCaisseParameter, libAgenceParameter, liaisonParameter, libLiaisonParameter, correspondentParameter, libCorrespondentParameter, cpteGLParameter, cleCpteParameter, libCpteGLParameter, dateCreationParameter, codeMajParameter, employeParameter, libEmployeParameter, prefixtxnnoParameter, dateTransfertParameter, comAmountParameter, codeMajcomParameter, tvaamountParameter, cpteCaisseParameter, cleCpteCaisseParameter, libCpteCaisseParameter, caisseDestParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, zOPTNParameter, svTypeVirParameter, deviseParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int VaultTxns_InsertAG(string agence, string caisse, Nullable<double> amount, string reference, string typeVir, string optnType, Nullable<System.DateTime> dateOperation, string description, string nomCaissier, string libCaisse, string libAgence, string liaison, string libLiaison, Nullable<short> correspondent, string libCorrespondent, string cpteGL, string cleCpte, string libCpteGL, Nullable<System.DateTime> dateCreation, string codeMaj, string employe, string libEmploye, string prefixtxnno, Nullable<System.DateTime> dateTransfert, Nullable<double> comAmount, string codeMajcom, Nullable<double> tvaamount, string cpteCaisse, string cleCpteCaisse, string libCpteCaisse, string caisseDest, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, string zOPTN, string svTypeVir, string devise, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var typeVirParameter = typeVir != null ?
                new ObjectParameter("TypeVir", typeVir) :
                new ObjectParameter("TypeVir", typeof(string));
    
            var optnTypeParameter = optnType != null ?
                new ObjectParameter("OptnType", optnType) :
                new ObjectParameter("OptnType", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var nomCaissierParameter = nomCaissier != null ?
                new ObjectParameter("NomCaissier", nomCaissier) :
                new ObjectParameter("NomCaissier", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var liaisonParameter = liaison != null ?
                new ObjectParameter("Liaison", liaison) :
                new ObjectParameter("Liaison", typeof(string));
    
            var libLiaisonParameter = libLiaison != null ?
                new ObjectParameter("LibLiaison", libLiaison) :
                new ObjectParameter("LibLiaison", typeof(string));
    
            var correspondentParameter = correspondent.HasValue ?
                new ObjectParameter("Correspondent", correspondent) :
                new ObjectParameter("Correspondent", typeof(short));
    
            var libCorrespondentParameter = libCorrespondent != null ?
                new ObjectParameter("LibCorrespondent", libCorrespondent) :
                new ObjectParameter("LibCorrespondent", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var libCpteGLParameter = libCpteGL != null ?
                new ObjectParameter("LibCpteGL", libCpteGL) :
                new ObjectParameter("LibCpteGL", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var comAmountParameter = comAmount.HasValue ?
                new ObjectParameter("comAmount", comAmount) :
                new ObjectParameter("comAmount", typeof(double));
    
            var codeMajcomParameter = codeMajcom != null ?
                new ObjectParameter("CodeMajcom", codeMajcom) :
                new ObjectParameter("CodeMajcom", typeof(string));
    
            var tvaamountParameter = tvaamount.HasValue ?
                new ObjectParameter("tvaamount", tvaamount) :
                new ObjectParameter("tvaamount", typeof(double));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var caisseDestParameter = caisseDest != null ?
                new ObjectParameter("CaisseDest", caisseDest) :
                new ObjectParameter("CaisseDest", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var zOPTNParameter = zOPTN != null ?
                new ObjectParameter("ZOPTN", zOPTN) :
                new ObjectParameter("ZOPTN", typeof(string));
    
            var svTypeVirParameter = svTypeVir != null ?
                new ObjectParameter("SvTypeVir", svTypeVir) :
                new ObjectParameter("SvTypeVir", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VaultTxns_InsertAG", agenceParameter, caisseParameter, amountParameter, referenceParameter, typeVirParameter, optnTypeParameter, dateOperationParameter, descriptionParameter, nomCaissierParameter, libCaisseParameter, libAgenceParameter, liaisonParameter, libLiaisonParameter, correspondentParameter, libCorrespondentParameter, cpteGLParameter, cleCpteParameter, libCpteGLParameter, dateCreationParameter, codeMajParameter, employeParameter, libEmployeParameter, prefixtxnnoParameter, dateTransfertParameter, comAmountParameter, codeMajcomParameter, tvaamountParameter, cpteCaisseParameter, cleCpteCaisseParameter, libCpteCaisseParameter, caisseDestParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, zOPTNParameter, svTypeVirParameter, deviseParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int VaultTxns_InsertAGTeller(string agence, string caisse, Nullable<double> amount, string reference, string typeVir, string optnType, Nullable<System.DateTime> dateOperation, string description, string nomCaissier, string libCaisse, string libAgence, string liaison, string libLiaison, Nullable<short> correspondent, string libCorrespondent, string cpteGL, string cleCpte, string libCpteGL, Nullable<System.DateTime> dateCreation, string codeMaj, string employe, string libEmploye, string prefixtxnno, Nullable<System.DateTime> dateTransfert, Nullable<double> comAmount, string codeMajcom, Nullable<double> tvaamount, string cpteCaisse, string cleCpteCaisse, string libCpteCaisse, string caisseDest, Nullable<double> pF_NP1, Nullable<double> pF_NP2, Nullable<double> pF_NP5, Nullable<double> pF_NP10, Nullable<double> pF_NP25, Nullable<double> pF_NP50, Nullable<double> pF_NP100, Nullable<double> pF_NP500, Nullable<double> pF_NB500, Nullable<double> pF_NB1000, Nullable<double> pF_NB2000, Nullable<double> pF_NB5000, Nullable<double> pF_NB10000, string zOPTN, string svTypeVir, string devise, ObjectParameter lect, ObjectParameter msg, string computerName, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var caisseParameter = caisse != null ?
                new ObjectParameter("Caisse", caisse) :
                new ObjectParameter("Caisse", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var typeVirParameter = typeVir != null ?
                new ObjectParameter("TypeVir", typeVir) :
                new ObjectParameter("TypeVir", typeof(string));
    
            var optnTypeParameter = optnType != null ?
                new ObjectParameter("OptnType", optnType) :
                new ObjectParameter("OptnType", typeof(string));
    
            var dateOperationParameter = dateOperation.HasValue ?
                new ObjectParameter("DateOperation", dateOperation) :
                new ObjectParameter("DateOperation", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var nomCaissierParameter = nomCaissier != null ?
                new ObjectParameter("NomCaissier", nomCaissier) :
                new ObjectParameter("NomCaissier", typeof(string));
    
            var libCaisseParameter = libCaisse != null ?
                new ObjectParameter("LibCaisse", libCaisse) :
                new ObjectParameter("LibCaisse", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var liaisonParameter = liaison != null ?
                new ObjectParameter("Liaison", liaison) :
                new ObjectParameter("Liaison", typeof(string));
    
            var libLiaisonParameter = libLiaison != null ?
                new ObjectParameter("LibLiaison", libLiaison) :
                new ObjectParameter("LibLiaison", typeof(string));
    
            var correspondentParameter = correspondent.HasValue ?
                new ObjectParameter("Correspondent", correspondent) :
                new ObjectParameter("Correspondent", typeof(short));
    
            var libCorrespondentParameter = libCorrespondent != null ?
                new ObjectParameter("LibCorrespondent", libCorrespondent) :
                new ObjectParameter("LibCorrespondent", typeof(string));
    
            var cpteGLParameter = cpteGL != null ?
                new ObjectParameter("CpteGL", cpteGL) :
                new ObjectParameter("CpteGL", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var libCpteGLParameter = libCpteGL != null ?
                new ObjectParameter("LibCpteGL", libCpteGL) :
                new ObjectParameter("LibCpteGL", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var codeMajParameter = codeMaj != null ?
                new ObjectParameter("CodeMaj", codeMaj) :
                new ObjectParameter("CodeMaj", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var prefixtxnnoParameter = prefixtxnno != null ?
                new ObjectParameter("Prefixtxnno", prefixtxnno) :
                new ObjectParameter("Prefixtxnno", typeof(string));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("DateTransfert", dateTransfert) :
                new ObjectParameter("DateTransfert", typeof(System.DateTime));
    
            var comAmountParameter = comAmount.HasValue ?
                new ObjectParameter("comAmount", comAmount) :
                new ObjectParameter("comAmount", typeof(double));
    
            var codeMajcomParameter = codeMajcom != null ?
                new ObjectParameter("CodeMajcom", codeMajcom) :
                new ObjectParameter("CodeMajcom", typeof(string));
    
            var tvaamountParameter = tvaamount.HasValue ?
                new ObjectParameter("tvaamount", tvaamount) :
                new ObjectParameter("tvaamount", typeof(double));
    
            var cpteCaisseParameter = cpteCaisse != null ?
                new ObjectParameter("CpteCaisse", cpteCaisse) :
                new ObjectParameter("CpteCaisse", typeof(string));
    
            var cleCpteCaisseParameter = cleCpteCaisse != null ?
                new ObjectParameter("CleCpteCaisse", cleCpteCaisse) :
                new ObjectParameter("CleCpteCaisse", typeof(string));
    
            var libCpteCaisseParameter = libCpteCaisse != null ?
                new ObjectParameter("LibCpteCaisse", libCpteCaisse) :
                new ObjectParameter("LibCpteCaisse", typeof(string));
    
            var caisseDestParameter = caisseDest != null ?
                new ObjectParameter("CaisseDest", caisseDest) :
                new ObjectParameter("CaisseDest", typeof(string));
    
            var pF_NP1Parameter = pF_NP1.HasValue ?
                new ObjectParameter("PF_NP1", pF_NP1) :
                new ObjectParameter("PF_NP1", typeof(double));
    
            var pF_NP2Parameter = pF_NP2.HasValue ?
                new ObjectParameter("PF_NP2", pF_NP2) :
                new ObjectParameter("PF_NP2", typeof(double));
    
            var pF_NP5Parameter = pF_NP5.HasValue ?
                new ObjectParameter("PF_NP5", pF_NP5) :
                new ObjectParameter("PF_NP5", typeof(double));
    
            var pF_NP10Parameter = pF_NP10.HasValue ?
                new ObjectParameter("PF_NP10", pF_NP10) :
                new ObjectParameter("PF_NP10", typeof(double));
    
            var pF_NP25Parameter = pF_NP25.HasValue ?
                new ObjectParameter("PF_NP25", pF_NP25) :
                new ObjectParameter("PF_NP25", typeof(double));
    
            var pF_NP50Parameter = pF_NP50.HasValue ?
                new ObjectParameter("PF_NP50", pF_NP50) :
                new ObjectParameter("PF_NP50", typeof(double));
    
            var pF_NP100Parameter = pF_NP100.HasValue ?
                new ObjectParameter("PF_NP100", pF_NP100) :
                new ObjectParameter("PF_NP100", typeof(double));
    
            var pF_NP500Parameter = pF_NP500.HasValue ?
                new ObjectParameter("PF_NP500", pF_NP500) :
                new ObjectParameter("PF_NP500", typeof(double));
    
            var pF_NB500Parameter = pF_NB500.HasValue ?
                new ObjectParameter("PF_NB500", pF_NB500) :
                new ObjectParameter("PF_NB500", typeof(double));
    
            var pF_NB1000Parameter = pF_NB1000.HasValue ?
                new ObjectParameter("PF_NB1000", pF_NB1000) :
                new ObjectParameter("PF_NB1000", typeof(double));
    
            var pF_NB2000Parameter = pF_NB2000.HasValue ?
                new ObjectParameter("PF_NB2000", pF_NB2000) :
                new ObjectParameter("PF_NB2000", typeof(double));
    
            var pF_NB5000Parameter = pF_NB5000.HasValue ?
                new ObjectParameter("PF_NB5000", pF_NB5000) :
                new ObjectParameter("PF_NB5000", typeof(double));
    
            var pF_NB10000Parameter = pF_NB10000.HasValue ?
                new ObjectParameter("PF_NB10000", pF_NB10000) :
                new ObjectParameter("PF_NB10000", typeof(double));
    
            var zOPTNParameter = zOPTN != null ?
                new ObjectParameter("ZOPTN", zOPTN) :
                new ObjectParameter("ZOPTN", typeof(string));
    
            var svTypeVirParameter = svTypeVir != null ?
                new ObjectParameter("SvTypeVir", svTypeVir) :
                new ObjectParameter("SvTypeVir", typeof(string));
    
            var deviseParameter = devise != null ?
                new ObjectParameter("Devise", devise) :
                new ObjectParameter("Devise", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VaultTxns_InsertAGTeller", agenceParameter, caisseParameter, amountParameter, referenceParameter, typeVirParameter, optnTypeParameter, dateOperationParameter, descriptionParameter, nomCaissierParameter, libCaisseParameter, libAgenceParameter, liaisonParameter, libLiaisonParameter, correspondentParameter, libCorrespondentParameter, cpteGLParameter, cleCpteParameter, libCpteGLParameter, dateCreationParameter, codeMajParameter, employeParameter, libEmployeParameter, prefixtxnnoParameter, dateTransfertParameter, comAmountParameter, codeMajcomParameter, tvaamountParameter, cpteCaisseParameter, cleCpteCaisseParameter, libCpteCaisseParameter, caisseDestParameter, pF_NP1Parameter, pF_NP2Parameter, pF_NP5Parameter, pF_NP10Parameter, pF_NP25Parameter, pF_NP50Parameter, pF_NP100Parameter, pF_NP500Parameter, pF_NB500Parameter, pF_NB1000Parameter, pF_NB2000Parameter, pF_NB5000Parameter, pF_NB10000Parameter, zOPTNParameter, svTypeVirParameter, deviseParameter, lect, msg, computerNameParameter, languageParameter);
        }
    
        public virtual int VerifTransfertProduct(string codeProduct, Nullable<System.DateTime> serverDate, ObjectParameter lect, ObjectParameter msg, string computerName, Nullable<int> employe, string language)
        {
            var codeProductParameter = codeProduct != null ?
                new ObjectParameter("CodeProduct", codeProduct) :
                new ObjectParameter("CodeProduct", typeof(string));
    
            var serverDateParameter = serverDate.HasValue ?
                new ObjectParameter("ServerDate", serverDate) :
                new ObjectParameter("ServerDate", typeof(System.DateTime));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var employeParameter = employe.HasValue ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VerifTransfertProduct", codeProductParameter, serverDateParameter, lect, msg, computerNameParameter, employeParameter, languageParameter);
        }
    
        public virtual int VirPermanent_Insert(string agence, string cpteDonneur, string forceStatus, Nullable<System.DateTime> dateLastForce, Nullable<double> montant, string bqueBenef, string libCpteDonneur, string cpteBqueB, string cpteBenef, string denoBenef, Nullable<System.DateTime> dateOrdre, Nullable<System.DateTime> dateDernierVir, string situation, Nullable<double> commission, Nullable<double> taxe, string description, string fonction, string libAgence, Nullable<short> liaison, Nullable<System.DateTime> dateCreation, string cpteBenefInt, string libCpteBenefInt, string employe, string libEmploye, string statut, string libBqueBenef, string cleCpte, string tracer, Nullable<System.DateTime> datevals, Nullable<System.DateTime> dateVals2, Nullable<System.DateTime> datemodif, Nullable<System.DateTime> dateVir, string libLiaison, string typeVir, Nullable<System.DateTime> dateCptaVir, Nullable<System.DateTime> datecptab, string fpval, string txnno, ObjectParameter lect, ObjectParameter msg, string computerName, string language, string agenceben, string libagenceben)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var cpteDonneurParameter = cpteDonneur != null ?
                new ObjectParameter("CpteDonneur", cpteDonneur) :
                new ObjectParameter("CpteDonneur", typeof(string));
    
            var forceStatusParameter = forceStatus != null ?
                new ObjectParameter("ForceStatus", forceStatus) :
                new ObjectParameter("ForceStatus", typeof(string));
    
            var dateLastForceParameter = dateLastForce.HasValue ?
                new ObjectParameter("DateLastForce", dateLastForce) :
                new ObjectParameter("DateLastForce", typeof(System.DateTime));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var bqueBenefParameter = bqueBenef != null ?
                new ObjectParameter("BqueBenef", bqueBenef) :
                new ObjectParameter("BqueBenef", typeof(string));
    
            var libCpteDonneurParameter = libCpteDonneur != null ?
                new ObjectParameter("LibCpteDonneur", libCpteDonneur) :
                new ObjectParameter("LibCpteDonneur", typeof(string));
    
            var cpteBqueBParameter = cpteBqueB != null ?
                new ObjectParameter("CpteBqueB", cpteBqueB) :
                new ObjectParameter("CpteBqueB", typeof(string));
    
            var cpteBenefParameter = cpteBenef != null ?
                new ObjectParameter("CpteBenef", cpteBenef) :
                new ObjectParameter("CpteBenef", typeof(string));
    
            var denoBenefParameter = denoBenef != null ?
                new ObjectParameter("DenoBenef", denoBenef) :
                new ObjectParameter("DenoBenef", typeof(string));
    
            var dateOrdreParameter = dateOrdre.HasValue ?
                new ObjectParameter("DateOrdre", dateOrdre) :
                new ObjectParameter("DateOrdre", typeof(System.DateTime));
    
            var dateDernierVirParameter = dateDernierVir.HasValue ?
                new ObjectParameter("DateDernierVir", dateDernierVir) :
                new ObjectParameter("DateDernierVir", typeof(System.DateTime));
    
            var situationParameter = situation != null ?
                new ObjectParameter("Situation", situation) :
                new ObjectParameter("Situation", typeof(string));
    
            var commissionParameter = commission.HasValue ?
                new ObjectParameter("Commission", commission) :
                new ObjectParameter("Commission", typeof(double));
    
            var taxeParameter = taxe.HasValue ?
                new ObjectParameter("Taxe", taxe) :
                new ObjectParameter("Taxe", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var fonctionParameter = fonction != null ?
                new ObjectParameter("Fonction", fonction) :
                new ObjectParameter("Fonction", typeof(string));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var liaisonParameter = liaison.HasValue ?
                new ObjectParameter("Liaison", liaison) :
                new ObjectParameter("Liaison", typeof(short));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var cpteBenefIntParameter = cpteBenefInt != null ?
                new ObjectParameter("CpteBenefInt", cpteBenefInt) :
                new ObjectParameter("CpteBenefInt", typeof(string));
    
            var libCpteBenefIntParameter = libCpteBenefInt != null ?
                new ObjectParameter("LibCpteBenefInt", libCpteBenefInt) :
                new ObjectParameter("LibCpteBenefInt", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var libBqueBenefParameter = libBqueBenef != null ?
                new ObjectParameter("LibBqueBenef", libBqueBenef) :
                new ObjectParameter("LibBqueBenef", typeof(string));
    
            var cleCpteParameter = cleCpte != null ?
                new ObjectParameter("CleCpte", cleCpte) :
                new ObjectParameter("CleCpte", typeof(string));
    
            var tracerParameter = tracer != null ?
                new ObjectParameter("Tracer", tracer) :
                new ObjectParameter("Tracer", typeof(string));
    
            var datevalsParameter = datevals.HasValue ?
                new ObjectParameter("Datevals", datevals) :
                new ObjectParameter("Datevals", typeof(System.DateTime));
    
            var dateVals2Parameter = dateVals2.HasValue ?
                new ObjectParameter("DateVals2", dateVals2) :
                new ObjectParameter("DateVals2", typeof(System.DateTime));
    
            var datemodifParameter = datemodif.HasValue ?
                new ObjectParameter("Datemodif", datemodif) :
                new ObjectParameter("Datemodif", typeof(System.DateTime));
    
            var dateVirParameter = dateVir.HasValue ?
                new ObjectParameter("DateVir", dateVir) :
                new ObjectParameter("DateVir", typeof(System.DateTime));
    
            var libLiaisonParameter = libLiaison != null ?
                new ObjectParameter("LibLiaison", libLiaison) :
                new ObjectParameter("LibLiaison", typeof(string));
    
            var typeVirParameter = typeVir != null ?
                new ObjectParameter("TypeVir", typeVir) :
                new ObjectParameter("TypeVir", typeof(string));
    
            var dateCptaVirParameter = dateCptaVir.HasValue ?
                new ObjectParameter("DateCptaVir", dateCptaVir) :
                new ObjectParameter("DateCptaVir", typeof(System.DateTime));
    
            var datecptabParameter = datecptab.HasValue ?
                new ObjectParameter("datecptab", datecptab) :
                new ObjectParameter("datecptab", typeof(System.DateTime));
    
            var fpvalParameter = fpval != null ?
                new ObjectParameter("fpval", fpval) :
                new ObjectParameter("fpval", typeof(string));
    
            var txnnoParameter = txnno != null ?
                new ObjectParameter("txnno", txnno) :
                new ObjectParameter("txnno", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var agencebenParameter = agenceben != null ?
                new ObjectParameter("Agenceben", agenceben) :
                new ObjectParameter("Agenceben", typeof(string));
    
            var libagencebenParameter = libagenceben != null ?
                new ObjectParameter("Libagenceben", libagenceben) :
                new ObjectParameter("Libagenceben", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VirPermanent_Insert", agenceParameter, cpteDonneurParameter, forceStatusParameter, dateLastForceParameter, montantParameter, bqueBenefParameter, libCpteDonneurParameter, cpteBqueBParameter, cpteBenefParameter, denoBenefParameter, dateOrdreParameter, dateDernierVirParameter, situationParameter, commissionParameter, taxeParameter, descriptionParameter, fonctionParameter, libAgenceParameter, liaisonParameter, dateCreationParameter, cpteBenefIntParameter, libCpteBenefIntParameter, employeParameter, libEmployeParameter, statutParameter, libBqueBenefParameter, cleCpteParameter, tracerParameter, datevalsParameter, dateVals2Parameter, datemodifParameter, dateVirParameter, libLiaisonParameter, typeVirParameter, dateCptaVirParameter, datecptabParameter, fpvalParameter, txnnoParameter, lect, msg, computerNameParameter, languageParameter, agencebenParameter, libagencebenParameter);
        }
    
        public virtual int VirSpont_Insert(string agence, string cpteDonneur, string typeVir, Nullable<short> liaison, string libLiaison, string bqueBenef, string cpteBqueB, string cpteBenef, string denoBenef, Nullable<System.DateTime> dateOrdre, Nullable<System.DateTime> dateVir, Nullable<double> montant, string description, Nullable<double> commission, Nullable<double> taxe, string libAgence, string libCpteDonneur, Nullable<System.DateTime> dateCreation, string cpteBenefInt, string libCpteBenefInt, string employe, string libEmploye, string libBqueBenef, string cleCORR, string tracer, string fonction, string situation, Nullable<System.DateTime> dateVals2, Nullable<System.DateTime> dateVals1, Nullable<System.DateTime> datecptab, string txnNo, ObjectParameter lect, ObjectParameter msg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var cpteDonneurParameter = cpteDonneur != null ?
                new ObjectParameter("CpteDonneur", cpteDonneur) :
                new ObjectParameter("CpteDonneur", typeof(string));
    
            var typeVirParameter = typeVir != null ?
                new ObjectParameter("TypeVir", typeVir) :
                new ObjectParameter("TypeVir", typeof(string));
    
            var liaisonParameter = liaison.HasValue ?
                new ObjectParameter("Liaison", liaison) :
                new ObjectParameter("Liaison", typeof(short));
    
            var libLiaisonParameter = libLiaison != null ?
                new ObjectParameter("LibLiaison", libLiaison) :
                new ObjectParameter("LibLiaison", typeof(string));
    
            var bqueBenefParameter = bqueBenef != null ?
                new ObjectParameter("BqueBenef", bqueBenef) :
                new ObjectParameter("BqueBenef", typeof(string));
    
            var cpteBqueBParameter = cpteBqueB != null ?
                new ObjectParameter("CpteBqueB", cpteBqueB) :
                new ObjectParameter("CpteBqueB", typeof(string));
    
            var cpteBenefParameter = cpteBenef != null ?
                new ObjectParameter("CpteBenef", cpteBenef) :
                new ObjectParameter("CpteBenef", typeof(string));
    
            var denoBenefParameter = denoBenef != null ?
                new ObjectParameter("DenoBenef", denoBenef) :
                new ObjectParameter("DenoBenef", typeof(string));
    
            var dateOrdreParameter = dateOrdre.HasValue ?
                new ObjectParameter("DateOrdre", dateOrdre) :
                new ObjectParameter("DateOrdre", typeof(System.DateTime));
    
            var dateVirParameter = dateVir.HasValue ?
                new ObjectParameter("DateVir", dateVir) :
                new ObjectParameter("DateVir", typeof(System.DateTime));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var commissionParameter = commission.HasValue ?
                new ObjectParameter("Commission", commission) :
                new ObjectParameter("Commission", typeof(double));
    
            var taxeParameter = taxe.HasValue ?
                new ObjectParameter("Taxe", taxe) :
                new ObjectParameter("Taxe", typeof(double));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libCpteDonneurParameter = libCpteDonneur != null ?
                new ObjectParameter("LibCpteDonneur", libCpteDonneur) :
                new ObjectParameter("LibCpteDonneur", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var cpteBenefIntParameter = cpteBenefInt != null ?
                new ObjectParameter("CpteBenefInt", cpteBenefInt) :
                new ObjectParameter("CpteBenefInt", typeof(string));
    
            var libCpteBenefIntParameter = libCpteBenefInt != null ?
                new ObjectParameter("LibCpteBenefInt", libCpteBenefInt) :
                new ObjectParameter("LibCpteBenefInt", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var libBqueBenefParameter = libBqueBenef != null ?
                new ObjectParameter("LibBqueBenef", libBqueBenef) :
                new ObjectParameter("LibBqueBenef", typeof(string));
    
            var cleCORRParameter = cleCORR != null ?
                new ObjectParameter("CleCORR", cleCORR) :
                new ObjectParameter("CleCORR", typeof(string));
    
            var tracerParameter = tracer != null ?
                new ObjectParameter("Tracer", tracer) :
                new ObjectParameter("Tracer", typeof(string));
    
            var fonctionParameter = fonction != null ?
                new ObjectParameter("Fonction", fonction) :
                new ObjectParameter("Fonction", typeof(string));
    
            var situationParameter = situation != null ?
                new ObjectParameter("Situation", situation) :
                new ObjectParameter("Situation", typeof(string));
    
            var dateVals2Parameter = dateVals2.HasValue ?
                new ObjectParameter("DateVals2", dateVals2) :
                new ObjectParameter("DateVals2", typeof(System.DateTime));
    
            var dateVals1Parameter = dateVals1.HasValue ?
                new ObjectParameter("DateVals1", dateVals1) :
                new ObjectParameter("DateVals1", typeof(System.DateTime));
    
            var datecptabParameter = datecptab.HasValue ?
                new ObjectParameter("datecptab", datecptab) :
                new ObjectParameter("datecptab", typeof(System.DateTime));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VirSpont_Insert", agenceParameter, cpteDonneurParameter, typeVirParameter, liaisonParameter, libLiaisonParameter, bqueBenefParameter, cpteBqueBParameter, cpteBenefParameter, denoBenefParameter, dateOrdreParameter, dateVirParameter, montantParameter, descriptionParameter, commissionParameter, taxeParameter, libAgenceParameter, libCpteDonneurParameter, dateCreationParameter, cpteBenefIntParameter, libCpteBenefIntParameter, employeParameter, libEmployeParameter, libBqueBenefParameter, cleCORRParameter, tracerParameter, fonctionParameter, situationParameter, dateVals2Parameter, dateVals1Parameter, datecptabParameter, txnNoParameter, lect, msg, languageParameter);
        }
    
        public virtual int VirSpontPer_Insert(string agence, string cpteDonneur, string typeVir, Nullable<short> liaison, string libLiaison, string bqueBenef, string cpteBqueB, string cpteBenef, string denoBenef, Nullable<System.DateTime> dateOrdre, Nullable<System.DateTime> dateVir, Nullable<double> montant, string description, Nullable<double> commission, Nullable<double> taxe, string libAgence, string libCpteDonneur, Nullable<System.DateTime> dateCreation, string cpteBenefInt, string libCpteBenefInt, string employe, string libEmploye, string libBqueBenef, string cleCORR, string tracer, string fonction, string situation, Nullable<System.DateTime> dateVals2, Nullable<System.DateTime> dateVals1, Nullable<System.DateTime> datecptab, string txnNo, Nullable<System.DateTime> datecontrol, string affiche, string fpVal, string statut, ObjectParameter lect, ObjectParameter msg, string computerName, string language, string agenceben, string libagenceben)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var cpteDonneurParameter = cpteDonneur != null ?
                new ObjectParameter("CpteDonneur", cpteDonneur) :
                new ObjectParameter("CpteDonneur", typeof(string));
    
            var typeVirParameter = typeVir != null ?
                new ObjectParameter("TypeVir", typeVir) :
                new ObjectParameter("TypeVir", typeof(string));
    
            var liaisonParameter = liaison.HasValue ?
                new ObjectParameter("Liaison", liaison) :
                new ObjectParameter("Liaison", typeof(short));
    
            var libLiaisonParameter = libLiaison != null ?
                new ObjectParameter("LibLiaison", libLiaison) :
                new ObjectParameter("LibLiaison", typeof(string));
    
            var bqueBenefParameter = bqueBenef != null ?
                new ObjectParameter("BqueBenef", bqueBenef) :
                new ObjectParameter("BqueBenef", typeof(string));
    
            var cpteBqueBParameter = cpteBqueB != null ?
                new ObjectParameter("CpteBqueB", cpteBqueB) :
                new ObjectParameter("CpteBqueB", typeof(string));
    
            var cpteBenefParameter = cpteBenef != null ?
                new ObjectParameter("CpteBenef", cpteBenef) :
                new ObjectParameter("CpteBenef", typeof(string));
    
            var denoBenefParameter = denoBenef != null ?
                new ObjectParameter("DenoBenef", denoBenef) :
                new ObjectParameter("DenoBenef", typeof(string));
    
            var dateOrdreParameter = dateOrdre.HasValue ?
                new ObjectParameter("DateOrdre", dateOrdre) :
                new ObjectParameter("DateOrdre", typeof(System.DateTime));
    
            var dateVirParameter = dateVir.HasValue ?
                new ObjectParameter("DateVir", dateVir) :
                new ObjectParameter("DateVir", typeof(System.DateTime));
    
            var montantParameter = montant.HasValue ?
                new ObjectParameter("Montant", montant) :
                new ObjectParameter("Montant", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var commissionParameter = commission.HasValue ?
                new ObjectParameter("Commission", commission) :
                new ObjectParameter("Commission", typeof(double));
    
            var taxeParameter = taxe.HasValue ?
                new ObjectParameter("Taxe", taxe) :
                new ObjectParameter("Taxe", typeof(double));
    
            var libAgenceParameter = libAgence != null ?
                new ObjectParameter("LibAgence", libAgence) :
                new ObjectParameter("LibAgence", typeof(string));
    
            var libCpteDonneurParameter = libCpteDonneur != null ?
                new ObjectParameter("LibCpteDonneur", libCpteDonneur) :
                new ObjectParameter("LibCpteDonneur", typeof(string));
    
            var dateCreationParameter = dateCreation.HasValue ?
                new ObjectParameter("DateCreation", dateCreation) :
                new ObjectParameter("DateCreation", typeof(System.DateTime));
    
            var cpteBenefIntParameter = cpteBenefInt != null ?
                new ObjectParameter("CpteBenefInt", cpteBenefInt) :
                new ObjectParameter("CpteBenefInt", typeof(string));
    
            var libCpteBenefIntParameter = libCpteBenefInt != null ?
                new ObjectParameter("LibCpteBenefInt", libCpteBenefInt) :
                new ObjectParameter("LibCpteBenefInt", typeof(string));
    
            var employeParameter = employe != null ?
                new ObjectParameter("Employe", employe) :
                new ObjectParameter("Employe", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var libBqueBenefParameter = libBqueBenef != null ?
                new ObjectParameter("LibBqueBenef", libBqueBenef) :
                new ObjectParameter("LibBqueBenef", typeof(string));
    
            var cleCORRParameter = cleCORR != null ?
                new ObjectParameter("CleCORR", cleCORR) :
                new ObjectParameter("CleCORR", typeof(string));
    
            var tracerParameter = tracer != null ?
                new ObjectParameter("Tracer", tracer) :
                new ObjectParameter("Tracer", typeof(string));
    
            var fonctionParameter = fonction != null ?
                new ObjectParameter("Fonction", fonction) :
                new ObjectParameter("Fonction", typeof(string));
    
            var situationParameter = situation != null ?
                new ObjectParameter("Situation", situation) :
                new ObjectParameter("Situation", typeof(string));
    
            var dateVals2Parameter = dateVals2.HasValue ?
                new ObjectParameter("DateVals2", dateVals2) :
                new ObjectParameter("DateVals2", typeof(System.DateTime));
    
            var dateVals1Parameter = dateVals1.HasValue ?
                new ObjectParameter("DateVals1", dateVals1) :
                new ObjectParameter("DateVals1", typeof(System.DateTime));
    
            var datecptabParameter = datecptab.HasValue ?
                new ObjectParameter("datecptab", datecptab) :
                new ObjectParameter("datecptab", typeof(System.DateTime));
    
            var txnNoParameter = txnNo != null ?
                new ObjectParameter("TxnNo", txnNo) :
                new ObjectParameter("TxnNo", typeof(string));
    
            var datecontrolParameter = datecontrol.HasValue ?
                new ObjectParameter("Datecontrol", datecontrol) :
                new ObjectParameter("Datecontrol", typeof(System.DateTime));
    
            var afficheParameter = affiche != null ?
                new ObjectParameter("Affiche", affiche) :
                new ObjectParameter("Affiche", typeof(string));
    
            var fpValParameter = fpVal != null ?
                new ObjectParameter("FpVal", fpVal) :
                new ObjectParameter("FpVal", typeof(string));
    
            var statutParameter = statut != null ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(string));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var agencebenParameter = agenceben != null ?
                new ObjectParameter("Agenceben", agenceben) :
                new ObjectParameter("Agenceben", typeof(string));
    
            var libagencebenParameter = libagenceben != null ?
                new ObjectParameter("Libagenceben", libagenceben) :
                new ObjectParameter("Libagenceben", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VirSpontPer_Insert", agenceParameter, cpteDonneurParameter, typeVirParameter, liaisonParameter, libLiaisonParameter, bqueBenefParameter, cpteBqueBParameter, cpteBenefParameter, denoBenefParameter, dateOrdreParameter, dateVirParameter, montantParameter, descriptionParameter, commissionParameter, taxeParameter, libAgenceParameter, libCpteDonneurParameter, dateCreationParameter, cpteBenefIntParameter, libCpteBenefIntParameter, employeParameter, libEmployeParameter, libBqueBenefParameter, cleCORRParameter, tracerParameter, fonctionParameter, situationParameter, dateVals2Parameter, dateVals1Parameter, datecptabParameter, txnNoParameter, datecontrolParameter, afficheParameter, fpValParameter, statutParameter, lect, msg, computerNameParameter, languageParameter, agencebenParameter, libagencebenParameter);
        }
    
        public virtual int WriteoffAcc_Delete(string agence, string pc_COMPTEDEB, string pc_COMPTECRED, string pc_CatClient, Nullable<int> pi_ProductCode, string pc_LibCatClient, string pc_LibProduct, string matricule, string libEmploye, string computername, string pc_CustomerType, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var pc_COMPTEDEBParameter = pc_COMPTEDEB != null ?
                new ObjectParameter("Pc_COMPTEDEB", pc_COMPTEDEB) :
                new ObjectParameter("Pc_COMPTEDEB", typeof(string));
    
            var pc_COMPTECREDParameter = pc_COMPTECRED != null ?
                new ObjectParameter("Pc_COMPTECRED", pc_COMPTECRED) :
                new ObjectParameter("Pc_COMPTECRED", typeof(string));
    
            var pc_CatClientParameter = pc_CatClient != null ?
                new ObjectParameter("Pc_CatClient", pc_CatClient) :
                new ObjectParameter("Pc_CatClient", typeof(string));
    
            var pi_ProductCodeParameter = pi_ProductCode.HasValue ?
                new ObjectParameter("Pi_ProductCode", pi_ProductCode) :
                new ObjectParameter("Pi_ProductCode", typeof(int));
    
            var pc_LibCatClientParameter = pc_LibCatClient != null ?
                new ObjectParameter("Pc_LibCatClient", pc_LibCatClient) :
                new ObjectParameter("Pc_LibCatClient", typeof(string));
    
            var pc_LibProductParameter = pc_LibProduct != null ?
                new ObjectParameter("Pc_LibProduct", pc_LibProduct) :
                new ObjectParameter("Pc_LibProduct", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var pc_CustomerTypeParameter = pc_CustomerType != null ?
                new ObjectParameter("Pc_CustomerType", pc_CustomerType) :
                new ObjectParameter("Pc_CustomerType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WriteoffAcc_Delete", agenceParameter, pc_COMPTEDEBParameter, pc_COMPTECREDParameter, pc_CatClientParameter, pi_ProductCodeParameter, pc_LibCatClientParameter, pc_LibProductParameter, matriculeParameter, libEmployeParameter, computernameParameter, pc_CustomerTypeParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int WriteoffAcc_Insert(string agence, string pc_COMPTEDEB, string pc_COMPTECRED, string pc_CatClient, Nullable<int> pi_ProductCode, string pc_LibCatClient, string pc_LibProduct, string matricule, string libEmploye, string computername, string pc_CustomerType, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var pc_COMPTEDEBParameter = pc_COMPTEDEB != null ?
                new ObjectParameter("Pc_COMPTEDEB", pc_COMPTEDEB) :
                new ObjectParameter("Pc_COMPTEDEB", typeof(string));
    
            var pc_COMPTECREDParameter = pc_COMPTECRED != null ?
                new ObjectParameter("Pc_COMPTECRED", pc_COMPTECRED) :
                new ObjectParameter("Pc_COMPTECRED", typeof(string));
    
            var pc_CatClientParameter = pc_CatClient != null ?
                new ObjectParameter("Pc_CatClient", pc_CatClient) :
                new ObjectParameter("Pc_CatClient", typeof(string));
    
            var pi_ProductCodeParameter = pi_ProductCode.HasValue ?
                new ObjectParameter("Pi_ProductCode", pi_ProductCode) :
                new ObjectParameter("Pi_ProductCode", typeof(int));
    
            var pc_LibCatClientParameter = pc_LibCatClient != null ?
                new ObjectParameter("Pc_LibCatClient", pc_LibCatClient) :
                new ObjectParameter("Pc_LibCatClient", typeof(string));
    
            var pc_LibProductParameter = pc_LibProduct != null ?
                new ObjectParameter("Pc_LibProduct", pc_LibProduct) :
                new ObjectParameter("Pc_LibProduct", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var pc_CustomerTypeParameter = pc_CustomerType != null ?
                new ObjectParameter("Pc_CustomerType", pc_CustomerType) :
                new ObjectParameter("Pc_CustomerType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WriteoffAcc_Insert", agenceParameter, pc_COMPTEDEBParameter, pc_COMPTECREDParameter, pc_CatClientParameter, pi_ProductCodeParameter, pc_LibCatClientParameter, pc_LibProductParameter, matriculeParameter, libEmployeParameter, computernameParameter, pc_CustomerTypeParameter, lect, errMsg, languageParameter);
        }
    
        public virtual int WriteoffAcc_Update(string agence, string pc_COMPTEDEB, string pc_COMPTECRED, string pc_CatClient, Nullable<int> pi_ProductCode, string pc_LibCatClient, string pc_LibProduct, string matricule, string libEmploye, string computername, string pc_CustomerType, ObjectParameter lect, ObjectParameter errMsg, string language)
        {
            var agenceParameter = agence != null ?
                new ObjectParameter("Agence", agence) :
                new ObjectParameter("Agence", typeof(string));
    
            var pc_COMPTEDEBParameter = pc_COMPTEDEB != null ?
                new ObjectParameter("Pc_COMPTEDEB", pc_COMPTEDEB) :
                new ObjectParameter("Pc_COMPTEDEB", typeof(string));
    
            var pc_COMPTECREDParameter = pc_COMPTECRED != null ?
                new ObjectParameter("Pc_COMPTECRED", pc_COMPTECRED) :
                new ObjectParameter("Pc_COMPTECRED", typeof(string));
    
            var pc_CatClientParameter = pc_CatClient != null ?
                new ObjectParameter("Pc_CatClient", pc_CatClient) :
                new ObjectParameter("Pc_CatClient", typeof(string));
    
            var pi_ProductCodeParameter = pi_ProductCode.HasValue ?
                new ObjectParameter("Pi_ProductCode", pi_ProductCode) :
                new ObjectParameter("Pi_ProductCode", typeof(int));
    
            var pc_LibCatClientParameter = pc_LibCatClient != null ?
                new ObjectParameter("Pc_LibCatClient", pc_LibCatClient) :
                new ObjectParameter("Pc_LibCatClient", typeof(string));
    
            var pc_LibProductParameter = pc_LibProduct != null ?
                new ObjectParameter("Pc_LibProduct", pc_LibProduct) :
                new ObjectParameter("Pc_LibProduct", typeof(string));
    
            var matriculeParameter = matricule != null ?
                new ObjectParameter("Matricule", matricule) :
                new ObjectParameter("Matricule", typeof(string));
    
            var libEmployeParameter = libEmploye != null ?
                new ObjectParameter("LibEmploye", libEmploye) :
                new ObjectParameter("LibEmploye", typeof(string));
    
            var computernameParameter = computername != null ?
                new ObjectParameter("computername", computername) :
                new ObjectParameter("computername", typeof(string));
    
            var pc_CustomerTypeParameter = pc_CustomerType != null ?
                new ObjectParameter("Pc_CustomerType", pc_CustomerType) :
                new ObjectParameter("Pc_CustomerType", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WriteoffAcc_Update", agenceParameter, pc_COMPTEDEBParameter, pc_COMPTECREDParameter, pc_CatClientParameter, pi_ProductCodeParameter, pc_LibCatClientParameter, pc_LibProductParameter, matriculeParameter, libEmployeParameter, computernameParameter, pc_CustomerTypeParameter, lect, errMsg, languageParameter);
        }
    }
}
